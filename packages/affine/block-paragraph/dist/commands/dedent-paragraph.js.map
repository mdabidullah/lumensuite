{"version":3,"file":"dedent-paragraph.js","sourceRoot":"","sources":["../../src/commands/dedent-paragraph.ts"],"names":[],"mappings":"AAEA,OAAO,EAAE,cAAc,EAAE,MAAM,yCAAyC,CAAC;AACzE,OAAO,EAAE,aAAa,EAAE,MAAM,iCAAiC,CAAC;AAEhE,MAAM,CAAC,MAAM,sBAAsB,GAO/B,CAAC,GAAG,EAAE,IAAI,EAAE,EAAE;IAChB,IAAI,EAAE,OAAO,EAAE,WAAW,EAAE,GAAG,GAAG,CAAC;IACnC,MAAM,EAAE,GAAG,EAAE,GAAG,GAAG,CAAC;IACpB,MAAM,EAAE,SAAS,EAAE,GAAG,EAAE,GAAG,GAAG,CAAC;IAC/B,MAAM,IAAI,GAAG,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IAEpC,IAAI,CAAC,OAAO,EAAE,CAAC;QACb;;;;WAIG;QACH,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,EAAE,IAAI,IAAI,CAAC,IAAI,CAAC,OAAO,KAAK,IAAI,CAAC,EAAE,CAAC,OAAO,CAAC,EAAE,CAAC;YAChE,OAAO;QACT,CAAC;QAED,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC;QAC5B,WAAW,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC;IAChC,CAAC;IACD,IAAI,OAAO,IAAI,IAAI,IAAI,WAAW,IAAI,IAAI,EAAE,CAAC;QAC3C,OAAO;IACT,CAAC;IAED,MAAM,KAAK,GAAG,GAAG,CAAC,GAAG,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAE,KAAK,CAAC;IAC/C,IAAI,CAAC,KAAK,IAAI,CAAC,aAAa,CAAC,KAAK,EAAE,CAAC,kBAAkB,CAAC,CAAC,EAAE,CAAC;QAC1D,OAAO,CAAC,KAAK,CAAC,SAAS,OAAO,2BAA2B,CAAC,CAAC;QAC3D,OAAO;IACT,CAAC;IAED,MAAM,MAAM,GAAG,GAAG,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;IACpC,IAAI,GAAG,CAAC,QAAQ,IAAI,CAAC,MAAM,IAAI,MAAM,CAAC,IAAI,KAAK,SAAS,EAAE,CAAC;QACzD,yCAAyC;QACzC,OAAO;IACT,CAAC;IAED,MAAM,WAAW,GAAG,GAAG,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;IAC1C,IAAI,CAAC,WAAW;QAAE,OAAO;IACzB,GAAG,CAAC,WAAW,EAAE,CAAC;IAElB,MAAM,YAAY,GAAG,GAAG,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;IACzC,GAAG,CAAC,UAAU,CAAC,YAAY,EAAE,KAAK,CAAC,CAAC;IACpC,GAAG,CAAC,UAAU,CAAC,CAAC,KAAK,CAAC,EAAE,WAAW,EAAE,MAAM,EAAE,KAAK,CAAC,CAAC;IAEpD,cAAc,CAAC,GAAG,EAAE,KAAK,CAAC,EAAE,EAAE,WAAW,CAAC,CAAC;IAE3C,OAAO,IAAI,EAAE,CAAC;AAChB,CAAC,CAAC","sourcesContent":["import type { Command } from '@blocksuite/block-std';\n\nimport { focusTextModel } from '@blocksuite/affine-components/rich-text';\nimport { matchFlavours } from '@blocksuite/affine-shared/utils';\n\nexport const dedentParagraphCommand: Command<\n  never,\n  never,\n  {\n    blockId?: string;\n    inlineIndex?: number;\n  }\n> = (ctx, next) => {\n  let { blockId, inlineIndex } = ctx;\n  const { std } = ctx;\n  const { selection, doc } = std;\n  const text = selection.find('text');\n\n  if (!blockId) {\n    /**\n     * Do nothing if the selection:\n     * - is not a text selection\n     * - or spans multiple blocks\n     */\n    if (!text || (text.to && text.from.blockId !== text.to.blockId)) {\n      return;\n    }\n\n    blockId = text.from.blockId;\n    inlineIndex = text.from.index;\n  }\n  if (blockId == null || inlineIndex == null) {\n    return;\n  }\n\n  const model = std.doc.getBlock(blockId)?.model;\n  if (!model || !matchFlavours(model, ['affine:paragraph'])) {\n    console.error(`block ${blockId} is not a paragraph block`);\n    return;\n  }\n\n  const parent = doc.getParent(model);\n  if (doc.readonly || !parent || parent.role !== 'content') {\n    // Top most, can not unindent, do nothing\n    return;\n  }\n\n  const grandParent = doc.getParent(parent);\n  if (!grandParent) return;\n  doc.captureSync();\n\n  const nextSiblings = doc.getNexts(model);\n  doc.moveBlocks(nextSiblings, model);\n  doc.moveBlocks([model], grandParent, parent, false);\n\n  focusTextModel(std, model.id, inlineIndex);\n\n  return next();\n};\n\ndeclare global {\n  namespace BlockSuite {\n    interface Commands {\n      dedentParagraph: typeof dedentParagraphCommand;\n    }\n  }\n}\n"]}