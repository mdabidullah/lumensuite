{"version":3,"file":"indent-paragraph.js","sourceRoot":"","sources":["../../src/commands/indent-paragraph.ts"],"names":[],"mappings":"AAGA,OAAO,EAAE,cAAc,EAAE,MAAM,yCAAyC,CAAC;AACzE,OAAO,EAAE,aAAa,EAAE,MAAM,iCAAiC,CAAC;AAEhE,MAAM,CAAC,MAAM,sBAAsB,GAO/B,CAAC,GAAG,EAAE,IAAI,EAAE,EAAE;IAChB,IAAI,EAAE,OAAO,EAAE,WAAW,EAAE,GAAG,GAAG,CAAC;IACnC,MAAM,EAAE,GAAG,EAAE,GAAG,GAAG,CAAC;IACpB,MAAM,EAAE,SAAS,EAAE,GAAG,EAAE,GAAG,GAAG,CAAC;IAC/B,MAAM,EAAE,MAAM,EAAE,GAAG,GAAG,CAAC;IAEvB,IAAI,CAAC,OAAO,EAAE,CAAC;QACb,MAAM,IAAI,GAAG,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QACpC;;;;WAIG;QACH,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,EAAE,IAAI,IAAI,CAAC,IAAI,CAAC,OAAO,KAAK,IAAI,CAAC,EAAE,CAAC,OAAO,CAAC,EAAE,CAAC;YAChE,OAAO;QACT,CAAC;QAED,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC;QAC5B,WAAW,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC;IAChC,CAAC;IACD,IAAI,OAAO,IAAI,IAAI,IAAI,WAAW,IAAI,IAAI,EAAE,CAAC;QAC3C,OAAO;IACT,CAAC;IAED,MAAM,KAAK,GAAG,GAAG,CAAC,GAAG,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAE,KAAK,CAAC;IAC/C,IAAI,CAAC,KAAK,IAAI,CAAC,aAAa,CAAC,KAAK,EAAE,CAAC,kBAAkB,CAAC,CAAC,EAAE,CAAC;QAC1D,OAAO,CAAC,KAAK,CAAC,SAAS,OAAO,2BAA2B,CAAC,CAAC;QAC3D,OAAO;IACT,CAAC;IAED,MAAM,eAAe,GAAG,GAAG,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;IAC3C,IACE,GAAG,CAAC,QAAQ;QACZ,CAAC,eAAe;QAChB,CAAC,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,OAAO,EAAE,eAAe,CAAC,OAAO,CAAC,EACvD,CAAC;QACD,qCAAqC;QACrC,OAAO;IACT,CAAC;IACD,GAAG,CAAC,WAAW,EAAE,CAAC;IAClB,GAAG,CAAC,UAAU,CAAC,CAAC,KAAK,CAAC,EAAE,eAAe,CAAC,CAAC;IAEzC,yBAAyB;IACzB,IACE,aAAa,CAAC,eAAe,EAAE,CAAC,aAAa,CAAC,CAAC;QAC/C,eAAe,CAAC,SAAS,EACzB,CAAC;QACD,GAAG,CAAC,WAAW,CAAC,eAAe,EAAE;YAC/B,SAAS,EAAE,KAAK;SACU,CAAC,CAAC;IAChC,CAAC;IAED,cAAc,CAAC,GAAG,EAAE,KAAK,CAAC,EAAE,EAAE,WAAW,CAAC,CAAC;IAE3C,OAAO,IAAI,EAAE,CAAC;AAChB,CAAC,CAAC","sourcesContent":["import type { ListBlockModel } from '@lumensuite/affine-model';\nimport type { Command } from '@lumensuite/block-std';\n\nimport { focusTextModel } from '@lumensuite/affine-components/rich-text';\nimport { matchFlavours } from '@lumensuite/affine-shared/utils';\n\nexport const indentParagraphCommand: Command<\n  never,\n  never,\n  {\n    blockId?: string;\n    inlineIndex?: number;\n  }\n> = (ctx, next) => {\n  let { blockId, inlineIndex } = ctx;\n  const { std } = ctx;\n  const { selection, doc } = std;\n  const { schema } = doc;\n\n  if (!blockId) {\n    const text = selection.find('text');\n    /**\n     * Do nothing if the selection:\n     * - is not a text selection\n     * - or spans multiple blocks\n     */\n    if (!text || (text.to && text.from.blockId !== text.to.blockId)) {\n      return;\n    }\n\n    blockId = text.from.blockId;\n    inlineIndex = text.from.index;\n  }\n  if (blockId == null || inlineIndex == null) {\n    return;\n  }\n\n  const model = std.doc.getBlock(blockId)?.model;\n  if (!model || !matchFlavours(model, ['affine:paragraph'])) {\n    console.error(`block ${blockId} is not a paragraph block`);\n    return;\n  }\n\n  const previousSibling = doc.getPrev(model);\n  if (\n    doc.readonly ||\n    !previousSibling ||\n    !schema.isValid(model.flavour, previousSibling.flavour)\n  ) {\n    // Bottom, can not indent, do nothing\n    return;\n  }\n  doc.captureSync();\n  doc.moveBlocks([model], previousSibling);\n\n  // update collapsed state\n  if (\n    matchFlavours(previousSibling, ['affine:list']) &&\n    previousSibling.collapsed\n  ) {\n    doc.updateBlock(previousSibling, {\n      collapsed: false,\n    } as Partial<ListBlockModel>);\n  }\n\n  focusTextModel(std, model.id, inlineIndex);\n\n  return next();\n};\n\ndeclare global {\n  namespace LumenSuite {\n    interface Commands {\n      indentParagraph: typeof indentParagraphCommand;\n    }\n  }\n}\n"]}