{"version":3,"file":"split-paragraph.js","sourceRoot":"","sources":["../../src/commands/split-paragraph.ts"],"names":[],"mappings":"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","sourcesContent":["import type { Command } from '@blocksuite/block-std';\n\nimport {\n  focusTextModel,\n  getInlineEditorByModel,\n} from '@blocksuite/affine-components/rich-text';\nimport { matchFlavours } from '@blocksuite/affine-shared/utils';\n\nexport const splitParagraphCommand: Command<\n  never,\n  'paragraphConvertedId',\n  {\n    blockId?: string;\n  }\n> = (ctx, next) => {\n  const { std } = ctx;\n  const { doc, host, selection } = std;\n  let blockId = ctx.blockId;\n  if (!blockId) {\n    const text = selection.find('text');\n    blockId = text?.blockId;\n  }\n  if (!blockId) return;\n\n  const model = doc.getBlock(blockId)?.model;\n  if (!model || !matchFlavours(model, ['affine:paragraph'])) return;\n\n  const inlineEditor = getInlineEditorByModel(host, model);\n  const range = inlineEditor?.getInlineRange();\n  if (!range) return;\n\n  const splitIndex = range.index;\n  const splitLength = range.length;\n  // On press enter, it may convert symbols from yjs ContentString\n  // to yjs ContentFormat. Once it happens, the converted symbol will\n  // be deleted and not counted as model.text.yText.length.\n  // Example: \"`a`[enter]\" -> yText[<ContentFormat: Code>, \"a\", <ContentFormat: Code>]\n  // In this case, we should not split the block.\n  if (model.text.yText.length < splitIndex + splitLength) return;\n\n  if (model.children.length > 0 && splitIndex > 0) {\n    doc.captureSync();\n    const right = model.text.split(splitIndex, splitLength);\n    const id = doc.addBlock(\n      model.flavour as BlockSuite.Flavour,\n      {\n        text: right,\n        type: model.type,\n      },\n      model,\n      0\n    );\n    focusTextModel(std, id);\n    return next({ paragraphConvertedId: id });\n  }\n\n  const parent = doc.getParent(model);\n  if (!parent) return;\n  const index = parent.children.indexOf(model);\n  if (index < 0) return;\n  doc.captureSync();\n  const right = model.text.split(splitIndex, splitLength);\n  const id = doc.addBlock(\n    model.flavour,\n    {\n      text: right,\n      type: model.type,\n    },\n    parent,\n    index + 1\n  );\n  const newModel = doc.getBlock(id)?.model;\n  if (newModel) {\n    doc.moveBlocks(model.children, newModel);\n  } else {\n    console.error('Failed to find the new model split from the paragraph');\n  }\n  focusTextModel(std, id);\n  return next({ paragraphConvertedId: id });\n};\n\ndeclare global {\n  namespace BlockSuite {\n    interface Commands {\n      splitParagraph: typeof splitParagraphCommand;\n    }\n  }\n}\n"]}