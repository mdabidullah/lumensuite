{"version":3,"file":"paragraph-keymap.js","sourceRoot":"","sources":["../src/paragraph-keymap.ts"],"names":[],"mappings":"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","sourcesContent":["import type { BlockStdScope, UIEventHandler } from '@lumensuite/block-std';\n\nimport {\n  getInlineEditorByModel,\n  markdownInput,\n} from '@lumensuite/affine-components/rich-text';\nimport { matchFlavours } from '@lumensuite/affine-shared/utils';\nimport { IS_MAC } from '@lumensuite/global/env';\n\nimport { forwardDelete } from './utils/forward-delete.js';\nimport { mergeWithPrev } from './utils/merge-with-prev.js';\n\nexport const paragraphKeymap = (\n  std: BlockStdScope\n): Record<string, UIEventHandler> => {\n  return {\n    Backspace: ctx => {\n      const text = std.selection.find('text');\n      if (!text) return;\n      const isCollapsed = text.isCollapsed();\n      const isStart = isCollapsed && text.from.index === 0;\n      if (!isStart) return;\n\n      const { doc } = std;\n      const model = doc.getBlock(text.from.blockId)?.model;\n      if (!model || !matchFlavours(model, ['affine:paragraph'])) return;\n\n      // const { model, doc } = this;\n      const event = ctx.get('keyboardState').raw;\n      event.preventDefault();\n\n      // When deleting at line start of a paragraph block,\n      // firstly switch it to normal text, then delete this empty block.\n      if (model.type !== 'text') {\n        // Try to switch to normal text\n        doc.captureSync();\n        doc.updateBlock(model, { type: 'text' });\n        return true;\n      }\n\n      const merged = mergeWithPrev(std.host, model);\n      if (merged) {\n        return true;\n      }\n\n      std.command.exec('dedentParagraph');\n      return true;\n    },\n    'Mod-Enter': ctx => {\n      const { doc } = std;\n      const text = std.selection.find('text');\n      if (!text) return;\n      const model = doc.getBlock(text.from.blockId)?.model;\n      if (!model || !matchFlavours(model, ['affine:paragraph'])) return;\n      const inlineEditor = getInlineEditorByModel(std.host, text.from.blockId);\n      const inlineRange = inlineEditor?.getInlineRange();\n      if (!inlineRange || !inlineEditor) return;\n      const raw = ctx.get('keyboardState').raw;\n      raw.preventDefault();\n      if (model.type === 'quote') {\n        doc.captureSync();\n        inlineEditor.insertText(inlineRange, '\\n');\n        inlineEditor.setInlineRange({\n          index: inlineRange.index + 1,\n          length: 0,\n        });\n        return true;\n      }\n\n      std.command.exec('addParagraph');\n      return true;\n    },\n    Enter: ctx => {\n      const { doc } = std;\n      const text = std.selection.find('text');\n      if (!text) return;\n      const model = doc.getBlock(text.from.blockId)?.model;\n      if (!model || !matchFlavours(model, ['affine:paragraph'])) return;\n      const inlineEditor = getInlineEditorByModel(std.host, text.from.blockId);\n      const range = inlineEditor?.getInlineRange();\n      if (!range || !inlineEditor) return;\n\n      const raw = ctx.get('keyboardState').raw;\n      const isEnd = model.text.length === range.index;\n\n      if (model.type === 'quote') {\n        const textStr = model.text.toString();\n\n        /**\n         * If quote block ends with two blank lines, split the block\n         * ---\n         * before:\n         * > \\n\n         * > \\n|\n         *\n         * after:\n         * > \\n\n         * |\n         * ---\n         */\n        const endWithTwoBlankLines = textStr === '\\n' || textStr.endsWith('\\n');\n        if (isEnd && endWithTwoBlankLines) {\n          raw.preventDefault();\n          doc.captureSync();\n          model.text.delete(range.index - 1, 1);\n          std.command.exec('addParagraph');\n          return true;\n        }\n        return true;\n      }\n\n      raw.preventDefault();\n\n      if (markdownInput(std, model.id)) {\n        return true;\n      }\n\n      if (isEnd) {\n        std.command.exec('addParagraph');\n        return true;\n      }\n\n      std.command.exec('splitParagraph');\n      return true;\n    },\n    Delete: ctx => {\n      const deleted = forwardDelete(std);\n      if (!deleted) {\n        return;\n      }\n      const event = ctx.get('keyboardState').raw;\n      event.preventDefault();\n      return true;\n    },\n    'Control-d': ctx => {\n      if (!IS_MAC) return;\n      const deleted = forwardDelete(std);\n      if (!deleted) {\n        return;\n      }\n      const event = ctx.get('keyboardState').raw;\n      event.preventDefault();\n      return true;\n    },\n    Space: ctx => {\n      if (!markdownInput(std)) {\n        return;\n      }\n      ctx.get('keyboardState').raw.preventDefault();\n      return true;\n    },\n    'Shift-Space': ctx => {\n      if (!markdownInput(std)) {\n        return;\n      }\n      ctx.get('keyboardState').raw.preventDefault();\n      return true;\n    },\n    Tab: ctx => {\n      const { success } = std.command.exec('indentParagraph');\n      if (!success) {\n        return;\n      }\n      ctx.get('keyboardState').raw.preventDefault();\n      return true;\n    },\n    'Shift-Tab': ctx => {\n      const { success } = std.command.exec('dedentParagraph');\n      if (!success) {\n        return;\n      }\n      ctx.get('keyboardState').raw.preventDefault();\n      return true;\n    },\n  };\n};\n"]}