{"version":3,"file":"helper.js","sourceRoot":"","sources":["../../src/utils/helper.ts"],"names":[],"mappings":"AAEA,OAAO,EAGL,iBAAiB,GAElB,MAAM,mBAAmB,CAAC;AAE3B,OAAO,EAAE,aAAa,EAA2B,MAAM,qBAAqB,CAAC;AAE7E,MAAM,UAAU,gBAAgB,CAG9B,oBAAuB;IACvB,OAAO,aAAa,CAClB,oBAA2E,CAC5E,CAAC;AACJ,CAAC;AAMD,MAAM,UAAU,sBAAsB,CAMpC,EACA,IAAI,EACJ,OAAO,EACP,OAAO,EACP,KAAK,EACL,WAAW,GAOZ;IACC,OAAO,iBAAiB,CAAC;QACvB,OAAO,EAAE,gBAAgB,IAAI,EAAE;QAC/B,KAAK,EAAE,kBAAkB,CAAC,EAAE;YAC1B,MAAM,SAAS,GAAG,KAAK,EAAE,CAAC,kBAAkB,CAAC,CAAC;YAE9C,OAAO;gBACL,KAAK,EAAE,IAAI;gBACX,IAAI,EAAE,WAAW;gBACjB,MAAM,EAAE,CAAC;gBACT,GAAG,SAAS;aACmB,CAAC;QACpC,CAAC;QACD,QAAQ,EAAE;YACR,OAAO;YACP,IAAI,EAAE,SAAS;SAChB;QACD,OAAO;QACP,WAAW;KACZ,CAAC,CAAC;AACL,CAAC","sourcesContent":["import type { Constructor } from '@lumensuite/global/utils';\n\nimport {\n  type BaseBlockTransformer,\n  type BlockModel,\n  defineBlockSchema,\n  type InternalPrimitives,\n} from '@lumensuite/store';\n\nimport { GfxCompatible, type GfxCompatibleProps } from './gfx-compatible.js';\n\nexport function defineEmbedModel<\n  Props extends object,\n  T extends Constructor<BlockModel<Props>> = Constructor<BlockModel<Props>>,\n>(BlockModelSuperClass: T) {\n  return GfxCompatible<Props & GfxCompatibleProps>(\n    BlockModelSuperClass as Constructor<BlockModel<Props & GfxCompatibleProps>>\n  );\n}\n\nexport type EmbedProps<Props = object> = Props & GfxCompatibleProps;\n\nexport type EmbedBlockModel<Props = object> = BlockModel<EmbedProps<Props>>;\n\nexport function createEmbedBlockSchema<\n  Props extends object,\n  Model extends EmbedBlockModel<Props>,\n  Transformer extends BaseBlockTransformer<\n    EmbedProps<Props>\n  > = BaseBlockTransformer<EmbedProps<Props>>,\n>({\n  name,\n  version,\n  toModel,\n  props,\n  transformer,\n}: {\n  name: string;\n  version: number;\n  toModel: () => Model;\n  props?: (internalPrimitives: InternalPrimitives) => Props;\n  transformer?: () => Transformer;\n}) {\n  return defineBlockSchema({\n    flavour: `affine:embed-${name}`,\n    props: internalPrimitives => {\n      const userProps = props?.(internalPrimitives);\n\n      return {\n        index: 'a0',\n        xywh: '[0,0,0,0]',\n        rotate: 0,\n        ...userProps,\n      } as unknown as EmbedProps<Props>;\n    },\n    metadata: {\n      version,\n      role: 'content',\n    },\n    toModel,\n    transformer,\n  });\n}\n"]}