{"version":3,"file":"code-model.js","sourceRoot":"","sources":["../../../src/blocks/code/code-model.ts"],"names":[],"mappings":"AAAA,OAAO,EACL,iBAAiB,GAGlB,MAAM,mBAAmB,CAAC;AAS3B,MAAM,CAAC,MAAM,eAAe,GAAG,iBAAiB,CAAC;IAC/C,OAAO,EAAE,aAAa;IACtB,KAAK,EAAE,QAAQ,CAAC,EAAE,CAChB,CAAC;QACC,IAAI,EAAE,QAAQ,CAAC,IAAI,EAAE;QACrB,QAAQ,EAAE,IAAI;QACd,IAAI,EAAE,KAAK;QACX,OAAO,EAAE,EAAE;KACZ,CAAmB;IACtB,QAAQ,EAAE;QACR,OAAO,EAAE,CAAC;QACV,IAAI,EAAE,SAAS;QACf,MAAM,EAAE;YACN,aAAa;YACb,kBAAkB;YAClB,aAAa;YACb,sBAAsB;SACvB;QACD,QAAQ,EAAE,EAAE;KACb;CACF,CAAC,CAAC","sourcesContent":["import {\n  defineBlockSchema,\n  type SchemaToModel,\n  type Text,\n} from '@blocksuite/store';\n\ninterface CodeBlockProps {\n  text: Text;\n  language: string | null;\n  wrap: boolean;\n  caption: string;\n}\n\nexport const CodeBlockSchema = defineBlockSchema({\n  flavour: 'affine:code',\n  props: internal =>\n    ({\n      text: internal.Text(),\n      language: null,\n      wrap: false,\n      caption: '',\n    }) as CodeBlockProps,\n  metadata: {\n    version: 1,\n    role: 'content',\n    parent: [\n      'affine:note',\n      'affine:paragraph',\n      'affine:list',\n      'affine:edgeless-text',\n    ],\n    children: [],\n  },\n});\n\nexport type CodeBlockModel = SchemaToModel<typeof CodeBlockSchema>;\n\ndeclare global {\n  namespace BlockSuite {\n    interface BlockModels {\n      'affine:code': CodeBlockModel;\n    }\n  }\n}\n"]}