{"version":3,"file":"database-model.js","sourceRoot":"","sources":["../../../src/blocks/database/database-model.ts"],"names":[],"mappings":"AAEA,OAAO,EAAE,UAAU,EAAE,iBAAiB,EAAE,MAAM,EAAE,MAAM,mBAAmB,CAAC;AAa1E,MAAM,OAAO,kBAAmB,SAAQ,UAA8B;CAAG;AAEzE,MAAM,SAAS,GAAG;IAChB,IAAI,EAAE,IAAI,CAAC,EAAE;QACX,MAAM,EAAE,GAAG,MAAM,EAAE,CAAC;QACpB,mBAAmB;QACnB,MAAM,KAAK,GAAG,IAAI,CAAC,iBAAiB,CAAC,CAAC;QACtC,mBAAmB;QACnB,MAAM,KAAK,GAAG,IAAI,CAAC,kBAAkB,CAAC,CAAC;QACvC,mBAAmB;QACnB,OAAO,IAAI,CAAC,iBAAiB,CAAC,CAAC;QAC/B,mBAAmB;QACnB,OAAO,IAAI,CAAC,kBAAkB,CAAC,CAAC;QAChC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC;YACnB,EAAE;YACF,IAAI,EAAE,OAAO;YACb,IAAI,EAAE,KAAK;YACX,IAAI,EAAE,EAAE;SACT,CAAC,CAAC;QACH,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;YACxB,IAAI,IAAI,CAAC,IAAI,KAAK,OAAO,EAAE,CAAC;gBAC1B,aAAa;gBACb,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC;oBACnB,EAAE;oBACF,KAAK;oBACL,YAAY,EAAE,MAAM;iBACrB,CAAC,CAAC;YACL,CAAC;QACH,CAAC,CAAC,CAAC;IACL,CAAC;CACoE,CAAC;AAExE,MAAM,CAAC,MAAM,mBAAmB,GAAG,iBAAiB,CAAC;IACnD,OAAO,EAAE,iBAAiB;IAC1B,KAAK,EAAE,CAAC,QAAQ,EAAsB,EAAE,CAAC,CAAC;QACxC,KAAK,EAAE,EAAE;QACT,KAAK,EAAE,QAAQ,CAAC,IAAI,EAAE;QACtB,KAAK,EAAE,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC;QAC1B,OAAO,EAAE,EAAE;KACZ,CAAC;IACF,QAAQ,EAAE;QACR,IAAI,EAAE,KAAK;QACX,OAAO,EAAE,CAAC;QACV,MAAM,EAAE,CAAC,aAAa,CAAC;QACvB,QAAQ,EAAE,CAAC,kBAAkB,EAAE,aAAa,CAAC;KAC9C;IACD,OAAO,EAAE,GAAG,EAAE,CAAC,IAAI,kBAAkB,EAAE;IACvC,SAAS,EAAE,CAAC,IAAI,EAAE,eAAe,EAAE,aAAa,EAAE,EAAE;QAClD,IAAI,eAAe,GAAG,CAAC,IAAI,aAAa,IAAI,CAAC,EAAE,CAAC;YAC9C,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACvB,CAAC;IACH,CAAC;CACF,CAAC,CAAC","sourcesContent":["import type { MigrationRunner, Text } from '@lumensuite/store';\n\nimport { BlockModel, defineBlockSchema, nanoid } from '@lumensuite/store';\n\nimport type { Column, SerializedCells, ViewBasicDataType } from './types.js';\n\nexport type DatabaseBlockProps = {\n  views: ViewBasicDataType[];\n  title: Text;\n  cells: SerializedCells;\n  columns: Array<Column>;\n  // rowId -> pageId\n  notes?: Record<string, string>;\n};\n\nexport class DatabaseBlockModel extends BlockModel<DatabaseBlockProps> {}\n\nconst migration = {\n  toV3: data => {\n    const id = nanoid();\n    // @ts-expect-error\n    const title = data['titleColumnName'];\n    // @ts-expect-error\n    const width = data['titleColumnWidth'];\n    // @ts-expect-error\n    delete data['titleColumnName'];\n    // @ts-expect-error\n    delete data['titleColumnWidth'];\n    data.columns.unshift({\n      id,\n      type: 'title',\n      name: title,\n      data: {},\n    });\n    data.views.forEach(view => {\n      if (view.mode === 'table') {\n        // @ts-ignore\n        view.columns.unshift({\n          id,\n          width,\n          statCalcType: 'none',\n        });\n      }\n    });\n  },\n} satisfies Record<string, MigrationRunner<typeof DatabaseBlockSchema>>;\n\nexport const DatabaseBlockSchema = defineBlockSchema({\n  flavour: 'affine:database',\n  props: (internal): DatabaseBlockProps => ({\n    views: [],\n    title: internal.Text(),\n    cells: Object.create(null),\n    columns: [],\n  }),\n  metadata: {\n    role: 'hub',\n    version: 3,\n    parent: ['affine:note'],\n    children: ['affine:paragraph', 'affine:list'],\n  },\n  toModel: () => new DatabaseBlockModel(),\n  onUpgrade: (data, previousVersion, latestVersion) => {\n    if (previousVersion < 3 && latestVersion >= 3) {\n      migration.toV3(data);\n    }\n  },\n});\n"]}