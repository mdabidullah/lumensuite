{"version":3,"file":"attachment-model.js","sourceRoot":"","sources":["../../../src/blocks/attachment/attachment-model.ts"],"names":[],"mappings":"AAGA,OAAO,EAAE,UAAU,EAAE,iBAAiB,EAAE,MAAM,mBAAmB,CAAC;AAElE,OAAO,EAAuB,aAAa,EAAE,MAAM,sBAAsB,CAAC;AAC1E,OAAO,EAAE,0BAA0B,EAAE,MAAM,6BAA6B,CAAC;AAoBzE,MAAM,CAAC,MAAM,qBAAqB,GAAqB;IACrD,WAAW;IACX,gBAAgB;CACR,CAAC;AA6BX,MAAM,CAAC,MAAM,sBAAsB,GAAyB;IAC1D,IAAI,EAAE,EAAE;IACR,IAAI,EAAE,CAAC;IACP,IAAI,EAAE,0BAA0B;IAChC,QAAQ,EAAE,SAAS;IACnB,OAAO,EAAE,SAAS;IAClB,KAAK,EAAE,KAAK;IACZ,KAAK,EAAE,qBAAqB,CAAC,CAAC,CAAC;IAC/B,KAAK,EAAE,IAAI;IACX,IAAI,EAAE,WAAW;IACjB,MAAM,EAAE,CAAC;CACV,CAAC;AAEF,MAAM,CAAC,MAAM,qBAAqB,GAAG,iBAAiB,CAAC;IACrD,OAAO,EAAE,mBAAmB;IAC5B,KAAK,EAAE,GAAyB,EAAE,CAAC,sBAAsB;IACzD,QAAQ,EAAE;QACR,OAAO,EAAE,CAAC;QACV,IAAI,EAAE,SAAS;QACf,MAAM,EAAE;YACN,aAAa;YACb,gBAAgB;YAChB,sBAAsB;YACtB,kBAAkB;YAClB,aAAa;SACd;KACF;IACD,WAAW,EAAE,GAAG,EAAE,CAAC,IAAI,0BAA0B,EAAE;IACnD,OAAO,EAAE,GAAG,EAAE,CAAC,IAAI,oBAAoB,EAAE;CAC1C,CAAC,CAAC;AAEH,MAAM,OAAO,oBACX,SAAQ,aAAa,CAAuB,UAAU,CAAC;CACvB","sourcesContent":["import type { GfxElementGeometry } from '@lumensuite/block-std/gfx';\nimport type { SerializedXYWH } from '@lumensuite/global/utils';\n\nimport { BlockModel, defineBlockSchema } from '@lumensuite/store';\n\nimport { type EmbedCardStyle, GfxCompatible } from '../../utils/index.js';\nimport { AttachmentBlockTransformer } from './attachment-transformer.js';\n\n/**\n * When the attachment is uploading, the `sourceId` is `undefined`.\n * And we can query the upload status by the `isAttachmentLoading` function.\n *\n * Other collaborators will see an error attachment block when the blob has not finished uploading.\n * This issue can be resolve by sync the upload status through the awareness system in the future.\n *\n * When the attachment is uploaded, the `sourceId` is the id of the blob.\n *\n * If there are no `sourceId` and the `isAttachmentLoading` function returns `false`,\n * it means that the attachment is failed to upload.\n */\n\n/**\n * @deprecated\n */\ntype BackwardCompatibleUndefined = undefined;\n\nexport const AttachmentBlockStyles: EmbedCardStyle[] = [\n  'cubeThick',\n  'horizontalThin',\n] as const;\n\nexport interface AttachmentBlockEdgelessProps {\n  index: string;\n  xywh: SerializedXYWH;\n  rotate: number;\n}\n\nexport type AttachmentBlockProps = {\n  name: string;\n  size: number;\n  /**\n   * MIME type\n   */\n  type: string;\n  caption?: string;\n  // `loadingKey` was used to indicate whether the attachment is loading,\n  // which is currently unused but no breaking change is needed.\n  // The `loadingKey` and `sourceId` should not be existed at the same time.\n  // loadingKey?: string | null;\n  sourceId?: string;\n  /**\n   * Whether to show the attachment as an embed view.\n   */\n  embed: boolean | BackwardCompatibleUndefined;\n\n  style?: (typeof AttachmentBlockStyles)[number];\n} & AttachmentBlockEdgelessProps;\n\nexport const defaultAttachmentProps: AttachmentBlockProps = {\n  name: '',\n  size: 0,\n  type: 'application/octet-stream',\n  sourceId: undefined,\n  caption: undefined,\n  embed: false,\n  style: AttachmentBlockStyles[1],\n  index: 'a0',\n  xywh: '[0,0,0,0]',\n  rotate: 0,\n};\n\nexport const AttachmentBlockSchema = defineBlockSchema({\n  flavour: 'affine:attachment',\n  props: (): AttachmentBlockProps => defaultAttachmentProps,\n  metadata: {\n    version: 1,\n    role: 'content',\n    parent: [\n      'affine:note',\n      'affine:surface',\n      'affine:edgeless-text',\n      'affine:paragraph',\n      'affine:list',\n    ],\n  },\n  transformer: () => new AttachmentBlockTransformer(),\n  toModel: () => new AttachmentBlockModel(),\n});\n\nexport class AttachmentBlockModel\n  extends GfxCompatible<AttachmentBlockProps>(BlockModel)\n  implements GfxElementGeometry {}\n\ndeclare global {\n  namespace LumenSuite {\n    interface EdgelessBlockModelMap {\n      'affine:attachment': AttachmentBlockModel;\n    }\n    interface BlockModels {\n      'affine:attachment': AttachmentBlockModel;\n    }\n  }\n}\n"]}