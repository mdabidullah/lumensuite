{"version":3,"file":"text.js","sourceRoot":"","sources":["../../../src/elements/text/text.ts"],"names":[],"mappings":"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","sourcesContent":["import type { BaseElementProps } from '@blocksuite/block-std/gfx';\nimport type { IVec, SerializedXYWH } from '@blocksuite/global/utils';\n\nimport {\n  type Color,\n  FontFamily,\n  FontStyle,\n  FontWeight,\n  TextAlign,\n  type TextStyleProps,\n} from '@blocksuite/affine-model';\nimport { field, GfxPrimitiveElementModel } from '@blocksuite/block-std/gfx';\nimport {\n  Bound,\n  getPointsFromBoundsWithRotation,\n  linePolygonIntersects,\n  pointInPolygon,\n  polygonNearestPoint,\n} from '@blocksuite/global/utils';\nimport { DocCollection, type Y } from '@blocksuite/store';\n\nexport type TextElementProps = BaseElementProps & {\n  text: Y.Text;\n  hasMaxWidth?: boolean;\n} & Omit<TextStyleProps, 'fontWeight' | 'fontStyle'> &\n  Partial<Pick<TextStyleProps, 'fontWeight' | 'fontStyle'>>;\n\nexport class TextElementModel extends GfxPrimitiveElementModel<TextElementProps> {\n  get type() {\n    return 'text';\n  }\n\n  static override propsToY(props: Record<string, unknown>) {\n    if (props.text && !(props.text instanceof DocCollection.Y.Text)) {\n      props.text = new DocCollection.Y.Text(props.text as string);\n    }\n\n    return props;\n  }\n\n  override containsBound(bounds: Bound): boolean {\n    const points = getPointsFromBoundsWithRotation(this);\n    return points.some(point => bounds.containsPoint(point));\n  }\n\n  override getLineIntersections(start: IVec, end: IVec) {\n    const points = getPointsFromBoundsWithRotation(this);\n    return linePolygonIntersects(start, end, points);\n  }\n\n  override getNearestPoint(point: IVec): IVec {\n    return polygonNearestPoint(\n      Bound.deserialize(this.xywh).points,\n      point\n    ) as IVec;\n  }\n\n  override includesPoint(x: number, y: number): boolean {\n    const points = getPointsFromBoundsWithRotation(this);\n    return pointInPolygon([x, y], points);\n  }\n\n  @field()\n  accessor color: Color = '#000000';\n\n  @field()\n  accessor fontFamily: FontFamily = FontFamily.Inter;\n\n  @field()\n  accessor fontSize: number = 16;\n\n  @field(FontStyle.Normal as FontStyle)\n  accessor fontStyle: FontStyle = FontStyle.Normal;\n\n  @field(FontWeight.Regular as FontWeight)\n  accessor fontWeight: FontWeight = FontWeight.Regular;\n\n  @field(false)\n  accessor hasMaxWidth: boolean = false;\n\n  @field(0)\n  accessor rotate: number = 0;\n\n  @field()\n  accessor text: Y.Text = new DocCollection.Y.Text();\n\n  @field()\n  accessor textAlign: TextAlign = TextAlign.Center;\n\n  @field()\n  accessor xywh: SerializedXYWH = '[0,0,16,16]';\n}\n\ndeclare global {\n  namespace BlockSuite {\n    interface SurfaceElementModelMap {\n      text: TextElementModel;\n    }\n\n    interface EdgelessTextModelMap {\n      text: TextElementModel;\n    }\n  }\n}\n"]}