{"version":3,"file":"diamond.js","sourceRoot":"","sources":["../../../../src/elements/shape/api/diamond.ts"],"names":[],"mappings":"AAGA,OAAO,EACL,KAAK,EACL,mBAAmB,EACnB,+BAA+B,EAC/B,qBAAqB,EACrB,cAAc,EACd,aAAa,EACb,mBAAmB,EACnB,sBAAsB,EACtB,mBAAmB,EACnB,YAAY,GACb,MAAM,0BAA0B,CAAC;AAIlC,OAAO,EAAE,0BAA0B,EAAE,MAAM,0BAA0B,CAAC;AAEtE,MAAM,CAAC,MAAM,OAAO,GAAG;IACrB,MAAM,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAU;QAC3B,OAAO;YACL,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;YACd,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;YACd,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;YAClB,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;SACnB,CAAC;IACJ,CAAC;IACD,IAAI,CAAC,GAA6B,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,MAAM,GAAG,CAAC,EAAU;QACpE,MAAM,EAAE,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QACrB,MAAM,EAAE,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QAErB,GAAG,CAAC,IAAI,EAAE,CAAC;QACX,GAAG,CAAC,SAAS,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;QACtB,GAAG,CAAC,MAAM,CAAC,CAAC,MAAM,GAAG,IAAI,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC,CAAC;QACrC,GAAG,CAAC,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC;QAExB,GAAG,CAAC,SAAS,EAAE,CAAC;QAChB,GAAG,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;QACzB,GAAG,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC;QACzB,GAAG,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;QAC7B,GAAG,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC;QAC7B,GAAG,CAAC,SAAS,EAAE,CAAC;QAEhB,GAAG,CAAC,OAAO,EAAE,CAAC;IAChB,CAAC;IAED,aAAa,CAEX,CAAS,EACT,CAAS,EACT,OAAyB;QAEzB,MAAM,KAAK,GAAS,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QAC3B,MAAM,MAAM,GAAG,+BAA+B,CAAC,IAAI,EAAE,OAAO,CAAC,MAAM,CAAC,CAAC;QAErE,IAAI,GAAG,GAAG,mBAAmB,CAC3B,KAAK,EACL,MAAM,EACN,CAAC,OAAO,EAAE,YAAY,IAAI,CAAC,CAAC,GAAG,CAAC,OAAO,CAAC,IAAI,IAAI,CAAC,CAAC,CACnD,CAAC;QAEF,IAAI,CAAC,GAAG,EAAE,CAAC;YACT,IAAI,CAAC,OAAO,CAAC,iBAAiB,IAAI,IAAI,CAAC,MAAM,EAAE,CAAC;gBAC9C,GAAG,GAAG,cAAc,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC;YACvC,CAAC;iBAAM,CAAC;gBACN,wCAAwC;gBACxC,MAAM,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;gBACvB,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC;oBAC1B,qCAAqC;oBACrC,MAAM,aAAa,GAAG,mBAAmB,CACvC,IAAI,EACJ,0BAA0B,CAC3B,CAAC;oBACF,MAAM,aAAa,GAAG,+BAA+B,CACnD,aAAa,EACb,OAAO,CAAC,MAAM,CACf,CAAC;oBACF,GAAG,GAAG,cAAc,CAAC,KAAK,EAAE,aAAa,CAAC,CAAC;gBAC7C,CAAC;qBAAM,IAAI,IAAI,CAAC,SAAS,EAAE,CAAC;oBAC1B,GAAG,GAAG,cAAc,CAClB,KAAK,EACL,+BAA+B,CAC7B,IAAI,EACJ,GAAG,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,SAAU,CAAC,CAAC,MAAM,CACzC,CACF,CAAC;gBACJ,CAAC;YACH,CAAC;QACH,CAAC;QAED,OAAO,GAAG,CAAC;IACb,CAAC;IAED,aAAa,CAAC,MAAa,EAAE,OAA0B;QACrD,MAAM,MAAM,GAAG,+BAA+B,CAAC,OAAO,EAAE,OAAO,CAAC,MAAM,CAAC,CAAC;QACxE,OAAO,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,MAAM,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC,CAAC;IAC3D,CAAC;IAED,eAAe,CAAC,KAAW,EAAE,OAA0B;QACrD,MAAM,MAAM,GAAG,+BAA+B,CAAC,OAAO,EAAE,OAAO,CAAC,MAAM,CAAC,CAAC;QACxE,OAAO,mBAAmB,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;IAC5C,CAAC;IAED,oBAAoB,CAAC,KAAW,EAAE,GAAS,EAAE,OAA0B;QACrE,MAAM,MAAM,GAAG,+BAA+B,CAAC,OAAO,EAAE,OAAO,CAAC,MAAM,CAAC,CAAC;QACxE,OAAO,qBAAqB,CAAC,KAAK,EAAE,GAAG,EAAE,MAAM,CAAC,CAAC;IACnD,CAAC;IAED,wBAAwB,CAAC,QAAc,EAAE,OAA0B;QACjE,MAAM,KAAK,GAAG,KAAK,CAAC,WAAW,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAC9C,MAAM,KAAK,GAAG,KAAK,CAAC,gBAAgB,CAAC,QAAQ,CAAC,CAAC;QAC/C,IAAI,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QACnC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAEnB,MAAM,GAAG,YAAY,CAAC,MAAM,EAAE,KAAK,CAAC,MAAM,EAAE,OAAO,CAAC,MAAM,CAAC,CAAC;QAC5D,MAAM,WAAW,GAAG,MAAM,CAAC,GAAG,EAAU,CAAC;QACzC,MAAM,OAAO,GAAG,sBAAsB,CAAC,MAAM,EAAE,WAAW,CAAC,CAAC;QAC5D,OAAO,IAAI,aAAa,CAAC,WAAW,EAAE,OAAO,CAAC,CAAC;IACjD,CAAC;CACF,CAAC","sourcesContent":["import type { PointTestOptions } from '@blocksuite/block-std/gfx';\nimport type { IBound, IVec } from '@blocksuite/global/utils';\n\nimport {\n  Bound,\n  getCenterAreaBounds,\n  getPointsFromBoundsWithRotation,\n  linePolygonIntersects,\n  pointInPolygon,\n  PointLocation,\n  pointOnPolygonStoke,\n  polygonGetPointTangent,\n  polygonNearestPoint,\n  rotatePoints,\n} from '@blocksuite/global/utils';\n\nimport type { ShapeElementModel } from '../shape.js';\n\nimport { DEFAULT_CENTRAL_AREA_RATIO } from '../../../consts/index.js';\n\nexport const diamond = {\n  points({ x, y, w, h }: IBound): IVec[] {\n    return [\n      [x, y + h / 2],\n      [x + w / 2, y],\n      [x + w, y + h / 2],\n      [x + w / 2, y + h],\n    ];\n  },\n  draw(ctx: CanvasRenderingContext2D, { x, y, w, h, rotate = 0 }: IBound) {\n    const cx = x + w / 2;\n    const cy = y + h / 2;\n\n    ctx.save();\n    ctx.translate(cx, cy);\n    ctx.rotate((rotate * Math.PI) / 180);\n    ctx.translate(-cx, -cy);\n\n    ctx.beginPath();\n    ctx.moveTo(x, y + h / 2);\n    ctx.lineTo(x + w / 2, y);\n    ctx.lineTo(x + w, y + h / 2);\n    ctx.lineTo(x + w / 2, y + h);\n    ctx.closePath();\n\n    ctx.restore();\n  },\n\n  includesPoint(\n    this: ShapeElementModel,\n    x: number,\n    y: number,\n    options: PointTestOptions\n  ) {\n    const point: IVec = [x, y];\n    const points = getPointsFromBoundsWithRotation(this, diamond.points);\n\n    let hit = pointOnPolygonStoke(\n      point,\n      points,\n      (options?.hitThreshold ?? 1) / (options.zoom ?? 1)\n    );\n\n    if (!hit) {\n      if (!options.ignoreTransparent || this.filled) {\n        hit = pointInPolygon([x, y], points);\n      } else {\n        // If shape is not filled or transparent\n        const text = this.text;\n        if (!text || !text.length) {\n          // Check the center area of the shape\n          const centralBounds = getCenterAreaBounds(\n            this,\n            DEFAULT_CENTRAL_AREA_RATIO\n          );\n          const centralPoints = getPointsFromBoundsWithRotation(\n            centralBounds,\n            diamond.points\n          );\n          hit = pointInPolygon(point, centralPoints);\n        } else if (this.textBound) {\n          hit = pointInPolygon(\n            point,\n            getPointsFromBoundsWithRotation(\n              this,\n              () => Bound.from(this.textBound!).points\n            )\n          );\n        }\n      }\n    }\n\n    return hit;\n  },\n\n  containsBound(bounds: Bound, element: ShapeElementModel) {\n    const points = getPointsFromBoundsWithRotation(element, diamond.points);\n    return points.some(point => bounds.containsPoint(point));\n  },\n\n  getNearestPoint(point: IVec, element: ShapeElementModel) {\n    const points = getPointsFromBoundsWithRotation(element, diamond.points);\n    return polygonNearestPoint(points, point);\n  },\n\n  getLineIntersections(start: IVec, end: IVec, element: ShapeElementModel) {\n    const points = getPointsFromBoundsWithRotation(element, diamond.points);\n    return linePolygonIntersects(start, end, points);\n  },\n\n  getRelativePointLocation(position: IVec, element: ShapeElementModel) {\n    const bound = Bound.deserialize(element.xywh);\n    const point = bound.getRelativePoint(position);\n    let points = diamond.points(bound);\n    points.push(point);\n\n    points = rotatePoints(points, bound.center, element.rotate);\n    const rotatePoint = points.pop() as IVec;\n    const tangent = polygonGetPointTangent(points, rotatePoint);\n    return new PointLocation(rotatePoint, tangent);\n  },\n};\n"]}