{"version":3,"file":"ellipse.js","sourceRoot":"","sources":["../../../../src/elements/shape/api/ellipse.ts"],"names":[],"mappings":"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","sourcesContent":["import type { PointTestOptions } from '@lumensuite/block-std/gfx';\n\nimport {\n  clamp,\n  getPointsFromBoundsWithRotation,\n  type IBound,\n  type IVec,\n  lineEllipseIntersects,\n  pointInEllipse,\n  pointInPolygon,\n  rotatePoints,\n  toRadian,\n} from '@lumensuite/global/utils';\nimport { Bound, PointLocation, Vec } from '@lumensuite/global/utils';\n\nimport type { ShapeElementModel } from '../shape.js';\n\nimport { DEFAULT_CENTRAL_AREA_RATIO } from '../../../consts/index.js';\n\nexport const ellipse = {\n  points({ x, y, w, h }: IBound): IVec[] {\n    return [\n      [x, y + h / 2],\n      [x + w / 2, y],\n      [x + w, y + h / 2],\n      [x + w / 2, y + h],\n    ];\n  },\n  draw(ctx: CanvasRenderingContext2D, { x, y, w, h, rotate = 0 }: IBound) {\n    const cx = x + w / 2;\n    const cy = y + h / 2;\n\n    ctx.save();\n    ctx.translate(cx, cy);\n    ctx.rotate((rotate * Math.PI) / 180);\n    ctx.translate(-cx, -cy);\n\n    ctx.beginPath();\n    ctx.ellipse(cx, cy, w / 2, h / 2, 0, 0, 2 * Math.PI);\n\n    ctx.restore();\n  },\n  includesPoint(\n    this: ShapeElementModel,\n    x: number,\n    y: number,\n    options: PointTestOptions\n  ) {\n    const point: IVec = [x, y];\n    const expand = (options?.hitThreshold ?? 1) / (options?.zoom ?? 1);\n    const rx = this.w / 2;\n    const ry = this.h / 2;\n    const center: IVec = [this.x + rx, this.y + ry];\n    const rad = (this.rotate * Math.PI) / 180;\n\n    let hit =\n      pointInEllipse(point, center, rx + expand, ry + expand, rad) &&\n      !pointInEllipse(point, center, rx - expand, ry - expand, rad);\n\n    if (!hit) {\n      if (!options.ignoreTransparent || this.filled) {\n        hit = pointInEllipse(point, center, rx, ry, rad);\n      } else {\n        // If shape is not filled or transparent\n        const text = this.text;\n        if (!text || !text.length) {\n          // Check the center area of the shape\n          const centralRx = rx * DEFAULT_CENTRAL_AREA_RATIO;\n          const centralRy = ry * DEFAULT_CENTRAL_AREA_RATIO;\n          hit = pointInEllipse(point, center, centralRx, centralRy, rad);\n        } else if (this.textBound) {\n          hit = pointInPolygon(\n            point,\n            getPointsFromBoundsWithRotation(\n              this,\n              () => Bound.from(this.textBound!).points\n            )\n          );\n        }\n      }\n    }\n\n    return hit;\n  },\n  containsBound(bounds: Bound, element: ShapeElementModel): boolean {\n    const points = getPointsFromBoundsWithRotation(element, ellipse.points);\n    return points.some(point => bounds.containsPoint(point));\n  },\n\n  // See links:\n  // * https://github.com/0xfaded/ellipse_demo/issues/1\n  // * https://blog.chatfield.io/simple-method-for-distance-to-ellipse/\n  // * https://gist.github.com/fundon/11331322d3ca223c42e216df48c339e1\n  // * https://github.com/excalidraw/excalidraw/blob/master/packages/utils/geometry/geometry.ts#L888 (MIT)\n  getNearestPoint(point: IVec, { rotate, xywh }: ShapeElementModel) {\n    const { center, w, h } = Bound.deserialize(xywh);\n    const rad = toRadian(rotate);\n    const a = w / 2;\n    const b = h / 2;\n\n    // Use the center of the ellipse as the origin\n    const [rotatedPointX, rotatedPointY] = Vec.rot(\n      Vec.sub(point, center),\n      -rad\n    );\n\n    const px = Math.abs(rotatedPointX);\n    const py = Math.abs(rotatedPointY);\n\n    let tx = Math.SQRT1_2; // 0.707\n    let ty = Math.SQRT1_2; // 0.707\n    let i = 0;\n\n    for (; i < 3; i++) {\n      const x = a * tx;\n      const y = b * ty;\n\n      const ex = ((a * a - b * b) * tx ** 3) / a;\n      const ey = ((b * b - a * a) * ty ** 3) / b;\n\n      const rx = x - ex;\n      const ry = y - ey;\n\n      const qx = px - ex;\n      const qy = py - ey;\n\n      const r = Math.hypot(ry, rx);\n      const q = Math.hypot(qy, qx);\n\n      tx = clamp(((qx * r) / q + ex) / a, 0, 1);\n      ty = clamp(((qy * r) / q + ey) / b, 0, 1);\n      const t = Math.hypot(ty, tx);\n      tx /= t;\n      ty /= t;\n    }\n\n    return Vec.add(\n      Vec.rot(\n        [a * tx * Math.sign(rotatedPointX), b * ty * Math.sign(rotatedPointY)],\n        rad\n      ),\n      center\n    );\n  },\n\n  getLineIntersections(\n    start: IVec,\n    end: IVec,\n    { rotate, xywh }: ShapeElementModel\n  ) {\n    const rad = toRadian(rotate);\n    const bound = Bound.deserialize(xywh);\n    return lineEllipseIntersects(\n      start,\n      end,\n      bound.center,\n      bound.w / 2,\n      bound.h / 2,\n      rad\n    );\n  },\n\n  getRelativePointLocation(\n    relativePoint: IVec,\n    { rotate, xywh }: ShapeElementModel\n  ) {\n    const bounds = Bound.deserialize(xywh);\n    const point = bounds.getRelativePoint(relativePoint);\n    const { x, y, w, h, center } = bounds;\n    const points = rotatePoints(\n      [\n        [x, y],\n        [x + w / 2, y],\n        [x + w, y],\n        [x + w, y + h / 2],\n        [x + w, y + h],\n        [x + w / 2, y + h],\n        [x, y + h],\n        [x, y + h / 2],\n        point,\n      ],\n      center,\n      rotate\n    );\n    const rotatedPoint = points.pop() as IVec;\n    const len = points.length;\n    let tangent: IVec = [0, 0.5];\n    let i = 0;\n\n    for (; i < len; i++) {\n      const p0 = points[i];\n      const p1 = points[(i + 1) % len];\n      const bounds = Bound.fromPoints([p0, p1, center]);\n      if (bounds.containsPoint(rotatedPoint)) {\n        tangent = Vec.normalize(Vec.sub(p1, p0));\n        break;\n      }\n    }\n\n    return new PointLocation(rotatedPoint, tangent);\n  },\n};\n"]}