{"version":3,"file":"rect.js","sourceRoot":"","sources":["../../../../src/elements/shape/api/rect.ts"],"names":[],"mappings":"AAGA,OAAO,EACL,KAAK,EACL,mBAAmB,EACnB,+BAA+B,EAC/B,qBAAqB,EACrB,cAAc,EACd,aAAa,EACb,mBAAmB,EACnB,sBAAsB,EACtB,mBAAmB,EACnB,YAAY,GACb,MAAM,0BAA0B,CAAC;AAIlC,OAAO,EAAE,0BAA0B,EAAE,MAAM,0BAA0B,CAAC;AAEtE,MAAM,CAAC,MAAM,IAAI,GAAG;IAClB,MAAM,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAU;QAC3B,OAAO;YACL,CAAC,CAAC,EAAE,CAAC,CAAC;YACN,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;YACV,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;YACd,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;SACX,CAAC;IACJ,CAAC;IACD,IAAI,CAAC,GAA6B,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,MAAM,GAAG,CAAC,EAAU;QACpE,GAAG,CAAC,IAAI,EAAE,CAAC;QACX,GAAG,CAAC,SAAS,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;QACpC,GAAG,CAAC,MAAM,CAAC,CAAC,MAAM,GAAG,IAAI,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC,CAAC;QACrC,GAAG,CAAC,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;QACtC,GAAG,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;QACrB,GAAG,CAAC,OAAO,EAAE,CAAC;IAChB,CAAC;IACD,aAAa,CAEX,CAAS,EACT,CAAS,EACT,OAAyB;QAEzB,MAAM,KAAK,GAAS,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QAC3B,MAAM,MAAM,GAAG,+BAA+B,CAC5C,IAAI,EACJ,SAAS,EACT,OAAO,CAAC,eAAe,CACxB,CAAC;QAEF,IAAI,GAAG,GAAG,mBAAmB,CAC3B,KAAK,EACL,MAAM,EACN,CAAC,OAAO,EAAE,YAAY,IAAI,CAAC,CAAC,GAAG,CAAC,OAAO,CAAC,IAAI,IAAI,CAAC,CAAC,CACnD,CAAC;QAEF,IAAI,CAAC,GAAG,EAAE,CAAC;YACT,iEAAiE;YACjE,0DAA0D;YAC1D,IAAI,CAAC,OAAO,CAAC,iBAAiB,IAAI,IAAI,CAAC,MAAM,EAAE,CAAC;gBAC9C,GAAG,GAAG,cAAc,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC;YACvC,CAAC;iBAAM,CAAC;gBACN,wCAAwC;gBACxC,6BAA6B;gBAC7B,MAAM,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;gBACvB,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC;oBAC1B,qDAAqD;oBACrD,MAAM,aAAa,GAAG,mBAAmB,CACvC,IAAI,EACJ,0BAA0B,CAC3B,CAAC;oBACF,MAAM,aAAa,GAAG,+BAA+B,CAAC,aAAa,CAAC,CAAC;oBACrE,2CAA2C;oBAC3C,GAAG,GAAG,cAAc,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,aAAa,CAAC,CAAC;gBAC9C,CAAC;qBAAM,IAAI,IAAI,CAAC,SAAS,EAAE,CAAC;oBAC1B,GAAG,GAAG,cAAc,CAClB,KAAK,EACL,+BAA+B,CAC7B,IAAI,EACJ,GAAG,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,SAAU,CAAC,CAAC,MAAM,CACzC,CACF,CAAC;gBACJ,CAAC;YACH,CAAC;QACH,CAAC;QAED,OAAO,GAAG,CAAC;IACb,CAAC;IAED,aAAa,CAAC,MAAa,EAAE,OAA0B;QACrD,MAAM,MAAM,GAAG,+BAA+B,CAAC,OAAO,CAAC,CAAC;QACxD,OAAO,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,MAAM,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC,CAAC;IAC3D,CAAC;IAED,eAAe,CAAC,KAAW,EAAE,OAA0B;QACrD,MAAM,MAAM,GAAG,+BAA+B,CAAC,OAAO,CAAC,CAAC;QACxD,OAAO,mBAAmB,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;IAC5C,CAAC;IAED,oBAAoB,CAAC,KAAW,EAAE,GAAS,EAAE,OAA0B;QACrE,MAAM,MAAM,GAAG,+BAA+B,CAAC,OAAO,CAAC,CAAC;QACxD,OAAO,qBAAqB,CAAC,KAAK,EAAE,GAAG,EAAE,MAAM,CAAC,CAAC;IACnD,CAAC;IAED,wBAAwB,CAAC,aAAmB,EAAE,OAA0B;QACtE,MAAM,KAAK,GAAG,KAAK,CAAC,WAAW,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAC9C,MAAM,KAAK,GAAG,KAAK,CAAC,gBAAgB,CAAC,aAAa,CAAC,CAAC;QACpD,MAAM,WAAW,GAAG,YAAY,CAC9B,CAAC,KAAK,CAAC,EACP,KAAK,CAAC,MAAM,EACZ,OAAO,CAAC,MAAM,IAAI,CAAC,CACpB,CAAC,CAAC,CAAC,CAAC;QACL,MAAM,MAAM,GAAG,YAAY,CACzB,KAAK,CAAC,MAAM,EACZ,KAAK,CAAC,MAAM,EACZ,OAAO,CAAC,MAAM,IAAI,CAAC,CACpB,CAAC;QACF,MAAM,OAAO,GAAG,sBAAsB,CAAC,MAAM,EAAE,WAAW,CAAC,CAAC;QAC5D,OAAO,IAAI,aAAa,CAAC,WAAW,EAAE,OAAO,CAAC,CAAC;IACjD,CAAC;CACF,CAAC","sourcesContent":["import type { PointTestOptions } from '@blocksuite/block-std/gfx';\nimport type { IBound, IVec } from '@blocksuite/global/utils';\n\nimport {\n  Bound,\n  getCenterAreaBounds,\n  getPointsFromBoundsWithRotation,\n  linePolygonIntersects,\n  pointInPolygon,\n  PointLocation,\n  pointOnPolygonStoke,\n  polygonGetPointTangent,\n  polygonNearestPoint,\n  rotatePoints,\n} from '@blocksuite/global/utils';\n\nimport type { ShapeElementModel } from '../shape.js';\n\nimport { DEFAULT_CENTRAL_AREA_RATIO } from '../../../consts/index.js';\n\nexport const rect = {\n  points({ x, y, w, h }: IBound) {\n    return [\n      [x, y],\n      [x + w, y],\n      [x + w, y + h],\n      [x, y + h],\n    ];\n  },\n  draw(ctx: CanvasRenderingContext2D, { x, y, w, h, rotate = 0 }: IBound) {\n    ctx.save();\n    ctx.translate(x + w / 2, y + h / 2);\n    ctx.rotate((rotate * Math.PI) / 180);\n    ctx.translate(-x - w / 2, -y - h / 2);\n    ctx.rect(x, y, w, h);\n    ctx.restore();\n  },\n  includesPoint(\n    this: ShapeElementModel,\n    x: number,\n    y: number,\n    options: PointTestOptions\n  ) {\n    const point: IVec = [x, y];\n    const points = getPointsFromBoundsWithRotation(\n      this,\n      undefined,\n      options.responsePadding\n    );\n\n    let hit = pointOnPolygonStoke(\n      point,\n      points,\n      (options?.hitThreshold ?? 1) / (options.zoom ?? 1)\n    );\n\n    if (!hit) {\n      // If the point is not on the stroke, check if it is in the shape\n      // When the shape is filled and transparent is not ignored\n      if (!options.ignoreTransparent || this.filled) {\n        hit = pointInPolygon([x, y], points);\n      } else {\n        // If shape is not filled or transparent\n        // Check if hit the text area\n        const text = this.text;\n        if (!text || !text.length) {\n          // if not, check the default center area of the shape\n          const centralBounds = getCenterAreaBounds(\n            this,\n            DEFAULT_CENTRAL_AREA_RATIO\n          );\n          const centralPoints = getPointsFromBoundsWithRotation(centralBounds);\n          // Check if the point is in the center area\n          hit = pointInPolygon([x, y], centralPoints);\n        } else if (this.textBound) {\n          hit = pointInPolygon(\n            point,\n            getPointsFromBoundsWithRotation(\n              this,\n              () => Bound.from(this.textBound!).points\n            )\n          );\n        }\n      }\n    }\n\n    return hit;\n  },\n\n  containsBound(bounds: Bound, element: ShapeElementModel): boolean {\n    const points = getPointsFromBoundsWithRotation(element);\n    return points.some(point => bounds.containsPoint(point));\n  },\n\n  getNearestPoint(point: IVec, element: ShapeElementModel) {\n    const points = getPointsFromBoundsWithRotation(element);\n    return polygonNearestPoint(points, point);\n  },\n\n  getLineIntersections(start: IVec, end: IVec, element: ShapeElementModel) {\n    const points = getPointsFromBoundsWithRotation(element);\n    return linePolygonIntersects(start, end, points);\n  },\n\n  getRelativePointLocation(relativePoint: IVec, element: ShapeElementModel) {\n    const bound = Bound.deserialize(element.xywh);\n    const point = bound.getRelativePoint(relativePoint);\n    const rotatePoint = rotatePoints(\n      [point],\n      bound.center,\n      element.rotate ?? 0\n    )[0];\n    const points = rotatePoints(\n      bound.points,\n      bound.center,\n      element.rotate ?? 0\n    );\n    const tangent = polygonGetPointTangent(points, rotatePoint);\n    return new PointLocation(rotatePoint, tangent);\n  },\n};\n"]}