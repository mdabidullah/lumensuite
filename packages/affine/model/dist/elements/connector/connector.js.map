{"version":3,"file":"connector.js","sourceRoot":"","sources":["../../../src/elements/connector/connector.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAOA,OAAO,EACL,MAAM,EACN,KAAK,EACL,wBAAwB,EACxB,KAAK,GACN,MAAM,2BAA2B,CAAC;AACnC,OAAO,EACL,KAAK,EACL,eAAe,EACf,qBAAqB,EACrB,oBAAoB,EACpB,mBAAmB,EACnB,cAAc,EACd,sBAAsB,EACtB,aAAa,EACb,QAAQ,EACR,oBAAoB,EACpB,GAAG,GACJ,MAAM,0BAA0B,CAAC;AAClC,OAAO,EAAE,aAAa,EAAU,MAAM,mBAAmB,CAAC;AAE1D,OAAO,EAEL,yBAAyB,EACzB,0BAA0B,EAC1B,aAAa,EACb,iBAAiB,EACjB,UAAU,EACV,SAAS,EACT,UAAU,EAEV,WAAW,EACX,SAAS,GAEV,MAAM,uBAAuB,CAAC;AAc/B,MAAM,CAAC,MAAM,oBAAoB,GAAG,CAAC,IAAmB,EAAE,EAAE;IAC1D,OAAO;QACL,CAAC,aAAa,CAAC,QAAQ,CAAC,EAAE,UAAU;QACpC,CAAC,aAAa,CAAC,UAAU,CAAC,EAAE,SAAS;QACrC,CAAC,aAAa,CAAC,KAAK,CAAC,EAAE,OAAO;KAC/B,CAAC,IAAI,CAAC,CAAC;AACV,CAAC,CAAC;IA4CW,qBAAqB;sBAAS,wBAAwB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;iBAAtD,qBAAsB,SAAQ,WAA+C;;;wCAwSvF,KAAK,EAAE;8CAGP,KAAK,CAAC,MAAoB,CAAC;4CAM3B,KAAK,CAAC;oBACL,WAAW,EAAE,IAAI;oBACjB,QAAQ,EAAE,yBAAyB;iBACF,CAAC;wCAMnC,KAAK,CAAC,IAAI,CAAC;uCAMX,KAAK,CAAC;oBACL,QAAQ,EAAE,GAAG;oBACb,MAAM,EAAE,0BAA0B,CAAC,MAAM;iBACb,CAAC;sCAM9B,KAAK,CAAC;oBACL,KAAK,EAAE,SAAS;oBAChB,UAAU,EAAE,UAAU,CAAC,KAAK;oBAC5B,QAAQ,EAAE,EAAE;oBACZ,SAAS,EAAE,SAAS,CAAC,MAAM;oBAC3B,UAAU,EAAE,UAAU,CAAC,OAAO;oBAC9B,SAAS,EAAE,SAAS,CAAC,MAAM;iBACV,CAAC;qCAOnB,KAAK,EAAE;wCAMP,KAAK,EAAE;gCAGP,KAAK,EAAE;gCAGP,MAAM,CAAC,CAAC,IAAqB,EAAE,QAAQ,EAAE,EAAE;oBAC1C,MAAM,EAAE,CAAC,EAAE,CAAC,EAAE,GAAG,QAAQ,CAAC;oBAE1B,OAAO;wBACL,YAAY,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;qBAClE,CAAC;gBACJ,CAAC,CAAC,EACD,KAAK,EAAE;6CAGP,KAAK,CAAC,OAAqB,CAAC;kCAG5B,KAAK,EAAE;iCAGP,KAAK,EAAE;qCAGP,KAAK,EAAE;kCAGP,KAAK,EAAE;kCAKP,KAAK,EAAE;uCAGP,KAAK,EAAE;uCAGP,KAAK,EAAE;kCAGP,KAAK,EAAE;gCAQP,KAAK,EAAE;gCAGP,KAAK,EAAE;YAzGR,yLAAS,YAAY,6BAAZ,YAAY,mGAAuB;YAG5C,2MAAS,kBAAkB,6BAAlB,kBAAkB,+GAAc;YASzC,qMAAS,gBAAgB,6BAAhB,gBAAgB,2GAAkC;YAM3D,yLAAS,YAAY,6BAAZ,YAAY,mGAAW;YAShC,sLAAS,WAAW,6BAAX,WAAW,iGAA6B;YAajD,mLAAS,UAAU,6BAAV,UAAU,+FAAkB;YAOrC,gLAAS,SAAS,6BAAT,SAAS,6FAA+B;YAMjD,yLAAS,YAAY,6BAAZ,YAAY,mGAAkB;YAGvC,iKAAS,IAAI,6BAAJ,IAAI,mFAA2C;YAUxD,iKAAS,IAAI,6BAAJ,IAAI,mFAAuB;YAGpC,wMAAS,iBAAiB,6BAAjB,iBAAiB,6GAAc;YAGxC,uKAAS,MAAM,6BAAN,MAAM,uFAAa;YAG5B,oKAAS,KAAK,6BAAL,KAAK,qFAAkC;YAGhD,gLAAS,SAAS,6BAAT,SAAS,6FAA6B;YAG/C,uKAAS,MAAM,6BAAN,MAAM,uFAEb;YAGF,uKAAS,MAAM,6BAAN,MAAM,uFAAoB;YAGnC,sLAAS,WAAW,6BAAX,WAAW,iGAAkC;YAGtD,sLAAS,WAAW,6BAAX,WAAW,iGAAa;YAGjC,uKAAS,MAAM,6BAAN,MAAM,uFAEb;YAMF,iKAAS,IAAI,6BAAJ,IAAI,mFAAiC;YAG9C,iKAAS,IAAI,6BAAJ,IAAI,mFAA+B;;;QAhZ5C,aAAa;QACb,IAAa,WAAW;YACtB,OAAO,KAAc,CAAC;QACxB,CAAC;QAED,IAAI,SAAS;YACX,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,IAAI,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;QAC9C,CAAC;QAED,IAAa,YAAY;YACvB,IAAI,MAAM,GAAG,KAAK,CAAC,YAAY,CAAC;YAChC,IAAI,IAAI,CAAC,QAAQ,EAAE,EAAE,CAAC;gBACpB,MAAM,GAAG,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,SAAU,CAAC,CAAC,CAAC;YACzD,CAAC;YACD,OAAO,MAAM,CAAC;QAChB,CAAC;QAED,IAAI,IAAI;YACN,OAAO,WAAW,CAAC;QACrB,CAAC;QAED,MAAM,CAAU,QAAQ,CAAC,KAA4B;YACnD,IAAI,KAAK,CAAC,IAAI,IAAI,CAAC,CAAC,KAAK,CAAC,IAAI,YAAY,aAAa,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC;gBAChE,KAAK,CAAC,IAAI,GAAG,IAAI,aAAa,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;YACpD,CAAC;YAED,OAAO,KAAK,CAAC;QACf,CAAC;QAEQ,aAAa,CAAC,MAAa;YAClC,OAAO,CACL,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,MAAM,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;gBAC5D,CAAC,IAAI,CAAC,QAAQ,EAAE;oBACd,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,SAAU,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAC9C,MAAM,CAAC,aAAa,CAAC,CAAC,CAAC,CACxB,CAAC,CACL,CAAC;QACJ,CAAC;QAEQ,oBAAoB,CAAC,KAAW,EAAE,GAAS;YAClD,MAAM,EAAE,IAAI,EAAE,YAAY,EAAE,IAAI,EAAE,GAAG,IAAI,CAAC;YAE1C,IAAI,WAAW,GAAG,IAAI,CAAC;YAEvB,IAAI,IAAI,KAAK,aAAa,CAAC,KAAK,IAAI,IAAI,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;gBACpD,WAAW,GAAG,eAAe,CAAC,IAAI,EAAE,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC,CAAC;YACpD,CAAC;iBAAM,CAAC;gBACN,WAAW,GAAG,sBAAsB,CAAC,KAAK,EAAE,GAAG,EAAE,IAAI,CAAC,CAAC;YACzD,CAAC;YAED,IAAI,CAAC,WAAW,IAAI,IAAI,CAAC,QAAQ,EAAE,EAAE,CAAC;gBACpC,WAAW,GAAG,sBAAsB,CAClC,KAAK,EACL,GAAG,EACH,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,SAAU,CAAC,CAAC,MAAM,CACvC,CAAC;YACJ,CAAC;YAED,OAAO,WAAW,CAAC;QACrB,CAAC;QAED;;WAEG;QACM,eAAe,CAAC,KAAW;YAClC,MAAM,EAAE,IAAI,EAAE,YAAY,EAAE,IAAI,EAAE,GAAG,IAAI,CAAC;YAE1C,IAAI,IAAI,KAAK,aAAa,CAAC,QAAQ,EAAE,CAAC;gBACpC,MAAM,KAAK,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;gBACtB,MAAM,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;gBACnC,OAAO,GAAG,CAAC,yBAAyB,CAAC,KAAK,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,CAAC,CAAC;YACjE,CAAC;YAED,IAAI,IAAI,KAAK,aAAa,CAAC,UAAU,EAAE,CAAC;gBACtC,MAAM,MAAM,GAAG,IAAI,CAAC,GAAG,CAAO,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBACjD,OAAO,QAAQ,CAAC,YAAY,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;YAC9C,CAAC;YAED,MAAM,CAAC,GAAG,mBAAmB,CAAC,IAAI,CAAC,CAAC;YACpC,MAAM,CAAC,GAAG,oBAAoB,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC;YACzC,MAAM,CAAC,GAAG,cAAc,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;YAC/B,IAAI,CAAC;gBAAE,OAAO,CAAC,CAAC;YAEhB,MAAM,EAAE,CAAC,EAAE,CAAC,EAAE,GAAG,IAAI,CAAC;YACtB,OAAO,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QAChB,CAAC;QAED;;;;WAIG;QACH,wBAAwB,CAAC,KAAW,EAAE,MAAc;YAClD,MAAM,EAAE,IAAI,EAAE,YAAY,EAAE,IAAI,EAAE,GAAG,IAAI,CAAC;YAE1C,IAAI,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,GAAG,IAAI,CAAC;YAC1B,IAAI,MAAM,EAAE,CAAC;gBACX,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC;gBACb,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC;gBACb,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC;gBACb,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC;YACf,CAAC;YAED,KAAK,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC;YACzC,KAAK,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC;YAEzC,IAAI,IAAI,KAAK,aAAa,CAAC,QAAQ,EAAE,CAAC;gBACpC,MAAM,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;gBAClB,MAAM,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;gBAChC,MAAM,EAAE,GAAG,GAAG,CAAC,IAAI,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC;gBAC9B,MAAM,EAAE,GAAG,GAAG,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;gBAC1B,OAAO,EAAE,GAAG,EAAE,CAAC;YACjB,CAAC;YAED,IAAI,IAAI,KAAK,aAAa,CAAC,UAAU,EAAE,CAAC;gBACtC,MAAM,MAAM,GAAG,IAAI,CAAC,GAAG,CAAO,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBACjD,MAAM,CAAC,GAAG,QAAQ,CAAC,YAAY,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;gBAC/C,MAAM,EAAE,GAAG,QAAQ,CAAC,UAAU,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;gBAC1C,MAAM,EAAE,GAAG,QAAQ,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;gBAChC,OAAO,EAAE,GAAG,EAAE,CAAC;YACjB,CAAC;YAED,MAAM,CAAC,GAAG,mBAAmB,CAAC,IAAI,CAAC,CAAC;YACpC,OAAO,oBAAoB,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC;QACxC,CAAC;QAED;;;;WAIG;QACH,wBAAwB,CAAC,cAAc,GAAG,GAAG,EAAE,MAAc;YAC3D,MAAM,EAAE,IAAI,EAAE,YAAY,EAAE,IAAI,EAAE,GAAG,IAAI,CAAC;YAE1C,IAAI,IAAI,KAAK,aAAa,CAAC,QAAQ,EAAE,CAAC;gBACpC,MAAM,KAAK,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;gBACtB,MAAM,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;gBACnC,OAAO,GAAG,CAAC,GAAG,CAAC,KAAK,EAAE,IAAI,EAAE,cAAc,CAAC,CAAC;YAC9C,CAAC;YAED,IAAI,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,GAAG,IAAI,CAAC;YAC1B,IAAI,MAAM,EAAE,CAAC;gBACX,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC;gBACb,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC;gBACb,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC;gBACb,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC;YACf,CAAC;YAED,IAAI,IAAI,KAAK,aAAa,CAAC,UAAU,EAAE,CAAC;gBACtC,MAAM,MAAM,GAAG,IAAI,CAAC,GAAG,CAAO,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBACjD,MAAM,KAAK,GAAG,QAAQ,CAAC,OAAO,CAAC,MAAM,EAAE,cAAc,CAAC,CAAC;gBACvD,IAAI,KAAK;oBAAE,OAAO,KAAK,CAAC;gBACxB,OAAO,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;YAChC,CAAC;YAED,MAAM,CAAC,GAAG,mBAAmB,CAAC,IAAI,CAAC,CAAC;YACpC,MAAM,KAAK,GAAG,cAAc,CAAC,CAAC,EAAE,cAAc,CAAC,CAAC;YAChD,IAAI,KAAK;gBAAE,OAAO,KAAK,CAAC;YACxB,OAAO,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;QAChC,CAAC;QAEQ,wBAAwB,CAAC,KAAW;YAC3C,OAAO,IAAI,aAAa,CACtB,KAAK,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,gBAAgB,CAAC,KAAK,CAAC,CACrD,CAAC;QACJ,CAAC;QAED,QAAQ;YACN,OAAO,OAAO,CAAC,CAAC,IAAI,CAAC,YAAY,IAAI,IAAI,CAAC,YAAY,IAAI,IAAI,CAAC,SAAS,CAAC,CAAC;QAC5E,CAAC;QAEQ,aAAa,CACpB,CAAS,EACT,CAAS,EACT,OAAsC;YAEtC,MAAM,YAAY,GAAS,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;YAElC,IAAI,IAAI,CAAC,kBAAkB,CAAC,YAAoB,CAAC,EAAE,CAAC;gBAClD,OAAO,IAAI,CAAC;YACd,CAAC;YAED,MAAM,EAAE,IAAI,EAAE,WAAW,EAAE,YAAY,EAAE,IAAI,EAAE,GAAG,IAAI,CAAC;YAEvD,MAAM,KAAK,GACT,IAAI,KAAK,aAAa,CAAC,KAAK;gBAC1B,CAAC,CAAC,qBAAqB,CAAC,mBAAmB,CAAC,IAAI,CAAC,EAAE,YAAY,CAAC;gBAChE,CAAC,CAAC,oBAAoB,CAAC,IAAI,EAAE,YAAY,CAAC,CAAC;YAE/C,OAAO,CACL,GAAG,CAAC,IAAI,CAAC,KAAK,EAAE,YAAY,CAAC;gBAC7B,CAAC,OAAO,EAAE,YAAY,CAAC,CAAC,CAAC,WAAW,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAClD,CAAC;QACJ,CAAC;QAED,kBAAkB,CAAC,KAAW;YAC5B,OAAO,CACL,IAAI,CAAC,QAAQ,EAAE,IAAI,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,SAAU,CAAC,CAAC,cAAc,CAAC,KAAK,CAAC,CACzE,CAAC;QACJ,CAAC;QAED,MAAM,CAAC,KAAY;YACjB,MAAM,QAAQ,GAAG,KAAK,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAC9C,MAAM,MAAM,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,QAAQ,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;YACrE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,GAAG,IAAI,CAAC;YAEhC,IAAI,CAAC,MAAM,CAAC,EAAE,IAAI,MAAM,CAAC,QAAQ,EAAE,CAAC;gBAClC,IAAI,CAAC,MAAM,GAAG;oBACZ,QAAQ,EAAE,GAAG,CAAC,GAAG,CAAC,MAAM,CAAC,QAAQ,EAAE,MAAM,CAAqB;iBAC/D,CAAC;YACJ,CAAC;YAED,IAAI,CAAC,MAAM,CAAC,EAAE,IAAI,MAAM,CAAC,QAAQ,EAAE,CAAC;gBAClC,IAAI,CAAC,MAAM,GAAG;oBACZ,QAAQ,EAAE,GAAG,CAAC,GAAG,CAAC,MAAM,CAAC,QAAQ,EAAE,MAAM,CAAqB;iBAC/D,CAAC;YACJ,CAAC;YAED,sCAAsC;YACtC,IAAI,IAAI,CAAC,QAAQ,EAAE,EAAE,CAAC;gBACpB,MAAM,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,GAAG,IAAI,CAAC,SAAU,CAAC;gBACrC,IAAI,CAAC,SAAS,GAAG,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;YACxD,CAAC;QACH,CAAC;QAED,MAAM,CAAC,MAAa,EAAE,YAA6B,EAAE,MAAiB;YACpE,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC;YAE1B,MAAM,IAAI,GAAG,IAAI,CAAC,UAAU,CAAC,YAAY,EAAE,MAAM,CAAC,CAAC;YAEnD,wCAAwC;YACxC,IAAI,CAAC,IAAI,GAAG,MAAM,CAAC,SAAS,EAAE,CAAC;YAC/B,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;YAEnE,MAAM,KAAK,GAIP,EAAE,CAAC;YAEP,sCAAsC;YACtC,IAAI,IAAI,CAAC,QAAQ,EAAE,EAAE,CAAC;gBACpB,MAAM,CAAC,EAAE,EAAE,EAAE,CAAC,GAAG,IAAI,CAAC,wBAAwB,CAAC,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;gBAC1E,MAAM,CAAC,EAAE,AAAD,EAAG,CAAC,EAAE,CAAC,CAAC,GAAG,IAAI,CAAC,SAAU,CAAC;gBACnC,KAAK,CAAC,SAAS,GAAG,CAAC,EAAE,GAAG,CAAC,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;YACnD,CAAC;YAED,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,EAAE,CAAC;gBACpB,KAAK,CAAC,MAAM,GAAG;oBACb,GAAG,IAAI,CAAC,MAAM;oBACd,QAAQ,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,KAAK,EAAsB;iBAC9C,CAAC;YACJ,CAAC;YACD,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,EAAE,CAAC;gBACpB,KAAK,CAAC,MAAM,GAAG;oBACb,GAAG,IAAI,CAAC,MAAM;oBACd,QAAQ,EAAE,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,KAAK,EAAsB;iBAC5D,CAAC;YACJ,CAAC;YAED,OAAO,KAAK,CAAC;QACf,CAAC;QAED,UAAU,CAAC,YAA6B,EAAE,MAAiB;YACzD,IAAI,IAAI,CAAC,IAAI,KAAK,aAAa,CAAC,KAAK,EAAE,CAAC;gBACtC,OAAO,YAAY,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE;oBAC9B,MAAM,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,EAAE,MAAM,CAAC,GAAG;wBAC5B,KAAK;wBACL,KAAK,CAAC,OAAO;wBACb,KAAK,CAAC,KAAK;wBACX,KAAK,CAAC,MAAM;qBACb;yBACE,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC;yBACpD,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAS,CAAC,CAAC;oBAChC,MAAM,EAAE,GAAG,GAAG,CAAC,GAAG,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;oBAC7B,MAAM,EAAE,GAAG,GAAG,CAAC,GAAG,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;oBAC9B,OAAO,IAAI,aAAa,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;gBACzC,CAAC,CAAC,CAAC;YACL,CAAC;YAED,OAAO,YAAY,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE;gBAC9B,MAAM,EAAE,CAAC,EAAE,CAAC,EAAE,GAAG,IAAI,QAAQ,CAAC,GAAG,KAAK,CAAC,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC;gBAChE,MAAM,CAAC,GAAS,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;gBACvB,OAAO,aAAa,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;YAClC,CAAC,CAAC,CAAC;QACL,CAAC;QAEQ,SAAS;YAChB,MAAM,MAAM,GAAG,KAAK,CAAC,SAAS,EAAE,CAAC;YACjC,MAAM,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;YACxB,OAAO,MAAoC,CAAC;QAC9C,CAAC;QAGD,+BAA4C;QAA5C,IAAS,YAAY,kDAAuB;QAA5C,IAAS,YAAY,wDAAuB;QAG5C,qCAAyC;QAAzC,IAAS,kBAAkB,wDAAc;QAAzC,IAAS,kBAAkB,8DAAc;QASzC,mCAA2D;QAP3D;;WAEG;QAKH,IAAS,gBAAgB,sDAAkC;QAA3D,IAAS,gBAAgB,4DAAkC;QAM3D,+BAAgC;QAJhC;;WAEG;QAEH,IAAS,YAAY,kDAAW;QAAhC,IAAS,YAAY,wDAAW;QAShC,8BAAiD;QAPjD;;WAEG;QAKH,IAAS,WAAW,iDAA6B;QAAjD,IAAS,WAAW,uDAA6B;QAajD,6BAAqC;QAXrC;;WAEG;QASH,IAAS,UAAU,gDAAkB;QAArC,IAAS,UAAU,sDAAkB;QAOrC,4BAAiD;QALjD;;;WAGG;QAEH,IAAS,SAAS,+CAA+B;QAAjD,IAAS,SAAS,qDAA+B;QAMjD,+BAAuC;QAJvC;;WAEG;QAEH,IAAS,YAAY,kDAAkB;QAAvC,IAAS,YAAY,wDAAkB;QAGvC,uBAAwD;QAAxD,IAAS,IAAI,0CAA2C;QAAxD,IAAS,IAAI,gDAA2C;QAUxD,uBAAoC;QAApC,IAAS,IAAI,0CAAuB;QAApC,IAAS,IAAI,gDAAuB;QAGpC,oCAAwC;QAAxC,IAAS,iBAAiB,uDAAc;QAAxC,IAAS,iBAAiB,6DAAc;QAGxC,yBAA4B;QAA5B,IAAS,MAAM,4CAAa;QAA5B,IAAS,MAAM,kDAAa;QAG5B,wBAAgD;QAAhD,IAAS,KAAK,2CAAkC;QAAhD,IAAS,KAAK,iDAAkC;QAGhD,4BAA+C;QAA/C,IAAS,SAAS,+CAA6B;QAA/C,IAAS,SAAS,qDAA6B;QAG/C,yBAEE;QAFF,IAAS,MAAM,4CAEb;QAFF,IAAS,MAAM,kDAEb;QAGF,yBAAmC;QAAnC,IAAS,MAAM,4CAAoB;QAAnC,IAAS,MAAM,kDAAoB;QAGnC,8BAAsD;QAAtD,IAAS,WAAW,iDAAkC;QAAtD,IAAS,WAAW,uDAAkC;QAGtD,8BAAiC;QAAjC,IAAS,WAAW,iDAAa;QAAjC,IAAS,WAAW,uDAAa;QAGjC,yBAEE;QAFF,IAAS,MAAM,4CAEb;QAFF,IAAS,MAAM,kDAEb;QAMF,uBAA8C;QAJ9C;;WAEG;QAEH,IAAS,IAAI,0CAAiC;QAA9C,IAAS,IAAI,gDAAiC;QAG9C,uBAA4C;QAA5C,IAAS,IAAI,0CAA+B;QAA5C,IAAS,IAAI,gDAA+B;;;YAlZ5C,iBAAY,GAAG,KAAK,CAAC;YAwSZ,0FAAgC,EAAE,EAAC;YAGnC,0KAAgC;YAShC,4KAAkD;YAMlD,kKAAuB;YASvB,4JAAwC;YAaxC,yJAA4B;YAO5B,6IAA8B,SAAS,GAAC;YAMxC,kJAAwB,KAAK,GAAC;YAG9B,qIAAsB,aAAa,CAAC,UAAU,GAAC;YAU/C,6HAAwB,EAAE,GAAC;YAG3B,gKAA+B;YAG/B,8IAAiB,CAAC,GAAC;YAGnB,iIAA6B,SAAS,GAAC;YAGvC,wIAAoB,iBAAiB,GAAC;YAGtC,sIAAqB;gBAC5B,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;aACjB,GAAC;YAGO,mIAAgB,SAAS,GAAC;YAG1B,6IAA2B,WAAW,CAAC,KAAK,GAAC;YAG7C,kJAAsB,CAAC,GAAC;YAGxB,wIAAqB;gBAC5B,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;aACjB,GAAC;YAMO,+HAA2B,SAAS,GAAC;YAGrC,6HAAuB,WAAW,GAAC;;;;;SAnZjC,qBAAqB","sourcesContent":["import type {\n  BaseElementProps,\n  PointTestOptions,\n  SerializedElement,\n} from '@lumensuite/block-std/gfx';\nimport type { IVec, SerializedXYWH, XYWH } from '@lumensuite/global/utils';\n\nimport {\n  derive,\n  field,\n  GfxPrimitiveElementModel,\n  local,\n} from '@lumensuite/block-std/gfx';\nimport {\n  Bound,\n  curveIntersects,\n  getBezierNearestPoint,\n  getBezierNearestTime,\n  getBezierParameters,\n  getBezierPoint,\n  linePolylineIntersects,\n  PointLocation,\n  Polyline,\n  polyLineNearestPoint,\n  Vec,\n} from '@lumensuite/global/utils';\nimport { DocCollection, type Y } from '@lumensuite/store';\n\nimport {\n  type Color,\n  CONNECTOR_LABEL_MAX_WIDTH,\n  ConnectorLabelOffsetAnchor,\n  ConnectorMode,\n  DEFAULT_ROUGHNESS,\n  FontFamily,\n  FontStyle,\n  FontWeight,\n  type PointStyle,\n  StrokeStyle,\n  TextAlign,\n  type TextStyleProps,\n} from '../../consts/index.js';\n\nexport type SerializedConnection = {\n  id?: string;\n  position?: `[${number},${number}]` | PointLocation;\n};\n\n// at least one of id and position is not null\n// both exists means the position is relative to the element\nexport type Connection = {\n  id?: string;\n  position?: [number, number];\n};\n\nexport const getConnectorModeName = (mode: ConnectorMode) => {\n  return {\n    [ConnectorMode.Straight]: 'Straight',\n    [ConnectorMode.Orthogonal]: 'Elbowed',\n    [ConnectorMode.Curve]: 'Curve',\n  }[mode];\n};\n\nexport type ConnectorLabelOffsetProps = {\n  // [0, 1], `0.5` by default\n  distance: number;\n  // `center` by default\n  anchor?: ConnectorLabelOffsetAnchor;\n};\n\nexport type ConnectorLabelConstraintsProps = {\n  hasMaxWidth: boolean;\n  maxWidth: number;\n};\n\nexport type ConnectorLabelProps = {\n  // Label's content\n  text?: Y.Text;\n  labelEditing?: boolean;\n  labelDisplay?: boolean;\n  labelXYWH?: XYWH;\n  labelOffset?: ConnectorLabelOffsetProps;\n  labelStyle?: TextStyleProps;\n  labelConstraints?: ConnectorLabelConstraintsProps;\n};\n\nexport type SerializedConnectorElement = SerializedElement & {\n  source: SerializedConnection;\n  target: SerializedConnection;\n};\n\nexport type ConnectorElementProps = BaseElementProps & {\n  mode: ConnectorMode;\n  stroke: Color;\n  strokeWidth: number;\n  strokeStyle: StrokeStyle;\n  roughness?: number;\n  rough?: boolean;\n  source: Connection;\n  target: Connection;\n\n  frontEndpointStyle?: PointStyle;\n  rearEndpointStyle?: PointStyle;\n} & ConnectorLabelProps;\n\nexport class ConnectorElementModel extends GfxPrimitiveElementModel<ConnectorElementProps> {\n  updatingPath = false;\n\n  // @ts-ignore\n  override get connectable() {\n    return false as const;\n  }\n\n  get connected() {\n    return !!(this.source.id || this.target.id);\n  }\n\n  override get elementBound() {\n    let bounds = super.elementBound;\n    if (this.hasLabel()) {\n      bounds = bounds.unite(Bound.fromXYWH(this.labelXYWH!));\n    }\n    return bounds;\n  }\n\n  get type() {\n    return 'connector';\n  }\n\n  static override propsToY(props: ConnectorElementProps) {\n    if (props.text && !(props.text instanceof DocCollection.Y.Text)) {\n      props.text = new DocCollection.Y.Text(props.text);\n    }\n\n    return props;\n  }\n\n  override containsBound(bounds: Bound) {\n    return (\n      this.absolutePath.some(point => bounds.containsPoint(point)) ||\n      (this.hasLabel() &&\n        Bound.fromXYWH(this.labelXYWH!).points.some(p =>\n          bounds.containsPoint(p)\n        ))\n    );\n  }\n\n  override getLineIntersections(start: IVec, end: IVec) {\n    const { mode, absolutePath: path } = this;\n\n    let intersected = null;\n\n    if (mode === ConnectorMode.Curve && path.length > 1) {\n      intersected = curveIntersects(path, [start, end]);\n    } else {\n      intersected = linePolylineIntersects(start, end, path);\n    }\n\n    if (!intersected && this.hasLabel()) {\n      intersected = linePolylineIntersects(\n        start,\n        end,\n        Bound.fromXYWH(this.labelXYWH!).points\n      );\n    }\n\n    return intersected;\n  }\n\n  /**\n   * Calculate the closest point on the curve via a point.\n   */\n  override getNearestPoint(point: IVec): IVec {\n    const { mode, absolutePath: path } = this;\n\n    if (mode === ConnectorMode.Straight) {\n      const first = path[0];\n      const last = path[path.length - 1];\n      return Vec.nearestPointOnLineSegment(first, last, point, true);\n    }\n\n    if (mode === ConnectorMode.Orthogonal) {\n      const points = path.map<IVec>(p => [p[0], p[1]]);\n      return Polyline.nearestPoint(points, point);\n    }\n\n    const b = getBezierParameters(path);\n    const t = getBezierNearestTime(b, point);\n    const p = getBezierPoint(b, t);\n    if (p) return p;\n\n    const { x, y } = this;\n    return [x, y];\n  }\n\n  /**\n   * Calculating the computed distance along a path via a point.\n   *\n   * The point is relative to the viewport.\n   */\n  getOffsetDistanceByPoint(point: IVec, bounds?: Bound) {\n    const { mode, absolutePath: path } = this;\n\n    let { x, y, w, h } = this;\n    if (bounds) {\n      x = bounds.x;\n      y = bounds.y;\n      w = bounds.w;\n      h = bounds.h;\n    }\n\n    point[0] = Vec.clamp(point[0], x, x + w);\n    point[1] = Vec.clamp(point[1], y, y + h);\n\n    if (mode === ConnectorMode.Straight) {\n      const s = path[0];\n      const e = path[path.length - 1];\n      const pl = Vec.dist(s, point);\n      const fl = Vec.dist(s, e);\n      return pl / fl;\n    }\n\n    if (mode === ConnectorMode.Orthogonal) {\n      const points = path.map<IVec>(p => [p[0], p[1]]);\n      const p = Polyline.nearestPoint(points, point);\n      const pl = Polyline.lenAtPoint(points, p);\n      const fl = Polyline.len(points);\n      return pl / fl;\n    }\n\n    const b = getBezierParameters(path);\n    return getBezierNearestTime(b, point);\n  }\n\n  /**\n   * Calculating the computed point along a path via a offset distance.\n   *\n   * Returns a point relative to the viewport.\n   */\n  getPointByOffsetDistance(offsetDistance = 0.5, bounds?: Bound): IVec {\n    const { mode, absolutePath: path } = this;\n\n    if (mode === ConnectorMode.Straight) {\n      const first = path[0];\n      const last = path[path.length - 1];\n      return Vec.lrp(first, last, offsetDistance);\n    }\n\n    let { x, y, w, h } = this;\n    if (bounds) {\n      x = bounds.x;\n      y = bounds.y;\n      w = bounds.w;\n      h = bounds.h;\n    }\n\n    if (mode === ConnectorMode.Orthogonal) {\n      const points = path.map<IVec>(p => [p[0], p[1]]);\n      const point = Polyline.pointAt(points, offsetDistance);\n      if (point) return point;\n      return [x + w / 2, y + h / 2];\n    }\n\n    const b = getBezierParameters(path);\n    const point = getBezierPoint(b, offsetDistance);\n    if (point) return point;\n    return [x + w / 2, y + h / 2];\n  }\n\n  override getRelativePointLocation(point: IVec): PointLocation {\n    return new PointLocation(\n      Bound.deserialize(this.xywh).getRelativePoint(point)\n    );\n  }\n\n  hasLabel() {\n    return Boolean(!this.lableEditing && this.labelDisplay && this.labelXYWH);\n  }\n\n  override includesPoint(\n    x: number,\n    y: number,\n    options?: PointTestOptions | undefined\n  ): boolean {\n    const currentPoint: IVec = [x, y];\n\n    if (this.labelIncludesPoint(currentPoint as IVec)) {\n      return true;\n    }\n\n    const { mode, strokeWidth, absolutePath: path } = this;\n\n    const point =\n      mode === ConnectorMode.Curve\n        ? getBezierNearestPoint(getBezierParameters(path), currentPoint)\n        : polyLineNearestPoint(path, currentPoint);\n\n    return (\n      Vec.dist(point, currentPoint) <\n      (options?.hitThreshold ? strokeWidth / 2 : 0) + 8\n    );\n  }\n\n  labelIncludesPoint(point: IVec) {\n    return (\n      this.hasLabel() && Bound.fromXYWH(this.labelXYWH!).isPointInBound(point)\n    );\n  }\n\n  moveTo(bound: Bound) {\n    const oldBound = Bound.deserialize(this.xywh);\n    const offset = Vec.sub([bound.x, bound.y], [oldBound.x, oldBound.y]);\n    const { source, target } = this;\n\n    if (!source.id && source.position) {\n      this.source = {\n        position: Vec.add(source.position, offset) as [number, number],\n      };\n    }\n\n    if (!target.id && target.position) {\n      this.target = {\n        position: Vec.add(target.position, offset) as [number, number],\n      };\n    }\n\n    // Updates Connector's Label position.\n    if (this.hasLabel()) {\n      const [x, y, w, h] = this.labelXYWH!;\n      this.labelXYWH = [x + offset[0], y + offset[1], w, h];\n    }\n  }\n\n  resize(bounds: Bound, originalPath: PointLocation[], matrix: DOMMatrix) {\n    this.updatingPath = false;\n\n    const path = this.resizePath(originalPath, matrix);\n\n    // the property assignment order matters\n    this.xywh = bounds.serialize();\n    this.path = path.map(p => p.clone().setVec(Vec.sub(p, bounds.tl)));\n\n    const props: {\n      labelXYWH?: XYWH;\n      source?: Connection;\n      target?: Connection;\n    } = {};\n\n    // Updates Connector's Label position.\n    if (this.hasLabel()) {\n      const [cx, cy] = this.getPointByOffsetDistance(this.labelOffset.distance);\n      const [, , w, h] = this.labelXYWH!;\n      props.labelXYWH = [cx - w / 2, cy - h / 2, w, h];\n    }\n\n    if (!this.source.id) {\n      props.source = {\n        ...this.source,\n        position: path[0].toVec() as [number, number],\n      };\n    }\n    if (!this.target.id) {\n      props.target = {\n        ...this.target,\n        position: path[path.length - 1].toVec() as [number, number],\n      };\n    }\n\n    return props;\n  }\n\n  resizePath(originalPath: PointLocation[], matrix: DOMMatrix) {\n    if (this.mode === ConnectorMode.Curve) {\n      return originalPath.map(point => {\n        const [p, t, absIn, absOut] = [\n          point,\n          point.tangent,\n          point.absIn,\n          point.absOut,\n        ]\n          .map(p => new DOMPoint(...p).matrixTransform(matrix))\n          .map(p => [p.x, p.y] as IVec);\n        const ip = Vec.sub(absIn, p);\n        const op = Vec.sub(absOut, p);\n        return new PointLocation(p, t, ip, op);\n      });\n    }\n\n    return originalPath.map(point => {\n      const { x, y } = new DOMPoint(...point).matrixTransform(matrix);\n      const p: IVec = [x, y];\n      return PointLocation.fromVec(p);\n    });\n  }\n\n  override serialize() {\n    const result = super.serialize();\n    result.xywh = this.xywh;\n    return result as SerializedConnectorElement;\n  }\n\n  @local()\n  accessor absolutePath: PointLocation[] = [];\n\n  @field('None' as PointStyle)\n  accessor frontEndpointStyle!: PointStyle;\n\n  /**\n   * Defines the size constraints of the label.\n   */\n  @field({\n    hasMaxWidth: true,\n    maxWidth: CONNECTOR_LABEL_MAX_WIDTH,\n  } as ConnectorLabelConstraintsProps)\n  accessor labelConstraints!: ConnectorLabelConstraintsProps;\n\n  /**\n   * Control display and hide.\n   */\n  @field(true)\n  accessor labelDisplay!: boolean;\n\n  /**\n   * The offset property specifies the label along the connector path.\n   */\n  @field({\n    distance: 0.5,\n    anchor: ConnectorLabelOffsetAnchor.Center,\n  } as ConnectorLabelOffsetProps)\n  accessor labelOffset!: ConnectorLabelOffsetProps;\n\n  /**\n   * Defines the style of the label.\n   */\n  @field({\n    color: '#000000',\n    fontFamily: FontFamily.Inter,\n    fontSize: 16,\n    fontStyle: FontStyle.Normal,\n    fontWeight: FontWeight.Regular,\n    textAlign: TextAlign.Center,\n  } as TextStyleProps)\n  accessor labelStyle!: TextStyleProps;\n\n  /**\n   * Returns a `XYWH` array providing information about the size of a label\n   * and its position relative to the viewport.\n   */\n  @field()\n  accessor labelXYWH: XYWH | undefined = undefined;\n\n  /**\n   * Local control display and hide, mainly used in editing scenarios.\n   */\n  @local()\n  accessor lableEditing: boolean = false;\n\n  @field()\n  accessor mode: ConnectorMode = ConnectorMode.Orthogonal;\n\n  @derive((path: PointLocation[], instance) => {\n    const { x, y } = instance;\n\n    return {\n      absolutePath: path.map(p => p.clone().setVec(Vec.add(p, [x, y]))),\n    };\n  })\n  @local()\n  accessor path: PointLocation[] = [];\n\n  @field('Arrow' as PointStyle)\n  accessor rearEndpointStyle!: PointStyle;\n\n  @local()\n  accessor rotate: number = 0;\n\n  @field()\n  accessor rough: boolean | undefined = undefined;\n\n  @field()\n  accessor roughness: number = DEFAULT_ROUGHNESS;\n\n  @field()\n  accessor source: Connection = {\n    position: [0, 0],\n  };\n\n  @field()\n  accessor stroke: Color = '#000000';\n\n  @field()\n  accessor strokeStyle: StrokeStyle = StrokeStyle.Solid;\n\n  @field()\n  accessor strokeWidth: number = 4;\n\n  @field()\n  accessor target: Connection = {\n    position: [0, 0],\n  };\n\n  /**\n   * The content of the label.\n   */\n  @field()\n  accessor text: Y.Text | undefined = undefined;\n\n  @local()\n  accessor xywh: SerializedXYWH = '[0,0,0,0]';\n}\n\ndeclare global {\n  namespace LumenSuite {\n    interface SurfaceElementModelMap {\n      connector: ConnectorElementModel;\n    }\n    interface EdgelessTextModelMap {\n      connector: ConnectorElementModel;\n    }\n  }\n}\n"]}