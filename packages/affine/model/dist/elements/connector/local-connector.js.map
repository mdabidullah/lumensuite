{"version":3,"file":"local-connector.js","sourceRoot":"","sources":["../../../src/elements/connector/local-connector.ts"],"names":[],"mappings":"AAEA,OAAO,EAAE,oBAAoB,EAAE,MAAM,2BAA2B,CAAC;AAIjE,OAAO,EAEL,aAAa,EACb,iBAAiB,EAEjB,WAAW,GACZ,MAAM,uBAAuB,CAAC;AAE/B,MAAM,OAAO,0BAA2B,SAAQ,oBAAoB;IAApE;;QACU,UAAK,GAAoB,EAAE,CAAC;QAEpC,iBAAY,GAAoB,EAAE,CAAC;QAInC,OAAE,GAAW,EAAE,CAAC;QAEhB,SAAI,GAAkB,aAAa,CAAC,UAAU,CAAC;QAI/C,WAAM,GAAW,CAAC,CAAC;QAInB,cAAS,GAAW,iBAAiB,CAAC;QAEtC,SAAI,GAAW,IAAI,CAAC,MAAM,EAAE,CAAC;QAE7B,WAAM,GAAe;YACnB,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;SACjB,CAAC;QAEF,WAAM,GAAU,SAAS,CAAC;QAE1B,gBAAW,GAAgB,WAAW,CAAC,KAAK,CAAC;QAE7C,gBAAW,GAAW,CAAC,CAAC;QAExB,WAAM,GAAe;YACnB,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;SACjB,CAAC;QAEF,iBAAY,GAAG,KAAK,CAAC;QAErB,SAAI,GAAmB,WAAW,CAAC;IAgBrC,CAAC;IAdC,IAAI,IAAI;QACN,OAAO,IAAI,CAAC,KAAK,CAAC;IACpB,CAAC;IAED,IAAI,IAAI,CAAC,KAAsB;QAC7B,MAAM,EAAE,CAAC,EAAE,CAAC,EAAE,GAAG,IAAI,CAAC;QAEtB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;IAC7E,CAAC;IAED,IAAI,IAAI;QACN,OAAO,WAAW,CAAC;IACrB,CAAC;CACF","sourcesContent":["import type { PointLocation, SerializedXYWH } from '@blocksuite/global/utils';\n\nimport { GfxLocalElementModel } from '@blocksuite/block-std/gfx';\n\nimport type { Connection } from './connector.js';\n\nimport {\n  type Color,\n  ConnectorMode,\n  DEFAULT_ROUGHNESS,\n  type PointStyle,\n  StrokeStyle,\n} from '../../consts/index.js';\n\nexport class LocalConnectorElementModel extends GfxLocalElementModel {\n  private _path: PointLocation[] = [];\n\n  absolutePath: PointLocation[] = [];\n\n  frontEndpointStyle!: PointStyle;\n\n  id: string = '';\n\n  mode: ConnectorMode = ConnectorMode.Orthogonal;\n\n  rearEndpointStyle!: PointStyle;\n\n  rotate: number = 0;\n\n  rough?: boolean;\n\n  roughness: number = DEFAULT_ROUGHNESS;\n\n  seed: number = Math.random();\n\n  source: Connection = {\n    position: [0, 0],\n  };\n\n  stroke: Color = '#000000';\n\n  strokeStyle: StrokeStyle = StrokeStyle.Solid;\n\n  strokeWidth: number = 4;\n\n  target: Connection = {\n    position: [0, 0],\n  };\n\n  updatingPath = false;\n\n  xywh: SerializedXYWH = '[0,0,0,0]';\n\n  get path(): PointLocation[] {\n    return this._path;\n  }\n\n  set path(value: PointLocation[]) {\n    const { x, y } = this;\n\n    this._path = value;\n    this.absolutePath = value.map(p => p.clone().setVec([p[0] + x, p[1] + y]));\n  }\n\n  get type() {\n    return 'connector';\n  }\n}\n\ndeclare global {\n  namespace BlockSuite {\n    interface SurfaceLocalModelMap {\n      connector: LocalConnectorElementModel;\n    }\n  }\n}\n"]}