{"version":3,"file":"menu-button.js","sourceRoot":"","sources":["../../src/toolbar/menu-button.ts"],"names":[],"mappings":"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","sourcesContent":["import { PANEL_BASE } from '@lumensuite/affine-shared/styles';\nimport { createButtonPopper } from '@lumensuite/affine-shared/utils';\nimport { WithDisposable } from '@lumensuite/block-std';\nimport {\n  css,\n  html,\n  LitElement,\n  type PropertyValues,\n  type TemplateResult,\n} from 'lit';\nimport { customElement, property, query } from 'lit/decorators.js';\n\nimport type { EditorIconButton } from './icon-button.js';\n\nimport './icon-button.js';\n\n@customElement('editor-menu-button')\nexport class EditorMenuButton extends WithDisposable(LitElement) {\n  static override styles = css`\n    :host {\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      gap: 8px;\n    }\n  `;\n\n  private _popper!: ReturnType<typeof createButtonPopper>;\n\n  override firstUpdated() {\n    this._popper = createButtonPopper(\n      this._trigger,\n      this._content,\n      ({ display }) => {\n        this._trigger.showTooltip = display === 'hidden';\n\n        this.dispatchEvent(\n          new CustomEvent('toggle', {\n            detail: display,\n            bubbles: false,\n            cancelable: false,\n            composed: true,\n          })\n        );\n      },\n      {\n        mainAxis: 12,\n        ignoreShift: true,\n      }\n    );\n    this._disposables.addFromEvent(this, 'keydown', (e: KeyboardEvent) => {\n      e.stopPropagation();\n      if (e.key === 'Escape') {\n        this._popper.hide();\n      }\n    });\n    this._disposables.addFromEvent(this._trigger, 'click', (_: MouseEvent) => {\n      this._popper.toggle();\n      if (this._popper.state === 'show') {\n        this._content.focus({ preventScroll: true });\n      }\n    });\n    this._disposables.add(this._popper);\n  }\n\n  hide() {\n    this._popper?.hide();\n  }\n\n  override render() {\n    return html`\n      ${this.button}\n      <editor-menu-content role=\"menu\" tabindex=\"-1\">\n        <slot></slot>\n      </editor-menu-content>\n    `;\n  }\n\n  show(force = false) {\n    this._popper?.show(force);\n  }\n\n  override willUpdate(changedProperties: PropertyValues) {\n    if (changedProperties.has('contentPadding')) {\n      this.style.setProperty('--content-padding', this.contentPadding ?? '');\n    }\n  }\n\n  @query('editor-menu-content')\n  private accessor _content!: EditorMenuContent;\n\n  @query('editor-icon-button')\n  private accessor _trigger!: EditorIconButton;\n\n  @property({ attribute: false })\n  accessor button!: string | TemplateResult<1>;\n\n  @property({ attribute: false })\n  accessor contentPadding: string | undefined = undefined;\n}\n\n@customElement('editor-menu-content')\nexport class EditorMenuContent extends LitElement {\n  static override styles = css`\n    :host {\n      --packed-height: 6px;\n      --offset-height: calc(-1 * var(--packed-height));\n      display: none;\n      outline: none;\n    }\n\n    :host::before,\n    :host::after {\n      content: '';\n      display: block;\n      position: absolute;\n      height: var(--packed-height);\n      width: 100%;\n    }\n\n    :host::before {\n      top: var(--offset-height);\n    }\n\n    :host::after {\n      bottom: var(--offset-height);\n    }\n\n    :host([data-show]) {\n      ${PANEL_BASE};\n      justify-content: center;\n      padding: var(--content-padding, 0 6px);\n    }\n\n    ::slotted(:not(.custom)) {\n      display: flex;\n      align-items: center;\n      align-self: stretch;\n      gap: 8px;\n      min-height: 36px;\n    }\n\n    ::slotted([data-size]) {\n      min-width: 146px;\n    }\n\n    ::slotted([data-size='small']) {\n      min-width: 164px;\n    }\n\n    ::slotted([data-size='large']) {\n      min-width: 176px;\n    }\n\n    ::slotted([data-orientation='vertical']) {\n      flex-direction: column;\n      align-items: stretch;\n      gap: unset;\n      min-height: unset;\n    }\n  `;\n\n  override render() {\n    return html`<slot></slot>`;\n  }\n}\n\n@customElement('editor-menu-action')\nexport class EditorMenuAction extends LitElement {\n  static override styles = css`\n    :host {\n      display: flex;\n      width: 100%;\n      align-items: center;\n      white-space: nowrap;\n      box-sizing: border-box;\n      padding: 4px 8px;\n      border-radius: 4px;\n      overflow: hidden;\n      text-overflow: ellipsis;\n      cursor: pointer;\n      gap: 8px;\n      color: var(--affine-text-primary-color);\n      font-weight: 400;\n      min-height: 30px; // 22 + 8\n    }\n\n    :host(:hover),\n    :host([data-selected]) {\n      background-color: var(--affine-hover-color);\n    }\n\n    :host([data-selected]) {\n      pointer-events: none;\n    }\n\n    :host(:hover.delete),\n    :host(:hover.delete) ::slotted(svg) {\n      background-color: var(--affine-background-error-color);\n      color: var(--affine-error-color);\n    }\n\n    :host([disabled]) {\n      pointer-events: none;\n      cursor: not-allowed;\n      color: var(--affine-text-disable-color);\n    }\n\n    ::slotted(svg) {\n      color: var(--affine-icon-color);\n    }\n  `;\n\n  override connectedCallback() {\n    super.connectedCallback();\n    this.role = 'button';\n  }\n\n  override render() {\n    return html`<slot></slot>`;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'editor-menu-button': EditorMenuButton;\n    'editor-menu-content': EditorMenuContent;\n    'editor-menu-action': EditorMenuAction;\n  }\n}\n"]}