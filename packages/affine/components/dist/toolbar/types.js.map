{"version":3,"file":"types.js","sourceRoot":"","sources":["../../src/toolbar/types.ts"],"names":[],"mappings":"","sourcesContent":["import type { nothing, TemplateResult } from 'lit';\n\nexport type MenuItemPart = {\n  action: () => void;\n  disabled?: boolean;\n  render?: (item: MenuItem) => TemplateResult<1>;\n};\n\nexport type MenuItem = {\n  type: string;\n  label?: string;\n  tooltip?: string;\n  icon?: TemplateResult<1>;\n} & MenuItemPart;\n\nexport type AdvancedMenuItem<T> = Omit<MenuItem, 'action' | 'disabled'> & {\n  action?: (context: T) => void | Promise<void>;\n  disabled?: boolean | ((context: T) => boolean);\n  when?: (context: T) => boolean;\n  // Generates action at runtime\n  generate?: (context: T) => MenuItemPart | void;\n};\n\nexport type MenuItemGroup<T> = {\n  type: string;\n  items: AdvancedMenuItem<T>[];\n  when?: (context: T) => boolean;\n};\n\n// Group Actions\nexport type FatMenuItems = (MenuItem | typeof nothing)[][];\n"]}