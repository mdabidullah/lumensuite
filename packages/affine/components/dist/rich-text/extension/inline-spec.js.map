{"version":3,"file":"inline-spec.js","sourceRoot":"","sources":["../../../src/rich-text/extension/inline-spec.ts"],"names":[],"mappings":"AAEA,OAAO,EACL,gBAAgB,GAGjB,MAAM,uBAAuB,CAAC;AAI/B,MAAM,CAAC,MAAM,oBAAoB,GAC/B,gBAAgB,CAAoC,kBAAkB,CAAC,CAAC;AAa1E,MAAM,UAAU,mBAAmB,CACjC,UAAsD,EACtD,OAA0E;IAI1E,IAAI,OAAO,UAAU,KAAK,QAAQ,EAAE,CAAC;QACnC,MAAM,UAAU,GAAG,oBAAoB,CAAC,UAAU,CAAC,CAAC;QACpD,OAAO;YACL,UAAU;YACV,KAAK,EAAE,EAAE,CAAC,EAAE;gBACV,EAAE,CAAC,OAAO,CAAC,UAAU,EAAE,QAAQ,CAAC,EAAE,CAAC,OAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC;YACzD,CAAC;SACF,CAAC;IACJ,CAAC;IACD,MAAM,UAAU,GAAG,oBAAoB,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;IACzD,OAAO;QACL,UAAU;QACV,KAAK,EAAE,EAAE,CAAC,EAAE;YACV,EAAE,CAAC,OAAO,CAAC,UAAU,EAAE,UAAU,CAAC,CAAC;QACrC,CAAC;KACF,CAAC;AACJ,CAAC","sourcesContent":["import type { ExtensionType } from '@blocksuite/block-std';\n\nimport {\n  createIdentifier,\n  type ServiceIdentifier,\n  type ServiceProvider,\n} from '@blocksuite/global/di';\n\nimport type { AffineTextAttributes, InlineSpecs } from './type.js';\n\nexport const InlineSpecIdentifier =\n  createIdentifier<InlineSpecs<AffineTextAttributes>>('AffineInlineSpec');\n\nexport function InlineSpecExtension(\n  name: string,\n  getSpec: (provider: ServiceProvider) => InlineSpecs<AffineTextAttributes>\n): ExtensionType & {\n  identifier: ServiceIdentifier<InlineSpecs<AffineTextAttributes>>;\n};\nexport function InlineSpecExtension(\n  spec: InlineSpecs<AffineTextAttributes>\n): ExtensionType & {\n  identifier: ServiceIdentifier<InlineSpecs<AffineTextAttributes>>;\n};\nexport function InlineSpecExtension(\n  nameOrSpec: string | InlineSpecs<AffineTextAttributes>,\n  getSpec?: (provider: ServiceProvider) => InlineSpecs<AffineTextAttributes>\n): ExtensionType & {\n  identifier: ServiceIdentifier<InlineSpecs<AffineTextAttributes>>;\n} {\n  if (typeof nameOrSpec === 'string') {\n    const identifier = InlineSpecIdentifier(nameOrSpec);\n    return {\n      identifier,\n      setup: di => {\n        di.addImpl(identifier, provider => getSpec!(provider));\n      },\n    };\n  }\n  const identifier = InlineSpecIdentifier(nameOrSpec.name);\n  return {\n    identifier,\n    setup: di => {\n      di.addImpl(identifier, nameOrSpec);\n    },\n  };\n}\n"]}