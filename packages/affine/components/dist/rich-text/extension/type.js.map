{"version":3,"file":"type.js","sourceRoot":"","sources":["../../../src/rich-text/extension/type.ts"],"names":[],"mappings":"","sourcesContent":["import type { ReferenceInfo } from '@lumensuite/affine-model';\nimport type {\n  AttributeRenderer,\n  BaseTextAttributes,\n  DeltaInsert,\n  InlineEditor,\n  InlineRange,\n  KeyboardBindingHandler,\n} from '@lumensuite/inline';\nimport type { Y } from '@lumensuite/store';\nimport type { ZodTypeAny } from 'zod';\n\nexport interface AffineTextAttributes {\n  bold?: true | null;\n  italic?: true | null;\n  underline?: true | null;\n  strike?: true | null;\n  code?: true | null;\n  link?: string | null;\n  reference?:\n    | ({\n        type: 'Subpage' | 'LinkedPage';\n      } & ReferenceInfo)\n    | null;\n  background?: string | null;\n  color?: string | null;\n  latex?: string | null;\n}\n\nexport type InlineSpecs<\n  AffineTextAttributes extends BaseTextAttributes = BaseTextAttributes,\n> = {\n  name: keyof AffineTextAttributes | string;\n  schema: ZodTypeAny;\n  match: (delta: DeltaInsert<AffineTextAttributes>) => boolean;\n  renderer: AttributeRenderer<AffineTextAttributes>;\n  embed?: boolean;\n};\n\nexport type InlineMarkdownMatchAction<\n  // @ts-expect-error We allow to covariance for AffineTextAttributes\n  in AffineTextAttributes extends BaseTextAttributes = BaseTextAttributes,\n> = (props: {\n  inlineEditor: InlineEditor<AffineTextAttributes>;\n  prefixText: string;\n  inlineRange: InlineRange;\n  pattern: RegExp;\n  undoManager: Y.UndoManager;\n}) => ReturnType<KeyboardBindingHandler>;\n\nexport type InlineMarkdownMatch<\n  AffineTextAttributes extends BaseTextAttributes = BaseTextAttributes,\n> = {\n  name: string;\n  pattern: RegExp;\n  action: InlineMarkdownMatchAction<AffineTextAttributes>;\n};\n"]}