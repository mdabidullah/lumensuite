{"version":3,"file":"inline-manager.js","sourceRoot":"","sources":["../../../src/rich-text/extension/inline-manager.ts"],"names":[],"mappings":"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","sourcesContent":["import type { Y } from '@lumensuite/store';\n\nimport {\n  type BlockStdScope,\n  type ExtensionType,\n  StdIdentifier,\n} from '@lumensuite/block-std';\nimport {\n  createIdentifier,\n  type ServiceIdentifier,\n} from '@lumensuite/global/di';\nimport {\n  type AttributeRenderer,\n  baseTextAttributes,\n  type DeltaInsert,\n  getDefaultAttributeRenderer,\n  KEYBOARD_ALLOW_DEFAULT,\n  type KeyboardBindingContext,\n} from '@lumensuite/inline';\nimport { z, type ZodObject, type ZodTypeAny } from 'zod';\n\nimport type {\n  AffineTextAttributes,\n  InlineMarkdownMatch,\n  InlineSpecs,\n} from './type.js';\n\nimport { MarkdownMatcherIdentifier } from './markdown-matcher.js';\n\nexport class InlineManager {\n  embedChecker = (delta: DeltaInsert<AffineTextAttributes>) => {\n    for (const spec of this.specs) {\n      if (spec.embed && spec.match(delta)) {\n        return true;\n      }\n    }\n    return false;\n  };\n\n  getRenderer = (): AttributeRenderer<AffineTextAttributes> => {\n    const defaultRenderer = getDefaultAttributeRenderer<AffineTextAttributes>();\n\n    const renderer: AttributeRenderer<AffineTextAttributes> = props => {\n      // Priority increases from front to back\n      for (const spec of this.specs.toReversed()) {\n        if (spec.match(props.delta)) {\n          return spec.renderer(props);\n        }\n      }\n      return defaultRenderer(props);\n    };\n    return renderer;\n  };\n\n  getSchema = (): ZodObject<Record<keyof AffineTextAttributes, ZodTypeAny>> => {\n    const defaultSchema = baseTextAttributes as unknown as ZodObject<\n      Record<keyof AffineTextAttributes, ZodTypeAny>\n    >;\n\n    const schema: ZodObject<Record<keyof AffineTextAttributes, ZodTypeAny>> =\n      this.specs.reduce((acc, cur) => {\n        const currentSchema = z.object({\n          [cur.name]: cur.schema,\n        }) as ZodObject<Record<keyof AffineTextAttributes, ZodTypeAny>>;\n        return acc.merge(currentSchema) as ZodObject<\n          Record<keyof AffineTextAttributes, ZodTypeAny>\n        >;\n      }, defaultSchema);\n    return schema;\n  };\n\n  markdownShortcutHandler = (\n    context: KeyboardBindingContext<AffineTextAttributes>,\n    undoManager: Y.UndoManager\n  ) => {\n    const { inlineEditor, prefixText, inlineRange } = context;\n    for (const match of this.markdownMatches) {\n      const matchedText = prefixText.match(match.pattern);\n      if (matchedText) {\n        return match.action({\n          inlineEditor,\n          prefixText,\n          inlineRange,\n          pattern: match.pattern,\n          undoManager,\n        });\n      }\n    }\n\n    return KEYBOARD_ALLOW_DEFAULT;\n  };\n\n  readonly specs: Array<InlineSpecs<AffineTextAttributes>>;\n\n  constructor(\n    readonly std: BlockStdScope,\n    readonly markdownMatches: InlineMarkdownMatch<AffineTextAttributes>[],\n    ...specs: Array<InlineSpecs<AffineTextAttributes>>\n  ) {\n    this.specs = specs;\n  }\n}\n\nexport const InlineManagerIdentifier = createIdentifier<InlineManager>(\n  'AffineInlineManager'\n);\n\nexport type InlineManagerExtensionConfig = {\n  id: string;\n  enableMarkdown?: boolean;\n  specs: ServiceIdentifier<InlineSpecs<AffineTextAttributes>>[];\n};\n\nexport function InlineManagerExtension({\n  id,\n  enableMarkdown = true,\n  specs,\n}: InlineManagerExtensionConfig): ExtensionType & {\n  identifier: ServiceIdentifier<InlineManager>;\n} {\n  const identifier = InlineManagerIdentifier(id);\n  return {\n    setup: di => {\n      di.addImpl(identifier, provider => {\n        return new InlineManager(\n          provider.get(StdIdentifier),\n          enableMarkdown\n            ? Array.from(provider.getAll(MarkdownMatcherIdentifier).values())\n            : [],\n          ...specs.map(spec => provider.get(spec))\n        );\n      });\n    },\n    identifier,\n  };\n}\n"]}