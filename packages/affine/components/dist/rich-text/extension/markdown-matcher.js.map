{"version":3,"file":"markdown-matcher.js","sourceRoot":"","sources":["../../../src/rich-text/extension/markdown-matcher.ts"],"names":[],"mappings":"AAEA,OAAO,EACL,gBAAgB,GAEjB,MAAM,uBAAuB,CAAC;AAI/B,MAAM,CAAC,MAAM,yBAAyB,GAAG,gBAAgB,CAEvD,uBAAuB,CAAC,CAAC;AAE3B,MAAM,UAAU,uBAAuB,CACrC,OAAkD;IAIlD,MAAM,UAAU,GAAG,yBAAyB,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;IAE3D,OAAO;QACL,KAAK,EAAE,EAAE,CAAC,EAAE;YACV,EAAE,CAAC,OAAO,CAAC,UAAU,EAAE,GAAG,EAAE,CAAC,CAAC,EAAE,GAAG,OAAO,EAAE,CAAC,CAAC,CAAC;QACjD,CAAC;QACD,UAAU;KACX,CAAC;AACJ,CAAC","sourcesContent":["import type { ExtensionType } from '@blocksuite/block-std';\n\nimport {\n  createIdentifier,\n  type ServiceIdentifier,\n} from '@blocksuite/global/di';\n\nimport type { AffineTextAttributes, InlineMarkdownMatch } from './type.js';\n\nexport const MarkdownMatcherIdentifier = createIdentifier<\n  InlineMarkdownMatch<AffineTextAttributes>\n>('AffineMarkdownMatcher');\n\nexport function InlineMarkdownExtension(\n  matcher: InlineMarkdownMatch<AffineTextAttributes>\n): ExtensionType & {\n  identifier: ServiceIdentifier<InlineMarkdownMatch<AffineTextAttributes>>;\n} {\n  const identifier = MarkdownMatcherIdentifier(matcher.name);\n\n  return {\n    setup: di => {\n      di.addImpl(identifier, () => ({ ...matcher }));\n    },\n    identifier,\n  };\n}\n"]}