{"version":3,"file":"format-native.js","sourceRoot":"","sources":["../../../src/rich-text/format/format-native.ts"],"names":[],"mappings":"AAAA,OAAO,EACL,aAAa,GAGd,MAAM,uBAAuB,CAAC;AAC/B,OAAO,EAAE,gBAAgB,EAA0B,MAAM,oBAAoB,CAAC;AAI9E,OAAO,EAAE,8BAA8B,EAAE,MAAM,aAAa,CAAC;AAE7D,mBAAmB;AACnB,MAAM,CAAC,MAAM,mBAAmB,GAQ5B,CAAC,GAAG,EAAE,IAAI,EAAE,EAAE;IAChB,MAAM,EAAE,MAAM,EAAE,IAAI,GAAG,OAAO,EAAE,GAAG,GAAG,CAAC;IAEvC,IAAI,KAAK,GAAG,GAAG,CAAC,KAAK,CAAC;IACtB,IAAI,CAAC,KAAK,EAAE,CAAC;QACX,MAAM,SAAS,GAAG,QAAQ,CAAC,YAAY,EAAE,CAAC;QAC1C,IAAI,CAAC,SAAS,IAAI,SAAS,CAAC,UAAU,KAAK,CAAC;YAAE,OAAO;QACrD,KAAK,GAAG,SAAS,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;IAClC,CAAC;IACD,IAAI,CAAC,KAAK;QAAE,OAAO;IAEnB,MAAM,qBAAqB,GAAG,KAAK,CAAC,IAAI,CACtC,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,gBAAgB,CAAC,IAAI,gBAAgB,GAAG,CAAC,CACvD;SACE,MAAM,CAAC,EAAE,CAAC,EAAE,CAAC,KAAK,EAAE,cAAc,CAAC,EAAE,CAAC,CAAC;SACvC,MAAM,CAAC,EAAE,CAAC,EAAE;QACX,MAAM,KAAK,GAAG,EAAE,CAAC,OAAO,CAAiB,IAAI,aAAa,GAAG,CAAC,CAAC;QAC/D,IAAI,KAAK,EAAE,CAAC;YACV,OAAO,8BAA8B,CAAC,QAAQ,CAC5C,KAAK,CAAC,KAAK,CAAC,OAA6B,CAC1C,CAAC;QACJ,CAAC;QACD,OAAO,KAAK,CAAC;IACf,CAAC,CAAC;SACD,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,YAAY,CAAC,CAAC;IAE9B,qBAAqB,CAAC,OAAO,CAAC,YAAY,CAAC,EAAE;QAC3C,MAAM,WAAW,GAAG,YAAY,CAAC,cAAc,EAAE,CAAC;QAClD,IAAI,CAAC,WAAW;YAAE,OAAO;QAEzB,YAAY,CAAC,UAAU,CAAC,WAAW,EAAE,MAAM,EAAE;YAC3C,IAAI;SACL,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,IAAI,EAAE,CAAC;AACT,CAAC,CAAC","sourcesContent":["import {\n  BLOCK_ID_ATTR,\n  type BlockComponent,\n  type Command,\n} from '@lumensuite/block-std';\nimport { INLINE_ROOT_ATTR, type InlineRootElement } from '@lumensuite/inline';\n\nimport type { AffineTextAttributes } from '../extension/index.js';\n\nimport { FORMAT_NATIVE_SUPPORT_FLAVOURS } from './consts.js';\n\n// for native range\nexport const formatNativeCommand: Command<\n  never,\n  never,\n  {\n    range?: Range;\n    styles: AffineTextAttributes;\n    mode?: 'replace' | 'merge';\n  }\n> = (ctx, next) => {\n  const { styles, mode = 'merge' } = ctx;\n\n  let range = ctx.range;\n  if (!range) {\n    const selection = document.getSelection();\n    if (!selection || selection.rangeCount === 0) return;\n    range = selection.getRangeAt(0);\n  }\n  if (!range) return;\n\n  const selectedInlineEditors = Array.from<InlineRootElement>(\n    ctx.std.host.querySelectorAll(`[${INLINE_ROOT_ATTR}]`)\n  )\n    .filter(el => range?.intersectsNode(el))\n    .filter(el => {\n      const block = el.closest<BlockComponent>(`[${BLOCK_ID_ATTR}]`);\n      if (block) {\n        return FORMAT_NATIVE_SUPPORT_FLAVOURS.includes(\n          block.model.flavour as LumenSuite.Flavour\n        );\n      }\n      return false;\n    })\n    .map(el => el.inlineEditor);\n\n  selectedInlineEditors.forEach(inlineEditor => {\n    const inlineRange = inlineEditor.getInlineRange();\n    if (!inlineRange) return;\n\n    inlineEditor.formatText(inlineRange, styles, {\n      mode,\n    });\n  });\n\n  next();\n};\n\ndeclare global {\n  namespace LumenSuite {\n    interface Commands {\n      formatNative: typeof formatNativeCommand;\n    }\n  }\n}\n"]}