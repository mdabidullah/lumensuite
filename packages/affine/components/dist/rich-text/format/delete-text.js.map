{"version":3,"file":"delete-text.js","sourceRoot":"","sources":["../../../src/rich-text/format/delete-text.ts"],"names":[],"mappings":"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","sourcesContent":["import type { Command, TextSelection } from '@blocksuite/block-std';\nimport type { Text } from '@blocksuite/store';\n\nimport { matchFlavours } from '@blocksuite/affine-shared/utils';\n\nexport const deleteTextCommand: Command<\n  'currentTextSelection',\n  never,\n  {\n    textSelection?: TextSelection;\n  }\n> = (ctx, next) => {\n  const textSelection = ctx.textSelection ?? ctx.currentTextSelection;\n  if (!textSelection) return;\n\n  const range = ctx.std.range.textSelectionToRange(textSelection);\n  if (!range) return;\n  const selectedElements = ctx.std.range.getSelectedBlockComponentsByRange(\n    range,\n    {\n      mode: 'flat',\n    }\n  );\n\n  const { from, to } = textSelection;\n\n  const fromElement = selectedElements.find(el => from.blockId === el.blockId);\n  if (!fromElement) return;\n\n  let fromText: Text | undefined;\n  if (matchFlavours(fromElement.model, ['affine:page'])) {\n    fromText = fromElement.model.title;\n  } else {\n    fromText = fromElement.model.text;\n  }\n  if (!fromText) return;\n  if (!to) {\n    fromText.delete(from.index, from.length);\n    ctx.std.selection.setGroup('note', [\n      ctx.std.selection.create('text', {\n        from: {\n          blockId: from.blockId,\n          index: from.index,\n          length: 0,\n        },\n        to: null,\n      }),\n    ]);\n    return next();\n  }\n\n  const toElement = selectedElements.find(el => to.blockId === el.blockId);\n  if (!toElement) return;\n\n  const toText = toElement.model.text;\n  if (!toText) return;\n\n  fromText.delete(from.index, from.length);\n  toText.delete(0, to.length);\n\n  fromText.join(toText);\n\n  selectedElements\n    .filter(el => el.model.id !== fromElement.model.id)\n    .forEach(el => {\n      ctx.std.doc.deleteBlock(el.model);\n    });\n\n  ctx.std.selection.setGroup('note', [\n    ctx.std.selection.create('text', {\n      from: {\n        blockId: to.blockId,\n        index: to.index,\n        length: 0,\n      },\n      to: null,\n    }),\n  ]);\n\n  next();\n};\n\ndeclare global {\n  namespace BlockSuite {\n    interface Commands {\n      deleteText: typeof deleteTextCommand;\n    }\n  }\n}\n"]}