{"version":3,"file":"text-style.js","sourceRoot":"","sources":["../../../src/rich-text/format/text-style.ts"],"names":[],"mappings":"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","sourcesContent":["import type { Command } from '@blocksuite/block-std';\n\nimport { toggleLinkPopup } from '@blocksuite/affine-components/rich-text';\nimport { INLINE_ROOT_ATTR, type InlineRootElement } from '@blocksuite/inline';\n\nimport type { AffineTextAttributes } from '../extension/index.js';\n\nimport { generateTextStyleCommand, getCombinedTextStyle } from './utils.js';\n\nexport const toggleBold: Command = generateTextStyleCommand('bold');\nexport const toggleItalic: Command = generateTextStyleCommand('italic');\nexport const toggleUnderline: Command = generateTextStyleCommand('underline');\nexport const toggleStrike: Command = generateTextStyleCommand('strike');\nexport const toggleCode: Command = generateTextStyleCommand('code');\n\nexport const toggleLink: Command = (_ctx, next) => {\n  const selection = document.getSelection();\n  if (!selection || selection.rangeCount === 0) return false;\n\n  const range = selection.getRangeAt(0);\n  if (range.collapsed) return false;\n  const inlineRoot = range.startContainer.parentElement?.closest<\n    InlineRootElement<AffineTextAttributes>\n  >(`[${INLINE_ROOT_ATTR}]`);\n  if (!inlineRoot) return false;\n\n  const inlineEditor = inlineRoot.inlineEditor;\n  const targetInlineRange = inlineEditor.getInlineRange();\n\n  if (!targetInlineRange || targetInlineRange.length === 0) return false;\n\n  const format = inlineEditor.getFormat(targetInlineRange);\n  if (format.link) {\n    inlineEditor.formatText(targetInlineRange, { link: null });\n    return next();\n  }\n\n  const abortController = new AbortController();\n  const popup = toggleLinkPopup(\n    inlineEditor,\n    'create',\n    targetInlineRange,\n    abortController\n  );\n  abortController.signal.addEventListener('abort', () => popup.remove());\n  return next();\n};\n\nexport const getTextStyle: Command<never, 'textStyle'> = (ctx, next) => {\n  const [result, innerCtx] = getCombinedTextStyle(\n    ctx.std.command.chain()\n  ).run();\n  if (!result) {\n    return false;\n  }\n\n  return next({ textStyle: innerCtx.textStyle });\n};\n\nexport const isTextStyleActive: Command<\n  never,\n  never,\n  { key: keyof AffineTextAttributes }\n> = (ctx, next) => {\n  const key = ctx.key;\n  const [result] = getCombinedTextStyle(ctx.std.command.chain())\n    .inline((ctx, next) => {\n      const { textStyle } = ctx;\n\n      if (textStyle && key in textStyle) {\n        return next();\n      }\n\n      return false;\n    })\n    .run();\n\n  if (!result) {\n    return false;\n  }\n\n  return next();\n};\n\ndeclare global {\n  namespace BlockSuite {\n    interface CommandContext {\n      textStyle?: AffineTextAttributes;\n    }\n\n    interface Commands {\n      toggleBold: typeof toggleBold;\n      toggleItalic: typeof toggleItalic;\n      toggleUnderline: typeof toggleUnderline;\n      toggleStrike: typeof toggleStrike;\n      toggleCode: typeof toggleCode;\n      toggleLink: typeof toggleLink;\n      getTextStyle: typeof getTextStyle;\n      isTextStyleActive: typeof isTextStyleActive;\n    }\n  }\n}\n"]}