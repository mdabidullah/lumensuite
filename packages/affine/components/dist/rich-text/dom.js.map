{"version":3,"file":"dom.js","sourceRoot":"","sources":["../../src/rich-text/dom.ts"],"names":[],"mappings":"AAIA,OAAO,EACL,sBAAsB,EACtB,aAAa,GACd,MAAM,iCAAiC,CAAC;AAIzC;;GAEG;AACH,MAAM,UAAU,kBAAkB,CAAC,UAAsB,EAAE,EAAU;IACnE,MAAM,cAAc,GAAG,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;IACpD,MAAM,QAAQ,GAAG,cAAc,EAAE,aAAa,CAAW,WAAW,CAAC,CAAC;IACtE,IAAI,CAAC,QAAQ;QAAE,OAAO,IAAI,CAAC;IAC3B,OAAO,QAAQ,CAAC;AAClB,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,gBAAgB,CAAC,UAAsB,EAAE,EAAU;IACvE,MAAM,cAAc,GAAG,MAAM,sBAAsB,CAAC,UAAU,EAAE,EAAE,CAAC,CAAC;IACpE,IAAI,CAAC,cAAc;QAAE,OAAO,IAAI,CAAC;IACjC,MAAM,cAAc,CAAC,cAAc,CAAC;IACpC,MAAM,QAAQ,GAAG,cAAc,EAAE,aAAa,CAAW,WAAW,CAAC,CAAC;IACtE,IAAI,CAAC,QAAQ;QAAE,OAAO,IAAI,CAAC;IAC3B,OAAO,QAAQ,CAAC;AAClB,CAAC;AAED,MAAM,UAAU,sBAAsB,CACpC,UAAsB,EACtB,KAA0B;IAE1B,MAAM,UAAU,GACd,OAAO,KAAK,KAAK,QAAQ;QACvB,CAAC,CAAC,UAAU,CAAC,GAAG,CAAC,GAAG,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE,KAAK;QAC3C,CAAC,CAAC,KAAK,CAAC;IACZ,wEAAwE;IACxE,IAAI,CAAC,UAAU,IAAI,aAAa,CAAC,UAAU,EAAE,CAAC,iBAAiB,CAAC,CAAC,EAAE,CAAC;QAClE,sFAAsF;QACtF,4EAA4E;QAC5E,OAAO,IAAI,CAAC;IACd,CAAC;IACD,MAAM,QAAQ,GAAG,kBAAkB,CAAC,UAAU,EAAE,UAAU,CAAC,EAAE,CAAC,CAAC;IAC/D,IAAI,CAAC,QAAQ;QAAE,OAAO,IAAI,CAAC;IAC3B,OAAO,QAAQ,CAAC,YAAY,CAAC;AAC/B,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,mBAAmB,CACvC,UAAsB,EACtB,KAAiB,EACjB,WAAwB;IAExB,MAAM,QAAQ,GAAG,MAAM,gBAAgB,CAAC,UAAU,EAAE,KAAK,CAAC,EAAE,CAAC,CAAC;IAC9D,IAAI,CAAC,QAAQ,EAAE,CAAC;QACd,OAAO;IACT,CAAC;IAED,MAAM,QAAQ,CAAC,cAAc,CAAC;IAC9B,MAAM,YAAY,GAAG,QAAQ,CAAC,YAAY,CAAC;IAC3C,IAAI,CAAC,YAAY,EAAE,CAAC;QAClB,OAAO;IACT,CAAC;IACD,YAAY,CAAC,cAAc,CAAC,WAAW,CAAC,CAAC;AAC3C,CAAC;AAED,MAAM,UAAU,cAAc,CAC5B,GAAkB,EAClB,EAAU,EACV,SAAiB,CAAC;IAElB,eAAe,CAAC,GAAG,EAAE,EAAE,EAAE,MAAM,CAAC,CAAC;AACnC,CAAC;AAED,MAAM,UAAU,eAAe,CAC7B,GAAkB,EAClB,EAAU,EACV,QAAgB,CAAC,EACjB,SAAiB,CAAC;IAElB,MAAM,EAAE,SAAS,EAAE,GAAG,GAAG,CAAC;IAC1B,SAAS,CAAC,QAAQ,CAAC,MAAM,EAAE;QACzB,SAAS,CAAC,MAAM,CAAC,MAAM,EAAE;YACvB,IAAI,EAAE,EAAE,OAAO,EAAE,EAAE,EAAE,KAAK,EAAE,MAAM,EAAE;YACpC,EAAE,EAAE,IAAI;SACT,CAAC;KACH,CAAC,CAAC;AACL,CAAC","sourcesContent":["import type { BlockStdScope, EditorHost } from '@lumensuite/block-std';\nimport type { InlineRange } from '@lumensuite/inline';\nimport type { BlockModel } from '@lumensuite/store';\n\nimport {\n  asyncGetBlockComponent,\n  matchFlavours,\n} from '@lumensuite/affine-shared/utils';\n\nimport type { RichText } from './rich-text.js';\n\n/**\n * In most cases, you not need RichText, you can use {@link getInlineEditorByModel} instead.\n */\nexport function getRichTextByModel(editorHost: EditorHost, id: string) {\n  const blockComponent = editorHost.view.getBlock(id);\n  const richText = blockComponent?.querySelector<RichText>('rich-text');\n  if (!richText) return null;\n  return richText;\n}\n\nexport async function asyncGetRichText(editorHost: EditorHost, id: string) {\n  const blockComponent = await asyncGetBlockComponent(editorHost, id);\n  if (!blockComponent) return null;\n  await blockComponent.updateComplete;\n  const richText = blockComponent?.querySelector<RichText>('rich-text');\n  if (!richText) return null;\n  return richText;\n}\n\nexport function getInlineEditorByModel(\n  editorHost: EditorHost,\n  model: BlockModel | string\n) {\n  const blockModel =\n    typeof model === 'string'\n      ? editorHost.std.doc.getBlock(model)?.model\n      : model;\n  // @ts-ignore TODO: migrate database model to `@lumensuite/affine-model`\n  if (!blockModel || matchFlavours(blockModel, ['affine:database'])) {\n    // Not support database model since it's may be have multiple inline editor instances.\n    // Support to enter the editing state through the Enter key in the database.\n    return null;\n  }\n  const richText = getRichTextByModel(editorHost, blockModel.id);\n  if (!richText) return null;\n  return richText.inlineEditor;\n}\n\nexport async function asyncSetInlineRange(\n  editorHost: EditorHost,\n  model: BlockModel,\n  inlineRange: InlineRange\n) {\n  const richText = await asyncGetRichText(editorHost, model.id);\n  if (!richText) {\n    return;\n  }\n\n  await richText.updateComplete;\n  const inlineEditor = richText.inlineEditor;\n  if (!inlineEditor) {\n    return;\n  }\n  inlineEditor.setInlineRange(inlineRange);\n}\n\nexport function focusTextModel(\n  std: BlockStdScope,\n  id: string,\n  offset: number = 0\n) {\n  selectTextModel(std, id, offset);\n}\n\nexport function selectTextModel(\n  std: BlockStdScope,\n  id: string,\n  index: number = 0,\n  length: number = 0\n) {\n  const { selection } = std;\n  selection.setGroup('note', [\n    selection.create('text', {\n      from: { blockId: id, index, length },\n      to: null,\n    }),\n  ]);\n}\n"]}