{"version":3,"file":"bracket.js","sourceRoot":"","sources":["../../../src/rich-text/keymap/bracket.ts"],"names":[],"mappings":"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","sourcesContent":["import type { BlockStdScope, UIEventHandler } from '@blocksuite/block-std';\nimport type { InlineEditor } from '@blocksuite/inline';\n\nimport { BRACKET_PAIRS } from '@blocksuite/affine-shared/consts';\nimport {\n  createDefaultDoc,\n  matchFlavours,\n} from '@blocksuite/affine-shared/utils';\n\nimport { getInlineEditorByModel } from '../dom.js';\nimport { insertLinkedNode } from '../linked-node.js';\n\nexport const bracketKeymap = (\n  std: BlockStdScope\n): Record<string, UIEventHandler> => {\n  const keymap = BRACKET_PAIRS.reduce(\n    (acc, pair) => {\n      return {\n        ...acc,\n        [pair.right]: ctx => {\n          const { doc, selection } = std;\n          if (doc.readonly) return;\n\n          const textSelection = selection.find('text');\n          if (!textSelection) return;\n          const model = doc.getBlock(textSelection.from.blockId)?.model;\n          if (!model) return;\n          if (!matchFlavours(model, ['affine:code'])) return;\n          const inlineEditor = getInlineEditorByModel(\n            std.host,\n            textSelection.from.blockId\n          );\n          if (!inlineEditor) return;\n          const inlineRange = inlineEditor.getInlineRange();\n          if (!inlineRange) return;\n          const left = inlineEditor.yText.toString()[inlineRange.index - 1];\n          const right = inlineEditor.yText.toString()[inlineRange.index];\n          if (pair.left === left && pair.right === right) {\n            inlineEditor.setInlineRange({\n              index: inlineRange.index + 1,\n              length: 0,\n            });\n            ctx.get('keyboardState').raw.preventDefault();\n          }\n        },\n        [pair.left]: ctx => {\n          const { doc, selection } = std;\n          if (doc.readonly) return;\n\n          const textSelection = selection.find('text');\n          if (!textSelection) return;\n          const model = doc.getBlock(textSelection.from.blockId)?.model;\n          if (!model) return;\n\n          const isCodeBlock = matchFlavours(model, ['affine:code']);\n          // When selection is collapsed, only trigger auto complete in code block\n          if (textSelection.isCollapsed() && !isCodeBlock) return;\n          if (!textSelection.isInSameBlock()) return;\n\n          ctx.get('keyboardState').raw.preventDefault();\n\n          const inlineEditor = getInlineEditorByModel(\n            std.host,\n            textSelection.from.blockId\n          );\n          if (!inlineEditor) return;\n          const inlineRange = inlineEditor.getInlineRange();\n          if (!inlineRange) return;\n          const selectedText = inlineEditor.yText\n            .toString()\n            .slice(inlineRange.index, inlineRange.index + inlineRange.length);\n          if (!isCodeBlock && pair.name === 'square bracket') {\n            // [[Selected text]] should automatically be converted to a Linked doc with the title \"Selected text\".\n            // See https://github.com/toeverything/blocksuite/issues/2730\n            const success = tryConvertToLinkedDoc(std, inlineEditor);\n            if (success) return true;\n          }\n          inlineEditor.insertText(\n            inlineRange,\n            pair.left + selectedText + pair.right\n          );\n\n          inlineEditor.setInlineRange({\n            index: inlineRange.index + 1,\n            length: inlineRange.length,\n          });\n\n          return true;\n        },\n      };\n    },\n    {} as Record<string, UIEventHandler>\n  );\n\n  return {\n    ...keymap,\n    '`': ctx => {\n      const { doc, selection } = std;\n      if (doc.readonly) return;\n\n      const textSelection = selection.find('text');\n      if (!textSelection || textSelection.isCollapsed()) return;\n      if (!textSelection.isInSameBlock()) return;\n      const model = doc.getBlock(textSelection.from.blockId)?.model;\n      if (!model) return;\n\n      ctx.get('keyboardState').raw.preventDefault();\n      const inlineEditor = getInlineEditorByModel(\n        std.host,\n        textSelection.from.blockId\n      );\n      if (!inlineEditor) return;\n      const inlineRange = inlineEditor.getInlineRange();\n      if (!inlineRange) return;\n      inlineEditor.formatText(inlineRange, { code: true });\n\n      inlineEditor.setInlineRange({\n        index: inlineRange.index,\n        length: inlineRange.length,\n      });\n\n      return true;\n    },\n  };\n};\n\nfunction tryConvertToLinkedDoc(std: BlockStdScope, inlineEditor: InlineEditor) {\n  const root = std.doc.root;\n  if (!root) return false;\n  const linkedDocWidgetEle = std.view.getWidget(\n    'affine-linked-doc-widget',\n    root.id\n  );\n  if (!linkedDocWidgetEle) return false;\n\n  const inlineRange = inlineEditor.getInlineRange();\n  if (!inlineRange) return false;\n  const text = inlineEditor.yText.toString();\n  const left = text[inlineRange.index - 1];\n  const right = text[inlineRange.index + inlineRange.length];\n  const needConvert = left === '[' && right === ']';\n  if (!needConvert) return false;\n\n  const docName = text.slice(\n    inlineRange.index,\n    inlineRange.index + inlineRange.length\n  );\n  inlineEditor.deleteText({\n    index: inlineRange.index - 1,\n    length: inlineRange.length + 2,\n  });\n  inlineEditor.setInlineRange({ index: inlineRange.index - 1, length: 0 });\n\n  const doc = createDefaultDoc(std.doc.collection, {\n    title: docName,\n  });\n  insertLinkedNode({\n    inlineEditor,\n    docId: doc.id,\n  });\n  return true;\n}\n"]}