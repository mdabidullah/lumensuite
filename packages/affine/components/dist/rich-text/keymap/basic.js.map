{"version":3,"file":"basic.js","sourceRoot":"","sources":["../../../src/rich-text/keymap/basic.ts"],"names":[],"mappings":"AAEA,OAAO,EACL,cAAc,EACd,sBAAsB,EACtB,eAAe,GAChB,MAAM,WAAW,CAAC;AAEnB,MAAM,CAAC,MAAM,gBAAgB,GAAG,CAC9B,GAAkB,EACc,EAAE;IAClC,OAAO;QACL,OAAO,EAAE,GAAG,EAAE;YACZ,MAAM,IAAI,GAAG,GAAG,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YACxC,IAAI,CAAC,IAAI;gBAAE,OAAO;YAClB,MAAM,MAAM,GAAG,sBAAsB,CAAC,GAAG,CAAC,IAAI,EAAE,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YACnE,IAAI,CAAC,MAAM;gBAAE,OAAO;YACpB,OAAO,CAAC,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,cAAc,EAAE,CAAC,CAAC;QACtD,CAAC;QACD,SAAS,EAAE,GAAG,EAAE;YACd,MAAM,IAAI,GAAG,GAAG,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YACxC,IAAI,CAAC,IAAI;gBAAE,OAAO;YAClB,MAAM,MAAM,GAAG,sBAAsB,CAAC,GAAG,CAAC,IAAI,EAAE,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YACnE,IAAI,CAAC,MAAM;gBAAE,OAAO;YACpB,OAAO,CAAC,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,cAAc,EAAE,CAAC,CAAC;QACrD,CAAC;QACD,MAAM,EAAE,GAAG,CAAC,EAAE;YACZ,MAAM,IAAI,GAAG,GAAG,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YACxC,IAAI,CAAC,IAAI;gBAAE,OAAO;YAElB,WAAW,CAAC,GAAG,EAAE,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YACpC,GAAG,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC,GAAG,CAAC,eAAe,EAAE,CAAC;YAC/C,OAAO,IAAI,CAAC;QACd,CAAC;QACD,OAAO,EAAE,GAAG,CAAC,EAAE;YACb,MAAM,IAAI,GAAG,GAAG,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YACxC,IAAI,CAAC,IAAI;gBAAE,OAAO;YAElB,MAAM,KAAK,GAAG,GAAG,CAAC,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE,KAAK,CAAC;YACzD,IAAI,CAAC,KAAK,IAAI,CAAC,KAAK,CAAC,IAAI;gBAAE,OAAO;YAElC,GAAG,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC,GAAG,CAAC,cAAc,EAAE,CAAC;YAE9C,IACE,IAAI,CAAC,IAAI,CAAC,KAAK,KAAK,CAAC;gBACrB,IAAI,CAAC,IAAI,CAAC,MAAM,KAAK,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,EAC5C,CAAC;gBACD,WAAW,CAAC,GAAG,EAAE,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;gBACpC,OAAO,IAAI,CAAC;YACd,CAAC;YAED,eAAe,CAAC,GAAG,EAAE,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,EAAE,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;YACpE,OAAO,IAAI,CAAC;QACd,CAAC;QACD,KAAK,EAAE,GAAG,CAAC,EAAE;YACX,MAAM,MAAM,GAAG,GAAG,CAAC,SAAS,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;YAC7C,MAAM,OAAO,GAAG,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,OAAO,CAAC;YAEvC,IAAI,CAAC,OAAO;gBAAE,OAAO;YACrB,MAAM,KAAK,GAAG,GAAG,CAAC,GAAG,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAE,KAAK,CAAC;YAC/C,IAAI,CAAC,KAAK,IAAI,CAAC,KAAK,CAAC,IAAI;gBAAE,OAAO;YAElC,GAAG,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC,GAAG,CAAC,cAAc,EAAE,CAAC;YAC9C,cAAc,CAAC,GAAG,EAAE,OAAO,EAAE,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;YACtD,OAAO,IAAI,CAAC;QACd,CAAC;KACF,CAAC;AACJ,CAAC,CAAC;AAEF,SAAS,WAAW,CAAC,GAAkB,EAAE,OAAe;IACtD,GAAG,CAAC,SAAS,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,SAAS,CAAC,MAAM,CAAC,OAAO,EAAE,EAAE,OAAO,EAAE,CAAC,CAAC,CAAC,CAAC;AAC/E,CAAC","sourcesContent":["import type { BlockStdScope, UIEventHandler } from '@blocksuite/block-std';\n\nimport {\n  focusTextModel,\n  getInlineEditorByModel,\n  selectTextModel,\n} from '../dom.js';\n\nexport const textCommonKeymap = (\n  std: BlockStdScope\n): Record<string, UIEventHandler> => {\n  return {\n    ArrowUp: () => {\n      const text = std.selection.find('text');\n      if (!text) return;\n      const inline = getInlineEditorByModel(std.host, text.from.blockId);\n      if (!inline) return;\n      return !inline.isFirstLine(inline.getInlineRange());\n    },\n    ArrowDown: () => {\n      const text = std.selection.find('text');\n      if (!text) return;\n      const inline = getInlineEditorByModel(std.host, text.from.blockId);\n      if (!inline) return;\n      return !inline.isLastLine(inline.getInlineRange());\n    },\n    Escape: ctx => {\n      const text = std.selection.find('text');\n      if (!text) return;\n\n      selectBlock(std, text.from.blockId);\n      ctx.get('keyboardState').raw.stopPropagation();\n      return true;\n    },\n    'Mod-a': ctx => {\n      const text = std.selection.find('text');\n      if (!text) return;\n\n      const model = std.doc.getBlock(text.from.blockId)?.model;\n      if (!model || !model.text) return;\n\n      ctx.get('keyboardState').raw.preventDefault();\n\n      if (\n        text.from.index === 0 &&\n        text.from.length === model.text.yText.length\n      ) {\n        selectBlock(std, text.from.blockId);\n        return true;\n      }\n\n      selectTextModel(std, text.from.blockId, 0, model.text.yText.length);\n      return true;\n    },\n    Enter: ctx => {\n      const blocks = std.selection.filter('block');\n      const blockId = blocks.at(-1)?.blockId;\n\n      if (!blockId) return;\n      const model = std.doc.getBlock(blockId)?.model;\n      if (!model || !model.text) return;\n\n      ctx.get('keyboardState').raw.preventDefault();\n      focusTextModel(std, blockId, model.text.yText.length);\n      return true;\n    },\n  };\n};\n\nfunction selectBlock(std: BlockStdScope, blockId: string) {\n  std.selection.setGroup('note', [std.selection.create('block', { blockId })]);\n}\n"]}