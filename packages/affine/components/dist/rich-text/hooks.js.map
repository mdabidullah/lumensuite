{"version":3,"file":"hooks.js","sourceRoot":"","sources":["../../src/rich-text/hooks.ts"],"names":[],"mappings":"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","sourcesContent":["import type {\n  BeforeinputHookCtx,\n  CompositionEndHookCtx,\n  HookContext,\n} from '@blocksuite/inline';\n\nimport { isStrictUrl } from '@blocksuite/affine-shared/utils';\n\nimport type { AffineTextAttributes } from './extension/index.js';\n\nconst EDGE_IGNORED_ATTRIBUTES = ['code', 'link'] as const;\nconst GLOBAL_IGNORED_ATTRIBUTES = [] as const;\n\nconst autoIdentifyLink = (ctx: HookContext<AffineTextAttributes>) => {\n  // auto identify link only on pressing space\n  if (ctx.data !== ' ') {\n    return;\n  }\n\n  // space is typed at the end of link, remove the link attribute on typed space\n  if (ctx.attributes?.link) {\n    if (ctx.inlineRange.index === ctx.inlineEditor.yText.length) {\n      delete ctx.attributes['link'];\n    }\n    return;\n  }\n\n  const lineInfo = ctx.inlineEditor.getLine(ctx.inlineRange.index);\n  if (!lineInfo) {\n    return;\n  }\n  const { line, lineIndex, rangeIndexRelatedToLine } = lineInfo;\n\n  if (lineIndex !== 0) {\n    return;\n  }\n\n  const verifyData = line.vTextContent\n    .slice(0, rangeIndexRelatedToLine)\n    .split(' ');\n\n  const verifyStr = verifyData[verifyData.length - 1];\n\n  const isUrl = isStrictUrl(verifyStr);\n\n  if (!isUrl) {\n    return;\n  }\n\n  const startIndex = ctx.inlineRange.index - verifyStr.length;\n\n  ctx.inlineEditor.formatText(\n    {\n      index: startIndex,\n      length: verifyStr.length,\n    },\n    {\n      link: verifyStr,\n    }\n  );\n};\n\nfunction handleExtendedAttributes(\n  ctx:\n    | BeforeinputHookCtx<AffineTextAttributes>\n    | CompositionEndHookCtx<AffineTextAttributes>\n) {\n  const { data, inlineEditor, inlineRange } = ctx;\n  const deltas = inlineEditor.getDeltasByInlineRange(inlineRange);\n  if (data && data.length > 0 && data !== '\\n') {\n    if (\n      // cursor is in the between of two deltas\n      (deltas.length > 1 ||\n        // cursor is in the end of line or in the middle of a delta\n        (deltas.length === 1 && inlineRange.index !== 0)) &&\n      !inlineEditor.isEmbed(deltas[0][0]) // embeds should not be extended\n    ) {\n      // each new text inserted by inline editor will not contain any attributes,\n      // but we want to keep the attributes of previous text or current text where the cursor is in\n      // here are two cases:\n      // 1. aaa**b|bb**ccc --input 'd'--> aaa**bdbb**ccc, d should extend the bold attribute\n      // 2. aaa**bbb|**ccc --input 'd'--> aaa**bbbd**ccc, d should extend the bold attribute\n      const { attributes } = deltas[0][0];\n      if (\n        deltas.length !== 1 ||\n        inlineRange.index === inlineEditor.yText.length\n      ) {\n        // `EDGE_IGNORED_ATTRIBUTES` is which attributes should be ignored in case 2\n        EDGE_IGNORED_ATTRIBUTES.forEach(attr => {\n          delete attributes?.[attr];\n        });\n      }\n\n      // `GLOBAL_IGNORED_ATTRIBUTES` is which attributes should be ignored in case 1, 2\n      GLOBAL_IGNORED_ATTRIBUTES.forEach(attr => {\n        delete attributes?.[attr];\n      });\n\n      ctx.attributes = attributes ?? {};\n    }\n  }\n\n  return ctx;\n}\n\nexport const onVBeforeinput = (\n  ctx: BeforeinputHookCtx<AffineTextAttributes>\n) => {\n  handleExtendedAttributes(ctx);\n  autoIdentifyLink(ctx);\n};\n\nexport const onVCompositionEnd = (\n  ctx: CompositionEndHookCtx<AffineTextAttributes>\n) => {\n  handleExtendedAttributes(ctx);\n};\n"]}