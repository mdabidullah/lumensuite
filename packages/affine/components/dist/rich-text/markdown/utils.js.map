{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../../src/rich-text/markdown/utils.ts"],"names":[],"mappings":"AAIA,OAAO,EAAE,cAAc,EAAE,MAAM,WAAW,CAAC;AAE3C,MAAM,UAAU,aAAa,CAAC,YAA0B;IACtD,MAAM,WAAW,GAAG,YAAY,CAAC,cAAc,EAAE,CAAC;IAClD,IAAI,CAAC,WAAW;QAAE,OAAO,EAAE,CAAC;IAC5B,MAAM,YAAY,GAAG,YAAY,CAAC,WAAW,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;IAC3D,IAAI,YAAY,KAAK,CAAC,CAAC,IAAI,WAAW,CAAC,KAAK,GAAG,YAAY,EAAE,CAAC;QAC5D,OAAO,EAAE,CAAC;IACZ,CAAC;IACD,MAAM,SAAS,GAAG,YAAY,CAAC,YAAY,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;IAC/D,IAAI,CAAC,SAAS;QAAE,OAAO,EAAE,CAAC;IAC1B,MAAM,CAAC,SAAS,EAAE,WAAW,CAAC,GAAG,SAAS,CAAC;IAC3C,OAAO,SAAS,CAAC,WAAW;QAC1B,CAAC,CAAC,SAAS,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,EAAE,WAAW,CAAC;QAC7C,CAAC,CAAC,EAAE,CAAC;AACT,CAAC;AAED,MAAM,UAAU,aAAa,CAC3B,GAAkB,EAClB,KAAiB,EACjB,KAAa;IAEb,MAAM,EAAE,IAAI,EAAE,GAAG,KAAK,CAAC;IACvB,IAAI,CAAC,IAAI;QAAE,OAAO;IAClB,kDAAkD;IAClD,oEAAoE;IACpE,iCAAiC;IACjC,mBAAmB;IACnB,yBAAyB;IACzB,oBAAoB;IACpB,IAAI,CAAC,MAAM,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;IACxB,cAAc,CAAC,GAAG,EAAE,KAAK,CAAC,EAAE,EAAE,KAAK,GAAG,CAAC,CAAC,CAAC;IACzC,GAAG,CAAC,GAAG,CAAC,WAAW,EAAE,CAAC;IACtB,IAAI,CAAC,MAAM,CAAC,CAAC,EAAE,KAAK,GAAG,CAAC,CAAC,CAAC;AAC5B,CAAC","sourcesContent":["import type { BlockStdScope } from '@lumensuite/block-std';\nimport type { InlineEditor } from '@lumensuite/inline';\nimport type { BlockModel } from '@lumensuite/store';\n\nimport { focusTextModel } from '../dom.js';\n\nexport function getPrefixText(inlineEditor: InlineEditor) {\n  const inlineRange = inlineEditor.getInlineRange();\n  if (!inlineRange) return '';\n  const firstLineEnd = inlineEditor.yTextString.search(/\\n/);\n  if (firstLineEnd !== -1 && inlineRange.index > firstLineEnd) {\n    return '';\n  }\n  const textPoint = inlineEditor.getTextPoint(inlineRange.index);\n  if (!textPoint) return '';\n  const [leafStart, offsetStart] = textPoint;\n  return leafStart.textContent\n    ? leafStart.textContent.slice(0, offsetStart)\n    : '';\n}\n\nexport function beforeConvert(\n  std: BlockStdScope,\n  model: BlockModel,\n  index: number\n) {\n  const { text } = model;\n  if (!text) return;\n  // Add a space after the text, then stop capturing\n  // So when the user undo, the prefix will be restored with a `space`\n  // Ex. (| is the cursor position)\n  // *| <- user input\n  // <space> -> bullet list\n  // *<space>| -> undo\n  text.insert(' ', index);\n  focusTextModel(std, model.id, index + 1);\n  std.doc.captureSync();\n  text.delete(0, index + 1);\n}\n"]}