{"version":3,"file":"list.js","sourceRoot":"","sources":["../../../src/rich-text/markdown/list.ts"],"names":[],"mappings":"AAIA,OAAO,EAAE,aAAa,EAAE,cAAc,EAAE,MAAM,iCAAiC,CAAC;AAEhF,OAAO,EAAE,cAAc,EAAE,MAAM,WAAW,CAAC;AAC3C,OAAO,EAAE,aAAa,EAAE,MAAM,YAAY,CAAC;AAE3C,MAAM,UAAU,MAAM,CACpB,GAAkB,EAClB,KAAiB,EACjB,QAAkB,EAClB,MAAc,EACd,eAAoC;IAEpC,IAAI,CAAC,aAAa,CAAC,KAAK,EAAE,CAAC,kBAAkB,CAAC,CAAC,EAAE,CAAC;QAChD,OAAO;IACT,CAAC;IACD,MAAM,EAAE,GAAG,EAAE,GAAG,GAAG,CAAC;IACpB,MAAM,MAAM,GAAG,GAAG,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;IACpC,IAAI,CAAC,MAAM;QAAE,OAAO;IAEpB,aAAa,CAAC,GAAG,EAAE,KAAK,EAAE,MAAM,CAAC,MAAM,CAAC,CAAC;IAEzC,IAAI,QAAQ,KAAK,UAAU,EAAE,CAAC;QAC5B,MAAM,KAAK,GAAG,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QAC7C,MAAM,UAAU,GAAG;YACjB,IAAI,EAAE,QAAQ;YACd,IAAI,EAAE,KAAK,CAAC,IAAI,EAAE,KAAK,EAAE;YACzB,QAAQ,EAAE,KAAK,CAAC,QAAQ;YACxB,GAAG,eAAe;SACnB,CAAC;QACF,GAAG,CAAC,WAAW,CAAC,KAAK,EAAE;YACrB,cAAc,EAAE,KAAK;SACtB,CAAC,CAAC;QAEH,MAAM,EAAE,GAAG,GAAG,CAAC,QAAQ,CAAC,aAAa,EAAE,UAAU,EAAE,MAAM,EAAE,KAAK,CAAC,CAAC;QAClE,cAAc,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;QACxB,OAAO,EAAE,CAAC;IACZ,CAAC;IAED,IAAI,KAAK,GAAG,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;IAC1C,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC;QAAE,KAAK,GAAG,CAAC,CAAC;IAExC,MAAM,EAAE,GAAG,cAAc,CAAC,GAAG,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;IAC7C,IAAI,CAAC,EAAE;QAAE,OAAO;IAEhB,cAAc,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;IACxB,OAAO,EAAE,CAAC;AACZ,CAAC","sourcesContent":["import type { ListProps, ListType } from '@blocksuite/affine-model';\nimport type { BlockStdScope } from '@blocksuite/block-std';\nimport type { BlockModel } from '@blocksuite/store';\n\nimport { matchFlavours, toNumberedList } from '@blocksuite/affine-shared/utils';\n\nimport { focusTextModel } from '../dom.js';\nimport { beforeConvert } from './utils.js';\n\nexport function toList(\n  std: BlockStdScope,\n  model: BlockModel,\n  listType: ListType,\n  prefix: string,\n  otherProperties?: Partial<ListProps>\n) {\n  if (!matchFlavours(model, ['affine:paragraph'])) {\n    return;\n  }\n  const { doc } = std;\n  const parent = doc.getParent(model);\n  if (!parent) return;\n\n  beforeConvert(std, model, prefix.length);\n\n  if (listType !== 'numbered') {\n    const index = parent.children.indexOf(model);\n    const blockProps = {\n      type: listType,\n      text: model.text?.clone(),\n      children: model.children,\n      ...otherProperties,\n    };\n    doc.deleteBlock(model, {\n      deleteChildren: false,\n    });\n\n    const id = doc.addBlock('affine:list', blockProps, parent, index);\n    focusTextModel(std, id);\n    return id;\n  }\n\n  let order = parseInt(prefix.slice(0, -1));\n  if (!Number.isInteger(order)) order = 1;\n\n  const id = toNumberedList(std, model, order);\n  if (!id) return;\n\n  focusTextModel(std, id);\n  return id;\n}\n"]}