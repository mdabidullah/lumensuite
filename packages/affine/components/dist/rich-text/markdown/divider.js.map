{"version":3,"file":"divider.js","sourceRoot":"","sources":["../../../src/rich-text/markdown/divider.ts"],"names":[],"mappings":"AAGA,OAAO,EAAE,aAAa,EAAE,MAAM,iCAAiC,CAAC;AAEhE,OAAO,EAAE,cAAc,EAAE,MAAM,WAAW,CAAC;AAC3C,OAAO,EAAE,aAAa,EAAE,MAAM,YAAY,CAAC;AAE3C,MAAM,UAAU,SAAS,CACvB,GAAkB,EAClB,KAAiB,EACjB,MAAc;IAEd,MAAM,EAAE,GAAG,EAAE,GAAG,GAAG,CAAC;IACpB,IACE,aAAa,CAAC,KAAK,EAAE,CAAC,gBAAgB,CAAC,CAAC;QACxC,CAAC,aAAa,CAAC,KAAK,EAAE,CAAC,kBAAkB,CAAC,CAAC,IAAI,KAAK,CAAC,IAAI,KAAK,OAAO,CAAC,EACtE,CAAC;QACD,OAAO;IACT,CAAC;IAED,MAAM,MAAM,GAAG,GAAG,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;IACpC,IAAI,CAAC,MAAM;QAAE,OAAO;IAEpB,MAAM,KAAK,GAAG,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;IAC7C,aAAa,CAAC,GAAG,EAAE,KAAK,EAAE,MAAM,CAAC,MAAM,CAAC,CAAC;IACzC,MAAM,UAAU,GAAG;QACjB,QAAQ,EAAE,KAAK,CAAC,QAAQ;KACzB,CAAC;IACF,GAAG,CAAC,QAAQ,CAAC,gBAAgB,EAAE,UAAU,EAAE,MAAM,EAAE,KAAK,CAAC,CAAC;IAE1D,MAAM,SAAS,GAAG,MAAM,CAAC,QAAQ,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;IAC7C,IAAI,EAAE,GAAG,SAAS,EAAE,EAAE,CAAC;IACvB,IAAI,CAAC,EAAE,EAAE,CAAC;QACR,EAAE,GAAG,GAAG,CAAC,QAAQ,CAAC,kBAAkB,EAAE,EAAE,EAAE,MAAM,CAAC,CAAC;IACpD,CAAC;IACD,cAAc,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;IACxB,OAAO,EAAE,CAAC;AACZ,CAAC","sourcesContent":["import type { BlockStdScope } from '@lumensuite/block-std';\nimport type { BlockModel } from '@lumensuite/store';\n\nimport { matchFlavours } from '@lumensuite/affine-shared/utils';\n\nimport { focusTextModel } from '../dom.js';\nimport { beforeConvert } from './utils.js';\n\nexport function toDivider(\n  std: BlockStdScope,\n  model: BlockModel,\n  prefix: string\n) {\n  const { doc } = std;\n  if (\n    matchFlavours(model, ['affine:divider']) ||\n    (matchFlavours(model, ['affine:paragraph']) && model.type === 'quote')\n  ) {\n    return;\n  }\n\n  const parent = doc.getParent(model);\n  if (!parent) return;\n\n  const index = parent.children.indexOf(model);\n  beforeConvert(std, model, prefix.length);\n  const blockProps = {\n    children: model.children,\n  };\n  doc.addBlock('affine:divider', blockProps, parent, index);\n\n  const nextBlock = parent.children[index + 1];\n  let id = nextBlock?.id;\n  if (!id) {\n    id = doc.addBlock('affine:paragraph', {}, parent);\n  }\n  focusTextModel(std, id);\n  return id;\n}\n"]}