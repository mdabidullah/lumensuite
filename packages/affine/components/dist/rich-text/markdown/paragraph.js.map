{"version":3,"file":"paragraph.js","sourceRoot":"","sources":["../../../src/rich-text/markdown/paragraph.ts"],"names":[],"mappings":"AAIA,OAAO,EAAE,aAAa,EAAE,MAAM,iCAAiC,CAAC;AAEhE,OAAO,EAAE,cAAc,EAAE,MAAM,WAAW,CAAC;AAC3C,OAAO,EAAE,aAAa,EAAE,MAAM,YAAY,CAAC;AAE3C,MAAM,UAAU,WAAW,CACzB,GAAkB,EAClB,KAAiB,EACjB,IAAmB,EACnB,MAAc;IAEd,MAAM,EAAE,GAAG,EAAE,GAAG,GAAG,CAAC;IACpB,IAAI,CAAC,aAAa,CAAC,KAAK,EAAE,CAAC,kBAAkB,CAAC,CAAC,EAAE,CAAC;QAChD,MAAM,MAAM,GAAG,GAAG,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;QACpC,IAAI,CAAC,MAAM;YAAE,OAAO;QAEpB,MAAM,KAAK,GAAG,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QAE7C,aAAa,CAAC,GAAG,EAAE,KAAK,EAAE,MAAM,CAAC,MAAM,CAAC,CAAC;QAEzC,MAAM,UAAU,GAAG;YACjB,IAAI,EAAE,IAAI;YACV,IAAI,EAAE,KAAK,CAAC,IAAI,EAAE,KAAK,EAAE;YACzB,QAAQ,EAAE,KAAK,CAAC,QAAQ;SACzB,CAAC;QACF,GAAG,CAAC,WAAW,CAAC,KAAK,EAAE,EAAE,cAAc,EAAE,KAAK,EAAE,CAAC,CAAC;QAClD,MAAM,EAAE,GAAG,GAAG,CAAC,QAAQ,CAAC,kBAAkB,EAAE,UAAU,EAAE,MAAM,EAAE,KAAK,CAAC,CAAC;QAEvE,cAAc,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;QACxB,OAAO,EAAE,CAAC;IACZ,CAAC;IAED,IAAI,aAAa,CAAC,KAAK,EAAE,CAAC,kBAAkB,CAAC,CAAC,IAAI,KAAK,CAAC,IAAI,KAAK,IAAI,EAAE,CAAC;QACtE,aAAa,CAAC,GAAG,EAAE,KAAK,EAAE,MAAM,CAAC,MAAM,CAAC,CAAC;QAEzC,GAAG,CAAC,WAAW,CAAC,KAAK,EAAE,EAAE,IAAI,EAAE,CAAC,CAAC;QAEjC,cAAc,CAAC,GAAG,EAAE,KAAK,CAAC,EAAE,CAAC,CAAC;IAChC,CAAC;IAED,qEAAqE;IACrE,OAAO,KAAK,CAAC,EAAE,CAAC;AAClB,CAAC","sourcesContent":["import type { ParagraphType } from '@blocksuite/affine-model';\nimport type { BlockStdScope } from '@blocksuite/block-std';\nimport type { BlockModel } from '@blocksuite/store';\n\nimport { matchFlavours } from '@blocksuite/affine-shared/utils';\n\nimport { focusTextModel } from '../dom.js';\nimport { beforeConvert } from './utils.js';\n\nexport function toParagraph(\n  std: BlockStdScope,\n  model: BlockModel,\n  type: ParagraphType,\n  prefix: string\n) {\n  const { doc } = std;\n  if (!matchFlavours(model, ['affine:paragraph'])) {\n    const parent = doc.getParent(model);\n    if (!parent) return;\n\n    const index = parent.children.indexOf(model);\n\n    beforeConvert(std, model, prefix.length);\n\n    const blockProps = {\n      type: type,\n      text: model.text?.clone(),\n      children: model.children,\n    };\n    doc.deleteBlock(model, { deleteChildren: false });\n    const id = doc.addBlock('affine:paragraph', blockProps, parent, index);\n\n    focusTextModel(std, id);\n    return id;\n  }\n\n  if (matchFlavours(model, ['affine:paragraph']) && model.type !== type) {\n    beforeConvert(std, model, prefix.length);\n\n    doc.updateBlock(model, { type });\n\n    focusTextModel(std, model.id);\n  }\n\n  // If the model is already a paragraph with the same type, do nothing\n  return model.id;\n}\n"]}