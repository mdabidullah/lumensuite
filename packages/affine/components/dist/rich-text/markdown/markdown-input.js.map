{"version":3,"file":"markdown-input.js","sourceRoot":"","sources":["../../../src/rich-text/markdown/markdown-input.ts"],"names":[],"mappings":"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","sourcesContent":["import type { BlockStdScope } from '@lumensuite/block-std';\n\nimport {\n  isMarkdownPrefix,\n  matchFlavours,\n} from '@lumensuite/affine-shared/utils';\n\nimport { getInlineEditorByModel } from '../dom.js';\nimport { toDivider } from './divider.js';\nimport { toList } from './list.js';\nimport { toParagraph } from './paragraph.js';\nimport { toCode } from './to-code.js';\nimport { getPrefixText } from './utils.js';\n\nexport function markdownInput(\n  std: BlockStdScope,\n  id?: string\n): string | undefined {\n  if (!id) {\n    const selection = std.selection;\n    const text = selection.find('text');\n    id = text?.from.blockId;\n  }\n  if (!id) return;\n  const model = std.doc.getBlock(id)?.model;\n  if (!model) return;\n  const inline = getInlineEditorByModel(std.host, model);\n  if (!inline) return;\n  const range = inline.getInlineRange();\n  if (!range) return;\n\n  const prefixText = getPrefixText(inline);\n  if (!isMarkdownPrefix(prefixText)) return;\n\n  const isParagraph = matchFlavours(model, ['affine:paragraph']);\n  const isHeading = isParagraph && model.type.startsWith('h');\n  const isParagraphQuoteBlock = isParagraph && model.type === 'quote';\n  const isCodeBlock = matchFlavours(model, ['affine:code']);\n  if (isHeading || isParagraphQuoteBlock || isCodeBlock) return;\n\n  const lineInfo = inline.getLine(range.index);\n  if (!lineInfo) return;\n\n  const { lineIndex, rangeIndexRelatedToLine } = lineInfo;\n  if (lineIndex !== 0 || rangeIndexRelatedToLine > prefixText.length) return;\n\n  // try to add code block\n  const codeMatch = prefixText.match(/^```([a-zA-Z0-9]*)$/g);\n  if (codeMatch) {\n    return toCode(std, model, prefixText, codeMatch[0].slice(3));\n  }\n\n  switch (prefixText.trim()) {\n    case '[]':\n    case '[ ]':\n      return toList(std, model, 'todo', prefixText, {\n        checked: false,\n      });\n    case '[x]':\n      return toList(std, model, 'todo', prefixText, {\n        checked: true,\n      });\n    case '-':\n    case '*':\n      return toList(std, model, 'bulleted', prefixText);\n    case '***':\n    case '---':\n      return toDivider(std, model, prefixText);\n    case '#':\n      return toParagraph(std, model, 'h1', prefixText);\n    case '##':\n      return toParagraph(std, model, 'h2', prefixText);\n    case '###':\n      return toParagraph(std, model, 'h3', prefixText);\n    case '####':\n      return toParagraph(std, model, 'h4', prefixText);\n    case '#####':\n      return toParagraph(std, model, 'h5', prefixText);\n    case '######':\n      return toParagraph(std, model, 'h6', prefixText);\n    case '>':\n      return toParagraph(std, model, 'quote', prefixText);\n    default:\n      return toList(std, model, 'numbered', prefixText);\n  }\n}\n"]}