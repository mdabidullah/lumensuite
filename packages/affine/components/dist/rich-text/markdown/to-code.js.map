{"version":3,"file":"to-code.js","sourceRoot":"","sources":["../../../src/rich-text/markdown/to-code.ts"],"names":[],"mappings":"AAGA,OAAO,EAAE,aAAa,EAAE,MAAM,iCAAiC,CAAC;AAEhE,OAAO,EAAE,cAAc,EAAE,MAAM,WAAW,CAAC;AAE3C,MAAM,UAAU,MAAM,CACpB,GAAkB,EAClB,KAAiB,EACjB,UAAkB,EAClB,QAAuB;IAEvB,IAAI,aAAa,CAAC,KAAK,EAAE,CAAC,kBAAkB,CAAC,CAAC,IAAI,KAAK,CAAC,IAAI,KAAK,OAAO,EAAE,CAAC;QACzE,OAAO;IACT,CAAC;IAED,MAAM,GAAG,GAAG,KAAK,CAAC,GAAG,CAAC;IACtB,MAAM,MAAM,GAAG,GAAG,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;IACpC,IAAI,CAAC,MAAM,EAAE,CAAC;QACZ,OAAO;IACT,CAAC;IAED,GAAG,CAAC,WAAW,EAAE,CAAC;IAClB,MAAM,KAAK,GAAG,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;IAE7C,MAAM,MAAM,GAAG,GAAG,CAAC,QAAQ,CAAC,aAAa,EAAE,EAAE,QAAQ,EAAE,EAAE,MAAM,EAAE,KAAK,CAAC,CAAC;IAExE,IAAI,KAAK,CAAC,IAAI,IAAI,KAAK,CAAC,IAAI,CAAC,MAAM,GAAG,UAAU,CAAC,MAAM,EAAE,CAAC;QACxD,MAAM,IAAI,GAAG,KAAK,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC;QAChC,GAAG,CAAC,QAAQ,CAAC,kBAAkB,EAAE,EAAE,IAAI,EAAE,EAAE,MAAM,EAAE,KAAK,GAAG,CAAC,CAAC,CAAC;QAC9D,IAAI,CAAC,MAAM,CAAC,CAAC,EAAE,UAAU,CAAC,MAAM,CAAC,CAAC;IACpC,CAAC;IACD,GAAG,CAAC,WAAW,CAAC,KAAK,EAAE,EAAE,eAAe,EAAE,MAAM,EAAE,CAAC,CAAC;IAEpD,cAAc,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC;IAE5B,OAAO,MAAM,CAAC;AAChB,CAAC","sourcesContent":["import type { BlockStdScope } from '@lumensuite/block-std';\nimport type { BlockModel } from '@lumensuite/store';\n\nimport { matchFlavours } from '@lumensuite/affine-shared/utils';\n\nimport { focusTextModel } from '../dom.js';\n\nexport function toCode(\n  std: BlockStdScope,\n  model: BlockModel,\n  prefixText: string,\n  language: string | null\n) {\n  if (matchFlavours(model, ['affine:paragraph']) && model.type === 'quote') {\n    return;\n  }\n\n  const doc = model.doc;\n  const parent = doc.getParent(model);\n  if (!parent) {\n    return;\n  }\n\n  doc.captureSync();\n  const index = parent.children.indexOf(model);\n\n  const codeId = doc.addBlock('affine:code', { language }, parent, index);\n\n  if (model.text && model.text.length > prefixText.length) {\n    const text = model.text.clone();\n    doc.addBlock('affine:paragraph', { text }, parent, index + 1);\n    text.delete(0, prefixText.length);\n  }\n  doc.deleteBlock(model, { bringChildrenTo: parent });\n\n  focusTextModel(std, codeId);\n\n  return codeId;\n}\n"]}