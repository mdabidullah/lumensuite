{"version":3,"file":"commands.js","sourceRoot":"","sources":["../../src/peek/commands.ts"],"names":[],"mappings":"AAOA,OAAO,EAAE,UAAU,EAAE,IAAI,EAAE,MAAM,eAAe,CAAC;AAEjD,MAAM,yBAAyB,GAAG,CAAC,GAAmB,EAAE,EAAE;IACxD,MAAM,CAAC,MAAM,EAAE,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,CAAC,OAAO;SAClC,KAAK,EAAE;SACP,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,gBAAgB,EAAE,EAAE,KAAK,CAAC,kBAAkB,EAAE,CAAC,CAAC;SACvE,iBAAiB,CAAC,EAAE,KAAK,EAAE,CAAC,MAAM,EAAE,OAAO,CAAC,EAAE,CAAC;SAC/C,GAAG,EAAE,CAAC;IACT,OAAO,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,EAAE,CAAC,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;AACvE,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,gCAAgC,GAGzC,CAAC,GAAG,EAAE,IAAI,EAAE,EAAE;IAChB,MAAM,sBAAsB,GAAG,yBAAyB,CAAC,GAAG,CAAC,CAAC;IAC9D,IAAI,sBAAsB,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;QACtC,IAAI,CAAC,EAAE,sBAAsB,EAAE,CAAC,CAAC;IACnC,CAAC;AACH,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,wBAAwB,GAA8B,CACjE,GAAG,EACH,IAAI,EACJ,EAAE;IACF,MAAM,cAAc,GAAG,yBAAyB,CAAC,GAAG,CAAC,CAAC;IACtD,mDAAmD;IACnD,MAAM,KAAK,GAAG,cAAc,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IAEnC,IAAI,KAAK,EAAE,CAAC;QACV,IAAI,CAAC,KAAK,CAAC,CAAC;QACZ,IAAI,EAAE,CAAC;IACT,CAAC;AACH,CAAC,CAAC","sourcesContent":["/// <reference types=\"@lumensuite/affine-shared/commands\" />\nimport type {\n  BlockComponent,\n  Command,\n  InitCommandCtx,\n} from '@lumensuite/block-std';\n\nimport { isPeekable, peek } from './peekable.js';\n\nconst getSelectedPeekableBlocks = (cmd: InitCommandCtx) => {\n  const [result, ctx] = cmd.std.command\n    .chain()\n    .tryAll(chain => [chain.getTextSelection(), chain.getBlockSelections()])\n    .getSelectedBlocks({ types: ['text', 'block'] })\n    .run();\n  return ((result ? ctx.selectedBlocks : []) || []).filter(isPeekable);\n};\n\nexport const getSelectedPeekableBlocksCommand: Command<\n  'selectedBlocks',\n  'selectedPeekableBlocks'\n> = (ctx, next) => {\n  const selectedPeekableBlocks = getSelectedPeekableBlocks(ctx);\n  if (selectedPeekableBlocks.length > 0) {\n    next({ selectedPeekableBlocks });\n  }\n};\n\nexport const peekSelectedBlockCommand: Command<'selectedBlocks'> = (\n  ctx,\n  next\n) => {\n  const peekableBlocks = getSelectedPeekableBlocks(ctx);\n  // if there are multiple blocks, peek the first one\n  const block = peekableBlocks.at(0);\n\n  if (block) {\n    peek(block);\n    next();\n  }\n};\n\ndeclare global {\n  namespace LumenSuite {\n    interface CommandContext {\n      selectedPeekableBlocks?: BlockComponent[];\n    }\n\n    interface Commands {\n      peekSelectedBlock: typeof peekSelectedBlockCommand;\n      getSelectedPeekableBlocks: typeof getSelectedPeekableBlocksCommand;\n      // todo: add command for peek an inline element?\n    }\n  }\n}\n"]}