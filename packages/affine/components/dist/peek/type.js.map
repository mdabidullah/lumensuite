{"version":3,"file":"type.js","sourceRoot":"","sources":["../../src/peek/type.ts"],"names":[],"mappings":"","sourcesContent":["import type {\n  BlockComponent,\n  BlockStdScope,\n  DisposableClass,\n} from '@lumensuite/block-std';\nimport type { LitElement, TemplateResult } from 'lit';\n\nexport type PeekableClass = { std: BlockStdScope } & DisposableClass &\n  LitElement;\n\nexport interface PeekViewService {\n  /**\n   * Peek a target element page ref info\n   * @param pageRef The page ref info to peek.\n   * @returns A promise that resolves when the peek view is closed.\n   */\n  peek(pageRef: { docId: string; blockId?: string }): Promise<void>;\n  /**\n   * Peek a target element with a optional template\n   * @param target The target element to peek. There are two use cases:\n   * 1. If the template is not given, peek view content rendering will be delegated to the implementation of peek view service.\n   * 2. To determine the origin of the peek view modal animation\n   * @param template Optional template to render in the peek view modal. If not given, the peek view service will render the content.\n   * @returns A promise that resolves when the peek view is closed.\n   */\n  peek(target: HTMLElement, template?: TemplateResult): Promise<void>;\n  /**\n   * Peek a target element with a optional template\n   * @param target The target element to peek. There are two use cases:\n   * 1. If the template is not given, peek view content rendering will be delegated to the implementation of peek view service.\n   * 2. To determine the origin of the peek view modal animation\n   * @param template Optional template to render in the peek view modal. If not given, the peek view service will render the content.\n   * @returns A promise that resolves when the peek view is closed.\n   */\n  peek<Element extends BlockComponent>(\n    target: Element,\n    template?: TemplateResult\n  ): Promise<void>;\n}\n\ntype PeekableAction = 'double-click' | 'shift-click';\n\nexport type PeekableOptions<T extends PeekableClass> = {\n  /**\n   * Action to bind to the peekable element. default to ['double-click', 'shift-click']\n   * false means do not bind any action.\n   */\n  action?: PeekableAction | PeekableAction[] | false;\n  /**\n   * It will check the block is enable to peek or not\n   */\n  enableOn?: (block: T) => boolean;\n  /**\n   * Selector inside of the peekable element to bind the action\n   */\n  selector?: string;\n};\n"]}