{"version":3,"file":"html-to-element.js","sourceRoot":"","sources":["../../src/toast/html-to-element.ts"],"names":[],"mappings":"AAEA;;;GAGG;AACH,MAAM,CAAC,MAAM,aAAa,GAAG,CAC3B,IAA6B,EAC7B,EAAE;IACF,MAAM,QAAQ,GAAG,QAAQ,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;IACpD,IAAI,OAAO,IAAI,KAAK,QAAQ,EAAE,CAAC;QAC7B,IAAI,GAAG,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC,uDAAuD;QAC3E,QAAQ,CAAC,SAAS,GAAG,IAAI,CAAC;IAC5B,CAAC;SAAM,CAAC;QACN,MAAM,UAAU,GAAG,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC;QAC5D,QAAQ,CAAC,SAAS,GAAG,UAAU,CAAC;IAClC,CAAC;IACD,OAAO,QAAQ,CAAC,OAAO,CAAC,UAAe,CAAC;AAC1C,CAAC,CAAC","sourcesContent":["import type { TemplateResult } from 'lit';\n\n/**\n * DO NOT USE FOR USER INPUT\n * See https://stackoverflow.com/questions/494143/creating-a-new-dom-element-from-an-html-string-using-built-in-dom-methods-or-pro/35385518#35385518\n */\nexport const htmlToElement = <T extends ChildNode>(\n  html: string | TemplateResult\n) => {\n  const template = document.createElement('template');\n  if (typeof html === 'string') {\n    html = html.trim(); // Never return a text node of whitespace as the result\n    template.innerHTML = html;\n  } else {\n    const htmlString = String.raw(html.strings, ...html.values);\n    template.innerHTML = htmlString;\n  }\n  return template.content.firstChild as T;\n};\n"]}