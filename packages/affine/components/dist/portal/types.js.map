{"version":3,"file":"types.js","sourceRoot":"","sources":["../../src/portal/types.ts"],"names":[],"mappings":"","sourcesContent":["import type { Slot } from '@lumensuite/global/utils';\nimport type {\n  AutoUpdateOptions,\n  ComputePositionConfig,\n  ComputePositionReturn,\n  ReferenceElement,\n} from '@floating-ui/dom';\nimport type { RenderOptions, TemplateResult } from 'lit';\n\n/**\n * See https://lit.dev/docs/templates/expressions/#child-expressions\n */\ntype Renderable =\n  | TemplateResult<1>\n  // Any DOM node can be passed to a child expression.\n  | HTMLElement\n  // Numbers values like 5 will render the string '5'. Bigints are treated similarly.\n  | number\n  // A boolean value true will render 'true', and false will render 'false', but rendering a boolean like this is uncommon.\n  | boolean\n  // The empty string '', null, and undefined are specially treated and render nothing.\n  | string\n  | null\n  | undefined;\n\nexport type PortalOptions = {\n  template: Renderable | ((ctx: { updatePortal: () => void }) => Renderable);\n  container?: Element;\n  /**\n   * The portal is removed when the AbortSignal is aborted.\n   */\n  signal?: AbortSignal;\n  /**\n   * Defaults to `true`.\n   */\n  shadowDom?: boolean | ShadowRootInit;\n  renderOptions?: RenderOptions;\n  /**\n   * Defaults to `true`.\n   * If true, the portalRoot will be added a class `lumensuite-portal`. It's useful for finding the portalRoot.\n   */\n  identifyWrapper?: boolean;\n\n  portalStyles?: Record<string, string | number | undefined | null>;\n};\n\ntype ComputePositionOptions = {\n  referenceElement: ReferenceElement;\n  /**\n   * Default `false`.\n   */\n  autoUpdate?: true | AutoUpdateOptions;\n  /**\n   * Default `true`. Only work when `referenceElement` is an `Element`. Check when position update (`autoUpdate` is `true` or first tick)\n   */\n  abortWhenRefRemoved?: boolean;\n} & Partial<ComputePositionConfig>;\n\nexport type AdvancedPortalOptions = Omit<\n  PortalOptions,\n  'template' | 'signal'\n> & {\n  abortController: AbortController;\n  template:\n    | Renderable\n    | ((context: {\n        positionSlot: Slot<ComputePositionReturn>;\n        updatePortal: () => void;\n      }) => Renderable);\n  /**\n   * See https://floating-ui.com/docs/computePosition\n   */\n  computePosition?:\n    | ComputePositionOptions\n    | ((portalRoot: Element) => ComputePositionOptions);\n  /**\n   * Whether to close the portal when click away(click outside).\n   * @default false\n   */\n  closeOnClickAway?: boolean;\n};\n"]}