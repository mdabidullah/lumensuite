{"version":3,"file":"types.js","sourceRoot":"","sources":["../../src/hover/types.ts"],"names":[],"mappings":"","sourcesContent":["import type { StyleInfo } from 'lit/directives/style-map.js';\n\nimport type {\n  SafeBridgeOptions,\n  SafeTriangleOptions,\n} from './middlewares/safe-area.js';\n\nexport type WhenHoverOptions = {\n  enterDelay?: number;\n  leaveDelay?: number;\n  /**\n   * When already hovered to the reference element,\n   * but the floating element is not ready,\n   * the callback will still be executed if the `alwayRunWhenNoFloating` is true.\n   *\n   * It is useful when the floating element is removed just before by a user's action,\n   * and the user's mouse is still hovering over the reference element.\n   *\n   * @default true\n   */\n  alwayRunWhenNoFloating?: boolean;\n  safeTriangle?: boolean | SafeTriangleOptions;\n  /**\n   * Create a virtual rectangular bridge between the reference element and the floating element.\n   */\n  safeBridge?: boolean | SafeBridgeOptions;\n};\n\nexport type HoverMiddleware = (ctx: {\n  event: Event;\n  referenceElement?: Element;\n  floatingElement?: Element;\n}) => boolean | Promise<boolean>;\n\nexport type HoverOptions = {\n  /**\n   * Transition style when the portal is shown or hidden.\n   */\n  transition: {\n    /**\n     * Specifies the length of the transition in ms.\n     *\n     * You only need to specify the transition end duration actually.\n     *\n     * ---\n     *\n     * Why is the duration required?\n     *\n     * The transition event is not reliable, and it may not be triggered in some cases.\n     *\n     * See also https://github.com/w3c/csswg-drafts/issues/3043 https://github.com/toeverything/blocksuite/pull/7248/files#r1631375330\n     *\n     * Take a look at solutions from other projects: https://floating-ui.com/docs/useTransition#duration\n     */\n    duration: number;\n    in: StyleInfo;\n    out: StyleInfo;\n  } | null;\n  /**\n   * Set the portal as hover element automatically.\n   * @default true\n   */\n  setPortalAsFloating: boolean;\n  allowMultiple?: boolean;\n} & WhenHoverOptions;\n"]}