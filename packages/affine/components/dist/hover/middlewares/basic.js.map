{"version":3,"file":"basic.js","sourceRoot":"","sources":["../../../src/hover/middlewares/basic.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,KAAK,EAAE,MAAM,0BAA0B,CAAC;AAIjD;;;GAGG;AACH,MAAM,CAAC,MAAM,MAAM,GAAG,CAAC,wBAAwB,GAAG,IAAI,EAAmB,EAAE;IACzE,MAAM,IAAI,GAAG,KAAK,CAAC;IACnB,MAAM,IAAI,GAAG,IAAI,CAAC;IAClB,IAAI,UAAU,GAAG,KAAK,CAAC;IACvB,OAAO,CAAC,EAAE,KAAK,EAAE,eAAe,EAAE,EAAE,EAAE;QACpC,MAAM,QAAQ,GAAG,UAAU,CAAC;QAC5B,IAAI,KAAK,CAAC,IAAI,KAAK,WAAW,EAAE,CAAC;YAC/B,WAAW;YACX,UAAU,GAAG,IAAI,CAAC;YAClB,IAAI,QAAQ,KAAK,UAAU;gBACzB,6CAA6C;gBAC7C,OAAO,IAAI,CAAC;YACd,IACE,wBAAwB;gBACxB,CAAC,CAAC,eAAe,IAAI,CAAC,eAAe,CAAC,WAAW,CAAC,EAClD,CAAC;gBACD,kBAAkB;gBAClB,wCAAwC;gBACxC,kCAAkC;gBAClC,OAAO,IAAI,CAAC;YACd,CAAC;YACD,OAAO,IAAI,CAAC;QACd,CAAC;QACD,IAAI,KAAK,CAAC,IAAI,KAAK,YAAY,EAAE,CAAC;YAChC,YAAY;YACZ,UAAU,GAAG,KAAK,CAAC;YACnB,IAAI,QAAQ,KAAK,UAAU;gBAAE,OAAO,IAAI,CAAC;YACzC,IAAI,wBAAwB,IAAI,eAAe,EAAE,WAAW,EAAE,CAAC;gBAC7D,oBAAoB;gBACpB,4CAA4C;gBAC5C,kCAAkC;gBAClC,OAAO,IAAI,CAAC;YACd,CAAC;YACD,OAAO,IAAI,CAAC;QACd,CAAC;QACD,OAAO,CAAC,IAAI,CAAC,wCAAwC,EAAE,KAAK,CAAC,CAAC;QAC9D,OAAO,IAAI,CAAC;IACd,CAAC,CAAC;AACJ,CAAC,CAAC;AAEF;;GAEG;AACH,MAAM,CAAC,MAAM,SAAS,GAAG,CAAC,KAAa,EAAmB,EAAE;IAC1D,IAAI,eAAe,GAAG,IAAI,eAAe,EAAE,CAAC;IAC5C,OAAO,KAAK,EAAE,EAAE,KAAK,EAAE,EAAE,EAAE;QACzB,eAAe,CAAC,KAAK,EAAE,CAAC;QACxB,MAAM,kBAAkB,GAAG,IAAI,eAAe,EAAE,CAAC;QACjD,eAAe,GAAG,kBAAkB,CAAC;QACrC,IAAI,KAAK,CAAC,IAAI,KAAK,WAAW;YAAE,OAAO,IAAI,CAAC;QAC5C,IAAI,KAAK,IAAI,CAAC;YAAE,OAAO,IAAI,CAAC;QAC5B,MAAM,KAAK,CAAC,KAAK,EAAE,kBAAkB,CAAC,MAAM,CAAC,CAAC;QAC9C,OAAO,CAAC,kBAAkB,CAAC,MAAM,CAAC,OAAO,CAAC;IAC5C,CAAC,CAAC;AACJ,CAAC,CAAC;AAEF;;GAEG;AACH,MAAM,CAAC,MAAM,SAAS,GAAG,CAAC,KAAa,EAAmB,EAAE;IAC1D,IAAI,eAAe,GAAG,IAAI,eAAe,EAAE,CAAC;IAC5C,OAAO,KAAK,EAAE,EAAE,KAAK,EAAE,EAAE,EAAE;QACzB,eAAe,CAAC,KAAK,EAAE,CAAC;QACxB,MAAM,kBAAkB,GAAG,IAAI,eAAe,EAAE,CAAC;QACjD,eAAe,GAAG,kBAAkB,CAAC;QACrC,IAAI,KAAK,CAAC,IAAI,KAAK,YAAY;YAAE,OAAO,IAAI,CAAC;QAC7C,IAAI,KAAK,IAAI,CAAC;YAAE,OAAO,IAAI,CAAC;QAC5B,MAAM,KAAK,CAAC,KAAK,EAAE,kBAAkB,CAAC,MAAM,CAAC,CAAC;QAC9C,OAAO,CAAC,kBAAkB,CAAC,MAAM,CAAC,OAAO,CAAC;IAC5C,CAAC,CAAC;AACJ,CAAC,CAAC","sourcesContent":["import { sleep } from '@blocksuite/global/utils';\n\nimport type { HoverMiddleware } from '../types.js';\n\n/**\n * When the mouse is hovering in, the `mouseover` event will be fired multiple times.\n * This middleware will filter out the duplicated events.\n */\nexport const dedupe = (keepWhenFloatingNotReady = true): HoverMiddleware => {\n  const SKIP = false;\n  const KEEP = true;\n  let hoverState = false;\n  return ({ event, floatingElement }) => {\n    const curState = hoverState;\n    if (event.type === 'mouseover') {\n      // hover in\n      hoverState = true;\n      if (curState !== hoverState)\n        // state changed, so we should keep the event\n        return KEEP;\n      if (\n        keepWhenFloatingNotReady &&\n        (!floatingElement || !floatingElement.isConnected)\n      ) {\n        // Already hovered\n        // But the floating element is not ready\n        // so we should not skip the event\n        return KEEP;\n      }\n      return SKIP;\n    }\n    if (event.type === 'mouseleave') {\n      // hover out\n      hoverState = false;\n      if (curState !== hoverState) return KEEP;\n      if (keepWhenFloatingNotReady && floatingElement?.isConnected) {\n        // Already hover out\n        // But the floating element is still showing\n        // so we should not skip the event\n        return KEEP;\n      }\n      return SKIP;\n    }\n    console.warn('Unknown event type in hover middleware', event);\n    return KEEP;\n  };\n};\n\n/**\n * Wait some time before emitting the `mouseover` event.\n */\nexport const delayShow = (delay: number): HoverMiddleware => {\n  let abortController = new AbortController();\n  return async ({ event }) => {\n    abortController.abort();\n    const newAbortController = new AbortController();\n    abortController = newAbortController;\n    if (event.type !== 'mouseover') return true;\n    if (delay <= 0) return true;\n    await sleep(delay, newAbortController.signal);\n    return !newAbortController.signal.aborted;\n  };\n};\n\n/**\n * Wait some time before emitting the `mouseleave` event.\n */\nexport const delayHide = (delay: number): HoverMiddleware => {\n  let abortController = new AbortController();\n  return async ({ event }) => {\n    abortController.abort();\n    const newAbortController = new AbortController();\n    abortController = newAbortController;\n    if (event.type !== 'mouseleave') return true;\n    if (delay <= 0) return true;\n    await sleep(delay, newAbortController.signal);\n    return !newAbortController.signal.aborted;\n  };\n};\n"]}