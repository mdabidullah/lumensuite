{"version":3,"file":"multi-tag.js","sourceRoot":"","sources":["../../../../src/widget-presets/filter/matcher/multi-tag.ts"],"names":[],"mappings":"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","sourcesContent":["import type { FilterDefineType } from './matcher.js';\n\nimport { tBoolean, tTag } from '../../../core/logical/data-type.js';\nimport {\n  tArray,\n  tFunction,\n  tTypeRef,\n  tTypeVar,\n} from '../../../core/logical/typesystem.js';\n\nexport const multiTagFilter = {\n  containsAll: {\n    type: tFunction({\n      typeVars: [tTypeVar('options', tTag.create())],\n      args: [tArray(tTypeRef('options')), tArray(tTypeRef('options'))],\n      rt: tBoolean.create(),\n    }),\n    label: 'Contains all',\n    impl: (value, target) => {\n      if (!Array.isArray(target) || !Array.isArray(value) || !target.length) {\n        return true;\n      }\n      return target.every(v => value.includes(v));\n    },\n  },\n  containsOneOf: {\n    type: tFunction({\n      typeVars: [tTypeVar('options', tTag.create())],\n      args: [tArray(tTypeRef('options')), tArray(tTypeRef('options'))],\n      rt: tBoolean.create(),\n    }),\n    name: 'containsOneOf',\n    label: 'Contains one of',\n    impl: (value, target) => {\n      if (!Array.isArray(target) || !Array.isArray(value) || !target.length) {\n        return true;\n      }\n      return target.some(v => value.includes(v));\n    },\n  },\n  doesNotContainsOneOf: {\n    type: tFunction({\n      typeVars: [tTypeVar('options', tTag.create())],\n      args: [tArray(tTypeRef('options')), tArray(tTypeRef('options'))],\n      rt: tBoolean.create(),\n    }),\n    label: 'Does not contains one of',\n    impl: (value, target) => {\n      if (!Array.isArray(target) || !Array.isArray(value) || !target.length) {\n        return true;\n      }\n      return target.every(v => !value.includes(v));\n    },\n  },\n  doesNotContainsAll: {\n    type: tFunction({\n      typeVars: [tTypeVar('options', tTag.create())],\n      args: [tArray(tTypeRef('options')), tArray(tTypeRef('options'))],\n      rt: tBoolean.create(),\n    }),\n    label: 'Does not contains all',\n    impl: (value, target) => {\n      if (!Array.isArray(target) || !Array.isArray(value) || !target.length) {\n        return true;\n      }\n      return !target.every(v => value.includes(v));\n    },\n  },\n} as Record<string, FilterDefineType>;\n"]}