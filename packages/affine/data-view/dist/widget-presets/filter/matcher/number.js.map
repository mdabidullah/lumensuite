{"version":3,"file":"number.js","sourceRoot":"","sources":["../../../../src/widget-presets/filter/matcher/number.ts"],"names":[],"mappings":"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","sourcesContent":["import type { FilterDefineType } from './matcher.js';\n\nimport { tBoolean, tNumber } from '../../../core/logical/data-type.js';\nimport { tFunction } from '../../../core/logical/typesystem.js';\n\nexport const numberFilter = {\n  greatThan: {\n    type: tFunction({\n      args: [tNumber.create(), tNumber.create()],\n      rt: tBoolean.create(),\n    }),\n    label: '>',\n    impl: (value, target) => {\n      value = value ?? 0;\n      if (typeof value !== 'number' || typeof target !== 'number') {\n        return true;\n      }\n      return value > target;\n    },\n  },\n  greatThanOrEqual: {\n    type: tFunction({\n      args: [tNumber.create(), tNumber.create()],\n      rt: tBoolean.create(),\n    }),\n    label: '>=',\n    impl: (value, target) => {\n      value = value ?? 0;\n      if (typeof value !== 'number' || typeof target !== 'number') {\n        return true;\n      }\n      return value >= target;\n    },\n  },\n  lessThan: {\n    type: tFunction({\n      args: [tNumber.create(), tNumber.create()],\n      rt: tBoolean.create(),\n    }),\n    label: '<',\n    impl: (value, target) => {\n      value = value ?? 0;\n      if (typeof value !== 'number' || typeof target !== 'number') {\n        return true;\n      }\n      return value < target;\n    },\n  },\n  lessThanOrEqual: {\n    type: tFunction({\n      args: [tNumber.create(), tNumber.create()],\n      rt: tBoolean.create(),\n    }),\n    label: '<=',\n    impl: (value, target) => {\n      value = value ?? 0;\n      if (typeof value !== 'number' || typeof target !== 'number') {\n        return true;\n      }\n      return value <= target;\n    },\n  },\n  equal: {\n    type: tFunction({\n      args: [tNumber.create(), tNumber.create()],\n      rt: tBoolean.create(),\n    }),\n    label: '==',\n    impl: (value, target) => {\n      value = value ?? 0;\n      if (typeof value !== 'number' || typeof target !== 'number') {\n        return true;\n      }\n      return value == target;\n    },\n  },\n  notEqual: {\n    type: tFunction({\n      args: [tNumber.create(), tNumber.create()],\n      rt: tBoolean.create(),\n    }),\n    label: '!=',\n    impl: (value, target) => {\n      value = value ?? 0;\n      if (typeof value !== 'number' || typeof target !== 'number') {\n        return true;\n      }\n      return value != target;\n    },\n  },\n} as Record<string, FilterDefineType>;\n"]}