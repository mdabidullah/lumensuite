{"version":3,"file":"string.js","sourceRoot":"","sources":["../../../../src/widget-presets/filter/matcher/string.ts"],"names":[],"mappings":"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","sourcesContent":["import type { FilterDefineType } from './matcher.js';\n\nimport { tBoolean, tString } from '../../../core/logical/data-type.js';\nimport { tFunction } from '../../../core/logical/typesystem.js';\n\nexport const stringFilter = {\n  is: {\n    type: tFunction({\n      args: [tString.create(), tString.create()],\n      rt: tBoolean.create(),\n    }),\n    label: 'Is',\n    impl: (value, target) => {\n      if (\n        typeof value !== 'string' ||\n        typeof target !== 'string' ||\n        target === ''\n      ) {\n        return true;\n      }\n      return value == target;\n    },\n  },\n  isNot: {\n    type: tFunction({\n      args: [tString.create(), tString.create()],\n      rt: tBoolean.create(),\n    }),\n    label: 'Is not',\n    impl: (value, target) => {\n      if (\n        typeof value !== 'string' ||\n        typeof target !== 'string' ||\n        target === ''\n      ) {\n        return true;\n      }\n      return value != target;\n    },\n  },\n  contains: {\n    type: tFunction({\n      args: [tString.create(), tString.create()],\n      rt: tBoolean.create(),\n    }),\n    label: 'Contains',\n    impl: (value, target) => {\n      if (\n        typeof value !== 'string' ||\n        typeof target !== 'string' ||\n        target === ''\n      ) {\n        return true;\n      }\n      return value.includes(target);\n    },\n  },\n  doesNoContains: {\n    type: tFunction({\n      args: [tString.create(), tString.create()],\n      rt: tBoolean.create(),\n    }),\n    label: 'Does no contains',\n    impl: (value, target) => {\n      if (\n        typeof value !== 'string' ||\n        typeof target !== 'string' ||\n        target === ''\n      ) {\n        return true;\n      }\n      return !value.includes(target);\n    },\n  },\n  startsWith: {\n    type: tFunction({\n      args: [tString.create(), tString.create()],\n      rt: tBoolean.create(),\n    }),\n    label: 'Starts with',\n    impl: (value, target) => {\n      if (\n        typeof value !== 'string' ||\n        typeof target !== 'string' ||\n        target === ''\n      ) {\n        return true;\n      }\n      return value.startsWith(target);\n    },\n  },\n  endsWith: {\n    type: tFunction({\n      args: [tString.create(), tString.create()],\n      rt: tBoolean.create(),\n    }),\n    label: 'Ends with',\n    impl: (value, target) => {\n      if (\n        typeof value !== 'string' ||\n        typeof target !== 'string' ||\n        target === ''\n      ) {\n        return true;\n      }\n      return value.endsWith(target);\n    },\n  },\n} as Record<string, FilterDefineType>;\n"]}