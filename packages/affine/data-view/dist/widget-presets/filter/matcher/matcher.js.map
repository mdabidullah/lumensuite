{"version":3,"file":"matcher.js","sourceRoot":"","sources":["../../../../src/widget-presets/filter/matcher/matcher.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,OAAO,EAAE,MAAM,kCAAkC,CAAC;AAC3D,OAAO,EAEL,UAAU,GACX,MAAM,qCAAqC,CAAC;AAC7C,OAAO,EAAE,aAAa,EAAE,MAAM,cAAc,CAAC;AAC7C,OAAO,EAAE,UAAU,EAAE,MAAM,WAAW,CAAC;AACvC,OAAO,EAAE,cAAc,EAAE,MAAM,gBAAgB,CAAC;AAChD,OAAO,EAAE,YAAY,EAAE,MAAM,aAAa,CAAC;AAC3C,OAAO,EAAE,YAAY,EAAE,MAAM,aAAa,CAAC;AAC3C,OAAO,EAAE,SAAS,EAAE,MAAM,UAAU,CAAC;AACrC,OAAO,EAAE,aAAa,EAAE,MAAM,cAAc,CAAC;AAU7C,MAAM,CAAC,MAAM,aAAa,GAAG,IAAI,OAAO,CACtC,CAAC,IAAI,EAAE,MAAM,EAAE,EAAE;IACf,IAAI,IAAI,CAAC,IAAI,KAAK,UAAU,EAAE,CAAC;QAC7B,OAAO,KAAK,CAAC;IACf,CAAC;IACD,MAAM,UAAU,GAAG,UAAU,CAAC,KAAK,CACjC,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,IAAI,EAAE,CAAC,EACpE,IAAI,CACL,CAAC;IACF,MAAM,QAAQ,GAAG,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IACpC,OAAO,QAAQ,IAAI,UAAU,CAAC,SAAS,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;AAC5D,CAAC,CACF,CAAC;AACF,MAAM,SAAS,GAAG;IAChB,GAAG,UAAU;IACb,GAAG,cAAc;IACjB,GAAG,YAAY;IACf,GAAG,YAAY;IACf,GAAG,SAAS;IACZ,GAAG,aAAa;IAChB,GAAG,aAAa;CACjB,CAAC;AACF,MAAM,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,EAAE,EAAE,IAAI,EAAE,GAAG,IAAI,EAAE,CAAC,EAAE,EAAE;IAC9D,aAAa,CAAC,QAAQ,CAAC,IAAI,EAAE;QAC3B,IAAI,EAAE,IAAI;QACV,GAAG,IAAI;KACR,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import { Matcher } from '../../../core/logical/matcher.js';\nimport {\n  type TFunction,\n  typesystem,\n} from '../../../core/logical/typesystem.js';\nimport { booleanFilter } from './boolean.js';\nimport { dateFilter } from './date.js';\nimport { multiTagFilter } from './multi-tag.js';\nimport { numberFilter } from './number.js';\nimport { stringFilter } from './string.js';\nimport { tagFilter } from './tag.js';\nimport { unknownFilter } from './unknown.js';\n\nexport type FilterMatcherDataType = {\n  name: string;\n  label: string;\n  impl: (...args: unknown[]) => boolean;\n};\nexport type FilterDefineType = {\n  type: TFunction;\n} & Omit<FilterMatcherDataType, 'name'>;\nexport const filterMatcher = new Matcher<FilterMatcherDataType, TFunction>(\n  (type, target) => {\n    if (type.type !== 'function') {\n      return false;\n    }\n    const staticType = typesystem.subst(\n      Object.fromEntries(type.typeVars?.map(v => [v.name, v.bound]) ?? []),\n      type\n    );\n    const firstArg = staticType.args[0];\n    return firstArg && typesystem.isSubtype(firstArg, target);\n  }\n);\nconst allFilter = {\n  ...dateFilter,\n  ...multiTagFilter,\n  ...numberFilter,\n  ...stringFilter,\n  ...tagFilter,\n  ...booleanFilter,\n  ...unknownFilter,\n};\nObject.entries(allFilter).forEach(([name, { type, ...data }]) => {\n  filterMatcher.register(type, {\n    name: name,\n    ...data,\n  });\n});\n"]}