{"version":3,"file":"formatter.js","sourceRoot":"","sources":["../../../../src/column-presets/number/utils/formatter.ts"],"names":[],"mappings":"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","sourcesContent":["export type NumberFormat =\n  | 'number'\n  | 'numberWithCommas'\n  | 'percent'\n  | 'currencyYen'\n  | 'currencyINR'\n  | 'currencyCNY'\n  | 'currencyUSD'\n  | 'currencyEUR'\n  | 'currencyGBP';\n\nconst currency = (currency: string): Intl.NumberFormatOptions => ({\n  style: 'currency',\n  currency,\n  currencyDisplay: 'symbol',\n});\n\nconst numberFormatDefaultConfig: Record<\n  NumberFormat,\n  Intl.NumberFormatOptions\n> = {\n  number: { style: 'decimal', useGrouping: false },\n  numberWithCommas: { style: 'decimal', useGrouping: true },\n  percent: { style: 'percent', useGrouping: false },\n  currencyINR: currency('INR'),\n  currencyYen: currency('JPY'),\n  currencyCNY: currency('CNY'),\n  currencyUSD: currency('USD'),\n  currencyEUR: currency('EUR'),\n  currencyGBP: currency('GBP'),\n};\n\nexport function formatNumber(\n  value: number,\n  format: NumberFormat,\n  decimals?: number\n) {\n  const formatterOptions = { ...numberFormatDefaultConfig[format] };\n  if (decimals !== undefined) {\n    // for feature flag should default to 0 after release\n    Object.assign(formatterOptions, {\n      minimumFractionDigits: decimals,\n      maximumFractionDigits: decimals,\n    });\n  }\n  const formatter = new Intl.NumberFormat(navigator.language, formatterOptions);\n  return formatter.format(value);\n}\n\nexport function getLocaleDecimalSeparator(locale?: string) {\n  return (1.1).toLocaleString(locale ?? navigator.language).slice(1, 2);\n}\n\n// Since we Intl does not provide a parse function we just made it ourself\nexport function parseNumber(value: string, decimalSeparator?: string): number {\n  decimalSeparator = decimalSeparator ?? getLocaleDecimalSeparator();\n\n  // Normalize decimal separator to a period for consistency\n  const normalizedValue = value.replace(\n    new RegExp(`\\\\${decimalSeparator}`, 'g'),\n    '.'\n  );\n\n  // Remove any leading and trailing non-numeric characters except valid signs, decimal points, and exponents\n  let sanitizedValue = normalizedValue.replace(/^[^\\d-+eE.]+|[^\\d]+$/g, '');\n\n  // Remove non-numeric characters except decimal points, exponents, and valid signs\n  sanitizedValue = sanitizedValue.replace(/[^0-9.eE+-]/g, '');\n\n  // Handle multiple signs: Keep only the first sign\n  sanitizedValue = sanitizedValue.replace(/([-+]){2,}/g, '$1');\n\n  // Handle misplaced signs: Keep only the leading sign and sign after 'e' or 'E'\n  sanitizedValue = sanitizedValue.replace(\n    /^([-+]?)[^eE]*([eE][-+]?\\d+)?$/,\n    (_, p1, p2) =>\n      p1 +\n      sanitizedValue.replace(/[eE].*/, '').replace(/[^\\d.]/g, '') +\n      (p2 || '')\n  );\n\n  // Handle multiple decimal points: Keep only the first one in the main part\n  sanitizedValue = sanitizedValue.replace(/(\\..*)\\./g, '$1');\n\n  // If there is an 'e' or 'E', handle the scientific notation\n  if (/[eE]/.test(sanitizedValue)) {\n    const [base, exp] = sanitizedValue.split(/[eE]/);\n    if (\n      !base ||\n      !exp ||\n      exp.includes('.') ||\n      exp.includes('e') ||\n      exp.includes('E')\n    ) {\n      return NaN; // Invalid scientific notation\n    }\n    return parseFloat(sanitizedValue);\n  }\n\n  return parseFloat(sanitizedValue);\n}\n"]}