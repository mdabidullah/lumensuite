{"version":3,"file":"define.js","sourceRoot":"","sources":["../../../src/column-presets/multi-select/define.ts"],"names":[],"mappings":"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","sourcesContent":["import { nanoid } from '@blocksuite/store';\n\nimport type { SelectColumnData } from '../../core/column/types.js';\nimport type { SelectTag } from '../../core/utils/tags/multi-tag-select.js';\n\nimport { columnType } from '../../core/column/column-config.js';\nimport { tTag } from '../../core/logical/data-type.js';\nimport { tArray } from '../../core/logical/typesystem.js';\nimport { getTagColor } from '../../core/utils/tags/colors.js';\n\nexport const multiSelectColumnType = columnType('multi-select');\nexport const multiSelectColumnModelConfig = multiSelectColumnType.modelConfig<\n  string[],\n  SelectColumnData\n>({\n  name: 'Multi-select',\n  type: data => tArray(tTag.create({ tags: data.options })),\n  defaultData: () => ({\n    options: [],\n  }),\n  addGroup: (text, oldData) => {\n    return {\n      options: [\n        ...(oldData.options ?? []),\n        {\n          id: nanoid(),\n          value: text,\n          color: getTagColor(),\n        },\n      ],\n    };\n  },\n  formatValue: v => {\n    if (Array.isArray(v)) {\n      return v.filter(v => v != null);\n    }\n    return [];\n  },\n  cellToString: (data, colData) =>\n    data?.map(id => colData.options.find(v => v.id === id)?.value).join(','),\n  cellFromString: (data, colData) => {\n    const optionMap = Object.fromEntries(\n      colData.options.map(v => [v.value, v])\n    );\n    const optionNames = data\n      .split(',')\n      .map(v => v.trim())\n      .filter(v => v);\n\n    const value: string[] = [];\n    optionNames.forEach(name => {\n      if (!optionMap[name]) {\n        const newOption: SelectTag = {\n          id: nanoid(),\n          value: name,\n          color: getTagColor(),\n        };\n        colData.options.push(newOption);\n        value.push(newOption.id);\n      } else {\n        value.push(optionMap[name].id);\n      }\n    });\n\n    return {\n      value,\n      data: colData,\n    };\n  },\n  cellToJson: data => data ?? null,\n  isEmpty: data => data == null || data.length === 0,\n});\n"]}