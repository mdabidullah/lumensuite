{"version":3,"file":"define.js","sourceRoot":"","sources":["../../../src/column-presets/select/define.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,MAAM,EAAE,MAAM,mBAAmB,CAAC;AAK3C,OAAO,EAAE,UAAU,EAAE,MAAM,oCAAoC,CAAC;AAChE,OAAO,EAAE,IAAI,EAAE,MAAM,iCAAiC,CAAC;AACvD,OAAO,EAAE,WAAW,EAAE,MAAM,iCAAiC,CAAC;AAE9D,MAAM,CAAC,MAAM,gBAAgB,GAAG,UAAU,CAAC,QAAQ,CAAC,CAAC;AAErD,MAAM,CAAC,MAAM,uBAAuB,GAAG,gBAAgB,CAAC,WAAW,CAGjE;IACA,IAAI,EAAE,QAAQ;IACd,IAAI,EAAE,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,IAAI,EAAE,IAAI,CAAC,OAAO,EAAE,CAAC;IACjD,WAAW,EAAE,GAAG,EAAE,CAAC,CAAC;QAClB,OAAO,EAAE,EAAE;KACZ,CAAC;IACF,QAAQ,EAAE,CAAC,IAAI,EAAE,OAAO,EAAE,EAAE;QAC1B,OAAO;YACL,OAAO,EAAE;gBACP,GAAG,CAAC,OAAO,CAAC,OAAO,IAAI,EAAE,CAAC;gBAC1B,EAAE,EAAE,EAAE,MAAM,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,KAAK,EAAE,WAAW,EAAE,EAAE;aACpD;SACF,CAAC;IACJ,CAAC;IACD,YAAY,EAAE,CAAC,IAAI,EAAE,OAAO,EAAE,EAAE,CAC9B,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,KAAK,IAAI,CAAC,EAAE,KAAK,IAAI,EAAE;IACvD,cAAc,EAAE,CAAC,IAAI,EAAE,OAAO,EAAE,EAAE;QAChC,IAAI,CAAC,IAAI,EAAE,CAAC;YACV,OAAO,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC;QACxC,CAAC;QACD,MAAM,SAAS,GAAG,MAAM,CAAC,WAAW,CAClC,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC,CACvC,CAAC;QACF,MAAM,IAAI,GAAG,IAAI;aACd,KAAK,CAAC,GAAG,CAAC;aACV,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC;aAClB,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAErB,IAAI,KAAK,GAAG,IAAI,CAAC;QACjB,MAAM,MAAM,GAAG,SAAS,CAAC,IAAI,CAAC,CAAC;QAC/B,IAAI,CAAC,MAAM,EAAE,CAAC;YACZ,MAAM,SAAS,GAAc;gBAC3B,EAAE,EAAE,MAAM,EAAE;gBACZ,KAAK,EAAE,IAAI;gBACX,KAAK,EAAE,WAAW,EAAE;aACrB,CAAC;YACF,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;YAChC,KAAK,GAAG,SAAS,CAAC,EAAE,CAAC;QACvB,CAAC;aAAM,CAAC;YACN,KAAK,GAAG,MAAM,CAAC,EAAE,CAAC;QACpB,CAAC;QAED,OAAO;YACL,KAAK;YACL,IAAI,EAAE,OAAO;SACd,CAAC;IACJ,CAAC;IACD,UAAU,EAAE,IAAI,CAAC,EAAE,CAAC,IAAI,IAAI,IAAI;IAChC,OAAO,EAAE,IAAI,CAAC,EAAE,CAAC,IAAI,IAAI,IAAI;CAC9B,CAAC,CAAC","sourcesContent":["import { nanoid } from '@blocksuite/store';\n\nimport type { SelectColumnData } from '../../core/column/types.js';\nimport type { SelectTag } from '../../core/utils/tags/multi-tag-select.js';\n\nimport { columnType } from '../../core/column/column-config.js';\nimport { tTag } from '../../core/logical/data-type.js';\nimport { getTagColor } from '../../core/utils/tags/colors.js';\n\nexport const selectColumnType = columnType('select');\n\nexport const selectColumnModelConfig = selectColumnType.modelConfig<\n  string,\n  SelectColumnData\n>({\n  name: 'Select',\n  type: data => tTag.create({ tags: data.options }),\n  defaultData: () => ({\n    options: [],\n  }),\n  addGroup: (text, oldData) => {\n    return {\n      options: [\n        ...(oldData.options ?? []),\n        { id: nanoid(), value: text, color: getTagColor() },\n      ],\n    };\n  },\n  cellToString: (data, colData) =>\n    colData.options.find(v => v.id === data)?.value ?? '',\n  cellFromString: (data, colData) => {\n    if (!data) {\n      return { value: null, data: colData };\n    }\n    const optionMap = Object.fromEntries(\n      colData.options.map(v => [v.value, v])\n    );\n    const name = data\n      .split(',')\n      .map(v => v.trim())\n      .filter(v => v)[0];\n\n    let value = null;\n    const option = optionMap[name];\n    if (!option) {\n      const newOption: SelectTag = {\n        id: nanoid(),\n        value: name,\n        color: getTagColor(),\n      };\n      colData.options.push(newOption);\n      value = newOption.id;\n    } else {\n      value = option.id;\n    }\n\n    return {\n      value,\n      data: colData,\n    };\n  },\n  cellToJson: data => data ?? null,\n  isEmpty: data => data == null,\n});\n"]}