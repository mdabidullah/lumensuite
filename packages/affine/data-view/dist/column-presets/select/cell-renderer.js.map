{"version":3,"file":"cell-renderer.js","sourceRoot":"","sources":["../../../src/column-presets/select/cell-renderer.ts"],"names":[],"mappings":"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","sourcesContent":["import { customElement } from 'lit/decorators.js';\nimport { html } from 'lit/static-html.js';\n\nimport type { SelectColumnData } from '../../core/column/types.js';\n\nimport { BaseCellRenderer } from '../../core/column/index.js';\nimport { createFromBaseCellRenderer } from '../../core/column/renderer.js';\nimport '../../core/utils/tags/multi-tag-select.js';\nimport {\n  popTagSelect,\n  type SelectTag,\n} from '../../core/utils/tags/multi-tag-select.js';\nimport { createIcon } from '../../core/utils/uni-icon.js';\nimport { selectColumnModelConfig } from './define.js';\n\n@customElement('affine-database-select-cell')\nexport class SelectCell extends BaseCellRenderer<string[], SelectColumnData> {\n  override render() {\n    const value = this.value ? [this.value] : [];\n    return html`\n      <affine-multi-tag-view\n        .value=\"${value}\"\n        .options=\"${this.column.data$.value.options}\"\n      ></affine-multi-tag-view>\n    `;\n  }\n}\n\n@customElement('affine-database-select-cell-editing')\nexport class SelectCellEditing extends BaseCellRenderer<\n  string,\n  SelectColumnData\n> {\n  private popTagSelect = () => {\n    this._disposables.add({\n      dispose: popTagSelect(\n        this.querySelector('affine-multi-tag-view') ?? this,\n        {\n          mode: 'single',\n          options: this._options,\n          onOptionsChange: this._onOptionsChange,\n          value: this._value,\n          onChange: this._onChange,\n          onComplete: this._editComplete,\n          minWidth: 400,\n        }\n      ),\n    });\n  };\n\n  _editComplete = () => {\n    this.selectCurrentCell(false);\n  };\n\n  _onChange = ([id]: string[]) => {\n    this.onChange(id);\n  };\n\n  _onOptionsChange = (options: SelectTag[]) => {\n    this.column.updateData(data => {\n      return {\n        ...data,\n        options,\n      };\n    });\n  };\n\n  get _options(): SelectTag[] {\n    return this.column.data$.value.options;\n  }\n\n  get _value() {\n    const value = this.value;\n    return value ? [value] : [];\n  }\n\n  override firstUpdated() {\n    this.popTagSelect();\n  }\n\n  override render() {\n    return html`\n      <affine-multi-tag-view\n        .value=\"${this._value}\"\n        .options=\"${this._options}\"\n      ></affine-multi-tag-view>\n    `;\n  }\n}\n\nexport const selectColumnConfig = selectColumnModelConfig.createColumnMeta({\n  icon: createIcon('SingleSelectIcon'),\n  cellRenderer: {\n    view: createFromBaseCellRenderer(SelectCell),\n    edit: createFromBaseCellRenderer(SelectCellEditing),\n  },\n});\n"]}