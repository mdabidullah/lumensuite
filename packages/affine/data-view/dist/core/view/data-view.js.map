{"version":3,"file":"data-view.js","sourceRoot":"","sources":["../../../src/core/view/data-view.ts"],"names":[],"mappings":"AASA,OAAO,EAAE,eAAe,EAAE,SAAS,EAAE,MAAM,+BAA+B,CAAC;AA+F3E,MAAM,CAAC,MAAM,QAAQ,GAAG,CAAsB,IAAU,EAAE,EAAE,CAAC,CAAC;IAC5D,IAAI;IACJ,WAAW,EAAE,CACX,KAA2B,EAC3B,EAAE,CAAC,CAAC;QACJ,IAAI;QACJ,KAAK;QACL,cAAc,EAAE,CAAC,QAAgC,EAAE,EAAE,CAAC,CAAC;YACrD,IAAI;YACJ,KAAK;YACL,QAAQ;SACT,CAAC;KACH,CAAC;CACH,CAAC,CAAC;AAEH,MAAM,OAAO,mBAAmB;IAAhC;QACU,QAAG,GAAG,IAAI,GAAG,EAAkC,CAAC;IAgB1D,CAAC;IAdC,IAAI,GAAG;QACL,OAAO,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,EAAE,CAAC,CAAC;IACvC,CAAC;IAED,OAAO,CAAC,IAAY;QAClB,MAAM,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QAChC,IAAI,CAAC,IAAI,EAAE,CAAC;YACV,MAAM,IAAI,eAAe,CACvB,SAAS,CAAC,kBAAkB,EAC5B,GAAG,IAAI,eAAe,CACvB,CAAC;QACJ,CAAC;QACD,OAAO,IAAI,CAAC;IACd,CAAC;CACF;AAED,MAAM,CAAC,MAAM,mBAAmB,GAAG,IAAI,mBAAmB,EAAE,CAAC","sourcesContent":["import type { InsertToPosition } from '@lumensuite/affine-shared/utils';\nimport type {\n  BlockStdScope,\n  EventName,\n  UIEventHandler,\n} from '@lumensuite/block-std';\nimport type { Disposable } from '@lumensuite/global/utils';\nimport type { ReadonlySignal } from '@lit-labs/preact-signals';\n\nimport { LumenSuiteError, ErrorCode } from '@lumensuite/global/exceptions';\n\nimport type { DataSource } from '../common/data-source/base.js';\nimport type { DataViewRenderer } from '../data-view.js';\nimport type { DataViewSelection } from '../types.js';\nimport type { UniComponent } from '../utils/uni-component/index.js';\nimport type { SingleView } from '../view-manager/single-view.js';\nimport type { ViewManager } from '../view-manager/view-manager.js';\nimport type { DataViewWidget } from '../widget/types.js';\n\nexport interface DataViewProps<\n  T extends SingleView = SingleView,\n  Selection extends DataViewSelection = DataViewSelection,\n> {\n  dataViewEle: DataViewRenderer;\n\n  headerWidget?: DataViewWidget;\n\n  view: T;\n  dataSource: DataSource;\n\n  bindHotkey: (hotkeys: Record<string, UIEventHandler>) => Disposable;\n\n  handleEvent: (name: EventName, handler: UIEventHandler) => Disposable;\n\n  setSelection: (selection?: Selection) => void;\n\n  selection$: ReadonlySignal<Selection | undefined>;\n\n  onDrag?: (evt: MouseEvent, id: string) => () => void;\n\n  std: BlockStdScope;\n}\n\nexport interface DataViewExpose {\n  addRow?(position: InsertToPosition | number): void;\n\n  getSelection?(): DataViewSelection | undefined;\n\n  focusFirstCell(): void;\n\n  showIndicator?(evt: MouseEvent): boolean;\n\n  hideIndicator?(): void;\n\n  moveTo?(id: string, evt: MouseEvent): void;\n}\n\ndeclare global {\n  export interface DataViewDataTypeMap {}\n}\nexport type BasicViewDataType<\n  Type extends string = string,\n  T = NonNullable<unknown>,\n> = {\n  id: string;\n  name: string;\n  mode: Type;\n} & T;\nexport type _DataViewDataTypeMap = {\n  [K in keyof DataViewDataTypeMap]: BasicViewDataType<\n    Extract<K, string>,\n    DataViewDataTypeMap[K]\n  >;\n};\nexport type DefaultViewDataType = BasicViewDataType & { mode: string };\ntype FallBack<T> = [T] extends [never] ? DefaultViewDataType : T;\nexport type DataViewDataType = FallBack<\n  _DataViewDataTypeMap[keyof _DataViewDataTypeMap]\n>;\nexport type DataViewTypes = keyof DataViewDataTypeMap;\nexport interface DataViewConfig<\n  Data extends DataViewDataType = DataViewDataType,\n> {\n  defaultName: string;\n  dataViewManager: new (\n    viewManager: ViewManager,\n    viewId: string\n  ) => SingleView<Data>;\n}\n\nexport interface DataViewRendererConfig {\n  view: UniComponent<DataViewProps, DataViewExpose>;\n  icon: UniComponent;\n}\n\nexport type ViewMeta<\n  Type extends string = DataViewTypes,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  Data extends DataViewDataType = any,\n> = {\n  type: Type;\n  model: DataViewConfig<Data>;\n  renderer: DataViewRendererConfig;\n};\nexport const viewType = <Type extends string>(type: Type) => ({\n  type,\n  modelConfig: <Data extends DataViewDataType>(\n    model: DataViewConfig<Data>\n  ) => ({\n    type,\n    model,\n    rendererConfig: (renderer: DataViewRendererConfig) => ({\n      type,\n      model,\n      renderer,\n    }),\n  }),\n});\n\nexport class ViewRendererManager {\n  private map = new Map<string, DataViewRendererConfig>();\n\n  get all() {\n    return Array.from(this.map.values());\n  }\n\n  getView(type: string): DataViewRendererConfig {\n    const view = this.map.get(type);\n    if (!view) {\n      throw new LumenSuiteError(\n        ErrorCode.DatabaseBlockError,\n        `${type} is not exist`\n      );\n    }\n    return view;\n  }\n}\n\nexport const viewRendererManager = new ViewRendererManager();\n"]}