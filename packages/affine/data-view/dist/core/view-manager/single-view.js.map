{"version":3,"file":"single-view.js","sourceRoot":"","sources":["../../../src/core/view-manager/single-view.ts"],"names":[],"mappings":"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","sourcesContent":["import type { InsertToPosition } from '@blocksuite/affine-shared/utils';\n\nimport {\n  computed,\n  type ReadonlySignal,\n  signal,\n} from '@lit-labs/preact-signals';\n\nimport type { ColumnMeta } from '../column/column-config.js';\nimport type { FilterGroup, Variable } from '../common/ast.js';\nimport type { DetailSlots } from '../common/data-source/base.js';\nimport type { DataViewContextKey } from '../common/data-source/context.js';\nimport type { TType } from '../logical/typesystem.js';\nimport type { DatabaseFlags } from '../types.js';\nimport type { UniComponent } from '../utils/uni-component/index.js';\nimport type { DataViewDataType, ViewMeta } from '../view/data-view.js';\nimport type { Column } from './column.js';\nimport type { ViewManager } from './view-manager.js';\n\nimport { type Cell, CellBase } from './cell.js';\nimport { type Row, RowBase } from './row.js';\n\nexport type HeaderType = {\n  titleColumn?: string;\n  iconColumn?: string;\n  imageColumn?: string;\n};\n\nexport interface SingleView<\n  ViewData extends DataViewDataType = DataViewDataType,\n> {\n  viewManager: ViewManager;\n  viewMeta: ViewMeta;\n  readonly$: ReadonlySignal<boolean>;\n\n  delete(): void;\n  duplicate(): void;\n  name$: ReadonlySignal<string>;\n  updateName(name: string): void;\n\n  get id(): string;\n\n  get type(): string;\n\n  columns$: ReadonlySignal<string[]>;\n  columnsWithoutFilter$: ReadonlySignal<string[]>;\n  columnManagerList$: ReadonlySignal<Column[]>;\n  detailColumns$: ReadonlySignal<string[]>;\n\n  rows$: ReadonlySignal<string[]>;\n\n  filter$: ReadonlySignal<FilterGroup>;\n  filterVisible$: ReadonlySignal<boolean>;\n\n  updateFilter(filter: FilterGroup): void;\n\n  vars$: ReadonlySignal<Variable[]>;\n\n  get allColumnMetas(): ColumnMeta[];\n\n  get detailSlots(): DetailSlots;\n\n  featureFlags$: ReadonlySignal<DatabaseFlags>;\n\n  cellGetValue(rowId: string, columnId: string): unknown;\n\n  cellGetJsonValue(rowId: string, columnId: string): unknown;\n\n  cellGetStringValue(rowId: string, columnId: string): string | undefined;\n\n  columnParseValueFromString(\n    columnId: string,\n    value: string\n  ):\n    | {\n        value: unknown;\n        data?: Record<string, unknown>;\n      }\n    | undefined;\n\n  cellUpdateRenderValue(rowId: string, columnId: string, value: unknown): void;\n\n  cellUpdateValue(rowId: string, columnId: string, value: unknown): void;\n\n  rowDelete(ids: string[]): void;\n\n  rowAdd(insertPosition: InsertToPosition): string;\n\n  rowGetPrev(rowId: string): string;\n\n  rowGetNext(rowId: string): string;\n\n  columnAdd(toAfterOfColumn: InsertToPosition, type?: string): string;\n\n  columnDelete(columnId: string): void;\n\n  columnDuplicate(columnId: string): void;\n\n  columnGet(columnId: string): Column;\n\n  columnGetMeta(type: string): ColumnMeta | undefined;\n\n  columnGetPreColumn(columnId: string): Column | undefined;\n\n  columnGetNextColumn(columnId: string): Column | undefined;\n\n  columnGetName(columnId: string): string;\n\n  columnGetType(columnId: string): string | undefined;\n\n  columnGetHide(columnId: string): boolean;\n\n  columnGetData(columnId: string): Record<string, unknown>;\n\n  columnGetDataType(columnId: string): TType | undefined;\n\n  columnGetIndex(columnId: string): number;\n\n  columnGetIdByIndex(index: number): string;\n\n  columnGetReadonly(columnId: string): boolean;\n\n  columnUpdateName(columnId: string, name: string): void;\n\n  columnUpdateHide(columnId: string, hide: boolean): void;\n\n  columnUpdateType(columnId: string, type: string): void;\n\n  columnUpdateData(columnId: string, data: Record<string, unknown>): void;\n\n  getIcon(type: string): UniComponent | undefined;\n\n  columnMove(columnId: string, position: InsertToPosition): void;\n\n  rowMove(rowId: string, position: InsertToPosition): void;\n\n  viewDataUpdate(updater: (viewData: ViewData) => Partial<ViewData>): void;\n\n  viewData$: ReadonlySignal<ViewData | undefined>;\n\n  getContext<T>(key: DataViewContextKey<T>): T | undefined;\n\n  rowGet(rowId: string): Row;\n\n  header$: ReadonlySignal<HeaderType>;\n\n  cellGet(rowId: string, columnId: string): Cell;\n}\n\nexport abstract class SingleViewBase<\n  ViewData extends DataViewDataType = DataViewDataType,\n> implements SingleView<ViewData>\n{\n  private searchString = signal('');\n\n  columnManagerList$ = computed(() => {\n    return this.columns$.value.map(\n      id => this.columnGet(id) as ReturnType<this['columnGet']>\n    );\n  });\n\n  abstract columns$: ReadonlySignal<string[]>;\n\n  abstract columnsWithoutFilter$: ReadonlySignal<string[]>;\n\n  abstract detailColumns$: ReadonlySignal<string[]>;\n\n  abstract filter$: ReadonlySignal<FilterGroup>;\n\n  filterVisible$ = computed(() => {\n    return (this.filter$.value?.conditions.length ?? 0) > 0;\n  });\n\n  abstract header$: ReadonlySignal<HeaderType>;\n\n  name$: ReadonlySignal<string> = computed(() => {\n    return this.viewData$.value?.name ?? '';\n  });\n\n  abstract readonly$: ReadonlySignal<boolean>;\n\n  rows$ = computed(() => {\n    return this.filteredRows(this.searchString.value);\n  });\n\n  vars$ = computed(() => {\n    return this.columnsWithoutFilter$.value.map(id => {\n      const v = this.columnGet(id);\n      const propertyMeta = this.dataSource.getPropertyMeta(v.type$.value);\n      return {\n        id: v.id,\n        name: v.name$.value,\n        type: propertyMeta.config.type(v.data$.value),\n        icon: v.icon,\n      };\n    });\n  });\n\n  viewData$ = computed(() => {\n    return this.dataSource.viewDataGet(this.id) as ViewData | undefined;\n  });\n\n  get allColumnMetas(): ColumnMeta[] {\n    return this.dataSource.addPropertyConfigList;\n  }\n\n  protected get dataSource() {\n    return this.viewManager.dataSource;\n  }\n\n  get detailSlots(): DetailSlots {\n    return this.dataSource.detailSlots;\n  }\n\n  get featureFlags$() {\n    return this.dataSource.featureFlags$;\n  }\n\n  abstract get type(): string;\n\n  get viewMeta() {\n    return this.dataSource.viewMetaGet(this.type);\n  }\n\n  constructor(\n    public viewManager: ViewManager,\n    public id: string\n  ) {}\n\n  private filteredRows(searchString: string): string[] {\n    return this.dataSource.rows$.value.filter(id => {\n      if (searchString) {\n        const containsSearchString = this.columns$.value.some(columnId => {\n          return this.cellGetStringValue(id, columnId)\n            ?.toLowerCase()\n            .includes(searchString?.toLowerCase());\n        });\n        if (!containsSearchString) {\n          return false;\n        }\n      }\n      return this.isShow(id);\n    });\n  }\n\n  cellGet(rowId: string, columnId: string): Cell {\n    return new CellBase(this, columnId, rowId);\n  }\n\n  cellGetJsonValue(rowId: string, columnId: string): unknown {\n    const type = this.columnGetType(columnId);\n    if (!type) {\n      return;\n    }\n    return this.dataSource\n      .getPropertyMeta(type)\n      .config.cellToJson(\n        this.dataSource.cellGetValue(rowId, columnId),\n        this.columnGetData(columnId)\n      );\n  }\n\n  cellGetStringValue(rowId: string, columnId: string): string | undefined {\n    const type = this.columnGetType(columnId);\n    if (!type) {\n      return;\n    }\n    return (\n      this.dataSource\n        .getPropertyMeta(type)\n        .config.cellToString(\n          this.dataSource.cellGetValue(rowId, columnId),\n          this.columnGetData(columnId)\n        ) ?? ''\n    );\n  }\n\n  cellGetValue(rowId: string, columnId: string): unknown {\n    const type = this.columnGetType(columnId);\n    if (!type) {\n      return;\n    }\n    const cellValue = this.dataSource.cellGetValue(rowId, columnId);\n    return (\n      this.dataSource\n        .getPropertyMeta(type)\n        .config.formatValue?.(cellValue, this.columnGetData(columnId)) ??\n      cellValue\n    );\n  }\n\n  cellUpdateRenderValue(rowId: string, columnId: string, value: unknown): void {\n    this.dataSource.cellChangeValue(rowId, columnId, value);\n  }\n\n  cellUpdateValue(rowId: string, columnId: string, value: unknown): void {\n    this.dataSource.cellChangeValue(rowId, columnId, value);\n  }\n\n  columnAdd(position: InsertToPosition, type?: string): string {\n    const id = this.dataSource.propertyAdd(position, type);\n    this.columnMove(id, position);\n    return id;\n  }\n\n  columnDelete(columnId: string): void {\n    this.dataSource.propertyDelete(columnId);\n  }\n\n  columnDuplicate(columnId: string): void {\n    const id = this.dataSource.propertyDuplicate(columnId);\n    this.columnMove(id, {\n      before: false,\n      id: columnId,\n    });\n  }\n\n  abstract columnGet(columnId: string): Column;\n\n  columnGetData(columnId: string): Record<string, unknown> {\n    return this.dataSource.propertyGetData(columnId);\n  }\n\n  columnGetDataType(columnId: string): TType | undefined {\n    const type = this.columnGetType(columnId);\n    if (!type) {\n      return;\n    }\n    return this.dataSource\n      .getPropertyMeta(type)\n      .config.type(this.columnGetData(columnId));\n  }\n\n  abstract columnGetHide(columnId: string): boolean;\n\n  columnGetIdByIndex(index: number): string {\n    return this.columns$.value[index];\n  }\n\n  columnGetIndex(columnId: string): number {\n    return this.columns$.value.indexOf(columnId);\n  }\n\n  columnGetMeta(type: string): ColumnMeta {\n    return this.dataSource.getPropertyMeta(type);\n  }\n\n  columnGetName(columnId: string): string {\n    return this.dataSource.propertyGetName(columnId);\n  }\n\n  columnGetNextColumn(columnId: string): Column | undefined {\n    return this.columnGet(\n      this.columnGetIdByIndex(this.columnGetIndex(columnId) + 1)\n    );\n  }\n\n  columnGetPreColumn(columnId: string): Column | undefined {\n    return this.columnGet(\n      this.columnGetIdByIndex(this.columnGetIndex(columnId) - 1)\n    );\n  }\n\n  columnGetReadonly(columnId: string): boolean {\n    return this.dataSource.propertyGetReadonly(columnId);\n  }\n\n  columnGetType(columnId: string): string | undefined {\n    return this.dataSource.propertyGetType(columnId);\n  }\n\n  abstract columnMove(columnId: string, position: InsertToPosition): void;\n\n  columnParseValueFromString(columnId: string, cellData: string) {\n    const type = this.columnGetType(columnId);\n    if (!type) {\n      return;\n    }\n    return (\n      this.dataSource\n        .getPropertyMeta(type)\n        .config.cellFromString(cellData, this.columnGetData(columnId)) ?? ''\n    );\n  }\n\n  columnUpdateData(columnId: string, data: Record<string, unknown>): void {\n    this.dataSource.propertyChangeData(columnId, data);\n  }\n\n  abstract columnUpdateHide(columnId: string, hide: boolean): void;\n\n  columnUpdateName(columnId: string, name: string): void {\n    this.dataSource.propertyChangeName(columnId, name);\n  }\n\n  columnUpdateType(columnId: string, type: string): void {\n    this.dataSource.propertyChangeType(columnId, type);\n  }\n\n  delete(): void {\n    this.viewManager.viewDelete(this.id);\n  }\n\n  duplicate(): void {\n    this.viewManager.viewDuplicate(this.id);\n  }\n\n  getContext<T>(key: DataViewContextKey<T>): T | undefined {\n    return this.dataSource.getContext(key);\n  }\n\n  getIcon(type: string): UniComponent | undefined {\n    return this.dataSource.getPropertyMeta(type).renderer.icon;\n  }\n\n  abstract isShow(rowId: string): boolean;\n\n  rowAdd(insertPosition: InsertToPosition | number): string {\n    return this.dataSource.rowAdd(insertPosition);\n  }\n\n  rowDelete(ids: string[]): void {\n    this.dataSource.rowDelete(ids);\n  }\n\n  rowGet(rowId: string): Row {\n    return new RowBase(this, rowId);\n  }\n\n  abstract rowGetNext(rowId: string): string;\n\n  abstract rowGetPrev(rowId: string): string;\n\n  rowMove(rowId: string, position: InsertToPosition): void {\n    this.dataSource.rowMove(rowId, position);\n  }\n\n  setSearch(str: string): void {\n    this.searchString.value = str;\n  }\n\n  abstract updateFilter(filter: FilterGroup): void;\n\n  updateName(name: string): void {\n    this.viewDataUpdate(() => {\n      return {\n        name,\n      } as ViewData;\n    });\n  }\n\n  viewDataUpdate(updater: (viewData: ViewData) => Partial<ViewData>): void {\n    this.dataSource.viewDataUpdate(this.id, updater);\n  }\n}\n"]}