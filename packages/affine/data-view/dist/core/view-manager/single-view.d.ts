import type { InsertToPosition } from '@lumensuite/affine-shared/utils';
import { type ReadonlySignal } from '@lit-labs/preact-signals';
import type { ColumnMeta } from '../column/column-config.js';
import type { FilterGroup, Variable } from '../common/ast.js';
import type { DetailSlots } from '../common/data-source/base.js';
import type { DataViewContextKey } from '../common/data-source/context.js';
import type { TType } from '../logical/typesystem.js';
import type { DatabaseFlags } from '../types.js';
import type { UniComponent } from '../utils/uni-component/index.js';
import type { DataViewDataType, ViewMeta } from '../view/data-view.js';
import type { Column } from './column.js';
import type { ViewManager } from './view-manager.js';
import { type Cell } from './cell.js';
import { type Row } from './row.js';
export type HeaderType = {
    titleColumn?: string;
    iconColumn?: string;
    imageColumn?: string;
};
export interface SingleView<ViewData extends DataViewDataType = DataViewDataType> {
    viewManager: ViewManager;
    viewMeta: ViewMeta;
    readonly$: ReadonlySignal<boolean>;
    delete(): void;
    duplicate(): void;
    name$: ReadonlySignal<string>;
    updateName(name: string): void;
    get id(): string;
    get type(): string;
    columns$: ReadonlySignal<string[]>;
    columnsWithoutFilter$: ReadonlySignal<string[]>;
    columnManagerList$: ReadonlySignal<Column[]>;
    detailColumns$: ReadonlySignal<string[]>;
    rows$: ReadonlySignal<string[]>;
    filter$: ReadonlySignal<FilterGroup>;
    filterVisible$: ReadonlySignal<boolean>;
    updateFilter(filter: FilterGroup): void;
    vars$: ReadonlySignal<Variable[]>;
    get allColumnMetas(): ColumnMeta[];
    get detailSlots(): DetailSlots;
    featureFlags$: ReadonlySignal<DatabaseFlags>;
    cellGetValue(rowId: string, columnId: string): unknown;
    cellGetJsonValue(rowId: string, columnId: string): unknown;
    cellGetStringValue(rowId: string, columnId: string): string | undefined;
    columnParseValueFromString(columnId: string, value: string): {
        value: unknown;
        data?: Record<string, unknown>;
    } | undefined;
    cellUpdateRenderValue(rowId: string, columnId: string, value: unknown): void;
    cellUpdateValue(rowId: string, columnId: string, value: unknown): void;
    rowDelete(ids: string[]): void;
    rowAdd(insertPosition: InsertToPosition): string;
    rowGetPrev(rowId: string): string;
    rowGetNext(rowId: string): string;
    columnAdd(toAfterOfColumn: InsertToPosition, type?: string): string;
    columnDelete(columnId: string): void;
    columnDuplicate(columnId: string): void;
    columnGet(columnId: string): Column;
    columnGetMeta(type: string): ColumnMeta | undefined;
    columnGetPreColumn(columnId: string): Column | undefined;
    columnGetNextColumn(columnId: string): Column | undefined;
    columnGetName(columnId: string): string;
    columnGetType(columnId: string): string | undefined;
    columnGetHide(columnId: string): boolean;
    columnGetData(columnId: string): Record<string, unknown>;
    columnGetDataType(columnId: string): TType | undefined;
    columnGetIndex(columnId: string): number;
    columnGetIdByIndex(index: number): string;
    columnGetReadonly(columnId: string): boolean;
    columnUpdateName(columnId: string, name: string): void;
    columnUpdateHide(columnId: string, hide: boolean): void;
    columnUpdateType(columnId: string, type: string): void;
    columnUpdateData(columnId: string, data: Record<string, unknown>): void;
    getIcon(type: string): UniComponent | undefined;
    columnMove(columnId: string, position: InsertToPosition): void;
    rowMove(rowId: string, position: InsertToPosition): void;
    viewDataUpdate(updater: (viewData: ViewData) => Partial<ViewData>): void;
    viewData$: ReadonlySignal<ViewData | undefined>;
    getContext<T>(key: DataViewContextKey<T>): T | undefined;
    rowGet(rowId: string): Row;
    header$: ReadonlySignal<HeaderType>;
    cellGet(rowId: string, columnId: string): Cell;
}
export declare abstract class SingleViewBase<ViewData extends DataViewDataType = DataViewDataType> implements SingleView<ViewData> {
    viewManager: ViewManager;
    id: string;
    private searchString;
    columnManagerList$: ReadonlySignal<ReturnType<this["columnGet"]>[]>;
    abstract columns$: ReadonlySignal<string[]>;
    abstract columnsWithoutFilter$: ReadonlySignal<string[]>;
    abstract detailColumns$: ReadonlySignal<string[]>;
    abstract filter$: ReadonlySignal<FilterGroup>;
    filterVisible$: ReadonlySignal<boolean>;
    abstract header$: ReadonlySignal<HeaderType>;
    name$: ReadonlySignal<string>;
    abstract readonly$: ReadonlySignal<boolean>;
    rows$: ReadonlySignal<string[]>;
    vars$: ReadonlySignal<{
        id: string;
        name: string;
        type: TType;
        icon: UniComponent | undefined;
    }[]>;
    viewData$: ReadonlySignal<ViewData | undefined>;
    get allColumnMetas(): ColumnMeta[];
    protected get dataSource(): import("../common/data-source/base.js").DataSource;
    get detailSlots(): DetailSlots;
    get featureFlags$(): ReadonlySignal<DatabaseFlags>;
    abstract get type(): string;
    get viewMeta(): ViewMeta;
    constructor(viewManager: ViewManager, id: string);
    private filteredRows;
    cellGet(rowId: string, columnId: string): Cell;
    cellGetJsonValue(rowId: string, columnId: string): unknown;
    cellGetStringValue(rowId: string, columnId: string): string | undefined;
    cellGetValue(rowId: string, columnId: string): unknown;
    cellUpdateRenderValue(rowId: string, columnId: string, value: unknown): void;
    cellUpdateValue(rowId: string, columnId: string, value: unknown): void;
    columnAdd(position: InsertToPosition, type?: string): string;
    columnDelete(columnId: string): void;
    columnDuplicate(columnId: string): void;
    abstract columnGet(columnId: string): Column;
    columnGetData(columnId: string): Record<string, unknown>;
    columnGetDataType(columnId: string): TType | undefined;
    abstract columnGetHide(columnId: string): boolean;
    columnGetIdByIndex(index: number): string;
    columnGetIndex(columnId: string): number;
    columnGetMeta(type: string): ColumnMeta;
    columnGetName(columnId: string): string;
    columnGetNextColumn(columnId: string): Column | undefined;
    columnGetPreColumn(columnId: string): Column | undefined;
    columnGetReadonly(columnId: string): boolean;
    columnGetType(columnId: string): string | undefined;
    abstract columnMove(columnId: string, position: InsertToPosition): void;
    columnParseValueFromString(columnId: string, cellData: string): {
        value: unknown;
        data?: Record<string, unknown>;
    } | undefined;
    columnUpdateData(columnId: string, data: Record<string, unknown>): void;
    abstract columnUpdateHide(columnId: string, hide: boolean): void;
    columnUpdateName(columnId: string, name: string): void;
    columnUpdateType(columnId: string, type: string): void;
    delete(): void;
    duplicate(): void;
    getContext<T>(key: DataViewContextKey<T>): T | undefined;
    getIcon(type: string): UniComponent | undefined;
    abstract isShow(rowId: string): boolean;
    rowAdd(insertPosition: InsertToPosition | number): string;
    rowDelete(ids: string[]): void;
    rowGet(rowId: string): Row;
    abstract rowGetNext(rowId: string): string;
    abstract rowGetPrev(rowId: string): string;
    rowMove(rowId: string, position: InsertToPosition): void;
    setSearch(str: string): void;
    abstract updateFilter(filter: FilterGroup): void;
    updateName(name: string): void;
    viewDataUpdate(updater: (viewData: ViewData) => Partial<ViewData>): void;
}
//# sourceMappingURL=single-view.d.ts.map