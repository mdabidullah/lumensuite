{"version":3,"file":"column.js","sourceRoot":"","sources":["../../../src/core/view-manager/column.ts"],"names":[],"mappings":"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","sourcesContent":["import { computed, type ReadonlySignal } from '@lit-labs/preact-signals';\n\nimport type { CellRenderer } from '../column/index.js';\nimport type { TType } from '../logical/typesystem.js';\nimport type { ColumnDataUpdater } from '../types.js';\nimport type { UniComponent } from '../utils/uni-component/index.js';\nimport type { Cell } from './cell.js';\nimport type { SingleView } from './single-view.js';\n\nexport interface Column<\n  Value = unknown,\n  Data extends Record<string, unknown> = Record<string, unknown>,\n> {\n  get view(): SingleView;\n\n  get id(): string;\n\n  get index(): number;\n\n  type$: ReadonlySignal<string>;\n\n  dataType$: ReadonlySignal<TType>;\n\n  name$: ReadonlySignal<string>;\n\n  hide$: ReadonlySignal<boolean>;\n\n  cells$: ReadonlySignal<Cell[]>;\n\n  data$: ReadonlySignal<Data>;\n\n  readonly$: ReadonlySignal<boolean>;\n\n  renderer$: ReadonlySignal<CellRenderer | undefined>;\n\n  detailRenderer$: ReadonlySignal<CellRenderer | undefined>;\n\n  get isFirst(): boolean;\n\n  get isLast(): boolean;\n\n  cellGet(rowId: string): Cell<Value>;\n\n  getStringValue(rowId: string): string;\n\n  getValue(rowId: string): Value | undefined;\n\n  setValue(rowId: string, value: Value | undefined): void;\n\n  setValueFromString(rowId: string, value: string): void;\n\n  updateData(updater: ColumnDataUpdater<Data>): void;\n\n  updateHide(hide: boolean): void;\n\n  updateName(name: string): void;\n\n  get updateType(): undefined | ((type: string) => void);\n\n  get delete(): undefined | (() => void);\n\n  get duplicate(): undefined | (() => void);\n\n  get icon(): UniComponent | undefined;\n}\n\nexport abstract class ColumnBase<\n  Value = unknown,\n  Data extends Record<string, unknown> = Record<string, unknown>,\n> implements Column<Value, Data>\n{\n  cells$ = computed(() => {\n    return this.view.rows$.value.map(id => this.cellGet(id));\n  });\n\n  data$ = computed(() => {\n    return this.view.columnGetData(this.id) as Data;\n  });\n\n  dataType$ = computed(() => {\n    return this.view.columnGetDataType(this.id)!;\n  });\n\n  detailRenderer$ = computed(() => {\n    return (\n      this.view.columnGetMeta(this.type$.value)?.renderer.detailCellRenderer ??\n      this.renderer$.value\n    );\n  });\n\n  hide$ = computed(() => {\n    return this.view.columnGetHide(this.id);\n  });\n\n  name$ = computed(() => {\n    return this.view.columnGetName(this.id);\n  });\n\n  readonly$ = computed(() => {\n    return this.view.readonly$.value || this.view.columnGetReadonly(this.id);\n  });\n\n  renderer$ = computed(() => {\n    return this.view.columnGetMeta(this.type$.value)?.renderer.cellRenderer;\n  });\n\n  type$ = computed(() => {\n    return this.view.columnGetType(this.id)!;\n  });\n\n  get delete(): (() => void) | undefined {\n    return () => this.view.columnDelete(this.id);\n  }\n\n  get duplicate(): (() => void) | undefined {\n    return () => this.view.columnDuplicate(this.id);\n  }\n\n  get icon(): UniComponent | undefined {\n    if (!this.type$.value) return undefined;\n    return this.view.getIcon(this.type$.value);\n  }\n\n  get id(): string {\n    return this.columnId;\n  }\n\n  get index(): number {\n    return this.view.columnGetIndex(this.id);\n  }\n\n  get isFirst(): boolean {\n    return this.view.columnGetIndex(this.id) === 0;\n  }\n\n  get isLast(): boolean {\n    return (\n      this.view.columnGetIndex(this.id) ===\n      this.view.columnManagerList$.value.length - 1\n    );\n  }\n\n  get updateType(): undefined | ((type: string) => void) {\n    return type => this.view.columnUpdateType(this.id, type);\n  }\n\n  constructor(\n    public view: SingleView,\n    public columnId: string\n  ) {}\n\n  cellGet(rowId: string): Cell<Value> {\n    return this.view.cellGet(rowId, this.id) as Cell<Value>;\n  }\n\n  getStringValue(rowId: string): string {\n    return this.cellGet(rowId).stringValue$.value;\n  }\n\n  getValue(rowId: string): Value | undefined {\n    return this.cellGet(rowId).value$.value;\n  }\n\n  setValue(rowId: string, value: Value | undefined): void {\n    return this.cellGet(rowId).setValue(value);\n  }\n\n  setValueFromString(rowId: string, value: string): void {\n    const data = this.view.columnParseValueFromString(this.id, value);\n    if (!data) {\n      return;\n    }\n    if (data.data) {\n      this.updateData(() => data.data as Data);\n    }\n    this.setValue(rowId, data.value as Value);\n  }\n\n  updateData(updater: ColumnDataUpdater<Data>): void {\n    const data = this.data$.value;\n    this.view.columnUpdateData(this.id, {\n      ...data,\n      ...updater(data),\n    });\n  }\n\n  updateHide(hide: boolean): void {\n    this.view.columnUpdateHide(this.id, hide);\n  }\n\n  updateName(name: string): void {\n    this.view.columnUpdateName(this.id, name);\n  }\n}\n"]}