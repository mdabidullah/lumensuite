{"version":3,"file":"cell.js","sourceRoot":"","sources":["../../../src/core/view-manager/cell.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,QAAQ,EAAuB,MAAM,0BAA0B,CAAC;AA4BzE,MAAM,OAAO,QAAQ;IAkCnB,IAAI,MAAM;QACR,OAAO,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC;IAC5B,CAAC;IAED,IAAI,GAAG;QACL,OAAO,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IACtC,CAAC;IAED,YACS,IAAgB,EAChB,QAAgB,EAChB,KAAa;QAFb,SAAI,GAAJ,IAAI,CAAY;QAChB,aAAQ,GAAR,QAAQ,CAAQ;QAChB,UAAK,GAAL,KAAK,CAAQ;QAxCtB,YAAO,GAAG,QAAQ,CAAC,GAAG,EAAE;YACtB,OAAO,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAwB,CAAC;QACnE,CAAC,CAAC,CAAC;QAEH,aAAQ,GAA4B,QAAQ,CAAC,GAAG,EAAE;YAChD,OAAO,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QAC5D,CAAC,CAAC,CAAC;QAEH,eAAU,GAA4B,QAAQ,CAAC,GAAG,EAAE;YAClD,OAAO,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;QAC/D,CAAC,CAAC,CAAC;QAEH,UAAK,GAAG,QAAQ,CAAC,GAAG,EAAE;YACpB,OAAO,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,eAAe,CACrD,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,CACxB,CAAC;QACJ,CAAC,CAAC,CAAC;QAEH,iBAAY,GAA2B,QAAQ,CAAC,GAAG,EAAE;YACnD,OAAO,IAAI,CAAC,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,QAAQ,CAAE,CAAC;QAClE,CAAC,CAAC,CAAC;QAEH,WAAM,GAAG,QAAQ,CAAC,GAAG,EAAE;YACrB,OAAO,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,YAAY,CAClD,IAAI,CAAC,KAAK,EACV,IAAI,CAAC,QAAQ,CACL,CAAC;QACb,CAAC,CAAC,CAAC;IAcA,CAAC;IAEJ,QAAQ;QACN,OAAO,SAAS,CAAC;IACnB,CAAC;IAED,QAAQ,CAAC,KAA0B;QACjC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,eAAe,CAC9C,IAAI,CAAC,KAAK,EACV,IAAI,CAAC,QAAQ,EACb,KAAK,CACN,CAAC;IACJ,CAAC;CACF","sourcesContent":["import { computed, type ReadonlySignal } from '@lit-labs/preact-signals';\n\nimport type { Column } from './column.js';\nimport type { Row } from './row.js';\nimport type { SingleView } from './single-view.js';\n\nexport interface Cell<\n  Value = unknown,\n  Data extends Record<string, unknown> = Record<string, unknown>,\n> {\n  view: SingleView;\n\n  columnId: string;\n  column: Column<Value, Data>;\n\n  rowId: string;\n  row: Row;\n\n  isEmpty$: ReadonlySignal<boolean>;\n  value$: ReadonlySignal<Value | undefined>;\n  stringValue$: ReadonlySignal<string>;\n  jsonValue$: ReadonlySignal<unknown>;\n\n  setValue(value: Value | undefined): void;\n\n  getExtra(): unknown;\n}\n\nexport class CellBase<\n  Value = unknown,\n  Data extends Record<string, unknown> = Record<string, unknown>,\n> implements Cell<Value, Data>\n{\n  column$ = computed(() => {\n    return this.view.columnGet(this.columnId) as Column<Value, Data>;\n  });\n\n  isEmpty$: ReadonlySignal<boolean> = computed(() => {\n    return this.meta$.value.config.isEmpty(this.value$.value);\n  });\n\n  jsonValue$: ReadonlySignal<unknown> = computed(() => {\n    return this.view.cellGetJsonValue(this.rowId, this.columnId);\n  });\n\n  meta$ = computed(() => {\n    return this.view.viewManager.dataSource.getPropertyMeta(\n      this.column.type$.value\n    );\n  });\n\n  stringValue$: ReadonlySignal<string> = computed(() => {\n    return this.view.cellGetStringValue(this.rowId, this.columnId)!;\n  });\n\n  value$ = computed(() => {\n    return this.view.viewManager.dataSource.cellGetValue(\n      this.rowId,\n      this.columnId\n    ) as Value;\n  });\n\n  get column(): Column<Value, Data> {\n    return this.column$.value;\n  }\n\n  get row(): Row {\n    return this.view.rowGet(this.rowId);\n  }\n\n  constructor(\n    public view: SingleView,\n    public columnId: string,\n    public rowId: string\n  ) {}\n\n  getExtra(): unknown {\n    return undefined;\n  }\n\n  setValue(value: unknown | undefined): void {\n    this.view.viewManager.dataSource.cellChangeValue(\n      this.rowId,\n      this.columnId,\n      value\n    );\n  }\n}\n"]}