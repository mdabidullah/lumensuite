{"version":3,"file":"types.js","sourceRoot":"","sources":["../../src/core/types.ts"],"names":[],"mappings":"AAuBA,MAAM,CAAC,MAAM,oBAAoB,GAA4B;IAC3D,wBAAwB,EAAE,KAAK;CAChC,CAAC","sourcesContent":["import type { KanbanViewSelectionWithType } from '../view-presets/kanban/types.js';\nimport type { TableViewSelectionWithType } from '../view-presets/table/types.js';\n\nexport type DataViewSelection =\n  | TableViewSelectionWithType\n  | KanbanViewSelectionWithType;\nexport type GetDataViewSelection<\n  K extends DataViewSelection['type'],\n  T = DataViewSelection,\n> = T extends {\n  type: K;\n}\n  ? T\n  : never;\nexport type DataViewSelectionState = DataViewSelection | undefined;\nexport type ColumnDataUpdater<\n  Data extends Record<string, unknown> = Record<string, unknown>,\n> = (data: Data) => Partial<Data>;\n\nexport interface DatabaseFlags {\n  enable_number_formatting: boolean;\n}\n\nexport const defaultDatabaseFlags: Readonly<DatabaseFlags> = {\n  enable_number_formatting: false,\n};\n"]}