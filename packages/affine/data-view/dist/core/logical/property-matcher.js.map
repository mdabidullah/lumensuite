{"version":3,"file":"property-matcher.js","sourceRoot":"","sources":["../../../src/core/logical/property-matcher.ts"],"names":[],"mappings":"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","sourcesContent":["import type { TFunction } from './typesystem.js';\n\nimport { tDate, tNumber, tString } from './data-type.js';\nimport { Matcher } from './matcher.js';\nimport { tArray, tFunction, tUnknown, typesystem } from './typesystem.js';\n\nexport const propertyMatcher = new Matcher<\n  {\n    name: string;\n    impl: (...args: unknown[]) => unknown;\n  },\n  TFunction\n>((type, target) => {\n  if (type.type !== 'function') {\n    return false;\n  }\n  const staticType = typesystem.subst(\n    Object.fromEntries(type.typeVars?.map(v => [v.name, v.bound]) ?? []),\n    type\n  );\n  const firstArg = staticType.args[0];\n  return firstArg && typesystem.isSubtype(firstArg, target);\n});\n\npropertyMatcher.register(\n  tFunction({\n    args: [tString.create()],\n    rt: tNumber.create(),\n  }),\n  {\n    name: 'Length',\n    impl: value => {\n      if (typeof value !== 'string') {\n        return 0;\n      }\n      return value.length;\n    },\n  }\n);\npropertyMatcher.register(\n  tFunction({\n    args: [tDate.create()],\n    rt: tNumber.create(),\n  }),\n  {\n    name: 'Day of month',\n    impl: value => {\n      if (typeof value !== 'number') {\n        return 0;\n      }\n      return new Date(value).getDate();\n    },\n  }\n);\npropertyMatcher.register(\n  tFunction({\n    args: [tDate.create()],\n    rt: tNumber.create(),\n  }),\n  {\n    name: 'Day of week',\n    impl: value => {\n      if (typeof value !== 'number') {\n        return 0;\n      }\n      return new Date(value).getDay();\n    },\n  }\n);\npropertyMatcher.register(\n  tFunction({\n    args: [tDate.create()],\n    rt: tNumber.create(),\n  }),\n  {\n    name: 'Month of year',\n    impl: value => {\n      if (typeof value !== 'number') {\n        return 0;\n      }\n      return new Date(value).getMonth() + 1;\n    },\n  }\n);\npropertyMatcher.register(\n  tFunction({\n    args: [tArray(tUnknown.create())],\n    rt: tNumber.create(),\n  }),\n  {\n    name: 'Size',\n    impl: value => {\n      if (!Array.isArray(value)) {\n        return 0;\n      }\n      return value.length;\n    },\n  }\n);\n"]}