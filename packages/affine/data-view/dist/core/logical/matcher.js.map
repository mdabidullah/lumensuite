{"version":3,"file":"matcher.js","sourceRoot":"","sources":["../../../src/core/logical/matcher.ts"],"names":[],"mappings":"AAEA,OAAO,EAAE,UAAU,EAAE,MAAM,iBAAiB,CAAC;AAO7C,MAAM,OAAO,OAAO;IAGlB,YACU,SAGO,UAAU,CAAC,SAAS,CAAC,IAAI,CAAC,UAAU,CAAC;QAH5C,WAAM,GAAN,MAAM,CAGsC;QAN9C,SAAI,GAA8B,EAAE,CAAC;IAO1C,CAAC;IAEJ,GAAG;QACD,OAAO,IAAI,CAAC,IAAI,CAAC;IACnB,CAAC;IAED,UAAU,CAAC,IAAW;QACpB,MAAM,MAAM,GAAwB,EAAE,CAAC;QACvC,KAAK,MAAM,CAAC,IAAI,IAAI,CAAC,IAAI,EAAE,CAAC;YAC1B,IAAI,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,EAAE,IAAI,CAAC,EAAE,CAAC;gBAC9B,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YACjB,CAAC;QACH,CAAC;QACD,OAAO,MAAM,CAAC;IAChB,CAAC;IAED,cAAc,CAAC,IAAW;QACxB,MAAM,MAAM,GAAW,EAAE,CAAC;QAC1B,KAAK,MAAM,CAAC,IAAI,IAAI,CAAC,IAAI,EAAE,CAAC;YAC1B,IAAI,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,EAAE,IAAI,CAAC,EAAE,CAAC;gBAC9B,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;YACtB,CAAC;QACH,CAAC;QACD,OAAO,MAAM,CAAC;IAChB,CAAC;IAED,IAAI,CACF,CAA6C;QAE7C,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IAC3B,CAAC;IAED,QAAQ,CAAC,CAA0B;QACjC,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC;IACpD,CAAC;IAED,SAAS,CAAC,IAAU,EAAE,MAAa;QACjC,OAAO,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;IACnC,CAAC;IAED,KAAK,CAAC,IAAW;QACf,KAAK,MAAM,CAAC,IAAI,IAAI,CAAC,IAAI,EAAE,CAAC;YAC1B,IAAI,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,EAAE,IAAI,CAAC,EAAE,CAAC;gBAC9B,OAAO,CAAC,CAAC,IAAI,CAAC;YAChB,CAAC;QACH,CAAC;QACD,OAAO;IACT,CAAC;IAED,QAAQ,CAAC,IAAU,EAAE,IAAU;QAC7B,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC;IACjC,CAAC;CACF","sourcesContent":["import type { TType } from './typesystem.js';\n\nimport { typesystem } from './typesystem.js';\n\ntype MatcherData<Data, Type extends TType = TType> = {\n  type: Type;\n  data: Data;\n};\n\nexport class Matcher<Data, Type extends TType = TType> {\n  private list: MatcherData<Data, Type>[] = [];\n\n  constructor(\n    private _match: (\n      type: Type,\n      target: TType\n    ) => boolean = typesystem.isSubtype.bind(typesystem)\n  ) {}\n\n  all(): MatcherData<Data, Type>[] {\n    return this.list;\n  }\n\n  allMatched(type: TType): MatcherData<Data>[] {\n    const result: MatcherData<Data>[] = [];\n    for (const t of this.list) {\n      if (this._match(t.type, type)) {\n        result.push(t);\n      }\n    }\n    return result;\n  }\n\n  allMatchedData(type: TType): Data[] {\n    const result: Data[] = [];\n    for (const t of this.list) {\n      if (this._match(t.type, type)) {\n        result.push(t.data);\n      }\n    }\n    return result;\n  }\n\n  find(\n    f: (data: MatcherData<Data, Type>) => boolean\n  ): MatcherData<Data, Type> | undefined {\n    return this.list.find(f);\n  }\n\n  findData(f: (data: Data) => boolean): Data | undefined {\n    return this.list.find(data => f(data.data))?.data;\n  }\n\n  isMatched(type: Type, target: TType) {\n    return this._match(type, target);\n  }\n\n  match(type: TType) {\n    for (const t of this.list) {\n      if (this._match(t.type, type)) {\n        return t.data;\n      }\n    }\n    return;\n  }\n\n  register(type: Type, data: Data) {\n    this.list.push({ type, data });\n  }\n}\n"]}