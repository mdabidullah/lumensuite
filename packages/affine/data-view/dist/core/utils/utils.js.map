{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../../src/core/utils/utils.ts"],"names":[],"mappings":"AAAA,sGAAsG;AACtG,SAAS,SAAS,CAAC,IAAiB;IAClC,OAAO,CACL,CAAC,CAAC,IAAI;QACN,CAAC,CAAC,CAAC,IAAI,CAAC,WAAW,IAAI,IAAI,CAAC,YAAY,IAAI,IAAI,CAAC,cAAc,EAAE,CAAC,MAAM,CAAC,CAC1E,CAAC;AACJ,CAAC;AAED,MAAM,UAAU,cAAc,CAC5B,OAAoB,EACpB,QAA6D,EAC7D,QAA+B,OAAO,EACtC,QAAQ,GAAG,KAAK;IAEhB,MAAM,oBAAoB,GAAG,CAAC,KAAY,EAAE,EAAE;QAC5C,qBAAqB;QACrB,MAAM,IAAI,GAAG,KAAK,CAAC,YAAY,IAAI,KAAK,CAAC,YAAY,EAAE,CAAC;QACxD,MAAM,SAAS,GAAG,IAAI;YACpB,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC;YAC3B,CAAC,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,KAAK,CAAC,MAAc,CAAC,IAAI,SAAS,CAAC,OAAO,CAAC,CAAC;QAElE,IAAI,CAAC,SAAS;YAAE,OAAO;QAEvB,QAAQ,CAAC,OAAO,EAAE,KAAK,CAAC,MAAqB,CAAC,CAAC;QAC/C,qDAAqD;QACrD,IAAI,CAAC,QAAQ;YAAE,mBAAmB,EAAE,CAAC;IACvC,CAAC,CAAC;IAEF,QAAQ,CAAC,gBAAgB,CAAC,KAAK,EAAE,oBAAoB,CAAC,CAAC;IACvD,MAAM,mBAAmB,GAAG,GAAG,EAAE;QAC/B,QAAQ,CAAC,mBAAmB,CAAC,KAAK,EAAE,oBAAoB,CAAC,CAAC;IAC5D,CAAC,CAAC;IAEF,OAAO,mBAAmB,CAAC;AAC7B,CAAC;AAED,MAAM,CAAC,MAAM,gBAAgB,GAAG,CAAC,KAAa,EAAE,GAAW,EAAE,GAAW,EAAE,EAAE;IAC1E,OAAO,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC,CAAC;AAC7C,CAAC,CAAC","sourcesContent":["// source (2018-03-11): https://github.com/jquery/jquery/blob/master/src/css/hiddenVisibleSelectors.js\nfunction isVisible(elem: HTMLElement) {\n  return (\n    !!elem &&\n    !!(elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length)\n  );\n}\n\nexport function onClickOutside(\n  element: HTMLElement,\n  callback: (element: HTMLElement, target: HTMLElement) => void,\n  event: 'click' | 'mousedown' = 'click',\n  reusable = false\n): () => void {\n  const outsideClickListener = (event: Event) => {\n    // support shadow dom\n    const path = event.composedPath && event.composedPath();\n    const isOutside = path\n      ? path.indexOf(element) < 0\n      : !element.contains(event.target as Node) && isVisible(element);\n\n    if (!isOutside) return;\n\n    callback(element, event.target as HTMLElement);\n    // if reuseable, need to manually remove the listener\n    if (!reusable) removeClickListener();\n  };\n\n  document.addEventListener(event, outsideClickListener);\n  const removeClickListener = () => {\n    document.removeEventListener(event, outsideClickListener);\n  };\n\n  return removeClickListener;\n}\n\nexport const getResultInRange = (value: number, min: number, max: number) => {\n  return Math.max(min, Math.min(max, value));\n};\n"]}