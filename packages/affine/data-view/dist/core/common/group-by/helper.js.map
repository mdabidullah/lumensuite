{"version":3,"file":"helper.js","sourceRoot":"","sources":["../../../../src/core/common/group-by/helper.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  insertPositionToIndex,\n  type InsertToPosition,\n} from '@lumensuite/affine-shared/utils';\nimport { computed, type ReadonlySignal } from '@lit-labs/preact-signals';\n\nimport type { TType } from '../../logical/typesystem.js';\nimport type { Column } from '../../view-manager/column.js';\nimport type { SingleView } from '../../view-manager/single-view.js';\nimport type { GroupBy, GroupProperty } from '../types.js';\n\nimport { groupByMatcher } from './matcher.js';\n\nexport type GroupData = {\n  manager: GroupManager;\n  column: Column;\n  key: string;\n  name: string;\n  type: TType;\n  value: unknown;\n  rows: string[];\n};\n\nexport class GroupManager {\n  column$ = computed(() => {\n    const groupBy = this.groupBy$.value;\n    if (!groupBy) {\n      return;\n    }\n    return this.viewManager.columnGet(groupBy.columnId);\n  });\n\n  config$ = computed(() => {\n    const groupBy = this.groupBy$.value;\n    if (!groupBy) {\n      return;\n    }\n    const result = groupByMatcher.find(v => v.data.name === groupBy.name);\n    if (!result) {\n      return;\n    }\n    return result.data;\n  });\n\n  groupDataMap$ = computed<Record<string, GroupData> | undefined>(() => {\n    const staticGroupMap = this.staticGroupDataMap$.value;\n    const config = this.config$.value;\n    const groupBy = this.groupBy$.value;\n    const column = this.column$.value;\n    const tType = column?.dataType$.value;\n    if (!staticGroupMap || !config || !groupBy || !tType || !column) {\n      return;\n    }\n    const groupMap: Record<string, GroupData> = Object.fromEntries(\n      Object.entries(staticGroupMap).map(([k, v]) => [k, { ...v, rows: [] }])\n    );\n    this.viewManager.rows$.value.forEach(id => {\n      const value = this.viewManager.cellGetJsonValue(id, groupBy.columnId);\n      const keys = config.valuesGroup(value, tType);\n      keys.forEach(({ key, value }) => {\n        if (!groupMap[key]) {\n          groupMap[key] = {\n            key,\n            column,\n            name: config.groupName(tType, value),\n            manager: this,\n            value,\n            rows: [],\n            type: tType,\n          };\n        }\n        groupMap[key].rows.push(id);\n      });\n    });\n    return groupMap;\n  });\n\n  groupsDataList$ = computed(() => {\n    const groupMap = this.groupDataMap$.value;\n    if (!groupMap) {\n      return;\n    }\n    const sortedGroup = this.ops.sortGroup(Object.keys(groupMap));\n    sortedGroup.forEach(key => {\n      groupMap[key].rows = this.ops.sortRow(key, groupMap[key].rows);\n    });\n    return sortedGroup.map(key => groupMap[key]);\n  });\n\n  staticGroupDataMap$ = computed<\n    Record<string, Omit<GroupData, 'rows'>> | undefined\n  >(() => {\n    const config = this.config$.value;\n    const column = this.column$.value;\n    const tType = column?.dataType$.value;\n    if (!config || !tType || !column) {\n      return;\n    }\n    return Object.fromEntries(\n      config.defaultKeys(tType).map(({ key, value }) => [\n        key,\n        {\n          key,\n          column,\n          name: config.groupName(tType, value),\n          manager: this,\n          type: tType,\n          value,\n        },\n      ])\n    );\n  });\n\n  updateData = (data: NonNullable<unknown>) => {\n    const columnId = this.columnId;\n    if (!columnId) {\n      return;\n    }\n    this.viewManager.columnUpdateData(columnId, data);\n  };\n\n  get addGroup() {\n    const type = this.column$.value?.type$.value;\n    if (!type) {\n      return;\n    }\n    return this.viewManager.columnGetMeta(type)?.config.addGroup;\n  }\n\n  get columnId() {\n    return this.groupBy$.value?.columnId;\n  }\n\n  constructor(\n    private groupBy$: ReadonlySignal<GroupBy | undefined>,\n    private viewManager: SingleView,\n    private ops: {\n      sortGroup: (keys: string[]) => string[];\n      sortRow: (groupKey: string, rowIds: string[]) => string[];\n      changeGroupSort: (keys: string[]) => void;\n      changeRowSort: (\n        groupKeys: string[],\n        groupKey: string,\n        keys: string[]\n      ) => void;\n    }\n  ) {}\n\n  addToGroup(rowId: string, key: string) {\n    const groupMap = this.groupDataMap$.value;\n    const columnId = this.columnId;\n    if (!groupMap || !columnId) {\n      return;\n    }\n    const addTo = this.config$.value?.addToGroup ?? (value => value);\n    const newValue = addTo(\n      groupMap[key].value,\n      this.viewManager.cellGetJsonValue(rowId, columnId)\n    );\n    this.viewManager.cellUpdateValue(rowId, columnId, newValue);\n  }\n\n  changeCardSort(groupKey: string, cardIds: string[]) {\n    const groups = this.groupsDataList$.value;\n    if (!groups) {\n      return;\n    }\n    this.ops.changeRowSort(\n      groups.map(v => v.key),\n      groupKey,\n      cardIds\n    );\n  }\n\n  changeGroupSort(keys: string[]) {\n    this.ops.changeGroupSort(keys);\n  }\n\n  defaultGroupProperty(key: string): GroupProperty {\n    return {\n      key,\n      hide: false,\n      manuallyCardSort: [],\n    };\n  }\n\n  moveCardTo(\n    rowId: string,\n    fromGroupKey: string | undefined,\n    toGroupKey: string,\n    position: InsertToPosition\n  ) {\n    const groupMap = this.groupDataMap$.value;\n    if (!groupMap) {\n      return;\n    }\n    if (fromGroupKey !== toGroupKey) {\n      const columnId = this.columnId;\n      if (!columnId) {\n        return;\n      }\n      const remove = this.config$.value?.removeFromGroup ?? (() => undefined);\n      const group = fromGroupKey != null ? groupMap[fromGroupKey] : undefined;\n      let newValue: unknown = undefined;\n      if (group) {\n        newValue = remove(\n          group.value,\n          this.viewManager.cellGetJsonValue(rowId, columnId)\n        );\n      }\n      const addTo = this.config$.value?.addToGroup ?? (value => value);\n      newValue = addTo(groupMap[toGroupKey].value, newValue);\n      this.viewManager.cellUpdateValue(rowId, columnId, newValue);\n    }\n    const rows = groupMap[toGroupKey].rows.filter(id => id !== rowId);\n    const index = insertPositionToIndex(position, rows, id => id);\n    rows.splice(index, 0, rowId);\n    this.changeCardSort(toGroupKey, rows);\n  }\n\n  moveGroupTo(groupKey: string, position: InsertToPosition) {\n    const groups = this.groupsDataList$.value;\n    if (!groups) {\n      return;\n    }\n    const keys = groups.map(v => v.key);\n    keys.splice(\n      keys.findIndex(key => key === groupKey),\n      1\n    );\n    const index = insertPositionToIndex(position, keys, key => key);\n    keys.splice(index, 0, groupKey);\n    this.changeGroupSort(keys);\n  }\n\n  removeFromGroup(rowId: string, key: string) {\n    const groupMap = this.groupDataMap$.value;\n    if (!groupMap) {\n      return;\n    }\n    const columnId = this.columnId;\n    if (!columnId) {\n      return;\n    }\n    const remove = this.config$.value?.removeFromGroup ?? (() => undefined);\n    const newValue = remove(\n      groupMap[key].value,\n      this.viewManager.cellGetJsonValue(rowId, columnId)\n    );\n    this.viewManager.cellUpdateValue(rowId, columnId, newValue);\n  }\n\n  updateValue(rows: string[], value: unknown) {\n    const columnId = this.columnId;\n    if (!columnId) {\n      return;\n    }\n    rows.forEach(id => {\n      this.viewManager.cellUpdateValue(id, columnId, value);\n    });\n  }\n}\n\nexport const sortByManually = <T>(\n  arr: T[],\n  getId: (v: T) => string,\n  ids: string[]\n) => {\n  const map = new Map(arr.map(v => [getId(v), v]));\n  const result: T[] = [];\n  for (const id of ids) {\n    const value = map.get(id);\n    if (value) {\n      map.delete(id);\n      result.push(value);\n    }\n  }\n  result.push(...map.values());\n  return result;\n};\n"]}