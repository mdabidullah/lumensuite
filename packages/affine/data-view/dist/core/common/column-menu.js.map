{"version":3,"file":"column-menu.js","sourceRoot":"","sources":["../../../src/core/common/column-menu.ts"],"names":[],"mappings":"AAKA,OAAO,EAAE,IAAI,EAAE,MAAM,oBAAoB,CAAC;AAI1C,OAAO,EAAE,YAAY,EAAE,MAAM,iCAAiC,CAAC;AAE/D,MAAM,CAAC,MAAM,WAAW,GAAG,CAAC,MAAc,EAAwB,EAAE;IAClE,OAAO;QACL,IAAI,EAAE,IAAI,CAAA;;UAEJ,YAAY,CAAC,MAAM,CAAC,IAAI,CAAC;;KAE9B;QACD,OAAO,EAAE,KAAK;QACd,SAAS,EAAE,MAAM,CAAC,KAAK,CAAC,KAAK;QAC7B,UAAU,EAAE,IAAI,CAAC,EAAE;YACjB,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;QAC1B,CAAC;KACF,CAAC;AACJ,CAAC,CAAC;AACF,MAAM,CAAC,MAAM,UAAU,GAAG,CAAC,MAAc,EAAc,EAAE;IACvD,OAAO;QACL,IAAI,EAAE,UAAU;QAChB,IAAI,EAAE,MAAM;QACZ,IAAI,EAAE,GAAG,EAAE,CAAC,CAAC,MAAM,CAAC,UAAU,IAAI,MAAM,CAAC,KAAK,CAAC,KAAK,KAAK,OAAO;QAChE,OAAO,EAAE,IAAI,CAAA;;;;QAIT,YAAY,CAAC,MAAM,CAAC,IAAI,CAAC;QACzB,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,KAAK,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC;YACnE,EAAE,MAAM,CAAC,IAAI;WACV;QACP,OAAO,EAAE;YACP,KAAK,EAAE;gBACL,MAAM,EAAE,IAAI;aACb;YACD,KAAK,EAAE,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE;gBAC7C,OAAO;oBACL,IAAI,EAAE,QAAQ;oBACd,UAAU,EAAE,MAAM,CAAC,IAAI,KAAK,MAAM,CAAC,KAAK,CAAC,KAAK;oBAC9C,IAAI,EAAE,MAAM,CAAC,MAAM,CAAC,IAAI;oBACxB,IAAI,EAAE,YAAY,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;oBACpD,MAAM,EAAE,GAAG,EAAE;wBACX,IAAI,MAAM,CAAC,KAAK,CAAC,KAAK,KAAK,MAAM,CAAC,IAAI,EAAE,CAAC;4BACvC,OAAO;wBACT,CAAC;wBACD,MAAM,CAAC,UAAU,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;oBACnC,CAAC;iBACF,CAAC;YACJ,CAAC,CAAC;SACH;KACF,CAAC;AACJ,CAAC,CAAC","sourcesContent":["import type {\n  MenuOptions,\n  NormalMenu,\n} from '@blocksuite/affine-components/context-menu';\n\nimport { html } from 'lit/static-html.js';\n\nimport type { Column } from '../view-manager/column.js';\n\nimport { renderUniLit } from '../utils/uni-component/index.js';\n\nexport const inputConfig = (column: Column): MenuOptions['input'] => {\n  return {\n    icon: html`\n      <div class=\"affine-database-column-type-menu-icon\">\n        ${renderUniLit(column.icon)}\n      </div>\n    `,\n    divider: false,\n    initValue: column.name$.value,\n    onComplete: text => {\n      column.updateName(text);\n    },\n  };\n};\nexport const typeConfig = (column: Column): NormalMenu => {\n  return {\n    type: 'sub-menu',\n    name: 'Type',\n    hide: () => !column.updateType || column.type$.value === 'title',\n    postfix: html`<div\n      class=\"affine-database-column-type-icon\"\n      style=\"color: var(--affine-text-secondary-color);gap:4px\"\n    >\n      ${renderUniLit(column.icon)}\n      ${column.view.allColumnMetas.find(v => v.type === column.type$.value)\n        ?.config.name}\n    </div>`,\n    options: {\n      input: {\n        search: true,\n      },\n      items: column.view.allColumnMetas.map(config => {\n        return {\n          type: 'action',\n          isSelected: config.type === column.type$.value,\n          name: config.config.name,\n          icon: renderUniLit(column.view.getIcon(config.type)),\n          select: () => {\n            if (column.type$.value === config.type) {\n              return;\n            }\n            column.updateType?.(config.type);\n          },\n        };\n      }),\n    },\n  };\n};\n"]}