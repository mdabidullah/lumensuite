{"version":3,"file":"ast.js","sourceRoot":"","sources":["../../../src/core/common/ast.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,eAAe,EAAE,SAAS,EAAE,MAAM,+BAA+B,CAAC;AAK3E,OAAO,EAAE,aAAa,EAAE,MAAM,gDAAgD,CAAC;AAC/E,OAAO,EAAE,eAAe,EAAE,MAAM,gCAAgC,CAAC;AAmDjE,MAAM,CAAC,MAAM,UAAU,GAAG,CAAC,IAAgB,EAAE,GAAuB,EAAE,EAAE;IACtE,IAAI,GAAG,CAAC,IAAI,KAAK,KAAK,EAAE,CAAC;QACvB,OAAO,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,KAAK,GAAG,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC;IACjD,CAAC;IACD,OAAO,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,KAAK,GAAG,CAAC,gBAAgB,CAAC,EAAE,IAAI;SACzE,EAAE,CAAC;AACR,CAAC,CAAC;AACF,MAAM,CAAC,MAAM,eAAe,GAAG,CAAC,IAAgB,EAAE,GAAuB,EAAE,EAAE;IAC3E,MAAM,IAAI,GAAG,UAAU,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;IACnC,IAAI,CAAC,IAAI,EAAE,CAAC;QACV,MAAM,IAAI,eAAe,CACvB,SAAS,CAAC,kBAAkB,EAC5B,wBAAwB,CACzB,CAAC;IACJ,CAAC;IACD,OAAO,aAAa,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC;AACzC,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,gBAAgB,GAAG,CAC9B,IAAgB,EAChB,GAAuB,EACT,EAAE;IAChB,OAAO;QACL,IAAI,EAAE,QAAQ;QACd,IAAI,EAAE,GAAG;QACT,QAAQ,EAAE,eAAe,CAAC,IAAI,EAAE,GAAG,CAAC;QACpC,IAAI,EAAE,EAAE;KACT,CAAC;AACJ,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,WAAW,GAAG,CAAC,IAAgB,EAAgB,EAAE;IAC5D,MAAM,GAAG,GAAgB;QACvB,IAAI,EAAE,KAAK;QACX,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE;KACjB,CAAC;IACF,MAAM,MAAM,GAAG,eAAe,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;IAC1C,IAAI,CAAC,MAAM,EAAE,CAAC;QACZ,MAAM,IAAI,eAAe,CACvB,SAAS,CAAC,kBAAkB,EAC5B,wBAAwB,CACzB,CAAC;IACJ,CAAC;IACD,OAAO;QACL,IAAI,EAAE,QAAQ;QACd,IAAI,EAAE,GAAG;QACT,QAAQ,EAAE,MAAM;QAChB,IAAI,EAAE,EAAE;KACT,CAAC;AACJ,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,kBAAkB,GAAG,CAAC,IAAgB,EAAe,EAAE;IAClE,OAAO;QACL,IAAI,EAAE,OAAO;QACb,EAAE,EAAE,KAAK;QACT,UAAU,EAAE,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;KAChC,CAAC;AACJ,CAAC,CAAC;AACF,MAAM,CAAC,MAAM,gBAAgB,GAAgB;IAC3C,IAAI,EAAE,OAAO;IACb,EAAE,EAAE,KAAK;IACT,UAAU,EAAE,EAAE;CACf,CAAC","sourcesContent":["import { LumenSuiteError, ErrorCode } from '@lumensuite/global/exceptions';\n\nimport type { TType } from '../logical/typesystem.js';\nimport type { UniComponent } from '../utils/uni-component/uni-component.js';\n\nimport { filterMatcher } from '../../widget-presets/filter/matcher/matcher.js';\nimport { propertyMatcher } from '../logical/property-matcher.js';\n\nexport type Variable = {\n  name: string;\n  type: TType;\n  id: string;\n  icon?: UniComponent;\n};\nexport type FilterGroup = {\n  type: 'group';\n  op: 'and' | 'or';\n  conditions: Filter[];\n};\nexport type VariableRef = {\n  type: 'ref';\n  name: string;\n};\n\nexport type Property = {\n  type: 'property';\n  ref: VariableRef;\n  propertyFuncName: string;\n};\n\nexport type VariableOrProperty = VariableRef | Property;\n\nexport type Literal = {\n  type: 'literal';\n  value: unknown;\n};\nexport type Value = /*VariableRef*/ Literal;\nexport type SingleFilter = {\n  type: 'filter';\n  left: VariableOrProperty;\n  function?: string;\n  args: Value[];\n};\nexport type Filter = SingleFilter | FilterGroup;\nexport type SortExp = {\n  left: VariableOrProperty;\n  type: 'asc' | 'desc';\n};\n\nexport type SortGroup = SortExp[];\n\nexport type GroupExp = {\n  left: VariableOrProperty;\n  type: 'asc' | 'desc';\n};\n\nexport type GroupList = GroupExp[];\nexport const getRefType = (vars: Variable[], ref: VariableOrProperty) => {\n  if (ref.type === 'ref') {\n    return vars.find(v => v.id === ref.name)?.type;\n  }\n  return propertyMatcher.find(v => v.data.name === ref.propertyFuncName)?.type\n    .rt;\n};\nexport const firstFilterName = (vars: Variable[], ref: VariableOrProperty) => {\n  const type = getRefType(vars, ref);\n  if (!type) {\n    throw new LumenSuiteError(\n      ErrorCode.DatabaseBlockError,\n      `can't resolve ref type`\n    );\n  }\n  return filterMatcher.match(type)?.name;\n};\n\nexport const firstFilterByRef = (\n  vars: Variable[],\n  ref: VariableOrProperty\n): SingleFilter => {\n  return {\n    type: 'filter',\n    left: ref,\n    function: firstFilterName(vars, ref),\n    args: [],\n  };\n};\n\nexport const firstFilter = (vars: Variable[]): SingleFilter => {\n  const ref: VariableRef = {\n    type: 'ref',\n    name: vars[0].id,\n  };\n  const filter = firstFilterName(vars, ref);\n  if (!filter) {\n    throw new LumenSuiteError(\n      ErrorCode.DatabaseBlockError,\n      `can't match any filter`\n    );\n  }\n  return {\n    type: 'filter',\n    left: ref,\n    function: filter,\n    args: [],\n  };\n};\n\nexport const firstFilterInGroup = (vars: Variable[]): FilterGroup => {\n  return {\n    type: 'group',\n    op: 'and',\n    conditions: [firstFilter(vars)],\n  };\n};\nexport const emptyFilterGroup: FilterGroup = {\n  type: 'group',\n  op: 'and',\n  conditions: [],\n};\n"]}