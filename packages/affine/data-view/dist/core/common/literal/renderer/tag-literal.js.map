{"version":3,"file":"tag-literal.js","sourceRoot":"","sources":["../../../../../src/core/common/literal/renderer/tag-literal.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,EAAE,GAAG,EAAE,IAAI,EAAE,MAAM,KAAK,CAAC;AAChC,OAAO,EAAE,aAAa,EAAE,MAAM,mBAAmB,CAAC;AAIlD,OAAO,EAAE,IAAI,EAAE,MAAM,+BAA+B,CAAC;AACrD,OAAO,EAAE,cAAc,EAAE,MAAM,sBAAsB,CAAC;IAGzC,UAAU;4BADtB,aAAa,CAAC,4BAA4B,CAAC;;;;sBACZ,cAAc;0BAAtB,SAAQ,WAG/B;;;;YAHD,6KA+BC;;;;iBA3BiB,WAAM,GAAG,GAAG,CAAA;;;;;;;;GAQ3B,AARqB,CAQpB;QAEO,MAAM;YACb,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC;gBAChB,OAAO,IAAI,CAAA,uCAAuC,CAAC;YACrD,CAAC;YACD,OAAO,CACL,IAAI,CAAC,IAAI,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,KAAK,IAAI,CAAC,KAAK,CAAC,EAAE,KAAK;gBACjD,IAAI,CAAA,uCAAuC,CAC5C,CAAC;QACJ,CAAC;QAED,IAAI;YACF,MAAM,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC;YAClC,IAAI,CAAC,IAAI,EAAE,CAAC;gBACV,OAAO,EAAE,CAAC;YACZ,CAAC;YACD,OAAO,IAAI,CAAC;QACd,CAAC;;YA9BU,uDAAU;;;;;SAAV,UAAU;IAkCV,eAAe;4BAD3B,aAAa,CAAC,kCAAkC,CAAC;;;;sBACb,cAAc;+BAAtB,SAAQ,WAGpC;;;;YAHD,6KAiCC;;;;iBA7BiB,WAAM,GAAG,GAAG,CAAA;;;;;;;;GAQ3B,AARqB,CAQpB;QAEO,MAAM;YACb,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,MAAM,EAAE,CAAC;gBACxB,OAAO,IAAI,CAAA,uCAAuC,CAAC;YACrD,CAAC;YACD,MAAM,MAAM,GAAG,IAAI,GAAG,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YAC9D,OAAO,IAAI,CAAA,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC;QACjE,CAAC;QAED,IAAI;YACF,MAAM,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC;YAC3B,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC;gBACnB,OAAO,EAAE,CAAC;YACZ,CAAC;YACD,MAAM,IAAI,GAAG,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC;YAC7B,IAAI,CAAC,IAAI,EAAE,CAAC;gBACV,OAAO,EAAE,CAAC;YACZ,CAAC;YACD,OAAO,IAAI,CAAC;QACd,CAAC;;YAhCU,uDAAe;;;;;SAAf,eAAe","sourcesContent":["import { css, html } from 'lit';\nimport { customElement } from 'lit/decorators.js';\n\nimport type { TArray, TypeOfData } from '../../../logical/typesystem.js';\n\nimport { tTag } from '../../../logical/data-type.js';\nimport { LiteralElement } from './literal-element.js';\n\n@customElement('data-view-literal-tag-view')\nexport class TagLiteral extends LiteralElement<\n  string,\n  TypeOfData<typeof tTag>\n> {\n  static override styles = css`\n    data-view-literal-tag-view {\n      max-width: 100px;\n      display: block;\n      text-overflow: ellipsis;\n      overflow: hidden;\n      white-space: nowrap;\n    }\n  `;\n\n  override render() {\n    if (!this.value) {\n      return html`<span class=\"dv-color-2\">Value</span>`;\n    }\n    return (\n      this.tags().find(v => v.id === this.value)?.value ??\n      html`<span class=\"dv-color-2\">Value</span>`\n    );\n  }\n\n  tags() {\n    const tags = this.type.data?.tags;\n    if (!tags) {\n      return [];\n    }\n    return tags;\n  }\n}\n\n@customElement('data-view-literal-multi-tag-view')\nexport class MultiTagLiteral extends LiteralElement<\n  string[],\n  TArray<TypeOfData<typeof tTag>>\n> {\n  static override styles = css`\n    data-view-literal-multi-tag-view {\n      max-width: 100px;\n      display: block;\n      text-overflow: ellipsis;\n      overflow: hidden;\n      white-space: nowrap;\n    }\n  `;\n\n  override render() {\n    if (!this.value?.length) {\n      return html`<span class=\"dv-color-2\">Value</span>`;\n    }\n    const tagMap = new Map(this.tags().map(v => [v.id, v.value]));\n    return html`${this.value.map(id => tagMap.get(id)).join(',')}`;\n  }\n\n  tags() {\n    const type = this.type.ele;\n    if (!tTag.is(type)) {\n      return [];\n    }\n    const tags = type.data?.tags;\n    if (!tags) {\n      return [];\n    }\n    return tags;\n  }\n}\n"]}