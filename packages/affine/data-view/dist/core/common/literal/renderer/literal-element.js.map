{"version":3,"file":"literal-element.js","sourceRoot":"","sources":["../../../../../src/core/common/literal/renderer/literal-element.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,EAAE,iBAAiB,EAAE,cAAc,EAAE,MAAM,uBAAuB,CAAC;AAC1E,OAAO,EAAE,GAAG,EAAE,IAAI,EAAE,MAAM,KAAK,CAAC;AAChC,OAAO,EAAE,aAAa,EAAE,QAAQ,EAAE,MAAM,mBAAmB,CAAC;IAKtC,cAAc;sBAC1B,cAAc,CAAC,iBAAiB,CAAC;;;;;;;;;;iBADrB,cACpB,SAAQ,WAAiC;;;oCAGxC,QAAQ,CAAC,EAAE,SAAS,EAAE,KAAK,EAAE,CAAC;gCAG9B,QAAQ,CAAC,EAAE,SAAS,EAAE,KAAK,EAAE,CAAC;iCAG9B,QAAQ,CAAC,EAAE,SAAS,EAAE,KAAK,EAAE,CAAC;YAL/B,6KAAS,QAAQ,6BAAR,QAAQ,2FAAuB;YAGxC,iKAAS,IAAI,6BAAJ,IAAI,mFAAQ;YAGrB,oKAAS,KAAK,6BAAL,KAAK,qFAA4B;;;QAN1C,qFAAwC;QAAxC,IAAS,QAAQ,8CAAuB;QAAxC,IAAS,QAAQ,oDAAuB;QAGxC,qIAAqB;QAArB,IAAS,IAAI,0CAAQ;QAArB,IAAS,IAAI,gDAAQ;QAGrB,0HAAgC,SAAS,GAAC;QAA1C,IAAS,KAAK,2CAA4B;QAA1C,IAAS,KAAK,iDAA4B;;;;;;;SAXtB,cAAc;IAevB,cAAc;4BAD1B,aAAa,CAAC,gCAAgC,CAAC;;;;sBACZ,cAAc;8BAAtB,SAAQ,WAAuB;;;;YAA3D,6KAIC;;;YAJY,uDAAc;;QAChB,MAAM;YACb,OAAO,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC;QACvC,CAAC;;;;SAHU,cAAc;IAOd,aAAa;4BADzB,aAAa,CAAC,+BAA+B,CAAC;;;;sBACZ,cAAc;6BAAtB,SAAQ,WAAsB;;;;YAAzD,6KAgBC;;;;iBAfiB,WAAM,GAAG,GAAG,CAAA;;;;;;;;GAQ3B,AARqB,CAQpB;QAEO,MAAM;YACb,OAAO,CACL,IAAI,CAAC,KAAK,EAAE,QAAQ,EAAE,IAAI,IAAI,CAAA,uCAAuC,CACtE,CAAC;QACJ,CAAC;;YAfU,uDAAa;;;;;SAAb,aAAa;IAmBb,aAAa;4BADzB,aAAa,CAAC,+BAA+B,CAAC;;;;sBACZ,cAAc;6BAAtB,SAAQ,WAAsB;;;;YAAzD,6KAgBC;;;;iBAfiB,WAAM,GAAG,GAAG,CAAA;;;;;;;;GAQ3B,AARqB,CAQpB;QAEO,MAAM;YACb,OAAO,CACL,IAAI,CAAC,KAAK,EAAE,QAAQ,EAAE,IAAI,IAAI,CAAA,uCAAuC,CACtE,CAAC;QACJ,CAAC;;YAfU,uDAAa;;;;;SAAb,aAAa","sourcesContent":["import { ShadowlessElement, WithDisposable } from '@blocksuite/block-std';\nimport { css, html } from 'lit';\nimport { customElement, property } from 'lit/decorators.js';\n\nimport type { TType } from '../../../logical/typesystem.js';\nimport type { LiteralViewProps } from '../matcher.js';\n\nexport abstract class LiteralElement<T = unknown, Type extends TType = TType>\n  extends WithDisposable(ShadowlessElement)\n  implements LiteralViewProps<T, Type>\n{\n  @property({ attribute: false })\n  accessor onChange!: (value?: T) => void;\n\n  @property({ attribute: false })\n  accessor type!: Type;\n\n  @property({ attribute: false })\n  accessor value: T | undefined = undefined;\n}\n\n@customElement('data-view-literal-boolean-view')\nexport class BooleanLiteral extends LiteralElement<boolean> {\n  override render() {\n    return this.value ? 'True' : 'False';\n  }\n}\n\n@customElement('data-view-literal-number-view')\nexport class NumberLiteral extends LiteralElement<number> {\n  static override styles = css`\n    data-view-literal-number-view {\n      display: block;\n      max-width: 100px;\n      text-overflow: ellipsis;\n      overflow: hidden;\n      white-space: nowrap;\n    }\n  `;\n\n  override render() {\n    return (\n      this.value?.toString() ?? html`<span class=\"dv-color-2\">Value</span>`\n    );\n  }\n}\n\n@customElement('data-view-literal-string-view')\nexport class StringLiteral extends LiteralElement<string> {\n  static override styles = css`\n    data-view-literal-string-view {\n      display: block;\n      max-width: 100px;\n      text-overflow: ellipsis;\n      overflow: hidden;\n      white-space: nowrap;\n    }\n  `;\n\n  override render() {\n    return (\n      this.value?.toString() ?? html`<span class=\"dv-color-2\">Value</span>`\n    );\n  }\n}\n"]}