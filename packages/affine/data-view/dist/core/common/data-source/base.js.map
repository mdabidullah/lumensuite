{"version":3,"file":"base.js","sourceRoot":"","sources":["../../../../src/core/common/data-source/base.ts"],"names":[],"mappings":"AAeA,OAAO,EAAE,oBAAoB,EAAE,MAAM,uCAAuC,CAAC;AA8D7E,MAAM,OAAgB,cAAc;IAApC;QAGE,YAAO,GAAG,IAAI,GAAG,EAAwC,CAAC;IAiG5D,CAAC;IAjFC,IAAI,WAAW;QACb,OAAO,EAAE,CAAC;IACZ,CAAC;IAgBD,UAAU,CAAI,GAA0B;QACtC,OAAO,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAM,CAAC;IACpC,CAAC;IAwBD,uBAAuB,CAAC,WAAmB;QACzC,OAAO,oBAAoB,CAAC;IAC9B,CAAC;IAID,mBAAmB,CAAC,WAAmB;QACrC,OAAO,KAAK,CAAC;IACf,CAAC;IASS,UAAU,CAAI,GAA0B,EAAE,KAAQ;QAC1D,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;IAC/B,CAAC;CAkBF","sourcesContent":["import type { InsertToPosition } from '@blocksuite/affine-shared/utils';\nimport type { ReadonlySignal } from '@lit-labs/preact-signals';\n\nimport type { ColumnMeta } from '../../column/column-config.js';\nimport type { DatabaseFlags } from '../../types.js';\nimport type { UniComponent } from '../../utils/uni-component/index.js';\nimport type {\n  DataViewDataType,\n  DataViewTypes,\n  ViewMeta,\n} from '../../view/data-view.js';\nimport type { SingleView } from '../../view-manager/single-view.js';\nimport type { ViewManager } from '../../view-manager/view-manager.js';\nimport type { DataViewContextKey } from './context.js';\n\nimport { DEFAULT_COLUMN_WIDTH } from '../../../view-presets/table/consts.js';\n\nexport type DetailSlotProps = {\n  view: SingleView;\n  rowId: string;\n};\n\nexport interface DetailSlots {\n  header?: UniComponent<DetailSlotProps>;\n  note?: UniComponent<DetailSlotProps>;\n}\n\nexport interface DataSource {\n  readonly$: ReadonlySignal<boolean>;\n  addPropertyConfigList: ColumnMeta[];\n\n  properties$: ReadonlySignal<string[]>;\n  rows$: ReadonlySignal<string[]>;\n\n  cellGetValue(rowId: string, propertyId: string): unknown;\n  cellChangeValue(rowId: string, propertyId: string, value: unknown): void;\n  rowAdd(InsertToPosition: InsertToPosition | number): string;\n  rowDelete(ids: string[]): void;\n  propertyGetName(propertyId: string): string;\n  propertyGetDefaultWidth(propertyId: string): number;\n  propertyGetType(propertyId: string): string | undefined;\n  propertyGetData(propertyId: string): Record<string, unknown>;\n  propertyGetReadonly(columnId: string): boolean;\n  propertyChangeName(propertyId: string, name: string): void;\n  propertyChangeType(propertyId: string, type: string): void;\n  propertyChangeData(propertyId: string, data: Record<string, unknown>): void;\n  propertyAdd(insertToPosition: InsertToPosition, type?: string): string;\n  propertyDelete(id: string): void;\n  propertyDuplicate(columnId: string): string;\n\n  featureFlags$: ReadonlySignal<DatabaseFlags>;\n  detailSlots: DetailSlots;\n\n  getPropertyMeta(type: string): ColumnMeta;\n\n  rowMove(rowId: string, position: InsertToPosition): void;\n\n  getContext<T>(key: DataViewContextKey<T>): T | undefined;\n\n  viewManager: ViewManager;\n\n  viewDataList$: ReadonlySignal<DataViewDataType[]>;\n  viewDataAdd(viewType: DataViewTypes): string;\n  viewDataDuplicate(id: string): string;\n  viewDataDelete(viewId: string): void;\n  viewDataGet(viewId: string): DataViewDataType | undefined;\n  viewDataMoveTo(id: string, position: InsertToPosition): void;\n  viewDataUpdate<ViewData extends DataViewDataType>(\n    id: string,\n    updater: (data: ViewData) => Partial<ViewData>\n  ): void;\n\n  viewMetas: ViewMeta[];\n  viewMetaGet(type: string): ViewMeta;\n  viewMetaGetById(viewId: string): ViewMeta;\n}\n\nexport abstract class DataSourceBase implements DataSource {\n  abstract addPropertyConfigList: ColumnMeta[];\n\n  context = new Map<DataViewContextKey<unknown>, unknown>();\n\n  abstract featureFlags$: ReadonlySignal<DatabaseFlags>;\n\n  abstract properties$: ReadonlySignal<string[]>;\n\n  abstract readonly$: ReadonlySignal<boolean>;\n\n  abstract rows$: ReadonlySignal<string[]>;\n\n  abstract viewDataList$: ReadonlySignal<DataViewDataType[]>;\n\n  abstract viewManager: ViewManager;\n\n  abstract viewMetas: ViewMeta[];\n\n  get detailSlots(): DetailSlots {\n    return {};\n  }\n\n  abstract cellChangeValue(\n    rowId: string,\n    propertyId: string,\n    value: unknown\n  ): void;\n\n  abstract cellChangeValue(\n    rowId: string,\n    propertyId: string,\n    value: unknown\n  ): void;\n\n  abstract cellGetValue(rowId: string, propertyId: string): unknown;\n\n  getContext<T>(key: DataViewContextKey<T>): T | undefined {\n    return this.context.get(key) as T;\n  }\n\n  abstract getPropertyMeta(type: string): ColumnMeta;\n\n  abstract propertyAdd(\n    insertToPosition: InsertToPosition,\n    type?: string\n  ): string;\n\n  abstract propertyChangeData(\n    propertyId: string,\n    data: Record<string, unknown>\n  ): void;\n\n  abstract propertyChangeName(propertyId: string, name: string): void;\n\n  abstract propertyChangeType(propertyId: string, type: string): void;\n\n  abstract propertyDelete(id: string): void;\n\n  abstract propertyDuplicate(columnId: string): string;\n\n  abstract propertyGetData(propertyId: string): Record<string, unknown>;\n\n  propertyGetDefaultWidth(_propertyId: string): number {\n    return DEFAULT_COLUMN_WIDTH;\n  }\n\n  abstract propertyGetName(propertyId: string): string;\n\n  propertyGetReadonly(_propertyId: string): boolean {\n    return false;\n  }\n\n  abstract propertyGetType(propertyId: string): string;\n  abstract rowAdd(InsertToPosition: InsertToPosition | number): string;\n\n  abstract rowDelete(ids: string[]): void;\n\n  abstract rowMove(rowId: string, position: InsertToPosition): void;\n\n  protected setContext<T>(key: DataViewContextKey<T>, value: T): void {\n    this.context.set(key, value);\n  }\n\n  abstract viewDataAdd(viewType: DataViewTypes): string;\n\n  abstract viewDataDelete(viewId: string): void;\n\n  abstract viewDataDuplicate(id: string): string;\n\n  abstract viewDataGet(viewId: string): DataViewDataType;\n\n  abstract viewDataMoveTo(id: string, position: InsertToPosition): void;\n  abstract viewDataUpdate<ViewData extends DataViewDataType>(\n    id: string,\n    updater: (data: ViewData) => Partial<ViewData>\n  ): void;\n  abstract viewMetaGet(type: string): ViewMeta;\n\n  abstract viewMetaGetById(viewId: string): ViewMeta;\n}\n"]}