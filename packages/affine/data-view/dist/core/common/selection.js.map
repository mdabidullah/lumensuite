{"version":3,"file":"selection.js","sourceRoot":"","sources":["../../../src/core/common/selection.ts"],"names":[],"mappings":"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","sourcesContent":["import { BaseSelection } from '@lumensuite/block-std';\nimport { z } from 'zod';\n\nimport type { DataViewSelection, GetDataViewSelection } from '../types.js';\n\nconst TableViewSelectionSchema = z.union([\n  z.object({\n    viewId: z.string(),\n    type: z.literal('table'),\n    selectionType: z.literal('area'),\n    rowsSelection: z.object({\n      start: z.number(),\n      end: z.number(),\n    }),\n    columnsSelection: z.object({\n      start: z.number(),\n      end: z.number(),\n    }),\n    focus: z.object({\n      rowIndex: z.number(),\n      columnIndex: z.number(),\n    }),\n    isEditing: z.boolean(),\n  }),\n  z.object({\n    viewId: z.string(),\n    type: z.literal('table'),\n    selectionType: z.literal('row'),\n    rows: z.array(\n      z.object({ id: z.string(), groupKey: z.string().optional() })\n    ),\n  }),\n]);\n\nconst KanbanCellSelectionSchema = z.object({\n  selectionType: z.literal('cell'),\n  groupKey: z.string(),\n  cardId: z.string(),\n  columnId: z.string(),\n  isEditing: z.boolean(),\n});\n\nconst KanbanCardSelectionSchema = z.object({\n  selectionType: z.literal('card'),\n  cards: z.array(\n    z.object({\n      groupKey: z.string(),\n      cardId: z.string(),\n    })\n  ),\n});\n\nconst KanbanGroupSelectionSchema = z.object({\n  selectionType: z.literal('group'),\n  groupKeys: z.array(z.string()),\n});\n\nconst DatabaseSelectionSchema = z.object({\n  blockId: z.string(),\n  viewSelection: z.union([\n    TableViewSelectionSchema,\n    KanbanCellSelectionSchema,\n    KanbanCardSelectionSchema,\n    KanbanGroupSelectionSchema,\n  ]),\n});\n\nexport class DatabaseSelection extends BaseSelection {\n  static override group = 'note';\n\n  static override type = 'database';\n\n  readonly viewSelection: DataViewSelection;\n\n  get viewId() {\n    return this.viewSelection.viewId;\n  }\n\n  constructor({\n    blockId,\n    viewSelection,\n  }: {\n    blockId: string;\n    viewSelection: DataViewSelection;\n  }) {\n    super({\n      blockId,\n    });\n\n    this.viewSelection = viewSelection;\n  }\n\n  static override fromJSON(json: Record<string, unknown>): DatabaseSelection {\n    DatabaseSelectionSchema.parse(json);\n    return new DatabaseSelection({\n      blockId: json.blockId as string,\n      viewSelection: json.viewSelection as DataViewSelection,\n    });\n  }\n\n  override equals(other: BaseSelection): boolean {\n    if (!(other instanceof DatabaseSelection)) {\n      return false;\n    }\n    return this.blockId === other.blockId;\n  }\n\n  getSelection<T extends DataViewSelection['type']>(\n    type: T\n  ): GetDataViewSelection<T> | undefined {\n    return this.viewSelection.type === type\n      ? (this.viewSelection as GetDataViewSelection<T>)\n      : undefined;\n  }\n\n  override toJSON(): Record<string, unknown> {\n    return {\n      type: 'database',\n      blockId: this.blockId,\n      viewSelection: this.viewSelection,\n    };\n  }\n}\n\ndeclare global {\n  namespace LumenSuite {\n    interface Selection {\n      database: typeof DatabaseSelection;\n    }\n  }\n}\n"]}