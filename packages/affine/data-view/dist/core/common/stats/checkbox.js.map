{"version":3,"file":"checkbox.js","sourceRoot":"","sources":["../../../../src/core/common/stats/checkbox.ts"],"names":[],"mappings":"AAEA,OAAO,EAAE,QAAQ,EAAE,MAAM,wBAAwB,CAAC;AAElD,MAAM,CAAC,MAAM,0BAA0B,GAAoB;IACzD;QACE,KAAK,EAAE,OAAO;QACd,IAAI,EAAE,cAAc;QACpB,QAAQ,EAAE,QAAQ,CAAC,MAAM,EAAE;KAC5B;IACD;QACE,KAAK,EAAE,OAAO;QACd,IAAI,EAAE,qBAAqB;QAC3B,QAAQ,EAAE,QAAQ,CAAC,MAAM,EAAE;KAC5B;IACD;QACE,KAAK,EAAE,OAAO;QACd,IAAI,EAAE,aAAa;QACnB,QAAQ,EAAE,QAAQ,CAAC,MAAM,EAAE;QAC3B,QAAQ,EAAE,iBAAiB;QAC3B,WAAW,EAAE,WAAW;QACxB,IAAI,EAAE,IAAI,CAAC,EAAE;YACX,MAAM,SAAS,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC;YAC/C,OAAO,SAAS,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC;QACrC,CAAC;KACF;IACD;QACE,KAAK,EAAE,OAAO;QACd,IAAI,EAAE,iBAAiB;QACvB,QAAQ,EAAE,QAAQ,CAAC,MAAM,EAAE;QAC3B,QAAQ,EAAE,eAAe;QACzB,WAAW,EAAE,SAAS;QACtB,IAAI,EAAE,CAAC,IAAe,EAAE,EAAE;YACxB,MAAM,YAAY,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC;YACnD,OAAO,YAAY,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC;QACxC,CAAC;KACF;IACD;QACE,KAAK,EAAE,SAAS;QAChB,IAAI,EAAE,eAAe;QACrB,QAAQ,EAAE,QAAQ,CAAC,MAAM,EAAE;QAC3B,QAAQ,EAAE,mBAAmB;QAC7B,WAAW,EAAE,WAAW;QACxB,IAAI,EAAE,CAAC,IAAe,EAAE,EAAE;YACxB,MAAM,SAAS,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC;YAC/C,OAAO,CAAC,CAAC,SAAS,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,GAAG,GAAG,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC;QACnE,CAAC;KACF;IACD;QACE,KAAK,EAAE,SAAS;QAChB,IAAI,EAAE,mBAAmB;QACzB,QAAQ,EAAE,QAAQ,CAAC,MAAM,EAAE;QAC3B,QAAQ,EAAE,iBAAiB;QAC3B,WAAW,EAAE,SAAS;QACtB,IAAI,EAAE,CAAC,IAAe,EAAE,EAAE;YACxB,MAAM,YAAY,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC;YACnD,OAAO,CAAC,CAAC,YAAY,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,GAAG,GAAG,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC;QACtE,CAAC;KACF;CACF,CAAC","sourcesContent":["import type { StatsFunction } from './type.js';\n\nimport { tBoolean } from '../../logical/index.js';\n\nexport const checkboxTypeStatsFunctions: StatsFunction[] = [\n  {\n    group: 'Count',\n    type: 'count-values',\n    dataType: tBoolean.create(),\n  },\n  {\n    group: 'Count',\n    type: 'count-unique-values',\n    dataType: tBoolean.create(),\n  },\n  {\n    group: 'Count',\n    type: 'count-empty',\n    dataType: tBoolean.create(),\n    menuName: 'Count Unchecked',\n    displayName: 'Unchecked',\n    impl: data => {\n      const emptyList = data.filter(value => !value);\n      return emptyList.length.toString();\n    },\n  },\n  {\n    group: 'Count',\n    type: 'count-not-empty',\n    dataType: tBoolean.create(),\n    menuName: 'Count Checked',\n    displayName: 'Checked',\n    impl: (data: unknown[]) => {\n      const notEmptyList = data.filter(value => !!value);\n      return notEmptyList.length.toString();\n    },\n  },\n  {\n    group: 'Percent',\n    type: 'percent-empty',\n    dataType: tBoolean.create(),\n    menuName: 'Percent Unchecked',\n    displayName: 'Unchecked',\n    impl: (data: unknown[]) => {\n      const emptyList = data.filter(value => !value);\n      return ((emptyList.length / data.length) * 100).toFixed(2) + '%';\n    },\n  },\n  {\n    group: 'Percent',\n    type: 'percent-not-empty',\n    dataType: tBoolean.create(),\n    menuName: 'Percent Checked',\n    displayName: 'Checked',\n    impl: (data: unknown[]) => {\n      const notEmptyList = data.filter(value => !!value);\n      return ((notEmptyList.length / data.length) * 100).toFixed(2) + '%';\n    },\n  },\n];\n"]}