{"version":3,"file":"any.js","sourceRoot":"","sources":["../../../../src/core/common/stats/any.ts"],"names":[],"mappings":"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","sourcesContent":["import type { StatsFunction } from './type.js';\n\nimport { tUnknown } from '../../logical/typesystem.js';\n\nexport const anyTypeStatsFunctions: StatsFunction[] = [\n  {\n    group: 'Count',\n    menuName: 'Count All',\n    displayName: 'All',\n    type: 'count-all',\n    dataType: tUnknown.create(),\n    impl: (data: unknown[]) => {\n      return data.length.toString();\n    },\n  },\n  {\n    group: 'Count',\n    menuName: 'Count Values',\n    displayName: 'Values',\n    type: 'count-values',\n    dataType: tUnknown.create(),\n    impl: (data: unknown[], { meta }) => {\n      const values = data\n        .flatMap(v => {\n          if (meta.config.values) {\n            return meta.config.values(v);\n          }\n          return v;\n        })\n        .filter(v => v != null);\n      return values.length.toString();\n    },\n  },\n  {\n    group: 'Count',\n    menuName: 'Count Unique Values',\n    displayName: 'Unique Values',\n    type: 'count-unique-values',\n    dataType: tUnknown.create(),\n    impl: (data: unknown[], { meta }) => {\n      const values = data\n        .flatMap(v => {\n          if (meta.config.values) {\n            return meta.config.values(v);\n          }\n          return v;\n        })\n        .filter(v => v != null);\n      return new Set(values).size.toString();\n    },\n  },\n  {\n    group: 'Count',\n    menuName: 'Count Empty',\n    displayName: 'Empty',\n    type: 'count-empty',\n    dataType: tUnknown.create(),\n    impl: (data, { meta }) => {\n      const emptyList = data.filter(value => meta.config.isEmpty(value));\n      return emptyList.length.toString();\n    },\n  },\n  {\n    group: 'Count',\n    menuName: 'Count Not Empty',\n    displayName: 'Not Empty',\n    type: 'count-not-empty',\n    dataType: tUnknown.create(),\n    impl: (data: unknown[], { meta }) => {\n      const notEmptyList = data.filter(value => !meta.config.isEmpty(value));\n      return notEmptyList.length.toString();\n    },\n  },\n  {\n    group: 'Percent',\n    menuName: 'Percent Empty',\n    displayName: 'Empty',\n    type: 'percent-empty',\n    dataType: tUnknown.create(),\n    impl: (data: unknown[], { meta }) => {\n      const emptyList = data.filter(value => meta.config.isEmpty(value));\n      return ((emptyList.length / data.length) * 100).toFixed(2) + '%';\n    },\n  },\n  {\n    group: 'Percent',\n    menuName: 'Percent Not Empty',\n    displayName: 'Not Empty',\n    type: 'percent-not-empty',\n    dataType: tUnknown.create(),\n    impl: (data: unknown[], { meta }) => {\n      const notEmptyList = data.filter(value => !meta.config.isEmpty(value));\n      return ((notEmptyList.length / data.length) * 100).toFixed(2) + '%';\n    },\n  },\n];\n"]}