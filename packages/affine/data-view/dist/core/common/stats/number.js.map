{"version":3,"file":"number.js","sourceRoot":"","sources":["../../../../src/core/common/stats/number.ts"],"names":[],"mappings":"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","sourcesContent":["import type { StatsFunction } from './type.js';\n\nimport { tNumber } from '../../logical/data-type.js';\n\nexport const numberStatsFunctions: StatsFunction[] = [\n  {\n    group: 'More options',\n    menuName: 'Sum',\n    type: 'sum',\n    dataType: tNumber.create(),\n    impl: (data: number[]) => {\n      const numbers = withoutNull(data);\n      if (numbers.length === 0) {\n        return 'None';\n      }\n      return numbers.reduce((a, b) => a + b, 0).toString();\n    },\n  },\n  {\n    group: 'More options',\n    menuName: 'Average',\n    type: 'average',\n    dataType: tNumber.create(),\n    impl: (data: number[]) => {\n      const numbers = withoutNull(data);\n      if (numbers.length === 0) {\n        return 'None';\n      }\n      return (numbers.reduce((a, b) => a + b, 0) / numbers.length).toString();\n    },\n  },\n  {\n    group: 'More options',\n    menuName: 'Median',\n    type: 'median',\n    dataType: tNumber.create(),\n    impl: (data: number[]) => {\n      const arr = withoutNull(data).sort((a, b) => a - b);\n      let result = 0;\n      if (arr.length % 2 === 1) {\n        result = arr[(arr.length - 1) / 2];\n      } else {\n        const index = arr.length / 2;\n        result = (arr[index] + arr[index - 1]) / 2;\n      }\n      return result?.toString() ?? 'None';\n    },\n  },\n  {\n    group: 'More options',\n    menuName: 'Min',\n    type: 'min',\n    dataType: tNumber.create(),\n    impl: (data: number[]) => {\n      let min: number | null = null;\n      for (const num of data) {\n        if (num != null) {\n          if (min == null) {\n            min = num;\n          } else {\n            min = Math.min(min, num);\n          }\n        }\n      }\n      return min?.toString() ?? 'None';\n    },\n  },\n  {\n    group: 'More options',\n    menuName: 'Max',\n    type: 'max',\n    dataType: tNumber.create(),\n    impl: (data: number[]) => {\n      let max: number | null = null;\n      for (const num of data) {\n        if (num != null) {\n          if (max == null) {\n            max = num;\n          } else {\n            max = Math.max(max, num);\n          }\n        }\n      }\n      return max?.toString() ?? 'None';\n    },\n  },\n  {\n    group: 'More options',\n    menuName: 'Range',\n    type: 'range',\n    dataType: tNumber.create(),\n    impl: (data: number[]) => {\n      let min: number | null = null;\n      let max: number | null = null;\n      for (const num of data) {\n        if (num != null) {\n          if (max == null) {\n            max = num;\n          } else {\n            max = Math.max(max, num);\n          }\n          if (min == null) {\n            min = num;\n          } else {\n            min = Math.min(min, num);\n          }\n        }\n      }\n      if (min == null || max == null) {\n        return 'None';\n      }\n      return (max - min).toString();\n    },\n  },\n];\nconst withoutNull = (arr: number[]) => arr.filter(v => v != null);\n"]}