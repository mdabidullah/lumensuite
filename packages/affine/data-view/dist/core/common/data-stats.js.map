{"version":3,"file":"data-stats.js","sourceRoot":"","sources":["../../../src/core/common/data-stats.ts"],"names":[],"mappings":"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","sourcesContent":["import { assertEquals } from '@lumensuite/global/utils';\n\nimport type { SelectTag } from '../utils/tags/multi-tag-select.js';\nimport type { Column } from '../view-manager/column.js';\nimport type { GroupData } from './group-by/helper.js';\n\n/**\n * Class for computing statistics on a DataViewColumnManager column.\n * Supports various statistical operations such as counting, sum, mean, median, mode, max, min, range,\n * and specific operations for checkbox columns.\n */\nexport class ColumnDataStats<Col extends Column = Column> {\n  private dataViewManager: Col['view'];\n\n  /**\n   * Constructs a new ColumnDataStats instance.\n   *\n   * @param column The column for which statistics are computed.\n   */\n  constructor(private column: Col) {\n    this.dataViewManager = column.view;\n  }\n\n  private _assertColumnType(type: string) {\n    assertEquals(\n      this.column.type$.value,\n      type,\n      `This function should only be called in a column of type ${type}`\n    );\n  }\n\n  // this functions also splits the individual values inside the multiselect\n  private _getAllValuesAsString(group?: GroupData) {\n    const colType = this.column.type$.value;\n    const colValues: string[] = [];\n\n    for (const rId of group?.rows ?? this.dataViewManager.rows$.value) {\n      switch (colType) {\n        case 'multi-select': {\n          const options = (this.column.data$.value.options ??\n            []) as SelectTag[];\n          const values = (this.column.getValue(rId) ?? []) as string[];\n          const map = new Map<string, SelectTag>(options?.map(v => [v.id, v]));\n          for (const id of values) {\n            const opt = map.get(id);\n\n            if (opt) colValues.push(opt.value);\n          }\n          break;\n        }\n        default: {\n          const value = this.column.getStringValue(rId);\n          if (value.trim() !== '') colValues.push(value);\n        }\n      }\n    }\n\n    return colValues;\n  }\n\n  private _getCheckBoxColValues(group?: GroupData) {\n    this._assertColumnType('checkbox');\n    const val = (group?.rows ?? this.dataViewManager.rows$.value).map(rId => {\n      return this.column.getValue(rId);\n    });\n    return val as (boolean | undefined)[];\n  }\n\n  // gets the count of non-empty values in the column with separated out multiselect items\n  private _getColumnValueCounts(group?: GroupData) {\n    return this._getAllValuesAsString(group).length;\n  }\n\n  private _getColValuesAsNumber(group?: GroupData) {\n    this._assertColumnType('number');\n    const values: number[] = [];\n    for (const rId of group?.rows ?? this.dataViewManager.rows$.value) {\n      const value = this.column.getValue(rId) as number | undefined;\n      if (value !== undefined) values.push(value);\n    }\n    return values;\n  }\n\n  // @ts-ignore\n  private _getColValuesAsString(group?: GroupData, noEmpty: boolean = false) {\n    const val = (group?.rows ?? this.dataViewManager.rows$.value).map(rId => {\n      return this.column.getStringValue(rId);\n    });\n    return noEmpty ? val.filter(v => v.trim() !== '') : val;\n  }\n\n  private _getEmptyCellCount(group?: GroupData) {\n    let empty = 0;\n    const rows = group?.rows ?? this.dataViewManager.rows$.value;\n    for (const rId of rows) {\n      const colVal = this.column.getStringValue(rId).trim();\n      if (colVal === '') empty++;\n    }\n    return empty;\n  }\n\n  private _getNonEmptyCellCount(group?: GroupData) {\n    let notEmpty = 0;\n\n    const rows = group?.rows ?? this.dataViewManager.rows$.value;\n    for (const rId of rows) {\n      const colVal = this.column.getStringValue(rId).trim();\n      if (colVal !== '') notEmpty++;\n    }\n    return notEmpty;\n  }\n\n  /**\n   * Returns the number of checked checkboxes.\n   */\n  checked(group?: GroupData) {\n    let checked = 0;\n    const values = this._getCheckBoxColValues(group);\n    for (const value of values) {\n      if (value) checked++;\n    }\n    return checked;\n  }\n\n  /**\n   * Returns the number of cells in the column.\n   */\n  countAll(group?: GroupData) {\n    return group?.rows.length ?? this.dataViewManager.rows$.value.length;\n  }\n\n  /**\n   * Returns the number of cells in the column which are *empty*.\n   */\n  countEmpty(group?: GroupData) {\n    return this._getEmptyCellCount(group);\n  }\n\n  /**\n   * Returns the number of cells in the column which are *not empty*.\n   */\n  countNonEmpty(group?: GroupData) {\n    return this._getNonEmptyCellCount(group);\n  }\n\n  /**\n   * Returns the number of unique values in the column.\n   */\n  countUniqueValues(group?: GroupData) {\n    return [...new Set(this._getAllValuesAsString(group))].length;\n  }\n\n  /**\n   * Returns the number of cells in the column with a value in it.\n   */\n  countValues(group?: GroupData) {\n    return this._getColumnValueCounts(group);\n  }\n\n  /**\n   * Returns the maximum value in the column.\n   */\n  max(group?: GroupData) {\n    const values = this._getColValuesAsNumber(group);\n\n    return Math.max(...values);\n  }\n\n  // Math Ops\n\n  /**\n   * Returns the average of values in the column.\n   */\n  mean(group?: GroupData) {\n    const values = this._getColValuesAsNumber(group);\n    let sum = 0;\n    for (const val of values) sum += val;\n    return sum / values.length;\n  }\n\n  /**\n   * Returns the median of the column.\n   */\n  median(group?: GroupData) {\n    const values = this._getColValuesAsNumber(group).sort((a, b) => a - b);\n    const n = values.length;\n    const mid = Math.floor(n / 2);\n\n    if (n % 2 === 0) {\n      return (values[mid - 1] + values[mid]) / 2;\n    } else {\n      return values[mid];\n    }\n  }\n\n  /**\n   * Returns the minimum value in the column.\n   */\n  min(group?: GroupData) {\n    const values = this._getColValuesAsNumber(group);\n\n    return Math.min(...values);\n  }\n\n  /**\n   * Returns the mode of the column.\n   */\n  mode(group?: GroupData) {\n    const values = this._getColValuesAsNumber(group);\n\n    const frequencyMap = new Map<number, number>();\n\n    values.forEach(value => {\n      const cur = frequencyMap.get(value);\n      cur === undefined\n        ? frequencyMap.set(value, 1)\n        : frequencyMap.set(value, cur + 1);\n    });\n\n    let mode = 0;\n    let maxFrequency = 0;\n\n    frequencyMap.forEach((frequency, element) => {\n      if (frequency > maxFrequency) {\n        mode = element;\n        maxFrequency = frequency;\n      }\n    });\n\n    return mode;\n  }\n\n  /**\n   * Returns the number of unchecked checkboxes.\n   */\n  notChecked(group?: GroupData) {\n    let notChecked = 0;\n    const values = this._getCheckBoxColValues(group);\n    for (const value of values) {\n      if (!value) notChecked++;\n    }\n    return notChecked;\n  }\n\n  /**\n   * Returns the percent of checked checkboxes.\n   */\n  percentChecked(group?: GroupData) {\n    this._assertColumnType('checkbox');\n    return this.checked(group) / this.countAll(group);\n  }\n\n  /**\n   * Returns the percent of cells in the column which are empty.\n   */\n  percentEmpty(group?: GroupData) {\n    return this._getEmptyCellCount(group) / this.countAll(group);\n  }\n\n  // Checkbox\n\n  /**\n   * Returns the percent of cells in the column which are not empty.\n   */\n  percentNonEmpty(group?: GroupData) {\n    return 1.0 - this.percentEmpty(group);\n  }\n\n  /**\n   * Returns the percent of unchecked checkboxes.\n   */\n  percentNotChecked(group?: GroupData) {\n    this._assertColumnType('checkbox');\n    return 1.0 - this.percentChecked(group);\n  }\n\n  /**\n   * Returns the range of the value in the column (max - min).\n   */\n  range(group?: GroupData) {\n    return this.max(group) - this.min(group);\n  }\n\n  /**\n   * Returns the sum of all values in the column.\n   */\n  sum(group?: GroupData) {\n    const values = this._getColValuesAsNumber(group);\n    let sum = 0;\n    for (const val of values) sum += val;\n    return sum;\n  }\n}\n"]}