{"version":3,"file":"types.js","sourceRoot":"","sources":["../../../src/core/column/types.ts"],"names":[],"mappings":"","sourcesContent":["import type { Disposable } from '@blocksuite/global/utils';\n\nimport type { TType } from '../logical/index.js';\nimport type { SelectTag } from '../utils/tags/multi-tag-select.js';\n\nexport type SelectColumnData = {\n  options: SelectTag[];\n};\n\nexport type GetColumnDataFromConfig<T> =\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  T extends ColumnConfig<infer R, any> ? R : never;\nexport type GetCellDataFromConfig<T> =\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  T extends ColumnConfig<any, infer R> ? R : never;\nexport type ColumnConfig<\n  Data extends NonNullable<unknown> = NonNullable<unknown>,\n  Value = unknown,\n> = {\n  name: string;\n  defaultData: () => Data;\n  type: (data: Data) => TType;\n  formatValue?: (value: unknown, colData: Data) => Value;\n  isEmpty: (value?: Value) => boolean;\n  values?: (value?: Value) => unknown[];\n  cellToString: (data: Value, colData: Data) => string;\n  cellFromString: (\n    data: string,\n    colData: Data\n  ) => {\n    value: unknown;\n    data?: Record<string, unknown>;\n  };\n  cellToJson: (data: Value, colData: Data) => DVJSON;\n  addGroup?: (text: string, oldData: Data) => Data;\n  onUpdate?: (value: Value, Data: Data, callback: () => void) => Disposable;\n  valueUpdate?: (value: Value, Data: Data, newValue: Value) => Value;\n};\n\nexport type DVJSON =\n  | null\n  | number\n  | string\n  | boolean\n  | DVJSON[]\n  | {\n      [k: string]: DVJSON;\n    };\n"]}