{"version":3,"file":"column-config.js","sourceRoot":"","sources":["../../../src/core/column/column-config.ts"],"names":[],"mappings":"AAyCA,MAAM,CAAC,MAAM,UAAU,GAAG,CAAsB,IAAU,EAAE,EAAE,CAAC,CAAC;IAC9D,IAAI,EAAE,IAAI;IACV,WAAW,EAAE,CAIX,GAAuC,EACE,EAAE;QAC3C,MAAM,MAAM,GAAuB,CAAC,IAAI,EAAE,IAAI,EAAE,EAAE;YAChD,OAAO;gBACL,IAAI;gBACJ,IAAI;gBACJ,IAAI,EAAE,IAAI,IAAI,GAAG,CAAC,WAAW,EAAE;aAChC,CAAC;QACJ,CAAC,CAAC;QACF,OAAO;YACL,IAAI;YACJ,MAAM,EAAE,GAAG;YACX,MAAM;YACN,gBAAgB,EAAE,QAAQ,CAAC,EAAE,CAAC,CAAC;gBAC7B,IAAI;gBACJ,MAAM,EAAE,GAAG;gBACX,MAAM;gBACN,QAAQ,EAAE;oBACR,IAAI;oBACJ,GAAG,QAAQ;iBACZ;aACF,CAAC;SACH,CAAC;IACJ,CAAC;CACF,CAAC,CAAC","sourcesContent":["import type { Renderer } from './renderer.js';\nimport type { ColumnConfig } from './types.js';\n\nexport type ColumnMeta<\n  Type extends string = string,\n  ColumnData extends NonNullable<unknown> = NonNullable<unknown>,\n  CellData = unknown,\n> = {\n  type: Type;\n  config: ColumnConfig<ColumnData, CellData>;\n  create: Create<ColumnData>;\n  renderer: Renderer<ColumnData, CellData>;\n};\ntype CreateColumnMeta<\n  Type extends string = string,\n  ColumnData extends Record<string, unknown> = Record<string, never>,\n  CellData = unknown,\n> = (\n  renderer: Omit<Renderer<ColumnData, CellData>, 'type'>\n) => ColumnMeta<Type, ColumnData, CellData>;\ntype Create<\n  ColumnData extends Record<string, unknown> = Record<string, never>,\n> = (\n  name: string,\n  data?: ColumnData\n) => {\n  type: string;\n  name: string;\n  statCalcOp?: string;\n  data: ColumnData;\n};\nexport type ColumnModel<\n  Type extends string = string,\n  ColumnData extends Record<string, unknown> = Record<string, never>,\n  CellData = unknown,\n> = {\n  type: Type;\n  config: ColumnConfig<ColumnData, CellData>;\n  create: Create<ColumnData>;\n  createColumnMeta: CreateColumnMeta<Type, ColumnData, CellData>;\n};\nexport const columnType = <Type extends string>(type: Type) => ({\n  type: type,\n  modelConfig: <\n    CellData,\n    ColumnData extends Record<string, unknown> = Record<string, never>,\n  >(\n    ops: ColumnConfig<ColumnData, CellData>\n  ): ColumnModel<Type, ColumnData, CellData> => {\n    const create: Create<ColumnData> = (name, data) => {\n      return {\n        type,\n        name,\n        data: data ?? ops.defaultData(),\n      };\n    };\n    return {\n      type,\n      config: ops,\n      create,\n      createColumnMeta: renderer => ({\n        type,\n        config: ops,\n        create,\n        renderer: {\n          type,\n          ...renderer,\n        },\n      }),\n    };\n  },\n});\n"]}