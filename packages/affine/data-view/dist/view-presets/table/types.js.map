{"version":3,"file":"types.js","sourceRoot":"","sources":["../../../src/view-presets/table/types.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,YAAY,EAAE,MAAM,0BAA0B,CAAC;AAexD,MAAM,CAAC,MAAM,iBAAiB,GAAG,CAAC,GAAgB,EAAE,EAAE;IACpD,MAAM,OAAO,GAAG,GAAG,CAAC,OAAO,CACzB,kCAAkC,CACpB,CAAC;IACjB,YAAY,CAAC,OAAO,CAAC,CAAC;IACtB,OAAO,OAAO,CAAC;AACjB,CAAC,CAAC;AAWF,MAAM,CAAC,MAAM,YAAY,GAAG;IAC1B,KAAK,CAAC,CAAgB,EAAE,CAAgB;QACtC,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,EAAE,CAAC;YAC3B,OAAO,KAAK,CAAC;QACf,CAAC;QACD,OAAO,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,QAAQ,KAAK,CAAC,CAAC,QAAQ,CAAC;IACpD,CAAC;CACF,CAAC;AAKF,MAAM,CAAC,MAAM,iBAAiB,GAAG;IAC/B,IAAI,EAAE,CAAC,SAA8B,EAAkB,EAAE;QACvD,IAAI,SAAS,EAAE,aAAa,KAAK,KAAK,EAAE,CAAC;YACvC,OAAO,SAAS,CAAC,IAAI,CAAC;QACxB,CAAC;QACD,OAAO,EAAE,CAAC;IACZ,CAAC;IACD,OAAO,EAAE,CAAC,SAA8B,EAAY,EAAE;QACpD,OAAO,iBAAiB,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;IAC1D,CAAC;IACD,QAAQ,CACN,SAAyC,EACzC,GAAiB;QAEjB,IAAI,CAAC,SAAS,EAAE,CAAC;YACf,OAAO,KAAK,CAAC;QACf,CAAC;QACD,OAAO,iBAAiB,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAChD,YAAY,CAAC,KAAK,CAAC,CAAC,EAAE,GAAG,CAAC,CAC3B,CAAC;IACJ,CAAC;IACD,MAAM,CAAC,OAAiC;QACtC,OAAO;YACL,aAAa,EAAE,KAAK;YACpB,IAAI,EAAE,OAAO,CAAC,IAAI;SACnB,CAAC;IACJ,CAAC;IACD,EAAE,CAAC,SAA8B;QAC/B,OAAO,SAAS,EAAE,aAAa,KAAK,KAAK,CAAC;IAC5C,CAAC;CACF,CAAC;AASF,MAAM,CAAC,MAAM,kBAAkB,GAAG;IAChC,MAAM,EAAE,CAAC,OAMR,EAAsB,EAAE;QACvB,OAAO;YACL,GAAG,OAAO;YACV,aAAa,EAAE,MAAM;YACrB,aAAa,EAAE,OAAO,CAAC,aAAa,IAAI;gBACtC,KAAK,EAAE,OAAO,CAAC,KAAK,CAAC,QAAQ;gBAC7B,GAAG,EAAE,OAAO,CAAC,KAAK,CAAC,QAAQ;aAC5B;YACD,gBAAgB,EAAE,OAAO,CAAC,gBAAgB,IAAI;gBAC5C,KAAK,EAAE,OAAO,CAAC,KAAK,CAAC,WAAW;gBAChC,GAAG,EAAE,OAAO,CAAC,KAAK,CAAC,WAAW;aAC/B;SACF,CAAC;IACJ,CAAC;IACD,OAAO,CAAC,SAA6B;QACnC,OAAO,CACL,SAAS,CAAC,KAAK,CAAC,QAAQ,KAAK,SAAS,CAAC,aAAa,CAAC,KAAK;YAC1D,SAAS,CAAC,KAAK,CAAC,QAAQ,KAAK,SAAS,CAAC,aAAa,CAAC,GAAG;YACxD,SAAS,CAAC,KAAK,CAAC,WAAW,KAAK,SAAS,CAAC,gBAAgB,CAAC,KAAK;YAChE,SAAS,CAAC,KAAK,CAAC,WAAW,KAAK,SAAS,CAAC,gBAAgB,CAAC,GAAG,CAC/D,CAAC;IACJ,CAAC;CACF,CAAC","sourcesContent":["import { assertExists } from '@lumensuite/global/utils';\n\nexport type ColumnType = string;\n\nexport interface Column<\n  Data extends Record<string, unknown> = Record<string, unknown>,\n> {\n  id: string;\n  type: ColumnType;\n  name: string;\n  data: Data;\n}\n\nexport type StatCalcOpType = string | undefined;\n\nexport const getTableContainer = (ele: HTMLElement) => {\n  const element = ele.closest(\n    '.affine-database-table-container'\n  ) as HTMLElement;\n  assertExists(element);\n  return element;\n};\ntype WithTableViewType<T> = T extends unknown\n  ? {\n      viewId: string;\n      type: 'table';\n    } & T\n  : never;\nexport type RowWithGroup = {\n  id: string;\n  groupKey?: string;\n};\nexport const RowWithGroup = {\n  equal(a?: RowWithGroup, b?: RowWithGroup) {\n    if (a == null || b == null) {\n      return false;\n    }\n    return a.id === b.id && a.groupKey === b.groupKey;\n  },\n};\nexport type TableRowSelection = {\n  selectionType: 'row';\n  rows: RowWithGroup[];\n};\nexport const TableRowSelection = {\n  rows: (selection?: TableViewSelection): RowWithGroup[] => {\n    if (selection?.selectionType === 'row') {\n      return selection.rows;\n    }\n    return [];\n  },\n  rowsIds: (selection?: TableViewSelection): string[] => {\n    return TableRowSelection.rows(selection).map(v => v.id);\n  },\n  includes(\n    selection: TableViewSelection | undefined,\n    row: RowWithGroup\n  ): boolean {\n    if (!selection) {\n      return false;\n    }\n    return TableRowSelection.rows(selection).some(v =>\n      RowWithGroup.equal(v, row)\n    );\n  },\n  create(options: { rows: RowWithGroup[] }): TableRowSelection {\n    return {\n      selectionType: 'row',\n      rows: options.rows,\n    };\n  },\n  is(selection?: TableViewSelection): selection is TableRowSelection {\n    return selection?.selectionType === 'row';\n  },\n};\nexport type TableAreaSelection = {\n  selectionType: 'area';\n  groupKey?: string;\n  rowsSelection: MultiSelection;\n  columnsSelection: MultiSelection;\n  focus: CellFocus;\n  isEditing: boolean;\n};\nexport const TableAreaSelection = {\n  create: (options: {\n    groupKey?: string;\n    focus: CellFocus;\n    rowsSelection?: MultiSelection;\n    columnsSelection?: MultiSelection;\n    isEditing: boolean;\n  }): TableAreaSelection => {\n    return {\n      ...options,\n      selectionType: 'area',\n      rowsSelection: options.rowsSelection ?? {\n        start: options.focus.rowIndex,\n        end: options.focus.rowIndex,\n      },\n      columnsSelection: options.columnsSelection ?? {\n        start: options.focus.columnIndex,\n        end: options.focus.columnIndex,\n      },\n    };\n  },\n  isFocus(selection: TableAreaSelection) {\n    return (\n      selection.focus.rowIndex === selection.rowsSelection.start &&\n      selection.focus.rowIndex === selection.rowsSelection.end &&\n      selection.focus.columnIndex === selection.columnsSelection.start &&\n      selection.focus.columnIndex === selection.columnsSelection.end\n    );\n  },\n};\n\nexport type CellFocus = {\n  rowIndex: number;\n  columnIndex: number;\n};\nexport type MultiSelection = {\n  start: number;\n  end: number;\n};\nexport type TableViewSelection = TableAreaSelection | TableRowSelection;\nexport type TableViewSelectionWithType = WithTableViewType<\n  TableAreaSelection | TableRowSelection\n>;\n"]}