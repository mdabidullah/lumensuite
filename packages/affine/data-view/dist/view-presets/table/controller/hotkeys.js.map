{"version":3,"file":"hotkeys.js","sourceRoot":"","sources":["../../../../src/view-presets/table/controller/hotkeys.ts"],"names":[],"mappings":"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","sourcesContent":["import type { ReactiveController } from 'lit';\n\nimport type { DataViewTable } from '../table-view.js';\n\nimport { popRowMenu } from '../components/menu.js';\nimport { TableAreaSelection, TableRowSelection } from '../types.js';\n\nexport class TableHotkeysController implements ReactiveController {\n  get selectionController() {\n    return this.host.selectionController;\n  }\n\n  constructor(private host: DataViewTable) {\n    this.host.addController(this);\n  }\n\n  hostConnected() {\n    this.host.disposables.add(\n      this.host.bindHotkey({\n        Backspace: () => {\n          const selection = this.selectionController.selection;\n          if (!selection) {\n            return;\n          }\n          if (TableRowSelection.is(selection)) {\n            const rows = TableRowSelection.rowsIds(selection);\n            this.selectionController.selection = undefined;\n            this.host.view.rowDelete(rows);\n            return;\n          }\n          const {\n            focus,\n            rowsSelection,\n            columnsSelection,\n            isEditing,\n            groupKey,\n          } = selection;\n          if (focus && !isEditing) {\n            if (rowsSelection && columnsSelection) {\n              // multi cell\n              for (let i = rowsSelection.start; i <= rowsSelection.end; i++) {\n                const { start, end } = columnsSelection;\n                for (let j = start; j <= end; j++) {\n                  const container = this.selectionController.getCellContainer(\n                    groupKey,\n                    i,\n                    j\n                  );\n                  const rowId = container?.dataset.rowId;\n                  const columnId = container?.dataset.columnId;\n                  if (rowId && columnId) {\n                    container?.column.setValueFromString(rowId, '');\n                  }\n                }\n              }\n            } else {\n              // single cell\n              const container = this.selectionController.getCellContainer(\n                groupKey,\n                focus.rowIndex,\n                focus.columnIndex\n              );\n              const rowId = container?.dataset.rowId;\n              const columnId = container?.dataset.columnId;\n              if (rowId && columnId) {\n                container?.column.setValueFromString(rowId, '');\n              }\n            }\n          }\n        },\n        Escape: () => {\n          const selection = this.selectionController.selection;\n          if (!selection) {\n            return false;\n          }\n          if (TableRowSelection.is(selection)) {\n            const result = this.selectionController.rowsToArea(\n              selection.rows.map(v => v.id)\n            );\n            if (result) {\n              this.selectionController.selection = TableAreaSelection.create({\n                groupKey: result.groupKey,\n                focus: {\n                  rowIndex: result.start,\n                  columnIndex: 0,\n                },\n                rowsSelection: {\n                  start: result.start,\n                  end: result.end,\n                },\n                isEditing: false,\n              });\n            } else {\n              this.selectionController.selection = undefined;\n            }\n          } else if (selection.isEditing) {\n            this.selectionController.selection = {\n              ...selection,\n              isEditing: false,\n            };\n          } else {\n            const rows = this.selectionController.areaToRows(selection);\n            this.selectionController.rowSelectionChange({\n              add: rows,\n              remove: [],\n            });\n          }\n          return true;\n        },\n        Enter: context => {\n          const selection = this.selectionController.selection;\n          if (!selection) {\n            return false;\n          }\n          if (TableRowSelection.is(selection)) {\n            const result = this.selectionController.rowsToArea(\n              selection.rows.map(v => v.id)\n            );\n            if (result) {\n              this.selectionController.selection = TableAreaSelection.create({\n                groupKey: result.groupKey,\n                focus: {\n                  rowIndex: result.start,\n                  columnIndex: 0,\n                },\n                rowsSelection: {\n                  start: result.start,\n                  end: result.end,\n                },\n                isEditing: false,\n              });\n            }\n          } else if (selection.isEditing) {\n            return false;\n          } else {\n            this.selectionController.selection = {\n              ...selection,\n              isEditing: true,\n            };\n          }\n          context.get('keyboardState').raw.preventDefault();\n          return true;\n        },\n        'Shift-Enter': () => {\n          const selection = this.selectionController.selection;\n          if (\n            !selection ||\n            TableRowSelection.is(selection) ||\n            selection.isEditing\n          ) {\n            return false;\n          }\n          const cell = this.selectionController.getCellContainer(\n            selection.groupKey,\n            selection.focus.rowIndex,\n            selection.focus.columnIndex\n          );\n          if (cell) {\n            this.selectionController.insertRowAfter(\n              selection.groupKey,\n              cell.rowId\n            );\n          }\n          return true;\n        },\n        Tab: ctx => {\n          const selection = this.selectionController.selection;\n          if (\n            !selection ||\n            TableRowSelection.is(selection) ||\n            selection.isEditing\n          ) {\n            return false;\n          }\n          ctx.get('keyboardState').raw.preventDefault();\n          this.selectionController.focusToCell('right');\n          return true;\n        },\n        'Shift-Tab': ctx => {\n          const selection = this.selectionController.selection;\n          if (\n            !selection ||\n            TableRowSelection.is(selection) ||\n            selection.isEditing\n          ) {\n            return false;\n          }\n          ctx.get('keyboardState').raw.preventDefault();\n          this.selectionController.focusToCell('left');\n          return true;\n        },\n        ArrowLeft: context => {\n          const selection = this.selectionController.selection;\n          if (\n            !selection ||\n            TableRowSelection.is(selection) ||\n            selection.isEditing\n          ) {\n            return false;\n          }\n          this.selectionController.focusToCell('left');\n          context.get('keyboardState').raw.preventDefault();\n          return true;\n        },\n        ArrowRight: context => {\n          const selection = this.selectionController.selection;\n          if (\n            !selection ||\n            TableRowSelection.is(selection) ||\n            selection.isEditing\n          ) {\n            return false;\n          }\n          this.selectionController.focusToCell('right');\n          context.get('keyboardState').raw.preventDefault();\n          return true;\n        },\n        ArrowUp: context => {\n          const selection = this.selectionController.selection;\n          if (!selection) {\n            return false;\n          }\n\n          if (TableRowSelection.is(selection)) {\n            this.selectionController.navigateRowSelection('up', false);\n          } else if (selection.isEditing) {\n            return false;\n          } else {\n            this.selectionController.focusToCell('up');\n          }\n\n          context.get('keyboardState').raw.preventDefault();\n          return true;\n        },\n        ArrowDown: context => {\n          const selection = this.selectionController.selection;\n          if (!selection) {\n            return false;\n          }\n\n          if (TableRowSelection.is(selection)) {\n            this.selectionController.navigateRowSelection('down', false);\n          } else if (selection.isEditing) {\n            return false;\n          } else {\n            this.selectionController.focusToCell('down');\n          }\n\n          context.get('keyboardState').raw.preventDefault();\n          return true;\n        },\n\n        'Shift-ArrowUp': context => {\n          const selection = this.selectionController.selection;\n          if (!selection) {\n            return false;\n          }\n\n          if (TableRowSelection.is(selection)) {\n            this.selectionController.navigateRowSelection('up', true);\n          } else if (selection.isEditing) {\n            return false;\n          } else {\n            this.selectionController.selectionAreaUp();\n          }\n\n          context.get('keyboardState').raw.preventDefault();\n          return true;\n        },\n\n        'Shift-ArrowDown': context => {\n          const selection = this.selectionController.selection;\n          if (!selection) {\n            return false;\n          }\n\n          if (TableRowSelection.is(selection)) {\n            this.selectionController.navigateRowSelection('down', true);\n          } else if (selection.isEditing) {\n            return false;\n          } else {\n            this.selectionController.selectionAreaDown();\n          }\n\n          context.get('keyboardState').raw.preventDefault();\n          return true;\n        },\n\n        'Shift-ArrowLeft': context => {\n          const selection = this.selectionController.selection;\n          if (\n            !selection ||\n            TableRowSelection.is(selection) ||\n            selection.isEditing ||\n            this.selectionController.isRowSelection()\n          ) {\n            return false;\n          }\n\n          this.selectionController.selectionAreaLeft();\n\n          context.get('keyboardState').raw.preventDefault();\n          return true;\n        },\n\n        'Shift-ArrowRight': context => {\n          const selection = this.selectionController.selection;\n          if (\n            !selection ||\n            TableRowSelection.is(selection) ||\n            selection.isEditing ||\n            this.selectionController.isRowSelection()\n          ) {\n            return false;\n          }\n\n          this.selectionController.selectionAreaRight();\n\n          context.get('keyboardState').raw.preventDefault();\n          return true;\n        },\n\n        'Mod-a': context => {\n          const selection = this.selectionController.selection;\n          if (TableRowSelection.is(selection)) {\n            return false;\n          }\n          if (selection?.isEditing) {\n            return true;\n          }\n          if (selection) {\n            context.get('keyboardState').raw.preventDefault();\n            this.selectionController.selection = TableRowSelection.create({\n              rows:\n                this.host.view.groupManager.groupsDataList$.value?.flatMap(\n                  group => group.rows.map(id => ({ groupKey: group.key, id }))\n                ) ??\n                this.host.view.rows$.value.map(id => ({\n                  groupKey: undefined,\n                  id,\n                })),\n            });\n            return true;\n          }\n          return;\n        },\n        '/': context => {\n          const selection = this.selectionController.selection;\n          if (!selection) {\n            return;\n          }\n          if (TableRowSelection.is(selection)) {\n            // open multi-rows context-menu\n            return;\n          }\n          if (selection.isEditing) {\n            return;\n          }\n          const cell = this.selectionController.getCellContainer(\n            selection.groupKey,\n            selection.focus.rowIndex,\n            selection.focus.columnIndex\n          );\n          if (cell) {\n            context.get('keyboardState').raw.preventDefault();\n            const row = {\n              id: cell.rowId,\n              groupKey: selection.groupKey,\n            };\n            this.selectionController.selection = TableRowSelection.create({\n              rows: [row],\n            });\n            popRowMenu(this.host.dataViewEle, cell, this.selectionController);\n          }\n        },\n      })\n    );\n  }\n}\n"]}