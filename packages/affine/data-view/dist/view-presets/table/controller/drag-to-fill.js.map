{"version":3,"file":"drag-to-fill.js","sourceRoot":"","sources":["../../../../src/view-presets/table/controller/drag-to-fill.ts"],"names":[],"mappings":"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","sourcesContent":["import { ShadowlessElement } from '@lumensuite/block-std';\nimport { assertEquals } from '@lumensuite/global/utils';\nimport { DocCollection, type Text } from '@lumensuite/store';\nimport { css, html } from 'lit';\nimport { customElement, state } from 'lit/decorators.js';\nimport { createRef, ref } from 'lit/directives/ref.js';\n\nimport type { DataViewTable } from '../table-view.js';\nimport type { TableAreaSelection } from '../types.js';\n\nimport { tRichText } from '../../../core/logical/data-type.js';\n\n@customElement('data-view-drag-to-fill')\nexport class DragToFillElement extends ShadowlessElement {\n  static override styles = css`\n    .drag-to-fill {\n      border-radius: 50%;\n      box-sizing: border-box;\n      background-color: var(--affine-background-primary-color);\n      border: 2px solid var(--affine-primary-color);\n      display: none;\n      position: absolute;\n      cursor: ns-resize;\n      width: 10px;\n      height: 10px;\n      transform: translate(-50%, -50%);\n      pointer-events: auto;\n      user-select: none;\n      transition: scale 0.2s ease;\n      z-index: 2;\n    }\n    .drag-to-fill.dragging {\n      scale: 1.1;\n    }\n  `;\n\n  dragToFillRef = createRef<HTMLDivElement>();\n\n  override render() {\n    // TODO add tooltip\n    return html`<div\n      ${ref(this.dragToFillRef)}\n      data-drag-to-fill=\"true\"\n      class=\"drag-to-fill ${this.dragging ? 'dragging' : ''}\"\n    ></div>`;\n  }\n\n  @state()\n  accessor dragging = false;\n}\n\nexport function fillSelectionWithFocusCellData(\n  host: DataViewTable,\n  selection: TableAreaSelection\n) {\n  const { groupKey, rowsSelection, columnsSelection, focus } = selection;\n\n  const focusCell = host.selectionController.getCellContainer(\n    groupKey,\n    focus.rowIndex,\n    focus.columnIndex\n  );\n\n  if (!focusCell) return;\n\n  if (rowsSelection && columnsSelection) {\n    assertEquals(\n      columnsSelection.start,\n      columnsSelection.end,\n      'expected selections on a single column'\n    );\n\n    const curCol = focusCell.column; // we are sure that we are always in the same column while iterating through rows\n    const cell = focusCell.cell$.value;\n    const focusData = cell.value$.value;\n\n    const draggingColIdx = columnsSelection.start;\n    const { start, end } = rowsSelection;\n\n    for (let i = start; i <= end; i++) {\n      if (i === focus.rowIndex) continue;\n\n      const cellContainer = host.selectionController.getCellContainer(\n        groupKey,\n        i,\n        draggingColIdx\n      );\n\n      if (!cellContainer) continue;\n\n      const curCell = cellContainer.cell$.value;\n\n      if (tRichText.is(curCol.dataType$.value)) {\n        const focusCellText = focusData as Text | undefined;\n\n        const delta = focusCellText?.toDelta() ?? [{ insert: '' }];\n        const curCellText = curCell.value$.value as Text | undefined;\n\n        if (curCellText) {\n          curCellText.clear();\n          curCellText.applyDelta(delta);\n        } else {\n          const newText = new DocCollection.Y.Text();\n          newText.applyDelta(delta);\n          curCell.setValue(newText);\n        }\n      } else {\n        curCell.setValue(focusData);\n      }\n    }\n  }\n}\n"]}