{"version":3,"file":"clipboard.js","sourceRoot":"","sources":["../../../../src/view-presets/table/controller/clipboard.ts"],"names":[],"mappings":"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","sourcesContent":["import type { UIEventStateContext } from '@blocksuite/block-std';\nimport type { ReactiveController } from 'lit';\n\nimport { toast } from '@blocksuite/affine-components/toast';\n\nimport type { Cell } from '../../../core/view-manager/cell.js';\nimport type { Row } from '../../../core/view-manager/row.js';\nimport type { DataViewTable } from '../table-view.js';\n\nimport {\n  TableAreaSelection,\n  TableRowSelection,\n  type TableViewSelection,\n  type TableViewSelectionWithType,\n} from '../types.js';\n\nconst BLOCKSUITE_DATABASE_TABLE = 'blocksuite/database/table';\ntype JsonAreaData = string[][];\nconst TEXT = 'text/plain';\n\nexport class TableClipboardController implements ReactiveController {\n  private _onCopy = (\n    tableSelection: TableViewSelectionWithType,\n    isCut = false\n  ) => {\n    const table = this.host;\n\n    const area = getSelectedArea(tableSelection, table);\n    if (!area) {\n      return;\n    }\n    const stringResult = area\n      .map(row => row.cells.map(cell => cell.stringValue$.value).join('\\t'))\n      .join('\\n');\n    const jsonResult: JsonAreaData = area.map(row =>\n      row.cells.map(cell => cell.stringValue$.value)\n    );\n    if (isCut) {\n      const deleteRows: string[] = [];\n      for (const row of area) {\n        if (row.row) {\n          deleteRows.push(row.row.rowId);\n        } else {\n          for (const cell of row.cells) {\n            cell.setValue(undefined);\n          }\n        }\n      }\n      if (deleteRows.length) {\n        table.view.rowDelete(deleteRows);\n      }\n    }\n    this.std.clipboard\n      .writeToClipboard(items => {\n        return {\n          ...items,\n          [TEXT]: stringResult,\n          [BLOCKSUITE_DATABASE_TABLE]: JSON.stringify(jsonResult),\n        };\n      })\n      .then(() => {\n        if (area[0]?.row) {\n          toast(\n            this.host.std.host,\n            `${area.length} row${area.length > 1 ? 's' : ''} copied to clipboard`\n          );\n        } else {\n          const count = area.flatMap(row => row.cells).length;\n          toast(\n            this.host.std.host,\n            `${count} cell${count > 1 ? 's' : ''} copied to clipboard`\n          );\n        }\n      })\n      .catch(console.error);\n\n    return true;\n  };\n\n  private _onCut = (tableSelection: TableViewSelectionWithType) => {\n    this._onCopy(tableSelection, true);\n  };\n\n  private _onPaste = async (_context: UIEventStateContext) => {\n    const event = _context.get('clipboardState').raw;\n    event.stopPropagation();\n    const view = this.host;\n\n    const clipboardData = event.clipboardData;\n    if (!clipboardData) return;\n\n    const tableSelection = this.host.selectionController.selection;\n    if (TableRowSelection.is(tableSelection)) {\n      return;\n    }\n    if (tableSelection) {\n      const json = await this.std.clipboard.readFromClipboard(clipboardData);\n      const dataString = json[BLOCKSUITE_DATABASE_TABLE];\n      if (!dataString) return;\n      const jsonAreaData = JSON.parse(dataString) as JsonAreaData;\n      pasteToCells(view, jsonAreaData, tableSelection);\n    }\n\n    return true;\n  };\n\n  private get readonly() {\n    return this.host.view.readonly$.value;\n  }\n\n  private get std() {\n    return this.host.std;\n  }\n\n  constructor(public host: DataViewTable) {\n    host.addController(this);\n  }\n\n  copy() {\n    const tableSelection = this.host.selectionController.selection;\n    if (!tableSelection) {\n      return;\n    }\n    this._onCopy(tableSelection);\n  }\n\n  cut() {\n    const tableSelection = this.host.selectionController.selection;\n    if (!tableSelection) {\n      return;\n    }\n    this._onCopy(tableSelection, true);\n  }\n\n  hostConnected() {\n    this.host.disposables.add(\n      this.host.handleEvent('copy', _ctx => {\n        const tableSelection = this.host.selectionController.selection;\n        if (!tableSelection) return false;\n\n        this._onCopy(tableSelection);\n        return true;\n      })\n    );\n\n    this.host.disposables.add(\n      this.host.handleEvent('cut', _ctx => {\n        const tableSelection = this.host.selectionController.selection;\n        if (!tableSelection) return false;\n\n        this._onCut(tableSelection);\n        return true;\n      })\n    );\n\n    this.host.disposables.add(\n      this.host.handleEvent('paste', ctx => {\n        if (this.readonly) return false;\n\n        this._onPaste(ctx).catch(console.error);\n        return true;\n      })\n    );\n  }\n}\n\nfunction getSelectedArea(\n  selection: TableViewSelection,\n  table: DataViewTable\n): SelectedArea | undefined {\n  const view = table.view;\n  if (TableRowSelection.is(selection)) {\n    const rows = TableRowSelection.rows(selection)\n      .map(row => {\n        const y =\n          table.selectionController\n            .getRow(row.groupKey, row.id)\n            ?.getBoundingClientRect().y ?? 0;\n        return {\n          y,\n          row,\n        };\n      })\n      .sort((a, b) => a.y - b.y)\n      .map(v => v.row);\n    return rows.map(r => {\n      const row = view.rowGet(r.id);\n      return {\n        row,\n        cells: row.cells$.value,\n      };\n    });\n  }\n  const { rowsSelection, columnsSelection, groupKey } = selection;\n  const data: SelectedArea = [];\n  const rows = groupKey\n    ? view.groupManager.groupDataMap$.value?.[groupKey].rows\n    : view.rows$.value;\n  const columns = view.columns$.value;\n  if (!rows) {\n    return;\n  }\n  for (let i = rowsSelection.start; i <= rowsSelection.end; i++) {\n    const row: SelectedArea[number] = {\n      cells: [],\n    };\n    const rowId = rows[i];\n    for (let j = columnsSelection.start; j <= columnsSelection.end; j++) {\n      const columnId = columns[j];\n      const cell = view.cellGet(rowId, columnId);\n      row.cells.push(cell);\n    }\n    data.push(row);\n  }\n\n  return data;\n}\n\ntype SelectedArea = {\n  row?: Row;\n  cells: Cell[];\n}[];\n\nfunction getTargetRangeFromSelection(\n  selection: TableAreaSelection,\n  data: JsonAreaData\n) {\n  const { rowsSelection, columnsSelection, focus } = selection;\n  return TableAreaSelection.isFocus(selection)\n    ? {\n        row: {\n          start: focus.rowIndex,\n          length: data.length,\n        },\n        column: {\n          start: focus.columnIndex,\n          length: data[0].length,\n        },\n      }\n    : {\n        row: {\n          start: rowsSelection.start,\n          length: rowsSelection.end - rowsSelection.start + 1,\n        },\n        column: {\n          start: columnsSelection.start,\n          length: columnsSelection.end - columnsSelection.start + 1,\n        },\n      };\n}\n\nfunction pasteToCells(\n  table: DataViewTable,\n  rows: JsonAreaData,\n  selection: TableAreaSelection\n) {\n  const srcRowLength = rows.length;\n  const srcColumnLength = rows[0].length;\n  const targetRange = getTargetRangeFromSelection(selection, rows);\n  for (let i = 0; i < targetRange.row.length; i++) {\n    for (let j = 0; j < targetRange.column.length; j++) {\n      const rowIndex = targetRange.row.start + i;\n      const columnIndex = targetRange.column.start + j;\n\n      const srcRowIndex = i % srcRowLength;\n      const srcColumnIndex = j % srcColumnLength;\n      const dataString = rows[srcRowIndex][srcColumnIndex];\n\n      const targetContainer = table.selectionController.getCellContainer(\n        selection.groupKey,\n        rowIndex,\n        columnIndex\n      );\n      const rowId = targetContainer?.dataset.rowId;\n      const columnId = targetContainer?.dataset.columnId;\n\n      if (rowId && columnId) {\n        targetContainer?.column.setValueFromString(rowId, dataString);\n      }\n    }\n  }\n}\n"]}