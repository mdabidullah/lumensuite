{"version":3,"file":"mindmap.js","sourceRoot":"","sources":["../../src/element-model/mindmap.ts"],"names":[],"mappings":"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","sourcesContent":["import type {\n  BaseElementProps,\n  SerializedElement,\n  SurfaceBlockModel,\n} from '@lumensuite/block-std/gfx';\nimport type { SerializedXYWH, XYWH } from '@lumensuite/global/utils';\n\nimport {\n  LayoutType,\n  LocalConnectorElementModel,\n  MindmapStyle,\n  TextResizing,\n} from '@lumensuite/affine-model';\nimport {\n  convert,\n  field,\n  GfxGroupLikeElementModel,\n  observe,\n  watch,\n} from '@lumensuite/block-std/gfx';\nimport {\n  assertType,\n  deserializeXYWH,\n  keys,\n  last,\n  pick,\n} from '@lumensuite/global/utils';\nimport { DocCollection, type Y } from '@lumensuite/store';\nimport { generateKeyBetween } from 'fractional-indexing';\nimport { z } from 'zod';\n\nimport type {\n  MindmapNode,\n  MindmapRoot,\n  NodeDetail,\n} from './utils/mindmap/layout.js';\nimport type {\n  ConnectorStyle,\n  MindmapStyleGetter,\n} from './utils/mindmap/style.js';\n\nimport { layout } from './utils/mindmap/layout.js';\nimport { applyNodeStyle, mindmapStyleGetters } from './utils/mindmap/style.js';\n\nconst baseNodeSchema = z.object({\n  text: z.string(),\n  xywh: z.optional(z.string()),\n});\n\ntype Node = z.infer<typeof baseNodeSchema> & {\n  children?: Node[];\n};\n\nconst nodeSchema: z.ZodType<Node> = baseNodeSchema.extend({\n  children: z.lazy(() => nodeSchema.array()).optional(),\n});\n\ntype NodeType = z.infer<typeof nodeSchema>;\n\nfunction isNodeType(node: Record<string, unknown>): node is NodeType {\n  return typeof node.text === 'string' && Array.isArray(node.children);\n}\n\nexport type SerializedMindmapElement = SerializedElement & {\n  children: Record<string, NodeDetail>;\n};\n\ntype MindmapElementProps = BaseElementProps & {\n  children: Y.Map<NodeDetail>;\n};\n\nexport class MindmapElementModel extends GfxGroupLikeElementModel<MindmapElementProps> {\n  private _nodeMap = new Map<string, MindmapNode>();\n\n  private _queueBuildTree = false;\n\n  private _queued = false;\n\n  private _tree!: MindmapRoot;\n\n  connectors = new Map<string, LocalConnectorElementModel>();\n\n  extraConnectors = new Map<string, LocalConnectorElementModel>();\n\n  get nodeMap() {\n    return this._nodeMap;\n  }\n\n  override get rotate() {\n    return 0;\n  }\n\n  override set rotate(_: number) {}\n\n  get styleGetter(): MindmapStyleGetter {\n    return mindmapStyleGetters[this.style];\n  }\n\n  get tree() {\n    return this._tree;\n  }\n\n  get type() {\n    return 'mindmap';\n  }\n\n  static createFromTree(\n    tree: MindmapNode,\n    style: MindmapStyle,\n    layoutType: LayoutType,\n    surface: SurfaceBlockModel\n  ) {\n    const children = new DocCollection.Y.Map();\n    const traverse = (subtree: MindmapNode, parent?: string) => {\n      const value: NodeDetail = {\n        ...subtree.detail,\n        parent,\n      };\n\n      if (!parent) {\n        delete value.parent;\n      }\n\n      children.set(subtree.id, value);\n\n      subtree.children.forEach(child => traverse(child, subtree.id));\n    };\n\n    traverse(tree);\n\n    const mindmapId = surface.addElement({\n      type: 'mindmap',\n      children,\n      layoutType,\n      style,\n    });\n    const mindmap = surface.getElementById(mindmapId) as MindmapElementModel;\n\n    mindmap.layout();\n\n    return mindmap;\n  }\n\n  static override propsToY(props: Record<string, unknown>) {\n    if (\n      props.children &&\n      !isNodeType(props.children as Record<string, unknown>) &&\n      !(props.children instanceof DocCollection.Y.Map)\n    ) {\n      const children: Y.Map<NodeDetail> = new DocCollection.Y.Map();\n\n      keys(props.children).forEach(key => {\n        const detail = pick<Record<string, unknown>, keyof NodeDetail>(\n          props.children![key],\n          ['index', 'parent', 'preferredDir']\n        );\n        children.set(key as string, detail as NodeDetail);\n      });\n\n      props.children = children;\n    }\n\n    return props as MindmapElementProps;\n  }\n\n  private _cfgBalanceLayoutDir() {\n    if (this.layoutType !== LayoutType.BALANCE) {\n      return;\n    }\n\n    let splitDir: LayoutType | undefined = undefined;\n    const tree = this._tree;\n    const splitPoint = tree.children.findIndex((child, index) => {\n      if (\n        child.detail.preferredDir === LayoutType.LEFT ||\n        (child.detail.preferredDir === LayoutType.RIGHT &&\n          child.children[index + 1]?.detail.preferredDir !== LayoutType.RIGHT)\n      ) {\n        splitDir = child.detail.preferredDir;\n        return true;\n      }\n\n      return false;\n    });\n\n    if (\n      splitPoint === -1 ||\n      (splitDir === LayoutType.LEFT && splitPoint >= tree.children.length / 2)\n    ) {\n      const mid = Math.ceil(tree.children.length / 2);\n\n      tree.right.push(...tree.children.slice(0, mid));\n      tree.left.push(...tree.children.slice(mid));\n    } else {\n      tree.right.push(...tree.children.slice(0, splitPoint + 1));\n      tree.left.push(...tree.children.slice(splitPoint + 1));\n    }\n\n    tree.left.reverse();\n  }\n\n  private _isConnectorOutdated(\n    options: {\n      connector: LocalConnectorElementModel;\n      from: MindmapNode;\n      to: MindmapNode;\n      layout: LayoutType;\n    },\n    updateKey: boolean = true\n  ) {\n    const { connector, from, to, layout } = options;\n    const cacheKey = `${from.element.xywh}-${to.element.xywh}-${layout}-${this.style}`;\n\n    // @ts-ignore\n    if (connector['MINDMAP_CONNECTOR'] === cacheKey) {\n      return { outdated: false, cacheKey };\n    } else if (updateKey) {\n      // @ts-ignore\n      connector['MINDMAP_CONNECTOR'] = cacheKey;\n    }\n\n    return { outdated: true, cacheKey };\n  }\n\n  protected addConnector(\n    from: MindmapNode,\n    to: MindmapNode,\n    layout: LayoutType,\n    connectorStyle: ConnectorStyle,\n    extra: boolean = false\n  ) {\n    const id = `#${from.id}-${to.id}`;\n\n    if (extra) {\n      this.extraConnectors.set(id, new LocalConnectorElementModel());\n    } else if (this.connectors.has(id)) {\n      const connector = this.connectors.get(id)!;\n      const { outdated } = this._isConnectorOutdated({\n        connector,\n        from,\n        to,\n        layout,\n      });\n\n      if (!outdated) {\n        return connector;\n      }\n    } else {\n      const connector = new LocalConnectorElementModel();\n      // update cache key\n      this._isConnectorOutdated({\n        connector,\n        from,\n        to,\n        layout,\n      });\n      this.connectors.set(id, connector);\n    }\n\n    const connector = extra\n      ? this.extraConnectors.get(id)!\n      : this.connectors.get(id)!;\n\n    connector.id = id;\n    connector.source = {\n      id: from.id,\n      position: layout === LayoutType.RIGHT ? [1, 0.5] : [0, 0.5],\n    };\n    connector.target = {\n      id: to.id,\n      position: layout === LayoutType.RIGHT ? [0, 0.5] : [1, 0.5],\n    };\n\n    Object.entries(connectorStyle).forEach(([key, value]) => {\n      // @ts-ignore\n      connector[key as unknown] = value;\n    });\n\n    return connector;\n  }\n\n  addNode(\n    /**\n     * The parent node id of the new node. If it's null, the node will be the root node\n     */\n    parent: string | MindmapNode | null,\n    sibling?: string | number,\n    position: 'before' | 'after' = 'after',\n    props: Record<string, unknown> = {},\n\n    /**\n     * Force the layout direction of the node.\n     * It only works on the first level node with the layout type of BALANCE\n     */\n    direction?: LayoutType.LEFT | LayoutType.RIGHT\n  ) {\n    if (parent && typeof parent !== 'string') {\n      parent = parent.id;\n    }\n\n    assertType<string | null>(parent);\n\n    if (parent && !this._nodeMap.has(parent)) {\n      throw new Error(`Parent node ${parent} not found`);\n    }\n\n    props['text'] = new DocCollection.Y.Text(\n      (props['text'] as string) ?? 'New node'\n    );\n\n    const type = (props.type as string) ?? 'shape';\n    let id: string;\n    this.surface.doc.transact(() => {\n      const parentNode = parent ? this._nodeMap.get(parent)! : null;\n\n      if (parentNode) {\n        const isBalance =\n          this.layoutType === LayoutType.BALANCE &&\n          this._tree.id === parentNode.id;\n\n        let index = last(parentNode.children)\n          ? generateKeyBetween(last(parentNode.children)!.detail.index, null)\n          : 'a0';\n\n        sibling = sibling ?? last(parentNode.children)?.id;\n        const siblingNode =\n          typeof sibling === 'number'\n            ? parentNode.children[sibling]\n            : sibling\n              ? this._nodeMap.get(sibling)\n              : undefined;\n        const path = siblingNode\n          ? this.getPath(siblingNode)\n          : this.getPath(parentNode).concat([0]);\n        const style = this.styleGetter.getNodeStyle(\n          siblingNode ?? parentNode,\n          path\n        );\n\n        id = this.surface.addElement({\n          type,\n          xywh: '[0,0,100,30]',\n          textResizing: TextResizing.AUTO_WIDTH,\n          maxWidth: false,\n          ...props,\n          ...style.node,\n        });\n\n        if (siblingNode) {\n          const siblingIndex = parentNode.children.findIndex(\n            val => val.id === sibling\n          );\n\n          index =\n            position === 'after'\n              ? generateKeyBetween(\n                  siblingNode.detail.index,\n                  parentNode.children[siblingIndex + 1]?.detail.index ?? null\n                )\n              : generateKeyBetween(\n                  parentNode.children[siblingIndex - 1]?.detail.index ?? null,\n                  siblingNode.detail.index\n                );\n        } else if (isBalance && direction !== undefined) {\n          const lastNode =\n            direction === LayoutType.LEFT\n              ? this._tree.left[0]\n              : last(this._tree.right);\n\n          if (lastNode) {\n            index = generateKeyBetween(lastNode.detail.index, null);\n          }\n        }\n\n        const nodeDetail: NodeDetail = {\n          index,\n          parent: parent!,\n        };\n\n        if (direction !== undefined && isBalance) {\n          nodeDetail.preferredDir = direction;\n        }\n\n        this.children.set(id, nodeDetail);\n      } else {\n        const rootStyle = this.styleGetter.root;\n\n        id = this.surface.addElement({\n          type,\n          xywh: '[0,0,113,41]',\n          textResizing: TextResizing.AUTO_WIDTH,\n          maxWidth: 400,\n          ...props,\n          ...rootStyle,\n        });\n\n        this.children.clear();\n        this.children.set(id, {\n          index: 'a0',\n        });\n      }\n    });\n    this.layout();\n\n    return id!;\n  }\n\n  addTree(\n    parent: string | MindmapNode,\n    tree: NodeType | MindmapNode,\n    /**\n     * `sibling` indicates where to insert a subtree among peer elements.\n     * If it's a string, it represents a peer element's ID;\n     * if it's a number, it represents its index.\n     * The subtree will be inserted before the sibling element.\n     */\n    sibling?: string | number,\n\n    /**\n     * Preferred layout direction, only works when parent is root and layout type is BALANCE\n     */\n    layout?: LayoutType\n  ) {\n    parent = typeof parent === 'string' ? parent : parent.id;\n\n    if (!this._nodeMap.has(parent) || !parent) {\n      return null;\n    }\n\n    assertType<string>(parent);\n\n    if (\n      layout === LayoutType.BALANCE ||\n      this._nodeMap.get(parent) !== this._tree\n    ) {\n      layout = undefined;\n    }\n\n    const traverse = (\n      node: NodeType | MindmapNode,\n      parent: string,\n      sibling?: string | number,\n      layout?: LayoutType.LEFT | LayoutType.RIGHT\n    ) => {\n      let nodeId: string;\n      if ('text' in node) {\n        nodeId = this.addNode(\n          parent,\n          sibling,\n          'before',\n          {\n            text: node.text,\n          },\n          layout\n        );\n      } else {\n        this.children.set(node.id, {\n          ...node.detail,\n          parent,\n        });\n        nodeId = node.id;\n      }\n\n      node.children?.forEach(child => {\n        traverse(child, nodeId);\n      });\n\n      return nodeId;\n    };\n\n    if (!('text' in tree)) {\n      // Modify the children ymap directly hence need transaction\n      this.surface.doc.transact(() => {\n        traverse(tree, parent, sibling, layout);\n      });\n\n      this.applyStyle();\n      this.layout();\n\n      return this._nodeMap.get(tree.id);\n    } else {\n      const nodeId = traverse(tree, parent, sibling, layout);\n\n      this.layout();\n\n      return this._nodeMap.get(nodeId);\n    }\n  }\n\n  applyStyle(fitContent: boolean = false) {\n    this.surface.doc.transact(() => {\n      const style = this.styleGetter;\n      if (!style) return;\n      applyNodeStyle(this._tree, style.root, fitContent);\n\n      const walk = (node: MindmapNode, path: number[]) => {\n        node.children.forEach((child, idx) => {\n          const currentPath = [...path, idx];\n          const nodeStyle = style.getNodeStyle(child, currentPath);\n\n          applyNodeStyle(child, nodeStyle.node, fitContent);\n\n          walk(child, currentPath);\n        });\n      };\n\n      walk(this._tree, [0]);\n    });\n  }\n\n  protected buildTree() {\n    const mindmapNodeMap = new Map<string, MindmapNode>();\n    const nodesMap = this.children;\n\n    // The element may be removed\n    if (!nodesMap || nodesMap.size === 0) {\n      this._nodeMap = mindmapNodeMap;\n      // @ts-ignore\n      this._tree = null;\n      return;\n    }\n\n    let rootNode: MindmapRoot | undefined;\n\n    nodesMap.forEach((val, id) => {\n      const node = mindmapNodeMap.has(id)\n        ? mindmapNodeMap.get(id)!\n        : ({\n            id,\n            parent: val.parent,\n            index: val.index,\n            detail: val,\n            element: this.surface.getElementById(id)!,\n            children: [],\n          } as MindmapNode);\n\n      if (!node.detail) {\n        node.detail = val;\n      }\n\n      if (!mindmapNodeMap.has(id)) {\n        mindmapNodeMap.set(id, node);\n      }\n\n      if (!val.parent) {\n        rootNode = node as MindmapRoot;\n        rootNode.left = [];\n        rootNode.right = [];\n      } else if (mindmapNodeMap.has(val.parent)) {\n        const parentNode = mindmapNodeMap.get(val.parent)!;\n        parentNode.children = parentNode.children ?? [];\n        parentNode.children.push(node);\n      } else {\n        mindmapNodeMap.set(val.parent, {\n          id: val.parent,\n          children: [node],\n          element: this.surface.getElementById(val.parent)!,\n        } as MindmapNode);\n      }\n    });\n\n    mindmapNodeMap.forEach(node => {\n      node.children.sort((a, b) =>\n        a.detail.index === b.detail.index\n          ? 0\n          : a.detail.index > b.detail.index\n            ? 1\n            : -1\n      );\n    });\n\n    if (!rootNode) {\n      return;\n    }\n\n    this._nodeMap = mindmapNodeMap;\n    this._tree = rootNode;\n\n    if (this.layoutType === LayoutType.BALANCE) {\n      this._cfgBalanceLayoutDir();\n    } else {\n      this._tree[this.layoutType === LayoutType.RIGHT ? 'right' : 'left'] =\n        this._tree.children;\n    }\n  }\n\n  /**\n   * Detach a mindmap. It is similar to `removeChild` but\n   * it does not delete the node.\n   *\n   * So the node can be used to create a new mind map or merge into other mind map\n   */\n  detach(subtree: string | MindmapNode) {\n    subtree =\n      typeof subtree === 'string' ? this._nodeMap.get(subtree)! : subtree;\n\n    assertType<MindmapNode>(subtree);\n\n    if (!subtree) {\n      return;\n    }\n\n    const traverse = (subtree: MindmapNode) => {\n      this.children.delete(subtree.id);\n\n      // cut the reference inside the ymap\n      subtree.detail = {\n        ...subtree.detail,\n      };\n\n      subtree.children.forEach(child => traverse(child));\n    };\n\n    this.surface.doc.transact(() => {\n      traverse(subtree);\n    });\n\n    this.layout();\n\n    delete subtree.detail.parent;\n\n    return subtree;\n  }\n\n  /**\n   *\n   * @param subtree The subtree of root, this only take effects when the layout type is BALANCED.\n   * @returns\n   */\n  getChildNodes(id: string, subtree?: 'left' | 'right') {\n    const node = this._nodeMap.get(id);\n\n    if (!node) {\n      return [];\n    }\n\n    if (subtree && id === this._tree.id) {\n      return this._tree[subtree];\n    }\n\n    return node.children;\n  }\n\n  getConnector(from: MindmapNode, to: MindmapNode) {\n    if (!this._nodeMap.has(from.id) || !this._nodeMap.has(to.id)) {\n      return null;\n    }\n\n    return this.addConnector(\n      from,\n      to,\n      this.getLayoutDir(to)!,\n      this.styleGetter.getNodeStyle(to, this.getPath(to)).connector\n    );\n  }\n\n  getLayoutDir(node: string | MindmapNode): LayoutType | null {\n    node = typeof node === 'string' ? this._nodeMap.get(node)! : node;\n\n    assertType<MindmapNode>(node);\n\n    let current: MindmapNode | null = node;\n    const root = this._tree;\n\n    while (current) {\n      if (current.overriddenDir !== undefined) {\n        return current.overriddenDir;\n      }\n\n      const parent: MindmapNode | null = current.detail.parent\n        ? (this._nodeMap.get(current.detail.parent) ?? null)\n        : null;\n\n      if (parent === root) {\n        return root.left.includes(current)\n          ? LayoutType.LEFT\n          : root.right.includes(current)\n            ? LayoutType.RIGHT\n            : this.layoutType;\n      }\n\n      current = parent;\n    }\n\n    return this.layoutType;\n  }\n\n  getNode(id: string) {\n    return this._nodeMap.get(id) ?? null;\n  }\n\n  getParentNode(id: string) {\n    const node = this.children.get(id);\n\n    return node?.parent ? (this._nodeMap.get(node.parent) ?? null) : null;\n  }\n\n  /**\n   * Path is an array of indexes that represent the path from the root node to the target node.\n   * The first element of the array is always 0, which represents the root node.\n   * @param element\n   * @returns\n   *\n   * @example\n   * ```ts\n   * const path = mindmap.getPath('nodeId');\n   * // [0, 1, 2]\n   * ```\n   */\n  getPath(element: string | MindmapNode) {\n    let node = this._nodeMap.get(\n      typeof element === 'string' ? element : element.id\n    );\n\n    if (!node) {\n      throw new Error('Node not found');\n    }\n\n    const path: number[] = [];\n\n    while (node && node !== this._tree) {\n      const parent = this._nodeMap.get(node!.detail.parent!);\n\n      path.unshift(parent!.children.indexOf(node!));\n      node = parent;\n    }\n\n    path.unshift(0);\n\n    return path;\n  }\n\n  getSiblingNode(\n    id: string,\n    direction: 'prev' | 'next' = 'next',\n    /**\n     * The subtree of which that the sibling node belongs to,\n     * this is used when the layout type is BALANCED.\n     */\n    subtree?: 'left' | 'right'\n  ) {\n    const node = this._nodeMap.get(id);\n\n    if (!node) {\n      return null;\n    }\n\n    const parent = this._nodeMap.get(node.detail.parent!);\n\n    if (!parent) {\n      return null;\n    }\n\n    const childrenTree =\n      subtree && parent.id === this._tree.id\n        ? this._tree[subtree]\n        : parent.children;\n    const idx = childrenTree.indexOf(node);\n    if (idx === -1) {\n      return null;\n    }\n    const siblingIndex = direction === 'next' ? idx + 1 : idx - 1;\n    const sibling = childrenTree[siblingIndex] ?? null;\n\n    return sibling;\n  }\n\n  layout(\n    tree: MindmapNode | MindmapRoot = this.tree,\n    applyStyle = true,\n    layoutType?: LayoutType\n  ) {\n    if (!tree || !tree.element) return;\n\n    if (applyStyle) {\n      this.applyStyle(true);\n    }\n\n    this.surface.doc.transact(() => {\n      const path = this.getPath(tree.id);\n      layout(tree, this, layoutType ?? this.getLayoutDir(tree.id), path);\n    });\n  }\n\n  moveTo(targetXYWH: SerializedXYWH | XYWH) {\n    const { x, y } = this;\n    const targetPos =\n      typeof targetXYWH === 'string' ? deserializeXYWH(targetXYWH) : targetXYWH;\n    const offsetX = targetPos[0] - x;\n    const offsetY = targetPos[1] - y + targetPos[3];\n\n    this.surface.doc.transact(() => {\n      this.childElements.forEach(el => {\n        const deserializedXYWH = deserializeXYWH(el.xywh);\n\n        el.xywh =\n          `[${deserializedXYWH[0] + offsetX},${deserializedXYWH[1] + offsetY},${deserializedXYWH[2]},${deserializedXYWH[3]}]` as SerializedXYWH;\n      });\n    });\n  }\n\n  moveTree(\n    tree: MindmapNode,\n    parent: string | MindmapNode,\n    siblingIndex: number,\n    layout?: LayoutType\n  ) {\n    parent = this._nodeMap.get(\n      typeof parent === 'string' ? parent : parent.id\n    )!;\n\n    if (!parent || !this._nodeMap.has(tree.id)) {\n      return;\n    }\n\n    assertType<MindmapNode>(parent);\n\n    if (layout === LayoutType.BALANCE || parent !== this._tree) {\n      layout = undefined;\n    }\n\n    const sibling = parent.children[siblingIndex];\n    const preSibling = parent.children[siblingIndex - 1];\n    const index =\n      sibling || preSibling\n        ? generateKeyBetween(\n            preSibling?.detail.index ?? null,\n            sibling?.detail.index ?? null\n          )\n        : (tree.detail.index ?? undefined);\n\n    this.surface.doc.transact(() => {\n      const val: NodeDetail =\n        layout !== undefined\n          ? {\n              ...tree.detail,\n              index,\n              parent: parent.id,\n              preferredDir: layout,\n            }\n          : {\n              ...tree.detail,\n              index,\n              parent: parent.id,\n            };\n\n      this.children.set(tree.id, val);\n    });\n\n    this.layout();\n\n    return this._nodeMap.get(tree.id);\n  }\n\n  override onCreated(): void {\n    this.requestBuildTree();\n  }\n\n  removeChild(id: string) {\n    if (!this._nodeMap.has(id)) {\n      return;\n    }\n\n    const surface = this.surface;\n    const removedDescendants: string[] = [];\n    const remove = (element: MindmapNode) => {\n      element.children?.forEach(child => {\n        remove(child);\n      });\n\n      this.children?.delete(element.id);\n      removedDescendants.push(element.id);\n    };\n\n    surface.doc.transact(() => {\n      remove(this._nodeMap.get(id)!);\n    });\n\n    queueMicrotask(() => {\n      removedDescendants.forEach(id => surface.removeElement(id));\n    });\n\n    // This transaction may not end\n    // force to build the elements\n    this.buildTree();\n    this.requestLayout();\n  }\n\n  protected requestBuildTree() {\n    if (this._queueBuildTree) {\n      return;\n    }\n\n    this._queueBuildTree = true;\n    queueMicrotask(() => {\n      this.buildTree();\n      this._queueBuildTree = false;\n    });\n  }\n\n  requestLayout() {\n    if (!this._queued) {\n      this._queued = true;\n\n      queueMicrotask(() => {\n        this.layout();\n        this._queued = false;\n      });\n    }\n  }\n\n  override serialize() {\n    const result = super.serialize();\n    return result as SerializedMindmapElement;\n  }\n\n  stashTree(node: MindmapNode | string) {\n    const mindNode = typeof node === 'string' ? this.getNode(node) : node;\n\n    if (!mindNode) {\n      return;\n    }\n\n    const stashed = new Set<\n      LumenSuite.SurfaceElementModel | LocalConnectorElementModel\n    >();\n    const traverse = (node: MindmapNode, parent: MindmapNode | null) => {\n      node.element.stash('xywh');\n      node.element.opacity = 0.3;\n      stashed.add(node.element);\n\n      if (parent) {\n        const connectorId = `#${parent.element.id}-${node.element.id}`;\n        const connector = this.connectors.get(connectorId);\n\n        if (connector) {\n          connector.opacity = 0.3;\n          stashed.add(connector);\n        }\n      }\n\n      if (node.children.length) {\n        node.children.forEach(child => traverse(child, node));\n      }\n    };\n\n    const parent = this.getParentNode(mindNode.element.id);\n    const parentNode = parent ? this.getNode(parent.id) : null;\n\n    traverse(mindNode, parentNode);\n\n    return () => {\n      stashed.forEach(el => {\n        if ('pop' in el) {\n          el.pop('xywh');\n        }\n\n        el.opacity = 1;\n      });\n    };\n  }\n\n  traverse(callback: (node: MindmapNode, parent: MindmapNode | null) => void) {\n    const traverse = (node: MindmapNode, parent: MindmapNode | null) => {\n      callback(node, parent);\n\n      node?.children.forEach(child => {\n        traverse(child, node);\n      });\n    };\n\n    if (this._tree) {\n      traverse(this._tree, null);\n    }\n  }\n\n  @convert((initialValue, instance) => {\n    if (!(initialValue instanceof DocCollection.Y.Map)) {\n      nodeSchema.parse(initialValue);\n\n      assertType<NodeType>(initialValue);\n\n      const map: Y.Map<NodeDetail> = new DocCollection.Y.Map();\n      const surface = instance.surface;\n      const doc = surface.doc;\n      const recursive = (\n        node: NodeType,\n        parent: string | null = null,\n        index: string = 'a0'\n      ) => {\n        const id = surface.addElement({\n          type: 'shape',\n          text: node.text,\n          xywh: node.xywh ? node.xywh : `[0, 0, 100, 30]`,\n        });\n\n        map.set(id, {\n          index,\n          parent: parent ?? undefined,\n        });\n\n        let curIdx = 'a0';\n        node.children?.forEach(childNode => {\n          recursive(childNode, id, curIdx);\n          curIdx = generateKeyBetween(curIdx, null);\n        });\n      };\n\n      doc.transact(() => {\n        recursive(initialValue);\n      });\n\n      instance.requestBuildTree();\n      instance.requestLayout();\n      return map;\n    } else {\n      instance.requestBuildTree();\n      instance.requestLayout();\n      return initialValue;\n    }\n  })\n  @observe(\n    (_, instance: MindmapElementModel, transaction: Y.Transaction | null) => {\n      instance.setChildIds(\n        Array.from(instance.children.keys()),\n        transaction?.local ?? true\n      );\n\n      instance.buildTree();\n      instance.connectors.clear();\n    }\n  )\n  @field()\n  accessor children: Y.Map<NodeDetail> = new DocCollection.Y.Map();\n\n  @watch((_, instance: MindmapElementModel, local) => {\n    if (!local) {\n      return;\n    }\n\n    instance.surface.doc.transact(() => {\n      instance['_tree']?.children.forEach(child => {\n        if (!instance.children.has(child.id)) {\n          return;\n        }\n\n        instance.children.set(child.id, {\n          index: child.detail.index,\n          parent: child.detail.parent,\n        });\n      });\n    });\n\n    instance.buildTree();\n  })\n  @field()\n  accessor layoutType: LayoutType = LayoutType.RIGHT;\n\n  @watch((_, instance: MindmapElementModel, local) => {\n    if (local) {\n      instance.layout();\n    }\n  })\n  @field()\n  accessor style: MindmapStyle = MindmapStyle.ONE;\n}\n\ndeclare global {\n  namespace LumenSuite {\n    interface SurfaceGroupLikeModelMap {\n      mindmap: MindmapElementModel;\n    }\n  }\n}\n"]}