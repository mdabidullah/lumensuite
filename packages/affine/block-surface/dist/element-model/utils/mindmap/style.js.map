{"version":3,"file":"style.js","sourceRoot":"","sources":["../../../../src/element-model/utils/mindmap/style.ts"],"names":[],"mappings":"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","sourcesContent":["import type { ShapeElementModel } from '@blocksuite/affine-model';\n\nimport {\n  ConnectorMode,\n  FontFamily,\n  FontWeight,\n  LineColor,\n  MindmapStyle,\n  ShapeFillColor,\n  StrokeStyle,\n} from '@blocksuite/affine-model';\nimport { last } from '@blocksuite/global/utils';\n\nimport type { MindmapNode } from './layout.js';\n\nimport { fitContent } from '../../../renderer/elements/shape/utils.js';\n\nexport type NodeStyle = {\n  radius: number;\n\n  strokeWidth: number;\n  strokeColor: string;\n\n  fontSize: number;\n  fontFamily: string;\n  fontWeight: FontWeight;\n  color: string;\n\n  filled: boolean;\n  fillColor: string;\n\n  padding: [number, number];\n\n  shadow?: {\n    blur: number;\n    offsetX: number;\n    offsetY: number;\n    color: string;\n  };\n};\n\nexport type ConnectorStyle = {\n  strokeStyle: StrokeStyle;\n  stroke: string;\n  strokeWidth: number;\n\n  mode: ConnectorMode;\n};\n\nexport abstract class MindmapStyleGetter {\n  abstract readonly root: NodeStyle;\n\n  abstract getNodeStyle(\n    node: MindmapNode,\n    path: number[]\n  ): {\n    connector: ConnectorStyle;\n    node: NodeStyle;\n  };\n}\n\nexport class StyleOne extends MindmapStyleGetter {\n  private _colorOrders = [\n    LineColor.Purple,\n    LineColor.Magenta,\n    LineColor.Orange,\n    LineColor.Yellow,\n    LineColor.Green,\n    '#7ae2d5',\n  ];\n\n  readonly root = {\n    radius: 8,\n\n    strokeWidth: 4,\n    strokeColor: '#84CFFF',\n\n    fontFamily: FontFamily.Poppins,\n    fontSize: 20,\n    fontWeight: FontWeight.SemiBold,\n    color: '--affine-black',\n\n    filled: true,\n    fillColor: '--affine-white',\n\n    padding: [11, 22] as [number, number],\n\n    shadow: {\n      offsetX: 0,\n      offsetY: 6,\n      blur: 12,\n      color: 'rgba(0, 0, 0, 0.14)',\n    },\n  };\n\n  private _getColor(number: number) {\n    return this._colorOrders[number % this._colorOrders.length];\n  }\n\n  getNodeStyle(\n    _: MindmapNode,\n    path: number[]\n  ): { connector: ConnectorStyle; node: NodeStyle } {\n    const color = this._getColor(path[1] ?? 0);\n\n    return {\n      connector: {\n        strokeStyle: StrokeStyle.Solid,\n        stroke: color,\n        strokeWidth: 3,\n\n        mode: ConnectorMode.Curve,\n      },\n      node: {\n        radius: 8,\n\n        strokeWidth: 3,\n        strokeColor: color,\n\n        fontFamily: FontFamily.Poppins,\n        fontSize: 16,\n        fontWeight: FontWeight.Medium,\n        color: '--affine-black',\n\n        filled: true,\n        fillColor: '--affine-white',\n\n        padding: [6, 22] as [number, number],\n\n        shadow: {\n          offsetX: 0,\n          offsetY: 6,\n          blur: 12,\n          color: 'rgba(0, 0, 0, 0.14)',\n        },\n      },\n    };\n  }\n}\nexport const styleOne = new StyleOne();\n\nexport class StyleTwo extends MindmapStyleGetter {\n  private _colorOrders = [\n    ShapeFillColor.Blue,\n    '#7ae2d5',\n    ShapeFillColor.Yellow,\n  ];\n\n  readonly root = {\n    radius: 3,\n\n    strokeWidth: 3,\n    strokeColor: '--affine-black',\n\n    fontFamily: FontFamily.Poppins,\n    fontSize: 18,\n    fontWeight: FontWeight.SemiBold,\n    color: ShapeFillColor.Black,\n\n    filled: true,\n    fillColor: ShapeFillColor.Orange,\n\n    padding: [11, 22] as [number, number],\n\n    shadow: {\n      blur: 0,\n      offsetX: 3,\n      offsetY: 3,\n      color: '--affine-black',\n    },\n  };\n\n  private _getColor(number: number) {\n    return number >= this._colorOrders.length\n      ? last(this._colorOrders)!\n      : this._colorOrders[number];\n  }\n\n  getNodeStyle(\n    _: MindmapNode,\n    path: number[]\n  ): { connector: ConnectorStyle; node: NodeStyle } {\n    const color = this._getColor(path.length - 2);\n\n    return {\n      connector: {\n        strokeStyle: StrokeStyle.Solid,\n        stroke: '--affine-black',\n        strokeWidth: 3,\n\n        mode: ConnectorMode.Orthogonal,\n      },\n      node: {\n        radius: 3,\n\n        strokeWidth: 3,\n        strokeColor: '--affine-black',\n\n        fontFamily: FontFamily.Poppins,\n        fontSize: 16,\n        fontWeight: FontWeight.SemiBold,\n        color: ShapeFillColor.Black,\n\n        filled: true,\n        fillColor: color,\n\n        padding: [6, 22] as [number, number],\n\n        shadow: {\n          blur: 0,\n          offsetX: 3,\n          offsetY: 3,\n          color: '--affine-black',\n        },\n      },\n    };\n  }\n}\nexport const styleTwo = new StyleTwo();\n\nexport class StyleThree extends MindmapStyleGetter {\n  private _strokeColor = [LineColor.Yellow, LineColor.Green, LineColor.Teal];\n\n  readonly root = {\n    radius: 10,\n\n    strokeWidth: 0,\n    strokeColor: 'transparent',\n\n    fontFamily: FontFamily.Poppins,\n    fontSize: 16,\n    fontWeight: FontWeight.Medium,\n    color: ShapeFillColor.Black,\n\n    filled: true,\n    fillColor: ShapeFillColor.Yellow,\n\n    padding: [10, 22] as [number, number],\n\n    shadow: {\n      blur: 12,\n      offsetX: 0,\n      offsetY: 0,\n      color: 'rgba(66, 65, 73, 0.18)',\n    },\n  };\n\n  private _getColor(number: number) {\n    return this._strokeColor[number % this._strokeColor.length];\n  }\n\n  override getNodeStyle(\n    _: MindmapNode,\n    path: number[]\n  ): { connector: ConnectorStyle; node: NodeStyle } {\n    const strokeColor = this._getColor(path.length - 2);\n\n    return {\n      node: {\n        radius: 10,\n\n        strokeWidth: 0,\n        strokeColor: 'transparent',\n\n        fontFamily: FontFamily.Poppins,\n        fontSize: 16,\n        fontWeight: FontWeight.Medium,\n        color: ShapeFillColor.Black,\n\n        filled: true,\n        fillColor: ShapeFillColor.White,\n\n        padding: [6, 22] as [number, number],\n\n        shadow: {\n          blur: 12,\n          offsetX: 0,\n          offsetY: 0,\n          color: 'rgba(66, 65, 73, 0.18)',\n        },\n      },\n      connector: {\n        strokeStyle: StrokeStyle.Solid,\n        stroke: strokeColor,\n        strokeWidth: 2,\n\n        mode: ConnectorMode.Curve,\n      },\n    };\n  }\n}\nexport const styleThree = new StyleThree();\n\nexport class StyleFour extends MindmapStyleGetter {\n  private _colors = [\n    ShapeFillColor.Purple,\n    ShapeFillColor.Magenta,\n    ShapeFillColor.Orange,\n    ShapeFillColor.Yellow,\n    ShapeFillColor.Green,\n    ShapeFillColor.Blue,\n  ];\n\n  readonly root = {\n    radius: 0,\n\n    strokeWidth: 0,\n    strokeColor: 'transparent',\n\n    fontFamily: FontFamily.Kalam,\n    fontSize: 22,\n    fontWeight: FontWeight.Bold,\n    color: '--affine-black',\n\n    filled: true,\n    fillColor: 'transparent',\n\n    padding: [0, 10] as [number, number],\n  };\n\n  private _getColor(order: number) {\n    return this._colors[order % this._colors.length];\n  }\n\n  getNodeStyle(\n    _: MindmapNode,\n    path: number[]\n  ): { connector: ConnectorStyle; node: NodeStyle } {\n    const stroke = this._getColor(path[1] ?? 0);\n\n    return {\n      connector: {\n        strokeStyle: StrokeStyle.Solid,\n        stroke,\n        strokeWidth: 3,\n\n        mode: ConnectorMode.Curve,\n      },\n      node: {\n        ...this.root,\n\n        fontSize: 18,\n        padding: [1.5, 10] as [number, number],\n      },\n    };\n  }\n}\nexport const styleFour = new StyleFour();\n\nexport const mindmapStyleGetters: {\n  [key in MindmapStyle]: MindmapStyleGetter;\n} = {\n  [MindmapStyle.ONE]: styleOne,\n  [MindmapStyle.TWO]: styleTwo,\n  [MindmapStyle.THREE]: styleThree,\n  [MindmapStyle.FOUR]: styleFour,\n};\n\nexport const applyNodeStyle = (\n  node: MindmapNode,\n  nodeStyle: NodeStyle,\n  shouldFitContent: boolean = false\n) => {\n  Object.entries(nodeStyle).forEach(([key, value]) => {\n    // @ts-ignore\n    if (node.element[key] !== value) {\n      // @ts-ignore\n      node.element[key] = value;\n    }\n  });\n\n  shouldFitContent && fitContent(node.element as ShapeElementModel);\n};\n"]}