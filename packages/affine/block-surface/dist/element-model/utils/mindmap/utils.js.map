{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../../../src/element-model/utils/mindmap/utils.ts"],"names":[],"mappings":"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","sourcesContent":["import type { GfxModel } from '@lumensuite/block-std/gfx';\n\nimport { LayoutType, type ShapeElementModel } from '@lumensuite/affine-model';\nimport { assertType } from '@lumensuite/global/utils';\n\nimport type { MindmapElementModel } from '../../mindmap.js';\nimport type { MindmapNode } from './layout.js';\n\nimport { ConnectorPathGenerator } from '../../../managers/connector-manager.js';\n\nexport function getHoveredArea(\n  target: ShapeElementModel,\n  position: [number, number],\n  layoutDir: LayoutType\n): 'top-left' | 'top-right' | 'bottom-left' | 'bottom-right' {\n  const { x, y, w, h } = target;\n  const center =\n    layoutDir === LayoutType.BALANCE\n      ? [x + w / 2, y + h / 2]\n      : layoutDir === LayoutType.LEFT\n        ? [x + (w / 3) * 1, y + h / 2]\n        : [x + (w / 3) * 2, y + h / 2];\n\n  return `${position[1] - center[1] > 0 ? 'bottom' : 'top'}-${position[0] - center[0] > 0 ? 'right' : 'left'}`;\n}\n\n/**\n * Show merge indicator when tree is hovered on a tree\n * @returns\n */\nexport function showMergeIndicator(\n  targetMindmap: MindmapElementModel,\n  /**\n   * The hovered node\n   */\n  target: string | MindmapNode,\n\n  /**\n   * The node that will be merged\n   */\n  source: MindmapNode,\n  position: [number, number]\n) {\n  target = targetMindmap.getNode(\n    typeof target === 'string' ? target : target.id\n  )!;\n\n  if (!target) {\n    return;\n  }\n\n  assertType<MindmapNode>(target);\n\n  // the target cannot be the child of source\n  const mergeCheck = (sourceNode: MindmapNode): boolean => {\n    if (!target || !sourceNode) return false;\n    if (target === sourceNode) return false;\n\n    if (sourceNode.children.length) {\n      return sourceNode.children.every(node => mergeCheck(node));\n    }\n\n    return true;\n  };\n  const getMergeInfo = () => {\n    const layoutType = targetMindmap.getLayoutDir(target)!;\n    const hoveredArea = getHoveredArea(\n      target.element as ShapeElementModel,\n      position,\n      layoutType\n    );\n    const isRoot = target.id === targetMindmap.tree.id;\n    const isSibling =\n      !isRoot &&\n      ((layoutType === LayoutType.RIGHT && hoveredArea.includes('left')) ||\n        (layoutType === LayoutType.LEFT && hoveredArea.includes('right')));\n\n    const getInfo = () => {\n      if (!isSibling) {\n        return {\n          target,\n          index: hoveredArea.includes('top') ? 0 : target.children.length,\n          layoutType:\n            layoutType === LayoutType.BALANCE\n              ? hoveredArea.includes('right')\n                ? LayoutType.RIGHT\n                : LayoutType.LEFT\n              : layoutType,\n        };\n      }\n\n      const parentNode = targetMindmap.getParentNode(target.id)!;\n\n      return {\n        target: parentNode,\n        index:\n          parentNode.children.indexOf(target) +\n          (hoveredArea.includes('bottom') ? 1 : 0),\n        layoutType,\n      };\n    };\n\n    return getInfo();\n  };\n\n  if (!mergeCheck(source)) {\n    return;\n  }\n\n  const mergeInfo = getMergeInfo();\n  const path = targetMindmap.getPath(mergeInfo.target);\n  path.push(mergeInfo.index);\n  const style = targetMindmap.styleGetter.getNodeStyle(source, path);\n  const connector = targetMindmap['addConnector'](\n    mergeInfo.target,\n    source,\n    mergeInfo.layoutType,\n    style.connector,\n    true\n  );\n  const elementGetter = (id: string) =>\n    targetMindmap.surface.getElementById(id) ??\n    (targetMindmap.surface.doc.getBlockById(id) as GfxModel);\n  ConnectorPathGenerator.updatePath(connector, null, elementGetter);\n\n  source.overriddenDir = mergeInfo.layoutType;\n\n  return {\n    clear: () => {\n      targetMindmap.extraConnectors.delete(connector.id);\n      delete source.overriddenDir;\n    },\n    mergeInfo,\n  };\n}\n\n/**\n * Hide the connector that the target end point is given node\n */\nexport function hideTargetConnector(\n  mindmap: MindmapElementModel,\n  /**\n   * The mind map node which's connector will be hide\n   */\n  target: MindmapNode\n) {\n  const parent = mindmap.getParentNode(target.id);\n\n  if (!parent) {\n    return;\n  }\n\n  const connectorId = `#${parent.id}-${target.id}`;\n  const connector = mindmap.connectors.get(connectorId);\n\n  if (!connector) {\n    return;\n  }\n\n  connector.opacity = 0;\n\n  return () => {\n    connector.opacity = 1;\n  };\n}\n\n/**\n * Move a subtree from one mind map to another\n * @param subtree\n * @param from\n * @param to\n */\nexport function moveMindMapSubtree(\n  from: MindmapElementModel,\n  subtree: MindmapNode,\n  to: MindmapElementModel,\n  parent: MindmapNode | string,\n  index: number,\n  layout?: LayoutType\n) {\n  if (from === to) {\n    return from.moveTree(subtree, parent, index, layout);\n  }\n\n  if (!from.detach(subtree)) {\n    return;\n  }\n\n  return to.addTree(parent, subtree, index, layout);\n}\n"]}