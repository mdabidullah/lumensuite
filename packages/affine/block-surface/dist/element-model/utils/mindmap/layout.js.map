{"version":3,"file":"layout.js","sourceRoot":"","sources":["../../../../src/element-model/utils/mindmap/layout.ts"],"names":[],"mappings":"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","sourcesContent":["import type { SerializedXYWH } from '@blocksuite/global/utils';\n\nimport { LayoutType } from '@blocksuite/affine-model';\nimport { Bound } from '@blocksuite/global/utils';\n\nimport type { MindmapElementModel } from '../../mindmap.js';\n\nexport const NODE_VERTICAL_SPACING = 45;\nexport const NODE_HORIZONTAL_SPACING = 110;\nexport const NODE_FIRST_LEVEL_HORIZONTAL_SPACING = 200;\n\nexport type NodeDetail = {\n  /**\n   * The index of the node, it decides the layout order of the node\n   */\n  index: string;\n  parent?: string;\n\n  /**\n   * The preferred layout direction of the node, it only works when the layout type is BALANCE\n   * and the node is on the first level\n   */\n  preferredDir?: LayoutType;\n};\n\nexport type MindmapNode = {\n  id: string;\n  detail: NodeDetail;\n\n  element: BlockSuite.SurfaceElementModel;\n  children: MindmapNode[];\n\n  /**\n   * This property override the preferredDir or default layout direction.\n   * It is used during dragging that would temporary change the layout direction\n   */\n  overriddenDir?: LayoutType;\n};\n\nexport type MindmapRoot = MindmapNode & {\n  left: MindmapNode[];\n  right: MindmapNode[];\n};\n\ntype TreeSize = {\n  /**\n   * The root node of the tree\n   */\n  root: MindmapNode;\n\n  /**\n   * The size of the tree, including its descendants\n   */\n  bound: Bound;\n\n  /**\n   * The size of the children of the root\n   */\n  children: TreeSize[];\n};\n\nconst calculateNodeSize = (\n  root: MindmapNode,\n  firstLevel = false,\n  rootChildren?: MindmapNode[]\n) => {\n  const bound = root.element.elementBound;\n  const children: TreeSize[] = [];\n\n  rootChildren = rootChildren ?? root.children;\n\n  if (rootChildren) {\n    const childrenBound = rootChildren.reduce(\n      (pre, node) => {\n        const childSize = calculateNodeSize(node);\n\n        children.push(childSize);\n\n        pre.w = Math.max(pre.w, childSize.bound.w);\n        pre.h +=\n          pre.h > 0\n            ? NODE_VERTICAL_SPACING + childSize.bound.h\n            : childSize.bound.h;\n\n        return pre;\n      },\n      new Bound(0, 0, 0, 0)\n    );\n\n    bound.w +=\n      childrenBound.w +\n      (firstLevel\n        ? NODE_FIRST_LEVEL_HORIZONTAL_SPACING\n        : NODE_HORIZONTAL_SPACING);\n    bound.h = Math.max(bound.h, childrenBound.h);\n  }\n\n  return {\n    root,\n    bound,\n    children,\n  };\n};\n\nconst layoutTree = (\n  tree: TreeSize,\n  layoutType: LayoutType.LEFT | LayoutType.RIGHT,\n  mindmap: MindmapElementModel,\n  path: number[] = [0],\n  children?: TreeSize[]\n) => {\n  const firstLevel = path.length === 1;\n  const treeHeight = tree.bound.h;\n  const currentX =\n    layoutType === LayoutType.RIGHT\n      ? tree.root.element.x +\n        tree.root.element.w +\n        (firstLevel\n          ? NODE_FIRST_LEVEL_HORIZONTAL_SPACING\n          : NODE_HORIZONTAL_SPACING)\n      : tree.root.element.x -\n        (firstLevel\n          ? NODE_FIRST_LEVEL_HORIZONTAL_SPACING\n          : NODE_HORIZONTAL_SPACING);\n  let currentY = tree.root.element.y + (tree.root.element.h - treeHeight) / 2;\n\n  if (tree.root.element.h >= treeHeight && tree.children.length) {\n    const onlyChild = tree.children[0];\n\n    currentY += (tree.root.element.h - onlyChild.root.element.h) / 2;\n  }\n\n  tree.children.forEach((subtree, idx) => {\n    const subtreeRootEl = subtree.root.element;\n    const subtreeHeight = subtree.bound.h;\n    const xywh = `[${\n      layoutType === LayoutType.RIGHT ? currentX : currentX - subtreeRootEl.w\n    },${currentY + (subtreeHeight - subtreeRootEl.h) / 2},${subtreeRootEl.w},${subtreeRootEl.h}]` as SerializedXYWH;\n\n    idx = children ? children.indexOf(subtree) : idx;\n\n    const currentNodePath = [...path, idx];\n\n    subtreeRootEl.xywh = xywh;\n\n    layoutTree(subtree, layoutType, mindmap, currentNodePath);\n\n    currentY += subtreeHeight + NODE_VERTICAL_SPACING;\n  });\n};\n\nconst layoutRight = (\n  root: MindmapNode,\n  mindmap: MindmapElementModel,\n  path = [0]\n) => {\n  const rootTree = calculateNodeSize(root, true);\n\n  layoutTree(rootTree, LayoutType.RIGHT, mindmap, path);\n};\n\nconst layoutLeft = (\n  root: MindmapNode,\n  mindmap: MindmapElementModel,\n  path = [0]\n) => {\n  const rootTree = calculateNodeSize(root, true);\n\n  layoutTree(rootTree, LayoutType.LEFT, mindmap, path);\n};\n\nconst layoutBalance = (\n  root: MindmapNode,\n  mindmap: MindmapElementModel,\n  path = [0]\n) => {\n  const rootTree = calculateNodeSize(root, true);\n  const leftTree: MindmapNode[] = (root as MindmapRoot).left;\n  const rightTree: MindmapNode[] = (root as MindmapRoot).right;\n\n  {\n    const leftTreeSize = calculateNodeSize(root, true, leftTree);\n    const mockRoot = {\n      root: rootTree.root,\n      bound: leftTreeSize.bound,\n      children: leftTreeSize.children,\n    };\n\n    layoutTree(mockRoot, LayoutType.LEFT, mindmap, path, mockRoot.children);\n  }\n\n  {\n    const rightTreeSize = calculateNodeSize(root, true, rightTree);\n    const mockRoot = {\n      root: rootTree.root,\n      bound: rightTreeSize.bound,\n      children: rightTreeSize.children,\n    };\n\n    layoutTree(mockRoot, LayoutType.RIGHT, mindmap, [0], mockRoot.children);\n  }\n};\n\nexport const layout = (\n  root: MindmapNode,\n  mindmap: MindmapElementModel,\n  layoutDir: LayoutType | null,\n  path: number[]\n) => {\n  layoutDir = layoutDir ?? mindmap.layoutType;\n\n  switch (layoutDir) {\n    case LayoutType.RIGHT:\n      return layoutRight(root, mindmap, path);\n    case LayoutType.LEFT:\n      return layoutLeft(root, mindmap, path);\n    case LayoutType.BALANCE:\n      return layoutBalance(root, mindmap, path);\n  }\n};\n"]}