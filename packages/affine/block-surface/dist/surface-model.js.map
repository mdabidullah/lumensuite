{"version":3,"file":"surface-model.js","sourceRoot":"","sources":["../src/surface-model.ts"],"names":[],"mappings":"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","sourcesContent":["import type { ConnectorElementModel } from '@blocksuite/affine-model';\nimport type { SurfaceBlockProps } from '@blocksuite/block-std/gfx';\nimport type { MigrationRunner, Y } from '@blocksuite/store';\n\nimport { SurfaceBlockModel as BaseSurfaceModel } from '@blocksuite/block-std/gfx';\nimport { DisposableGroup } from '@blocksuite/global/utils';\nimport {\n  Boxed,\n  defineBlockSchema,\n  DocCollection,\n  Text,\n} from '@blocksuite/store';\n\nimport { elementsCtorMap } from './element-model/index.js';\nimport { connectorMiddleware } from './middlewares/connector.js';\nimport { groupRelationMiddleware } from './middlewares/group.js';\nimport { SurfaceBlockTransformer } from './surface-transformer.js';\n\nconst migration = {\n  toV4: data => {\n    const { elements } = data;\n    if (elements instanceof Boxed) {\n      const value = elements.getValue();\n      if (!value) {\n        return;\n      }\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      for (const [key, element] of (value as Record<string, any>).entries()) {\n        const type = element.get('type') as string;\n        if (type === 'shape' || type === 'text') {\n          const isBold = element.get('isBold');\n          const isItalic = element.get('isItalic');\n          element.delete('isBold');\n          element.delete('isItalic');\n          if (isBold) {\n            element.set('bold', true);\n          }\n          if (isItalic) {\n            element.set('italic', true);\n          }\n        }\n        if (type === 'connector') {\n          const source = element.get('source');\n          const target = element.get('target');\n          const sourceId = source['id'];\n          const targetId = target['id'];\n          if (!source['position'] && !sourceId) {\n            value.delete(key);\n            return;\n          }\n          if (!target['position'] && !targetId) {\n            value.delete(key);\n            return;\n          }\n        }\n      }\n    } else {\n      for (const key of Object.keys(elements)) {\n        const element = elements[key] as Record<string, unknown>;\n        const type = element['type'] as string;\n        if (type === 'shape' || type === 'text') {\n          const isBold = element['isBold'];\n          const isItalic = element['isItalic'];\n          delete element['isBold'];\n          delete element['isItalic'];\n          if (isBold) {\n            element['bold'] = true;\n          }\n          if (isItalic) {\n            element['italic'] = true;\n          }\n        }\n        if (type === 'connector') {\n          const source = element['source'] as Record<string, unknown>;\n          const target = element['target'] as Record<string, unknown>;\n          const sourceId = source['id'];\n          const targetId = target['id'];\n          // @ts-expect-error\n          if (!source['position'] && (!sourceId || !elements[sourceId])) {\n            delete elements[key];\n            return;\n          }\n          // @ts-expect-error\n          if (!target['position'] && (!targetId || !elements[targetId])) {\n            delete elements[key];\n            return;\n          }\n        }\n      }\n    }\n  },\n  toV5: data => {\n    const { elements } = data;\n    if (!((elements as object | Boxed) instanceof Boxed)) {\n      const yMap = new DocCollection.Y.Map() as Y.Map<Y.Map<unknown>>;\n\n      Object.entries(elements).forEach(([key, value]) => {\n        const map = new DocCollection.Y.Map();\n        Object.entries(value).forEach(([_key, _value]) => {\n          map.set(\n            _key,\n            _value instanceof DocCollection.Y.Text\n              ? _value.clone()\n              : _value instanceof Text\n                ? _value.yText.clone()\n                : _value\n          );\n        });\n        yMap.set(key, map);\n      });\n      const wrapper = new Boxed(yMap);\n      data.elements = wrapper;\n    }\n\n    const childrenMap = data.elements.getValue() as Y.Map<Y.Map<unknown>>;\n\n    for (const [id, element] of childrenMap) {\n      if (\n        element.get('type') === 'mindmap' ||\n        element.get('type') === 'group'\n      ) {\n        const children = element.get('children') as Y.Map<Y.Map<unknown>>;\n\n        if (children?.size === 0) {\n          childrenMap.delete(id);\n        }\n      }\n    }\n  },\n} satisfies Record<string, MigrationRunner<typeof SurfaceBlockSchema>>;\n\nexport const SurfaceBlockSchema = defineBlockSchema({\n  flavour: 'affine:surface',\n  props: (internalPrimitives): SurfaceBlockProps => ({\n    elements: internalPrimitives.Boxed(new DocCollection.Y.Map()),\n  }),\n  metadata: {\n    version: 5,\n    role: 'hub',\n    parent: ['affine:page'],\n    children: [\n      'affine:frame',\n      'affine:image',\n      'affine:bookmark',\n      'affine:attachment',\n      'affine:embed-*',\n      'affine:edgeless-text',\n    ],\n  },\n  onUpgrade: (data, previousVersion, version) => {\n    if (previousVersion < 4 && version >= 4) {\n      migration.toV4(data);\n    }\n    if (previousVersion < 5 && version >= 5) {\n      migration.toV5(data);\n    }\n  },\n  transformer: () => new SurfaceBlockTransformer(),\n  toModel: () => new SurfaceBlockModel(),\n});\n\nexport type SurfaceMiddleware = (\n  surface: SurfaceBlockModel,\n  hooks: SurfaceBlockModel['hooks']\n) => () => void;\n\nexport class SurfaceBlockModel extends BaseSurfaceModel {\n  private _disposables: DisposableGroup = new DisposableGroup();\n\n  override _init() {\n    this._extendElement(elementsCtorMap);\n    super._init();\n  }\n\n  override applyMiddlewares() {\n    [\n      connectorMiddleware(this, this.hooks),\n      groupRelationMiddleware(this, this.hooks),\n    ].forEach(disposable => this._disposables.add(disposable));\n  }\n\n  getConnectors(id: string) {\n    const connectors = this.getElementsByType(\n      'connector'\n    ) as unknown[] as ConnectorElementModel[];\n\n    return connectors.filter(\n      connector => connector.source?.id === id || connector.target?.id === id\n    );\n  }\n\n  override getElementsByType<K extends keyof BlockSuite.SurfaceElementModelMap>(\n    type: K\n  ): BlockSuite.SurfaceElementModelMap[K][] {\n    return super.getElementsByType(\n      type\n    ) as BlockSuite.SurfaceElementModelMap[K][];\n  }\n}\n"]}