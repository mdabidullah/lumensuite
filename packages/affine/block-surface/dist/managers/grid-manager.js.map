{"version":3,"file":"grid-manager.js","sourceRoot":"","sources":["../../src/managers/grid-manager.ts"],"names":[],"mappings":"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","sourcesContent":["import type { GfxModel } from '@lumensuite/block-std/gfx';\nimport type { IBound } from '@lumensuite/global/utils';\n\nimport {\n  Bound,\n  getBoundsWithRotation,\n  intersects,\n  isPointIn,\n} from '@lumensuite/global/utils';\n\nimport { GRID_SIZE } from '../consts.js';\nimport { compare } from './layer-utils.js';\n\nfunction getGridIndex(val: number) {\n  return Math.ceil(val / GRID_SIZE) - 1;\n}\n\nfunction rangeFromBound(a: IBound): number[] {\n  if (a.rotate) a = getBoundsWithRotation(a);\n  const minRow = getGridIndex(a.x);\n  const maxRow = getGridIndex(a.x + a.w);\n  const minCol = getGridIndex(a.y);\n  const maxCol = getGridIndex(a.y + a.h);\n  return [minRow, maxRow, minCol, maxCol];\n}\n\nfunction rangeFromElement<T extends GfxModel>(ele: T): number[] {\n  const bound = ele.elementBound;\n  const minRow = getGridIndex(bound.x);\n  const maxRow = getGridIndex(bound.maxX);\n  const minCol = getGridIndex(bound.y);\n  const maxCol = getGridIndex(bound.maxY);\n  return [minRow, maxRow, minCol, maxCol];\n}\n\nfunction rangeFromElementExternal<T extends GfxModel>(ele: T): number[] | null {\n  if (!ele.externalXYWH) return null;\n\n  const bound = Bound.deserialize(ele.externalXYWH);\n  const minRow = getGridIndex(bound.x);\n  const maxRow = getGridIndex(bound.maxX);\n  const minCol = getGridIndex(bound.y);\n  const maxCol = getGridIndex(bound.maxY);\n  return [minRow, maxRow, minCol, maxCol];\n}\n\nexport class GridManager<T extends GfxModel> {\n  private _elementToGrids = new Map<T, Set<Set<T>>>();\n\n  private _externalElementToGrids = new Map<T, Set<Set<T>>>();\n\n  private _externalGrids = new Map<string, Set<T>>();\n\n  private _grids = new Map<string, Set<T>>();\n\n  get isEmpty() {\n    return this._grids.size === 0;\n  }\n\n  private _addToExternalGrids(element: T) {\n    const range = rangeFromElementExternal(element);\n\n    if (!range) {\n      this._removeFromExternalGrids(element);\n      return;\n    }\n\n    const [minRow, maxRow, minCol, maxCol] = range;\n    const grids = new Set<Set<T>>();\n    this._externalElementToGrids.set(element, grids);\n\n    for (let i = minRow; i <= maxRow; i++) {\n      for (let j = minCol; j <= maxCol; j++) {\n        let grid = this._getExternalGrid(i, j);\n        if (!grid) {\n          grid = this._createExternalGrid(i, j);\n        }\n        grid.add(element);\n        grids.add(grid);\n      }\n    }\n  }\n\n  private _createExternalGrid(row: number, col: number) {\n    const id = row + '|' + col;\n    const elements = new Set<T>();\n    this._externalGrids.set(id, elements);\n    return elements;\n  }\n\n  private _createGrid(row: number, col: number) {\n    const id = row + '|' + col;\n    const elements = new Set<T>();\n    this._grids.set(id, elements);\n    return elements;\n  }\n\n  private _getExternalGrid(row: number, col: number) {\n    const id = row + '|' + col;\n    return this._externalGrids.get(id);\n  }\n\n  private _getGrid(row: number, col: number) {\n    const id = row + '|' + col;\n    return this._grids.get(id);\n  }\n\n  private _removeFromExternalGrids(element: T) {\n    const grids = this._externalElementToGrids.get(element);\n    if (grids) {\n      for (const grid of grids) {\n        grid.delete(element);\n      }\n    }\n  }\n\n  private _searchExternal(bound: IBound, strict = false): Set<T> {\n    const [minRow, maxRow, minCol, maxCol] = rangeFromBound(bound);\n    const results = new Set<T>();\n    const b = Bound.from(bound);\n\n    for (let i = minRow; i <= maxRow; i++) {\n      for (let j = minCol; j <= maxCol; j++) {\n        const gridElements = this._getExternalGrid(i, j);\n        if (!gridElements) continue;\n\n        for (const element of gridElements) {\n          const externalBound = element.externalBound;\n          if (\n            externalBound &&\n            (strict\n              ? b.contains(externalBound)\n              : intersects(externalBound, bound))\n          ) {\n            results.add(element);\n          }\n        }\n      }\n    }\n\n    return results;\n  }\n\n  add(element: T) {\n    this._addToExternalGrids(element);\n\n    const [minRow, maxRow, minCol, maxCol] = rangeFromElement(element);\n    const grids = new Set<Set<T>>();\n    this._elementToGrids.set(element, grids);\n\n    for (let i = minRow; i <= maxRow; i++) {\n      for (let j = minCol; j <= maxCol; j++) {\n        let grid = this._getGrid(i, j);\n        if (!grid) {\n          grid = this._createGrid(i, j);\n        }\n        grid.add(element);\n        grids.add(grid);\n      }\n    }\n  }\n\n  boundHasChanged(a: IBound, b: IBound) {\n    const [minRow, maxRow, minCol, maxCol] = rangeFromBound(a);\n    const [minRow2, maxRow2, minCol2, maxCol2] = rangeFromBound(b);\n    return (\n      minRow !== minRow2 ||\n      maxRow !== maxRow2 ||\n      minCol !== minCol2 ||\n      maxCol !== maxCol2\n    );\n  }\n\n  /**\n   *\n   * @param bound\n   * @param strict\n   * @param reverseChecking If true, check if the bound is inside the elements instead of checking if the elements are inside the bound\n   * @returns\n   */\n  has(\n    bound: IBound,\n    strict: boolean = false,\n    reverseChecking: boolean = false,\n    exclude?: Set<T>\n  ) {\n    const [minRow, maxRow, minCol, maxCol] = rangeFromBound(bound);\n    const b = Bound.from(bound);\n    const check = reverseChecking\n      ? (target: Bound) => {\n          return strict ? target.contains(b) : intersects(b, target);\n        }\n      : (target: Bound) => {\n          return strict ? b.contains(target) : intersects(target, b);\n        };\n\n    for (let i = minRow; i <= maxRow; i++) {\n      for (let j = minCol; j <= maxCol; j++) {\n        const gridElements = this._getGrid(i, j);\n        if (!gridElements) continue;\n        for (const element of gridElements) {\n          if (!exclude?.has(element) && check(element.elementBound)) {\n            return true;\n          }\n        }\n      }\n    }\n\n    return false;\n  }\n\n  pick(x: number, y: number): T[] {\n    const row = getGridIndex(x);\n    const col = getGridIndex(y);\n    const gridElements = this._getGrid(row, col);\n    if (!gridElements) return [];\n\n    const results: T[] = [];\n    for (const element of gridElements) {\n      if (\n        isPointIn(getBoundsWithRotation(Bound.deserialize(element.xywh)), x, y)\n      ) {\n        results.push(element);\n      }\n    }\n\n    return results;\n  }\n\n  remove(element: T) {\n    const grids = this._elementToGrids.get(element);\n    if (grids) {\n      for (const grid of grids) {\n        grid.delete(element);\n      }\n    }\n\n    this._removeFromExternalGrids(element);\n  }\n  search(bound: IBound, strict?: boolean, getSet?: false): T[];\n  search(bound: IBound, strict: boolean | undefined, getSet: true): Set<T>;\n\n  search(bound: IBound, strict = false, getSet: boolean = false): T[] | Set<T> {\n    const results: Set<T> = this._searchExternal(bound, strict);\n    const [minRow, maxRow, minCol, maxCol] = rangeFromBound(bound);\n    const b = Bound.from(bound);\n\n    for (let i = minRow; i <= maxRow; i++) {\n      for (let j = minCol; j <= maxCol; j++) {\n        const gridElements = this._getGrid(i, j);\n        if (!gridElements) continue;\n        for (const element of gridElements) {\n          if (\n            strict\n              ? b.contains(element.elementBound)\n              : intersects(element.elementBound, bound)\n          ) {\n            results.add(element);\n          }\n        }\n      }\n    }\n\n    if (getSet) return results;\n\n    // sort elements in set based on index\n    const sorted = Array.from(results).sort(compare);\n\n    return sorted;\n  }\n\n  update(element: T) {\n    this.remove(element);\n    this.add(element);\n  }\n}\n"]}