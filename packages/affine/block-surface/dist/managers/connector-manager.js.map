{"version":3,"file":"connector-manager.js","sourceRoot":"","sources":["../../src/managers/connector-manager.ts"],"names":[],"mappings":"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","sourcesContent":["import type { GfxController, GfxModel } from '@blocksuite/block-std/gfx';\nimport type { IBound, IVec, IVec3 } from '@blocksuite/global/utils';\n\nimport {\n  type BrushElementModel,\n  type Connection,\n  type ConnectorElementModel,\n  ConnectorMode,\n  GroupElementModel,\n  type LocalConnectorElementModel,\n} from '@blocksuite/affine-model';\nimport {\n  almostEqual,\n  assertEquals,\n  assertExists,\n  assertType,\n  Bound,\n  clamp,\n  getBezierCurveBoundingBox,\n  getBezierParameters,\n  getBoundFromPoints,\n  getBoundsWithRotation,\n  getPointFromBoundsWithRotation,\n  isOverlap,\n  isVecZero,\n  last,\n  lineIntersects,\n  PI2,\n  PointLocation,\n  sign,\n  toRadian,\n  Vec,\n} from '@blocksuite/global/utils';\n\nimport { isConnectorWithLabel } from '../element-model/utils/connector.js';\nimport { Overlay } from '../renderer/canvas-renderer.js';\nimport { AStarRunner } from '../utils/a-star.js';\n\nexport type Connectable = Exclude<\n  BlockSuite.EdgelessModel,\n  ConnectorElementModel | BrushElementModel | GroupElementModel\n>;\n\nexport type OrthogonalConnectorInput = {\n  startBound: Bound | null;\n  endBound: Bound | null;\n  startPoint: PointLocation;\n  endPoint: PointLocation;\n};\n\nexport const ConnectorEndpointLocations: IVec[] = [\n  // At top\n  [0.5, 0],\n  // At right\n  [1, 0.5],\n  // At bottom\n  [0.5, 1],\n  // At left\n  [0, 0.5],\n];\n\nexport const ConnectorEndpointLocationsOnTriangle: IVec[] = [\n  // At top\n  [0.5, 0],\n  // At right\n  [0.75, 0.5],\n  // At bottom\n  [0.5, 1],\n  // At left\n  [0.25, 0.5],\n];\n\nexport function calculateNearestLocation(\n  point: IVec,\n  bounds: IBound,\n  locations = ConnectorEndpointLocations,\n  shortestDistance = Number.POSITIVE_INFINITY\n) {\n  const { x, y, w, h } = bounds;\n  return locations\n    .map(offset => [x + offset[0] * w, y + offset[1] * h] as IVec)\n    .map(point => getPointFromBoundsWithRotation(bounds, point))\n    .reduce(\n      (prev, curr, index) => {\n        const d = Vec.dist(point, curr);\n        if (d < shortestDistance) {\n          const location = locations[index];\n          shortestDistance = d;\n          prev[0] = location[0];\n          prev[1] = location[1];\n        }\n        return prev;\n      },\n      [...locations[0]]\n    ) as IVec;\n}\n\nfunction rBound(ele: GfxModel, anti = false): IBound {\n  const bound = Bound.deserialize(ele.xywh);\n  return { ...bound, rotate: anti ? -ele.rotate : ele.rotate };\n}\n\nexport function isConnectorAndBindingsAllSelected(\n  connector: ConnectorElementModel | LocalConnectorElementModel,\n  selected: GfxModel[]\n) {\n  const connectorSelected = selected.find(s => s.id === connector.id);\n  if (!connectorSelected) {\n    return false;\n  }\n  const { source, target } = connector;\n  const startSelected = selected.find(s => s.id === source?.id);\n  const endSelected = selected.find(s => s.id === target?.id);\n  if (!source.id && !target.id) {\n    return true;\n  }\n  if (!source.id && endSelected) {\n    return true;\n  }\n  if (!target.id && startSelected) {\n    return true;\n  }\n  if (startSelected && endSelected) {\n    return true;\n  }\n  return false;\n}\n\nexport function getAnchors(ele: GfxModel) {\n  const bound = Bound.deserialize(ele.xywh);\n  const offset = 10;\n  const anchors: { point: PointLocation; coord: IVec }[] = [];\n  const rotate = ele.rotate;\n\n  [\n    [bound.center[0], bound.y - offset],\n    [bound.center[0], bound.maxY + offset],\n    [bound.x - offset, bound.center[1]],\n    [bound.maxX + offset, bound.center[1]],\n  ]\n    .map(vec =>\n      getPointFromBoundsWithRotation({ ...bound, rotate }, vec as IVec)\n    )\n    .forEach(vec => {\n      const rst = ele.getLineIntersections(bound.center as IVec, vec as IVec);\n      assertExists(rst);\n      const originPoint = getPointFromBoundsWithRotation(\n        { ...bound, rotate: -rotate },\n        rst[0]\n      );\n      anchors.push({ point: rst[0], coord: bound.toRelative(originPoint) });\n    });\n  return anchors;\n}\n\nfunction getConnectableRelativePosition(connectable: GfxModel, position: IVec) {\n  const location = connectable.getRelativePointLocation(position as IVec);\n  if (isVecZero(Vec.sub(position, [0, 0.5])))\n    location.tangent = Vec.rot([0, -1], toRadian(connectable.rotate));\n  else if (isVecZero(Vec.sub(position, [1, 0.5])))\n    location.tangent = Vec.rot([0, 1], toRadian(connectable.rotate));\n  else if (isVecZero(Vec.sub(position, [0.5, 0])))\n    location.tangent = Vec.rot([1, 0], toRadian(connectable.rotate));\n  else if (isVecZero(Vec.sub(position, [0.5, 1])))\n    location.tangent = Vec.rot([-1, 0], toRadian(connectable.rotate));\n  return location;\n}\n\nexport function getNearestConnectableAnchor(ele: Connectable, point: IVec) {\n  const anchors = getAnchors(ele);\n  return closestPoint(\n    anchors.map(a => a.point),\n    point\n  );\n}\n\nfunction closestPoint(points: PointLocation[], point: IVec) {\n  const rst = points.map(p => ({ p, d: Vec.dist(p, point) }));\n  rst.sort((a, b) => a.d - b.d);\n  return rst[0].p;\n}\n\nfunction computePoints(\n  startPoint: IVec,\n  endPoint: IVec,\n  nextStartPoint: IVec,\n  lastEndPoint: IVec,\n  startBound: Bound | null,\n  endBound: Bound | null,\n  expandStartBound: Bound | null,\n  expandEndBound: Bound | null\n): [IVec3[], IVec3, IVec3, IVec3, IVec3] {\n  const startPointVec3 = downscalePrecision(startPoint);\n  const endPointVec3 = downscalePrecision(endPoint);\n  let nextStartPointVec3 = downscalePrecision(nextStartPoint);\n  let lastEndPointVec3 = downscalePrecision(lastEndPoint);\n\n  const result = getConnectablePoints(\n    startPointVec3,\n    endPointVec3,\n    nextStartPointVec3,\n    lastEndPointVec3,\n    startBound,\n    endBound,\n    expandStartBound,\n    expandEndBound\n  );\n  const points = result.points;\n  nextStartPointVec3 = result.nextStartPoint;\n  lastEndPointVec3 = result.lastEndPoint;\n  const finalPoints = filterConnectablePoints(\n    filterConnectablePoints(points, expandStartBound?.expand(-1) ?? null),\n    expandEndBound?.expand(-1) ?? null\n  );\n  return [\n    finalPoints,\n    startPointVec3,\n    endPointVec3,\n    nextStartPointVec3,\n    lastEndPointVec3,\n  ];\n}\n\nfunction downscalePrecision(point: IVec | IVec3): IVec3 {\n  return [\n    Number(point[0].toFixed(2)),\n    Number(point[1].toFixed(2)),\n    point[2] ?? 0,\n  ];\n}\n\nfunction filterConnectablePoints<T extends IVec3 | IVec>(\n  points: T[],\n  bound: Bound | null\n): T[] {\n  return points.filter(point => {\n    if (!bound) return true;\n    return !bound.isPointInBound(point as IVec);\n  });\n}\n\nfunction pushWithPriority(points: number[][], vecs: IVec[], priority = 0) {\n  points.push(...vecs.map(vec => [...vec, priority]));\n}\n\nfunction pushLineIntersectsToPoints(\n  points: IVec3[],\n  aLine: IVec[],\n  bLine: IVec[],\n  priority = 0\n) {\n  const rst = lineIntersects(aLine[0], aLine[1], bLine[0], bLine[1], true);\n  if (rst) {\n    pushWithPriority(points, [rst], priority);\n  }\n}\n\nfunction pushOuterPoints(\n  points: IVec3[],\n  expandStartBound: Bound,\n  expandEndBound: Bound,\n  outerBound: Bound\n) {\n  if (expandStartBound && expandEndBound && outerBound) {\n    pushWithPriority(points, outerBound.getVerticesAndMidpoints());\n    pushWithPriority(points, [outerBound.center], 2);\n    [\n      expandStartBound.upperLine,\n      expandStartBound.horizontalLine,\n      expandStartBound.lowerLine,\n      expandEndBound.upperLine,\n      expandEndBound.horizontalLine,\n      expandEndBound.lowerLine,\n    ].forEach(line => {\n      pushLineIntersectsToPoints(points, line, outerBound.leftLine, 0);\n      pushLineIntersectsToPoints(points, line, outerBound.rightLine, 0);\n    });\n    [\n      expandStartBound.leftLine,\n      expandStartBound.verticalLine,\n      expandStartBound.rightLine,\n      expandEndBound.leftLine,\n      expandEndBound.verticalLine,\n      expandEndBound.rightLine,\n    ].forEach(line => {\n      pushLineIntersectsToPoints(points, line, outerBound.upperLine, 0);\n      pushLineIntersectsToPoints(points, line, outerBound.lowerLine, 0);\n    });\n  }\n}\n\nfunction pushBoundMidPoint(\n  points: IVec3[],\n  bound1: Bound,\n  bound2: Bound,\n  expandBound1: Bound,\n  expandBound2: Bound\n) {\n  if (bound1.maxX < bound2.x) {\n    const midX = (bound1.maxX + bound2.x) / 2;\n    [\n      expandBound1.horizontalLine,\n      expandBound2.horizontalLine,\n      expandBound1.upperLine,\n      expandBound1.lowerLine,\n      expandBound2.upperLine,\n      expandBound2.lowerLine,\n    ].forEach((line, index) => {\n      pushLineIntersectsToPoints(\n        points,\n        line,\n        [\n          [midX, 0],\n          [midX, 1],\n        ],\n        index === 0 || index === 1 ? 6 : 3\n      );\n    });\n  }\n  if (bound1.maxY < bound2.y) {\n    const midY = (bound1.maxY + bound2.y) / 2;\n    [\n      expandBound1.verticalLine,\n      expandBound2.verticalLine,\n      expandBound1.leftLine,\n      expandBound1.rightLine,\n      expandBound2.leftLine,\n      expandBound2.rightLine,\n    ].forEach((line, index) => {\n      pushLineIntersectsToPoints(\n        points,\n        line,\n        [\n          [0, midY],\n          [1, midY],\n        ],\n        index === 0 || index === 1 ? 6 : 3\n      );\n    });\n  }\n}\n\nfunction pushGapMidPoint(\n  points: IVec3[],\n  point: IVec3,\n  bound: Bound,\n  bound2: Bound,\n  expandBound: Bound,\n  expandBound2: Bound\n) {\n  /** on top or on bottom */\n  if (\n    almostEqual(point[1], bound.y, 0.02) ||\n    almostEqual(point[1], bound.maxY, 0.02)\n  ) {\n    const rst = [\n      bound.upperLine,\n      bound.lowerLine,\n      bound2.upperLine,\n      bound2.lowerLine,\n    ].map(line => {\n      return lineIntersects(\n        point as unknown as IVec,\n        [point[0], point[1] + 1],\n        line[0],\n        line[1],\n        true\n      ) as IVec;\n    });\n    rst.sort((a, b) => a[1] - b[1]);\n    const midPoint = Vec.lrp(rst[1], rst[2], 0.5);\n    pushWithPriority(points, [midPoint], 6);\n    [\n      expandBound.leftLine,\n      expandBound.rightLine,\n      expandBound2.leftLine,\n      expandBound2.rightLine,\n    ].forEach(line => {\n      pushLineIntersectsToPoints(\n        points,\n        [midPoint, [midPoint[0] + 1, midPoint[1]]],\n        line,\n        0\n      );\n    });\n  } else {\n    const rst = [\n      bound.leftLine,\n      bound.rightLine,\n      bound2.leftLine,\n      bound2.rightLine,\n    ].map(line => {\n      return lineIntersects(\n        point as unknown as IVec,\n        [point[0] + 1, point[1]],\n        line[0],\n        line[1],\n        true\n      ) as IVec;\n    });\n    rst.sort((a, b) => a[0] - b[0]);\n    const midPoint = Vec.lrp(rst[1], rst[2], 0.5);\n    pushWithPriority(points, [midPoint], 6);\n    [\n      expandBound.upperLine,\n      expandBound.lowerLine,\n      expandBound2.upperLine,\n      expandBound2.lowerLine,\n    ].forEach(line => {\n      pushLineIntersectsToPoints(\n        points,\n        [midPoint, [midPoint[0], midPoint[1] + 1]],\n        line,\n        0\n      );\n    });\n  }\n}\n\nfunction removeDulicatePoints(points: IVec[] | IVec3[]) {\n  points = points.map(downscalePrecision);\n  points.sort((a, b) => a[0] - b[0]);\n  assertType<IVec3[]>(points);\n  for (let i = 1; i < points.length - 1; i++) {\n    const cur = points[i];\n    const last = points[i - 1];\n    if (almostEqual(cur[0], last[0], 0.02)) {\n      cur[0] = last[0];\n    }\n  }\n  points.sort((a, b) => a[1] - b[1]);\n  for (let i = 1; i < points.length - 1; i++) {\n    const cur = points[i];\n    const last = points[i - 1];\n    if (almostEqual(cur[1], last[1], 0.02)) {\n      cur[1] = last[1];\n    }\n  }\n  points.sort((a, b) => {\n    if (a[0] < b[0]) return -1;\n    if (a[0] > b[0]) return 1;\n    if (a[1] < b[1]) return -1;\n    if (a[1] > b[1]) return 1;\n    return 0;\n  });\n  for (let i = 1; i < points.length; i++) {\n    const cur = points[i];\n    const last = points[i - 1];\n    if (\n      almostEqual(cur[0], last[0], 0.02) &&\n      almostEqual(cur[1], last[1], 0.02)\n    ) {\n      if (cur[2] <= last[2]) points.splice(i, 1);\n      else points.splice(i - 1, 1);\n      i--;\n      continue;\n    }\n  }\n  return points;\n}\n\nfunction getConnectablePoints(\n  startPoint: IVec3,\n  endPoint: IVec3,\n  nextStartPoint: IVec3,\n  lastEndPoint: IVec3,\n  startBound: Bound | null,\n  endBound: Bound | null,\n  expandStartBound: Bound | null,\n  expandEndBound: Bound | null\n) {\n  const lineBound = Bound.fromPoints([\n    startPoint,\n    endPoint,\n  ] as unknown[] as IVec[]);\n  const outerBound =\n    expandStartBound &&\n    expandEndBound &&\n    expandStartBound.unite(expandEndBound);\n  let points = [nextStartPoint, lastEndPoint] as IVec3[];\n  pushWithPriority(points, lineBound.getVerticesAndMidpoints());\n\n  if (!startBound || !endBound) {\n    pushWithPriority(points, [lineBound.center], 3);\n  }\n  if (outerBound) {\n    pushOuterPoints(points, expandStartBound, expandEndBound, outerBound);\n  }\n\n  if (startBound && endBound) {\n    assertExists(expandStartBound);\n    assertExists(expandEndBound);\n    pushGapMidPoint(\n      points,\n      startPoint,\n      startBound,\n      endBound,\n      expandStartBound,\n      expandEndBound\n    );\n    pushGapMidPoint(\n      points,\n      endPoint,\n      endBound,\n      startBound,\n      expandEndBound,\n      expandStartBound\n    );\n    pushBoundMidPoint(\n      points,\n      startBound,\n      endBound,\n      expandStartBound,\n      expandEndBound\n    );\n    pushBoundMidPoint(\n      points,\n      endBound,\n      startBound,\n      expandEndBound,\n      expandStartBound\n    );\n  }\n\n  if (expandStartBound) {\n    pushWithPriority(points, expandStartBound.getVerticesAndMidpoints());\n    pushWithPriority(\n      points,\n      expandStartBound.include(lastEndPoint as unknown as IVec).points\n    );\n  }\n\n  if (expandEndBound) {\n    pushWithPriority(points, expandEndBound.getVerticesAndMidpoints());\n    pushWithPriority(\n      points,\n      expandEndBound.include(nextStartPoint as unknown as IVec).points\n    );\n  }\n\n  points = removeDulicatePoints(points);\n\n  const sorted = points.map(point => point[0] + ',' + point[1]).sort();\n  sorted.forEach((cur, index) => {\n    if (index === 0) return;\n    if (cur === sorted[index - 1]) {\n      throw new Error('duplicate point');\n    }\n  });\n  const startEnds = [nextStartPoint, lastEndPoint].map(point => {\n    return points.find(\n      item =>\n        almostEqual(item[0], point[0], 0.02) &&\n        almostEqual(item[1], point[1], 0.02)\n    );\n  }) as IVec3[];\n  assertExists(startEnds[0]);\n  assertExists(startEnds[1]);\n  return { points, nextStartPoint: startEnds[0], lastEndPoint: startEnds[1] };\n}\n\nfunction getDirectPath(startPoint: IVec, endPoint: IVec): IVec[] {\n  if (\n    almostEqual(startPoint[0], endPoint[0], 0.02) ||\n    almostEqual(startPoint[1], endPoint[1], 0.02)\n  ) {\n    return [startPoint, endPoint];\n  } else {\n    const vec = Vec.sub(endPoint, startPoint);\n    const mid: IVec = [startPoint[0], startPoint[1] + vec[1]];\n    return [startPoint, mid, endPoint];\n  }\n}\n\nfunction mergePath(points: IVec[] | IVec3[]) {\n  if (points.length === 0) return [];\n  const result: IVec[] = [[points[0][0], points[0][1]]];\n  for (let i = 1; i < points.length - 1; i++) {\n    const cur = points[i];\n    const last = points[i - 1];\n    const next = points[i + 1];\n    if (\n      almostEqual(last[0], cur[0], 0.02) &&\n      almostEqual(cur[0], next[0], 0.02)\n    )\n      continue;\n    if (\n      almostEqual(last[1], cur[1], 0.02) &&\n      almostEqual(cur[1], next[1], 0.02)\n    )\n      continue;\n    result.push([cur[0], cur[1]]);\n  }\n  result.push(last(points) as IVec);\n  for (let i = 0; i < result.length - 1; i++) {\n    const cur = result[i];\n    const next = result[i + 1];\n    try {\n      assertEquals(\n        almostEqual(cur[0], next[0], 0.02) ||\n          almostEqual(cur[1], next[1], 0.02),\n        true\n      );\n    } catch (_) {\n      console.warn(points);\n      console.warn(result);\n    }\n  }\n  return result;\n}\n\nfunction computeOffset(startBound: Bound | null, endBound: Bound | null) {\n  const startOffset = [20, 20, 20, 20];\n  const endOffset = [20, 20, 20, 20];\n  if (!(startBound && endBound)) {\n    return [startOffset, endOffset];\n  }\n  // left, top, right, bottom\n  let overlap = isOverlap(startBound.upperLine, endBound.lowerLine, 0, false);\n  let dist: number;\n  if (overlap && startBound.upperLine[0][1] > endBound.lowerLine[0][1]) {\n    dist = Vec.distanceToLineSegment(\n      startBound.upperLine[0],\n      startBound.upperLine[1],\n      endBound.lowerLine[0],\n      false\n    );\n    startOffset[1] = Math.max(Math.min(dist / 2, startOffset[1]), 0);\n  }\n\n  overlap = isOverlap(startBound.rightLine, endBound.leftLine, 1, false);\n  if (overlap && startBound.rightLine[0][0] < endBound.leftLine[0][0]) {\n    dist = Vec.distanceToLineSegment(\n      startBound.rightLine[0],\n      startBound.rightLine[1],\n      endBound.leftLine[0],\n      false\n    );\n    startOffset[2] = Math.max(Math.min(dist / 2, startOffset[2]), 0);\n  }\n\n  overlap = isOverlap(startBound.lowerLine, endBound.upperLine, 0, false);\n  if (overlap && startBound.lowerLine[0][1] < endBound.upperLine[0][1]) {\n    dist = Vec.distanceToLineSegment(\n      startBound.lowerLine[0],\n      startBound.lowerLine[1],\n      endBound.upperLine[0],\n      false\n    );\n    startOffset[3] = Math.max(Math.min(dist / 2, startOffset[3]), 0);\n  }\n\n  startOffset[0] = endOffset[2] =\n    Math.min(startOffset[0], endOffset[2]) === 0\n      ? 20\n      : Math.min(startOffset[0], endOffset[2]);\n  startOffset[1] = endOffset[3] =\n    Math.min(startOffset[1], endOffset[3]) === 0\n      ? 20\n      : Math.min(startOffset[1], endOffset[3]);\n  startOffset[2] = endOffset[0] =\n    Math.min(startOffset[2], endOffset[0]) === 0\n      ? 20\n      : Math.min(startOffset[2], endOffset[0]);\n  startOffset[3] = endOffset[1] =\n    Math.min(startOffset[3], endOffset[1]) === 0\n      ? 20\n      : Math.min(startOffset[3], endOffset[1]);\n\n  return [startOffset, endOffset];\n}\n\nfunction getNextPoint(\n  bound: Bound,\n  point: PointLocation,\n  offsetX = 10,\n  offsetY = 10,\n  offsetW = 10,\n  offsetH = 10\n) {\n  const result: IVec = Array.from(point) as IVec;\n  if (almostEqual(bound.x, result[0])) result[0] -= offsetX;\n  else if (almostEqual(bound.y, result[1])) result[1] -= offsetY;\n  else if (almostEqual(bound.maxX, result[0])) result[0] += offsetW;\n  else if (almostEqual(bound.maxY, result[1])) result[1] += offsetH;\n  else {\n    const direction = Vec.normalize(Vec.sub(result, bound.center));\n    const xDirection = direction[0] > 0 ? 1 : -1;\n    const yDirection = direction[1] > 0 ? 1 : -1;\n\n    const slope =\n      Math.abs(point.tangent[0]) < Math.abs(point.tangent[1]) ? 0 : 1;\n    // if the slope is big, use the x direction\n    if (slope === 0) {\n      if (xDirection > 0) {\n        const intersects = lineIntersects(\n          bound.rightLine[0],\n          bound.rightLine[1],\n          result,\n          [bound.maxX + 10, result[1]]\n        );\n        assertExists(intersects);\n        result[0] = intersects[0] + offsetX;\n      } else {\n        const intersects = lineIntersects(\n          bound.leftLine[0],\n          bound.leftLine[1],\n          result,\n          [bound.x - 10, result[1]]\n        );\n        assertExists(intersects);\n        result[0] = intersects[0] - offsetX;\n      }\n    } else {\n      if (yDirection > 0) {\n        const intersects = lineIntersects(\n          bound.lowerLine[0],\n          bound.lowerLine[1],\n          result,\n          [result[0], bound.maxY + 10]\n        );\n        assertExists(intersects);\n        result[1] = intersects[1] + offsetY;\n      } else {\n        const intersects = lineIntersects(\n          bound.upperLine[0],\n          bound.upperLine[1],\n          result,\n          [result[0], bound.y - 10]\n        );\n        assertExists(intersects);\n        result[1] = intersects[1] - offsetY;\n      }\n    }\n  }\n  return result;\n}\n\nfunction computeNextStartEndpoint(\n  startPoint: PointLocation,\n  endPoint: PointLocation,\n  startBound: Bound | null,\n  endBound: Bound | null,\n  startOffset: number[] | null,\n  endOffset: number[] | null\n) {\n  const nextStartPoint =\n    startBound && startOffset\n      ? getNextPoint(\n          startBound,\n          startPoint,\n          startOffset[0],\n          startOffset[1],\n          startOffset[2],\n          startOffset[3]\n        )\n      : startPoint;\n  const lastEndPoint =\n    endBound && endOffset\n      ? getNextPoint(\n          endBound,\n          endPoint,\n          endOffset[0],\n          endOffset[1],\n          endOffset[2],\n          endOffset[3]\n        )\n      : endPoint;\n  return [nextStartPoint, lastEndPoint];\n}\n\nfunction adjustStartEndPoint(\n  startPoint: IVec3,\n  endPoint: IVec3,\n  startBound: Bound | null = null,\n  endBound: Bound | null = null\n) {\n  if (!endBound) {\n    if (\n      Math.abs(endPoint[0] - startPoint[0]) >\n      Math.abs(endPoint[1] - startPoint[1])\n    ) {\n      endPoint[0] += sign(endPoint[0] - startPoint[0]) * 20;\n    } else {\n      endPoint[1] += sign(endPoint[1] - startPoint[1]) * 20;\n    }\n  }\n  if (!startBound) {\n    if (\n      Math.abs(endPoint[0] - startPoint[0]) >\n      Math.abs(endPoint[1] - startPoint[1])\n    ) {\n      startPoint[0] -= sign(endPoint[0] - startPoint[0]) * 20;\n    } else {\n      startPoint[1] -= sign(endPoint[1] - startPoint[1]) * 20;\n    }\n  }\n}\n\nfunction renderRect(\n  ctx: CanvasRenderingContext2D,\n  bounds: IBound,\n  color: string,\n  lineWidth: number\n) {\n  const { x, y, w, h } = bounds;\n  ctx.save();\n  ctx.beginPath();\n  ctx.strokeStyle = color;\n  ctx.lineWidth = lineWidth;\n  ctx.setLineDash([lineWidth * 2, lineWidth * 2]);\n  ctx.strokeRect(x, y, w, h);\n  ctx.closePath();\n  ctx.restore();\n}\n\nexport class ConnectionOverlay extends Overlay {\n  highlightPoint: IVec | null = null;\n\n  points: IVec[] = [];\n\n  sourceBounds: IBound | null = null;\n\n  targetBounds: IBound | null = null;\n\n  constructor(private _gfx: GfxController) {\n    super();\n  }\n\n  private _findConnectablesInViews() {\n    const gfx = this._gfx;\n    const bound = gfx.viewport.viewportBounds;\n    return gfx.getElementsByBound(bound).filter(ele => ele.connectable);\n  }\n\n  _clearRect() {\n    this.points = [];\n    this.highlightPoint = null;\n    this._renderer?.refresh();\n  }\n\n  override clear() {\n    this.sourceBounds = null;\n    this.targetBounds = null;\n    this._clearRect();\n  }\n\n  override render(ctx: CanvasRenderingContext2D): void {\n    const zoom = this._gfx.viewport.zoom;\n    const radius = 5 / zoom;\n    const color = getComputedStyle(this._gfx.std.host).getPropertyValue(\n      '--affine-text-emphasis-color'\n    );\n\n    ctx.globalAlpha = 0.6;\n    let lineWidth = 1 / zoom;\n    if (this.sourceBounds) {\n      renderRect(ctx, this.sourceBounds, color, lineWidth);\n    }\n    if (this.targetBounds) {\n      renderRect(ctx, this.targetBounds, color, lineWidth);\n    }\n\n    lineWidth = 2 / zoom;\n    this.points.forEach(p => {\n      ctx.beginPath();\n      ctx.arc(p[0], p[1], radius, 0, PI2);\n      ctx.fillStyle = 'white';\n      ctx.strokeStyle = color;\n      ctx.lineWidth = lineWidth;\n      ctx.fill();\n      ctx.stroke();\n      ctx.closePath();\n    });\n\n    ctx.globalAlpha = 1;\n    if (this.highlightPoint) {\n      ctx.beginPath();\n      ctx.arc(this.highlightPoint[0], this.highlightPoint[1], radius, 0, PI2);\n      ctx.fillStyle = color;\n      ctx.strokeStyle = color;\n      ctx.lineWidth = lineWidth;\n      ctx.fill();\n      ctx.stroke();\n      ctx.closePath();\n    }\n  }\n\n  /**\n   * Render the connector at the given point. It will try to find\n   * the closest connectable element and render the connector. If the\n   * point is not close to any connectable element, it will just render\n   * the connector at the given point.\n   * @param point the point to render the connector\n   * @param excludedIds the ids of the elements that should be excluded\n   * @returns the connection result\n   */\n  renderConnector(point: IVec, excludedIds: string[] = []) {\n    const connectables = this._findConnectablesInViews();\n    const context = this._gfx;\n    const target = [];\n\n    this._clearRect();\n\n    let result: Connection | null = null;\n    for (let i = 0; i < connectables.length; i++) {\n      const connectable = connectables[i];\n      // first check if in excluedIds\n      if (excludedIds.includes(connectable.id)) continue;\n\n      // then check if in expanded bound\n      const bound = Bound.deserialize(connectable.xywh);\n      const rotateBound = Bound.from(\n        getBoundsWithRotation(rBound(connectable))\n      );\n      // FIXME: the real path needs to be expanded: diamod, ellipse, trangle.\n      if (!rotateBound.expand(10).isPointInBound(point)) continue;\n\n      // then check if closes to anchors\n      const anchors = getAnchors(connectable);\n      const len = anchors.length;\n      const pointerViewCoord = context.viewport.toViewCoord(point[0], point[1]);\n\n      let shortestDistance = Number.POSITIVE_INFINITY;\n      let j = 0;\n\n      this.points = anchors.map(a => a.point);\n\n      for (; j < len; j++) {\n        const anchor = anchors[j];\n        const anchorViewCoord = context.viewport.toViewCoord(\n          anchor.point[0],\n          anchor.point[1]\n        );\n        const d = Vec.dist(anchorViewCoord, pointerViewCoord);\n        if (d < shortestDistance) {\n          shortestDistance = d;\n          target.push(connectable);\n          this.highlightPoint = anchor.point;\n          result = {\n            id: connectable.id,\n            position: anchor.coord as IVec,\n          };\n        }\n      }\n\n      if (shortestDistance < 8 && result) break;\n\n      // if not, check if closes to bound\n      const nearestPoint = connectable.getNearestPoint(point as IVec) as IVec;\n\n      if (Vec.dist(nearestPoint, point) < 8) {\n        this.highlightPoint = nearestPoint;\n        const originPoint = getPointFromBoundsWithRotation(\n          rBound(connectable, true),\n          nearestPoint\n        );\n        this._renderer?.refresh();\n        target.push(connectable);\n        result = {\n          id: connectable.id,\n          position: bound\n            .toRelative(originPoint)\n            .map(n => clamp(n, 0, 1)) as IVec,\n        };\n      }\n\n      if (result) continue;\n\n      // if not, check if in inside of the element\n      if (\n        connectable.includesPoint(\n          point[0],\n          point[1],\n          {\n            ignoreTransparent: false,\n          },\n          this._gfx.std.host\n        )\n      ) {\n        target.push(connectable);\n        result = {\n          id: connectable.id,\n        };\n      }\n    }\n\n    if (last(target) instanceof GroupElementModel) {\n      this.targetBounds = Bound.deserialize(last(target)!.xywh);\n    } else {\n      this.targetBounds = null;\n    }\n\n    // at last, if not, just return the point\n    if (!result) {\n      result = {\n        position: point as IVec,\n      };\n    }\n\n    this._renderer?.refresh();\n\n    return result;\n  }\n}\n\nexport class ConnectorPathGenerator {\n  protected _aStarRunner: AStarRunner | null = null;\n\n  constructor(\n    private options: {\n      getElementById: (id: string) => GfxModel | null;\n    }\n  ) {}\n\n  static updatePath(\n    connector: ConnectorElementModel | LocalConnectorElementModel,\n    path: PointLocation[] | null | null,\n    elementGetter?: (id: string) => GfxModel | null\n  ) {\n    const instance = new ConnectorPathGenerator({\n      getElementById: elementGetter ?? (() => null),\n    });\n    const points = path ?? instance._generateConnectorPath(connector) ?? [];\n    const bound =\n      connector.mode === ConnectorMode.Curve\n        ? getBezierCurveBoundingBox(getBezierParameters(points))\n        : getBoundFromPoints(points);\n    const relativePoints = points.map((p: PointLocation) => {\n      return p.setVec(Vec.sub(p, [bound.x, bound.y]));\n    });\n\n    connector.updatingPath = true;\n    // the property assignment order matters\n    connector.xywh = bound.serialize();\n    connector.path = relativePoints;\n\n    // Updates Connector's Label position.\n    if (isConnectorWithLabel(connector)) {\n      const model = connector as ConnectorElementModel;\n      const [cx, cy] = model.getPointByOffsetDistance(\n        model.labelOffset.distance\n      );\n      const [, , w, h] = model.labelXYWH!;\n      model.labelXYWH = [cx - w / 2, cy - h / 2, w, h];\n    }\n\n    connector.updatingPath = false;\n  }\n\n  private _computeStartEndPoint(\n    connector: ConnectorElementModel | LocalConnectorElementModel\n  ) {\n    const { source, target } = connector;\n    const start = this._getConnectorEndElement(connector, 'source');\n    const end = this._getConnectorEndElement(connector, 'target');\n\n    let startPoint: PointLocation, endPoint: PointLocation;\n    if (source.id && !source.position && target.id && !target.position) {\n      assertExists(start);\n      assertExists(end);\n      const startAnchors = getAnchors(start);\n      const endAnchors = getAnchors(end);\n      let minDist = Infinity;\n      let minStartAnchor = new PointLocation();\n      let minEndAnchor = new PointLocation();\n      for (const sa of startAnchors) {\n        for (const ea of endAnchors) {\n          const dist = Vec.dist(sa.point, ea.point);\n          if (dist + 0.1 < minDist) {\n            minDist = dist;\n            minStartAnchor = sa.point;\n            minEndAnchor = ea.point;\n          }\n        }\n      }\n      startPoint = minStartAnchor;\n      endPoint = minEndAnchor;\n    } else {\n      startPoint = this._getConnectionPoint(connector, 'source');\n      endPoint = this._getConnectionPoint(connector, 'target');\n    }\n    return [startPoint, endPoint];\n  }\n\n  private _generateConnectorPath(\n    connector: ConnectorElementModel | LocalConnectorElementModel\n  ) {\n    const { mode } = connector;\n    if (mode === ConnectorMode.Straight) {\n      return this._generateStraightConnectorPath(connector);\n    } else if (mode === ConnectorMode.Orthogonal) {\n      const start = this._getConnectorEndElement(connector, 'source');\n      const end = this._getConnectorEndElement(connector, 'target');\n\n      const [startPoint, endPoint] = this._computeStartEndPoint(connector);\n\n      const startBound = start\n        ? Bound.from(getBoundsWithRotation(rBound(start)))\n        : null;\n      const endBound = end\n        ? Bound.from(getBoundsWithRotation(rBound(end)))\n        : null;\n      const path = this.generateOrthogonalConnectorPath({\n        startPoint,\n        endPoint,\n        startBound,\n        endBound,\n      });\n      return path.map(p => new PointLocation(p));\n    } else if (mode === ConnectorMode.Curve) {\n      return this._generateCurveConnectorPath(connector);\n    }\n    throw new Error('unknown connector mode');\n  }\n\n  private _generateCurveConnectorPath(\n    connector: ConnectorElementModel | LocalConnectorElementModel\n  ) {\n    const { source, target } = connector;\n\n    if (source.id || target.id) {\n      let startPoint: PointLocation;\n      let endPoint: PointLocation;\n      if (!source.position && !target.position) {\n        const start = this._getConnectorEndElement(\n          connector,\n          'source'\n        ) as Connectable;\n        const end = this._getConnectorEndElement(\n          connector,\n          'target'\n        ) as Connectable;\n        const sb = Bound.deserialize(start.xywh);\n        const eb = Bound.deserialize(end.xywh);\n        startPoint = getNearestConnectableAnchor(start, eb.center);\n        endPoint = getNearestConnectableAnchor(end, sb.center);\n      } else {\n        startPoint = this._getConnectionPoint(connector, 'source');\n        endPoint = this._getConnectionPoint(connector, 'target');\n      }\n\n      if (source.id) {\n        const startTangentVertical = Vec.rot(startPoint.tangent, -Math.PI / 2);\n        startPoint.out = Vec.mul(\n          startTangentVertical,\n          Math.max(\n            100,\n            Math.abs(\n              Vec.pry(Vec.sub(endPoint, startPoint), startTangentVertical)\n            ) / 3\n          )\n        );\n      }\n      if (target.id) {\n        const endTangentVertical = Vec.rot(endPoint.tangent, -Math.PI / 2);\n        endPoint.in = Vec.mul(\n          endTangentVertical,\n          Math.max(\n            100,\n            Math.abs(\n              Vec.pry(Vec.sub(startPoint, endPoint), endTangentVertical)\n            ) / 3\n          )\n        );\n      }\n      return [startPoint, endPoint];\n    } else {\n      const endPoint = this._getConnectionPoint(connector, 'target');\n      const startPoint = this._getConnectionPoint(connector, 'source');\n      if (\n        Math.abs(endPoint[0] - startPoint[0]) >\n        Math.abs(endPoint[1] - startPoint[1])\n      ) {\n        startPoint.out = [Vec.mul(Vec.sub(endPoint, startPoint), 2 / 3)[0], 0];\n        endPoint.in = [Vec.mul(Vec.sub(startPoint, endPoint), 2 / 3)[0], 0];\n      } else {\n        startPoint.out = [0, Vec.mul(Vec.sub(endPoint, startPoint), 2 / 3)[1]];\n        endPoint.in = [0, Vec.mul(Vec.sub(startPoint, endPoint), 2 / 3)[1]];\n      }\n      return [startPoint, endPoint];\n    }\n  }\n\n  private _generateStraightConnectorPath(\n    connector: ConnectorElementModel | LocalConnectorElementModel\n  ) {\n    const { source, target } = connector;\n    if (source.id && !source.position && target.id && !target.position) {\n      const start = this._getConnectorEndElement(\n        connector,\n        'source'\n      ) as Connectable;\n      const end = this._getConnectorEndElement(\n        connector,\n        'target'\n      ) as Connectable;\n      const sb = Bound.deserialize(start.xywh);\n      const eb = Bound.deserialize(end.xywh);\n      const startPoint = getNearestConnectableAnchor(start, eb.center);\n      const endPoint = getNearestConnectableAnchor(end, sb.center);\n      return [startPoint, endPoint];\n    } else {\n      const endPoint = this._getConnectionPoint(connector, 'target');\n      const startPoint = this._getConnectionPoint(connector, 'source');\n      return (startPoint && endPoint && [startPoint, endPoint]) ?? [];\n    }\n  }\n\n  private _getConnectionPoint(\n    connector: ConnectorElementModel | LocalConnectorElementModel,\n    type: 'source' | 'target'\n  ): PointLocation {\n    const connection = connector[type];\n    const anotherType = type === 'source' ? 'target' : 'source';\n\n    if (connection.id) {\n      const connectable = this._getConnectorEndElement(connector, type);\n      assertExists(connectable);\n\n      if (!connection.position) {\n        const otherPoint = this._getConnectionPoint(connector, anotherType);\n        return getNearestConnectableAnchor(connectable, otherPoint);\n      } else {\n        return getConnectableRelativePosition(connectable, connection.position);\n      }\n    } else {\n      assertExists(connection.position);\n      return PointLocation.fromVec(connection.position);\n    }\n  }\n\n  private _getConnectorEndElement(\n    connector: ConnectorElementModel | LocalConnectorElementModel,\n    type: 'source' | 'target'\n  ): Connectable | null {\n    const id = connector[type].id;\n\n    if (id) {\n      return this.options.getElementById(id) as Connectable;\n    }\n\n    return null;\n  }\n\n  private _prepareOrthogonalConnectorInfo(\n    connectorInfo: OrthogonalConnectorInput\n  ): [\n    IVec,\n    IVec,\n    IVec,\n    IVec,\n    Bound | null,\n    Bound | null,\n    Bound | null,\n    Bound | null,\n  ] {\n    const { startBound, endBound, startPoint, endPoint } = connectorInfo;\n\n    const [startOffset, endOffset] = computeOffset(startBound, endBound);\n    const [nextStartPoint, lastEndPoint] = computeNextStartEndpoint(\n      startPoint,\n      endPoint,\n      startBound,\n      endBound,\n      startOffset,\n      endOffset\n    );\n    const expandStartBound = startBound\n      ? startBound.expand(\n          startOffset[0],\n          startOffset[1],\n          startOffset[2],\n          startOffset[3]\n        )\n      : null;\n    const expandEndBound = endBound\n      ? endBound.expand(endOffset[0], endOffset[1], endOffset[2], endOffset[3])\n      : null;\n\n    return [\n      startPoint,\n      endPoint,\n      nextStartPoint,\n      lastEndPoint,\n      startBound,\n      endBound,\n      expandStartBound,\n      expandEndBound,\n    ];\n  }\n\n  generateOrthogonalConnectorPath(input: OrthogonalConnectorInput): IVec[] {\n    const info = this._prepareOrthogonalConnectorInfo(input);\n    const [startPoint, endPoint, nextStartPoint, lastEndPoint] = info;\n    const [, , , , startBound, endBound, expandStartBound, expandEndBound] =\n      info;\n    const blocks = [];\n    const expandBlocks = [];\n    startBound && blocks.push(startBound.clone());\n    endBound && blocks.push(endBound.clone());\n    expandStartBound && expandBlocks.push(expandStartBound.clone());\n    expandEndBound && expandBlocks.push(expandEndBound.clone());\n\n    if (\n      startBound &&\n      endBound &&\n      startBound.isPointInBound(endPoint) &&\n      endBound.isPointInBound(startPoint)\n    ) {\n      return getDirectPath(startPoint, endPoint);\n    }\n\n    if (startBound && expandStartBound?.isPointInBound(endPoint, 0)) {\n      return getDirectPath(startPoint, endPoint);\n    }\n\n    if (endBound && expandEndBound?.isPointInBound(startPoint, 0)) {\n      return getDirectPath(startPoint, endPoint);\n    }\n\n    const points = computePoints(\n      startPoint,\n      endPoint,\n      nextStartPoint,\n      lastEndPoint,\n      startBound,\n      endBound,\n      expandStartBound,\n      expandEndBound\n    );\n    const finalPoints = points[0];\n    const [, startPointV3, endPointV3, nextStartPointV3, lastEndPointV3] =\n      points;\n\n    adjustStartEndPoint(startPointV3, endPointV3, startBound, endBound);\n    this._aStarRunner = new AStarRunner(\n      finalPoints,\n      nextStartPointV3,\n      lastEndPointV3,\n      startPointV3,\n      endPointV3,\n      blocks,\n      expandBlocks\n    );\n    this._aStarRunner.run();\n    const path = this._aStarRunner.path;\n    if (!endBound) path.pop();\n    if (!startBound) path.shift();\n\n    return mergePath(path);\n  }\n\n  hasRelatedElement(\n    connecter: ConnectorElementModel | LocalConnectorElementModel\n  ) {\n    const { source, target } = connecter;\n    if (\n      (source.id && !this.options.getElementById(source.id)) ||\n      (target.id && !this.options.getElementById(target.id))\n    ) {\n      return false;\n    }\n\n    return true;\n  }\n}\n"]}