{"version":3,"file":"canvas-renderer.js","sourceRoot":"","sources":["../../src/renderer/canvas-renderer.ts"],"names":[],"mappings":"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","sourcesContent":["import type {\n  GridManager,\n  LayerManager,\n  Viewport,\n} from '@blocksuite/block-std/gfx';\nimport type { IBound } from '@blocksuite/global/utils';\n\nimport { type Color, ColorScheme } from '@blocksuite/affine-model';\nimport { requestConnectedFrame } from '@blocksuite/affine-shared/utils';\nimport {\n  DisposableGroup,\n  getBoundsWithRotation,\n  intersects,\n  last,\n  Slot,\n} from '@blocksuite/global/utils';\n\nimport type { ElementRenderer } from './elements/index.js';\n\nimport { SurfaceElementModel } from '../element-model/base.js';\nimport { RoughCanvas } from '../utils/rough/canvas.js';\n\n/**\n * An overlay is a layer covered on top of elements,\n * can be used for rendering non-CRDT state indicators.\n */\nexport abstract class Overlay {\n  protected _renderer: CanvasRenderer | null = null;\n\n  constructor() {}\n\n  clear() {}\n\n  abstract render(ctx: CanvasRenderingContext2D, rc: RoughCanvas): void;\n\n  setRenderer(renderer: CanvasRenderer | null) {\n    this._renderer = renderer;\n  }\n}\n\ntype EnvProvider = {\n  generateColorProperty: (color: Color, fallback: string) => string;\n  getColorScheme: () => ColorScheme;\n  getColorValue: (color: Color, fallback?: string, real?: boolean) => string;\n  getPropertyValue: (property: string) => string;\n  selectedElements?: () => string[];\n};\n\ntype RendererOptions = {\n  viewport: Viewport;\n  layerManager: LayerManager;\n  provider?: Partial<EnvProvider>;\n  enableStackingCanvas?: boolean;\n  onStackingCanvasCreated?: (canvas: HTMLCanvasElement) => void;\n  elementRenderers: Record<string, ElementRenderer>;\n  gridManager: GridManager;\n};\n\nexport class CanvasRenderer {\n  private _container!: HTMLElement;\n\n  private _disposables = new DisposableGroup();\n\n  private _overlays = new Set<Overlay>();\n\n  private _refreshRafId: number | null = null;\n\n  private _stackingCanvas: HTMLCanvasElement[] = [];\n\n  canvas: HTMLCanvasElement;\n\n  ctx: CanvasRenderingContext2D;\n\n  elementRenderers: Record<string, ElementRenderer>;\n\n  grid: GridManager;\n\n  layerManager: LayerManager;\n\n  provider: Partial<EnvProvider>;\n\n  stackingCanvasUpdated = new Slot<{\n    canvases: HTMLCanvasElement[];\n    added: HTMLCanvasElement[];\n    removed: HTMLCanvasElement[];\n  }>();\n\n  viewport: Viewport;\n\n  get stackingCanvas() {\n    return this._stackingCanvas;\n  }\n\n  constructor(options: RendererOptions) {\n    const canvas = document.createElement('canvas');\n\n    this.canvas = canvas;\n    this.ctx = this.canvas.getContext('2d') as CanvasRenderingContext2D;\n    this.viewport = options.viewport;\n    this.layerManager = options.layerManager;\n    this.grid = options.gridManager;\n    this.provider = options.provider ?? {};\n    this.elementRenderers = options.elementRenderers;\n    this._initViewport();\n\n    options.enableStackingCanvas = options.enableStackingCanvas ?? false;\n    if (options.enableStackingCanvas) {\n      this._initStackingCanvas(options.onStackingCanvasCreated);\n    }\n  }\n\n  /**\n   * Specifying the actual size gives better results and more consistent behavior across browsers.\n   *\n   * Make sure the main canvas and the offscreen canvas or layer canvas are the same size.\n   *\n   * It is not recommended to set width and height to 100%.\n   */\n  private _canvasSizeUpdater(dpr = window.devicePixelRatio) {\n    const { width, height } = this.viewport;\n    const actualWidth = Math.ceil(width * dpr);\n    const actualHeight = Math.ceil(height * dpr);\n\n    return {\n      filter({ width, height }: HTMLCanvasElement) {\n        return width !== actualWidth || height !== actualHeight;\n      },\n      update(canvas: HTMLCanvasElement) {\n        canvas.style.width = `${width}px`;\n        canvas.style.height = `${height}px`;\n        canvas.width = actualWidth;\n        canvas.height = actualHeight;\n      },\n    };\n  }\n\n  private _initStackingCanvas(onCreated?: (canvas: HTMLCanvasElement) => void) {\n    const layer = this.layerManager;\n    const updateStackingCanvasSize = (canvases: HTMLCanvasElement[]) => {\n      this._stackingCanvas = canvases;\n\n      const sizeUpdater = this._canvasSizeUpdater();\n\n      canvases.filter(sizeUpdater.filter).forEach(sizeUpdater.update);\n    };\n    const updateStackingCanvas = () => {\n      /**\n       * we already have a main canvas, so the last layer should be skipped\n       */\n      const canvasLayers = layer.getCanvasLayers().slice(0, -1);\n      const canvases = [];\n      const currentCanvases = this._stackingCanvas;\n      const lastLayer = last(this.layerManager.layers);\n      const maximumZIndex = lastLayer\n        ? lastLayer.zIndex + lastLayer.elements.length + 1\n        : 1;\n\n      this.canvas.style.zIndex = maximumZIndex.toString();\n\n      for (let i = 0; i < canvasLayers.length; ++i) {\n        const layer = canvasLayers[i];\n        const created = i < currentCanvases.length;\n        const canvas = created\n          ? currentCanvases[i]\n          : document.createElement('canvas');\n\n        if (!created) {\n          onCreated?.(canvas);\n        }\n\n        canvas.dataset.layerId = `[${layer.indexes[0]}--${layer.indexes[1]}]`;\n        canvas.style.zIndex = layer.zIndex.toString();\n        canvases.push(canvas);\n      }\n\n      this._stackingCanvas = canvases;\n      updateStackingCanvasSize(canvases);\n\n      if (currentCanvases.length !== canvases.length) {\n        const diff = canvases.length - currentCanvases.length;\n        const payload: {\n          canvases: HTMLCanvasElement[];\n          removed: HTMLCanvasElement[];\n          added: HTMLCanvasElement[];\n        } = {\n          canvases,\n          removed: [],\n          added: [],\n        };\n\n        if (diff > 0) {\n          payload.added = canvases.slice(-diff);\n        } else {\n          payload.removed = currentCanvases.slice(diff);\n        }\n\n        this.stackingCanvasUpdated.emit(payload);\n      }\n\n      this.refresh();\n    };\n\n    this._disposables.add(\n      this.layerManager.slots.layerUpdated.on(() => {\n        updateStackingCanvas();\n      })\n    );\n\n    updateStackingCanvas();\n  }\n\n  private _initViewport() {\n    let sizeUpdatedRafId: number | null = null;\n\n    this._disposables.add(\n      this.viewport.viewportUpdated.on(() => {\n        this.refresh();\n      })\n    );\n\n    this._disposables.add(\n      this.viewport.sizeUpdated.on(() => {\n        if (sizeUpdatedRafId) return;\n        sizeUpdatedRafId = requestConnectedFrame(() => {\n          sizeUpdatedRafId = null;\n          this._resetSize();\n          this._render();\n          this.refresh();\n        }, this._container);\n      })\n    );\n  }\n\n  private _render() {\n    const { viewportBounds, zoom } = this.viewport;\n    const { ctx } = this;\n    const dpr = window.devicePixelRatio;\n    const scale = zoom * dpr;\n    const matrix = new DOMMatrix().scaleSelf(scale);\n    /**\n     * if a layer does not have a corresponding canvas\n     * its element will be add to this array and drawing on the\n     * main canvas\n     */\n    let fallbackElement: SurfaceElementModel[] = [];\n\n    this.layerManager.getCanvasLayers().forEach((layer, idx) => {\n      if (!this._stackingCanvas[idx]) {\n        fallbackElement = fallbackElement.concat(layer.elements);\n        return;\n      }\n\n      const canvas = this._stackingCanvas[idx];\n      const ctx = canvas.getContext('2d') as CanvasRenderingContext2D;\n      const rc = new RoughCanvas(ctx.canvas);\n\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      ctx.save();\n      ctx.setTransform(matrix);\n\n      this._renderByBound(ctx, matrix, rc, viewportBounds, layer.elements);\n    });\n\n    ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n    ctx.save();\n\n    ctx.setTransform(matrix);\n\n    this._renderByBound(\n      ctx,\n      matrix,\n      new RoughCanvas(ctx.canvas),\n      viewportBounds,\n      fallbackElement,\n      true\n    );\n  }\n\n  private _renderByBound(\n    ctx: CanvasRenderingContext2D | null,\n    matrix: DOMMatrix,\n    rc: RoughCanvas,\n    bound: IBound,\n    surfaceElements?: SurfaceElementModel[],\n    overLay: boolean = false\n  ) {\n    if (!ctx) return;\n\n    const elements =\n      surfaceElements ??\n      (this.grid.search(bound, undefined, {\n        filter: el => el instanceof SurfaceElementModel,\n      }) as SurfaceElementModel[]);\n    for (const element of elements) {\n      ctx.save();\n\n      const display = element.display ?? true;\n      if (display && intersects(getBoundsWithRotation(element), bound)) {\n        const renderFn =\n          this.elementRenderers[\n            element.type as keyof typeof this.elementRenderers\n          ];\n\n        if (!renderFn) {\n          console.warn(`Cannot find renderer for ${element.type}`);\n          ctx.restore();\n          continue;\n        }\n\n        ctx.globalAlpha = element.opacity ?? 1;\n        const dx = element.x - bound.x;\n        const dy = element.y - bound.y;\n\n        renderFn(element, ctx, matrix.translate(dx, dy), this, rc, bound);\n      }\n\n      ctx.restore();\n    }\n\n    if (overLay) {\n      for (const overlay of this._overlays) {\n        ctx.save();\n        ctx.translate(-bound.x, -bound.y);\n        overlay.render(ctx, rc);\n        ctx.restore();\n      }\n    }\n\n    ctx.restore();\n  }\n\n  private _resetSize() {\n    const sizeUpdater = this._canvasSizeUpdater();\n\n    sizeUpdater.update(this.canvas);\n\n    this._stackingCanvas.forEach(sizeUpdater.update);\n    this.refresh();\n  }\n\n  addOverlay(overlay: Overlay) {\n    overlay.setRenderer(this);\n    this._overlays.add(overlay);\n    this.refresh();\n  }\n\n  /**\n   * Used to attach main canvas, main canvas will always exist\n   * @param container\n   */\n  attach(container: HTMLElement) {\n    this._container = container;\n    container.append(this.canvas);\n\n    this._resetSize();\n    this.refresh();\n  }\n\n  dispose(): void {\n    this._disposables.dispose();\n  }\n\n  generateColorProperty(color: Color, fallback: string) {\n    return (\n      this.provider.generateColorProperty?.(color, fallback) ??\n      (fallback.startsWith('--') ? `var(${fallback})` : fallback)\n    );\n  }\n\n  getCanvasByBound(\n    bound: IBound = this.viewport.viewportBounds,\n    surfaceElements?: SurfaceElementModel[],\n    canvas?: HTMLCanvasElement,\n    clearBeforeDrawing?: boolean,\n    withZoom?: boolean\n  ): HTMLCanvasElement {\n    canvas = canvas || document.createElement('canvas');\n\n    const dpr = window.devicePixelRatio || 1;\n    if (canvas.width !== bound.w * dpr) canvas.width = bound.w * dpr;\n    if (canvas.height !== bound.h * dpr) canvas.height = bound.h * dpr;\n\n    canvas.style.width = `${bound.w}px`;\n    canvas.style.height = `${bound.h}px`;\n\n    const ctx = canvas.getContext('2d') as CanvasRenderingContext2D;\n    const matrix = new DOMMatrix().scaleSelf(\n      withZoom ? dpr * this.viewport.zoom : dpr\n    );\n    const rc = new RoughCanvas(canvas);\n\n    if (clearBeforeDrawing) ctx.clearRect(0, 0, canvas.width, canvas.height);\n    ctx.setTransform(matrix);\n\n    this._renderByBound(ctx, matrix, rc, bound, surfaceElements);\n\n    return canvas;\n  }\n\n  getColorScheme() {\n    return this.provider.getColorScheme?.() ?? ColorScheme.Light;\n  }\n\n  getColorValue(color: Color, fallback?: string, real?: boolean) {\n    return (\n      this.provider.getColorValue?.(color, fallback, real) ?? 'transparent'\n    );\n  }\n\n  getPropertyValue(property: string) {\n    return this.provider.getPropertyValue?.(property) ?? '';\n  }\n\n  refresh() {\n    if (this._refreshRafId !== null) return;\n\n    this._refreshRafId = requestConnectedFrame(() => {\n      this._refreshRafId = null;\n      this._render();\n    }, this._container);\n  }\n\n  removeOverlay(overlay: Overlay) {\n    if (!this._overlays.has(overlay)) {\n      return;\n    }\n\n    overlay.setRenderer(null);\n    this._overlays.delete(overlay);\n    this.refresh();\n  }\n}\n"]}