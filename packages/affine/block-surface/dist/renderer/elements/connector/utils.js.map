{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../../../src/renderer/elements/connector/utils.ts"],"names":[],"mappings":"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","sourcesContent":["import type {\n  BezierCurveParameters,\n  IVec,\n  PointLocation,\n} from '@blocksuite/global/utils';\n\nimport {\n  type ConnectorElementModel,\n  ConnectorMode,\n  type LocalConnectorElementModel,\n} from '@blocksuite/affine-model';\nimport {\n  getBezierParameters,\n  getBezierTangent,\n  Vec,\n} from '@blocksuite/global/utils';\n\nimport type { RoughCanvas } from '../../../utils/rough/canvas.js';\n\ntype ConnectorEnd = 'Front' | 'Rear';\n\nexport const DEFAULT_ARROW_SIZE = 15;\n\nexport function getArrowPoints(\n  points: PointLocation[],\n  size = 10,\n  mode: ConnectorMode,\n  bezierParameters: BezierCurveParameters,\n  endPoint: ConnectorEnd = 'Rear',\n  radians: number = Math.PI / 4\n) {\n  const anchorPoint = getPointWithTangent(\n    points,\n    mode,\n    endPoint,\n    bezierParameters\n  );\n  const unit = Vec.mul(anchorPoint.tangent, -1);\n  const angle = endPoint === 'Front' ? Math.PI : 0;\n\n  return {\n    points: [\n      Vec.add(Vec.mul(Vec.rot(unit, angle + radians), size), anchorPoint),\n      anchorPoint,\n      Vec.add(Vec.mul(Vec.rot(unit, angle - radians), size), anchorPoint),\n    ],\n  };\n}\n\nexport function getCircleCenterPoint(\n  points: PointLocation[],\n  radius = 5,\n  mode: ConnectorMode,\n  bezierParameters: BezierCurveParameters,\n  endPoint: ConnectorEnd = 'Rear'\n) {\n  const anchorPoint = getPointWithTangent(\n    points,\n    mode,\n    endPoint,\n    bezierParameters\n  );\n\n  const unit = Vec.mul(anchorPoint.tangent, -1);\n  const angle = endPoint === 'Front' ? Math.PI : 0;\n\n  return Vec.add(Vec.mul(Vec.rot(unit, angle), radius), anchorPoint);\n}\n\nexport function getPointWithTangent(\n  points: PointLocation[],\n  mode: ConnectorMode,\n  endPoint: ConnectorEnd,\n  bezierParameters: BezierCurveParameters\n) {\n  const anchorIndex = endPoint === 'Rear' ? points.length - 1 : 0;\n  const pointToAnchorIndex =\n    endPoint === 'Rear' ? anchorIndex - 1 : anchorIndex + 1;\n  const anchorPoint = points[anchorIndex];\n  const pointToAnchor = points[pointToAnchorIndex];\n\n  const clone = anchorPoint.clone();\n  let tangent;\n  if (mode !== ConnectorMode.Curve) {\n    tangent =\n      endPoint === 'Rear'\n        ? Vec.tangent(anchorPoint, pointToAnchor)\n        : Vec.tangent(pointToAnchor, anchorPoint);\n  } else {\n    tangent =\n      endPoint === 'Rear'\n        ? getBezierTangent(bezierParameters, 1)\n        : getBezierTangent(bezierParameters, 0);\n  }\n  clone.tangent = tangent ?? [0, 0];\n\n  return clone;\n}\n\nexport function getDiamondPoints(\n  point: PointLocation,\n  size = 10,\n  endPoint: ConnectorEnd = 'Rear'\n) {\n  const unit = Vec.mul(point.tangent, -1);\n  const angle = endPoint === 'Front' ? Math.PI : 0;\n\n  const diamondPoints = [\n    Vec.add(Vec.mul(Vec.rot(unit, angle + Math.PI * 0.25), size), point),\n    point,\n    Vec.add(Vec.mul(Vec.rot(unit, angle - Math.PI * 0.25), size), point),\n    Vec.add(Vec.mul(Vec.rot(unit, angle), size * Math.sqrt(2)), point),\n  ];\n\n  return {\n    points: diamondPoints,\n  };\n}\n\nexport type ArrowOptions = ReturnType<typeof getArrowOptions>;\n\nexport function getArrowOptions(\n  end: ConnectorEnd,\n  model: ConnectorElementModel | LocalConnectorElementModel,\n  strokeColor: string\n) {\n  const { seed, mode, rough, roughness, strokeWidth, path } = model;\n\n  return {\n    end,\n    seed,\n    mode,\n    rough,\n    roughness,\n    strokeWidth,\n    strokeColor,\n    fillColor: strokeColor,\n    fillStyle: 'solid',\n    bezierParameters: getBezierParameters(path),\n  };\n}\n\nexport function getRcOptions(options: ArrowOptions) {\n  const { seed, roughness, strokeWidth, strokeColor, fillColor } = options;\n  return {\n    seed,\n    roughness,\n    stroke: strokeColor,\n    strokeWidth,\n    fill: fillColor,\n    fillStyle: 'solid',\n  };\n}\n\nexport function renderRoundedPolygon(\n  ctx: CanvasRenderingContext2D,\n  points: IVec[],\n  color: string,\n  strokeWidth: number,\n  fill: boolean = true\n) {\n  ctx.fillStyle = color;\n  ctx.strokeStyle = color;\n  ctx.lineWidth = strokeWidth;\n  ctx.lineJoin = 'round';\n  ctx.lineCap = 'round';\n  ctx.save();\n  ctx.beginPath();\n\n  for (let i = 0; i < points.length; i++) {\n    if (i === 0) {\n      ctx.moveTo(points[i][0], points[i][1]);\n    } else {\n      ctx.lineTo(points[i][0], points[i][1]);\n    }\n  }\n\n  if (fill) {\n    ctx.closePath();\n    ctx.fill();\n  }\n\n  ctx.stroke();\n  ctx.restore();\n}\n\nexport function renderArrow(\n  points: PointLocation[],\n  ctx: CanvasRenderingContext2D,\n  rc: RoughCanvas,\n  options: ArrowOptions\n) {\n  const { mode, end, bezierParameters, rough, strokeColor, strokeWidth } =\n    options;\n  const radians = Math.PI / 4;\n  const size = DEFAULT_ARROW_SIZE * (strokeWidth / 2);\n  const { points: arrowPoints } = getArrowPoints(\n    points,\n    size,\n    mode,\n    bezierParameters,\n    end,\n    radians\n  );\n\n  if (rough) {\n    rc.linearPath(arrowPoints as [number, number][], getRcOptions(options));\n  } else {\n    renderRoundedPolygon(ctx, arrowPoints, strokeColor, strokeWidth, false);\n  }\n}\n\nexport function renderTriangle(\n  points: PointLocation[],\n  ctx: CanvasRenderingContext2D,\n  rc: RoughCanvas,\n  options: ArrowOptions\n) {\n  const { mode, end, bezierParameters, rough, strokeColor, strokeWidth } =\n    options;\n  const radians = Math.PI / 6;\n  const size = DEFAULT_ARROW_SIZE * (strokeWidth / 2);\n  const { points: trianglePoints } = getArrowPoints(\n    points,\n    size,\n    mode,\n    bezierParameters,\n    end,\n    radians\n  );\n\n  if (rough) {\n    rc.polygon(\n      [\n        [trianglePoints[0][0], trianglePoints[0][1]],\n        [trianglePoints[1][0], trianglePoints[1][1]],\n        [trianglePoints[2][0], trianglePoints[2][1]],\n      ],\n      getRcOptions(options)\n    );\n  } else {\n    renderRoundedPolygon(ctx, trianglePoints, strokeColor, strokeWidth);\n  }\n}\n\nexport function renderDiamond(\n  points: PointLocation[],\n  ctx: CanvasRenderingContext2D,\n  rc: RoughCanvas,\n  options: ArrowOptions\n) {\n  const { mode, end, rough, bezierParameters, strokeColor, strokeWidth } =\n    options;\n  const anchorPoint = getPointWithTangent(points, mode, end, bezierParameters);\n  const size = 10 * (strokeWidth / 2);\n  const { points: diamondPoints } = getDiamondPoints(anchorPoint, size, end);\n\n  if (rough) {\n    rc.polygon(\n      [\n        [diamondPoints[0][0], diamondPoints[0][1]],\n        [diamondPoints[1][0], diamondPoints[1][1]],\n        [diamondPoints[2][0], diamondPoints[2][1]],\n        [diamondPoints[3][0], diamondPoints[3][1]],\n      ],\n      getRcOptions(options)\n    );\n  } else {\n    renderRoundedPolygon(ctx, diamondPoints, strokeColor, strokeWidth);\n  }\n}\n\nexport function renderCircle(\n  points: PointLocation[],\n  ctx: CanvasRenderingContext2D,\n  rc: RoughCanvas,\n  options: ArrowOptions\n) {\n  const {\n    bezierParameters,\n    mode,\n    end,\n    fillColor,\n    strokeColor,\n    strokeWidth,\n    rough,\n  } = options;\n  const radius = 5 * (strokeWidth / 2);\n  const centerPoint = getCircleCenterPoint(\n    points,\n    radius,\n    mode,\n    bezierParameters,\n    end\n  );\n  const cx = centerPoint[0];\n  const cy = centerPoint[1];\n\n  if (rough) {\n    // radius + 2 when render rough circle to avoid connector line cross the circle and make it looks bad\n    rc.circle(cx, cy, radius + 2, getRcOptions(options));\n  } else {\n    ctx.fillStyle = fillColor;\n    ctx.strokeStyle = strokeColor;\n    ctx.lineWidth = strokeWidth;\n    ctx.save();\n    ctx.beginPath();\n    ctx.ellipse(cx, cy, radius, radius, 0, 0, 2 * Math.PI);\n    ctx.closePath();\n    ctx.fill();\n    ctx.stroke();\n    ctx.restore();\n  }\n}\n"]}