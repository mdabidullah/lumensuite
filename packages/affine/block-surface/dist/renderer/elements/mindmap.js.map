{"version":3,"file":"mindmap.js","sourceRoot":"","sources":["../../../src/renderer/elements/mindmap.ts"],"names":[],"mappings":"AAOA,OAAO,EAAE,sBAAsB,EAAE,MAAM,qCAAqC,CAAC;AAC7E,OAAO,EAAE,SAAS,IAAI,eAAe,EAAE,MAAM,sBAAsB,CAAC;AAEpE,MAAM,UAAU,OAAO,CACrB,KAA0B,EAC1B,GAA6B,EAC7B,MAAiB,EACjB,QAAwB,EACxB,EAAe,EACf,KAAa;IAEb,MAAM,EAAE,GAAG,KAAK,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC;IAC7B,MAAM,EAAE,GAAG,KAAK,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC;IAE7B,MAAM,GAAG,MAAM,CAAC,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC;IAEpC,KAAK,CAAC,QAAQ,CAAC,CAAC,EAAE,EAAE,IAAI,EAAE,EAAE;QAC1B,IAAI,IAAI,EAAE,CAAC;YACT,MAAM,SAAS,GAAG,KAAK,CAAC,YAAY,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;YAC/C,IAAI,CAAC,SAAS;gBAAE,OAAO;YAEvB,MAAM,aAAa,GAAG,CAAC,EAAU,EAAE,EAAE,CACnC,KAAK,CAAC,OAAO,CAAC,cAAc,CAAC,EAAE,CAAC;gBAC/B,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,YAAY,CAAC,EAAE,CAAc,CAAC;YACnD,sBAAsB,CAAC,UAAU,CAAC,SAAS,EAAE,IAAI,EAAE,aAAa,CAAC,CAAC;YAElE,IAAI,SAAS,EAAE,CAAC;gBACd,MAAM,EAAE,GAAG,SAAS,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC;gBACjC,MAAM,EAAE,GAAG,SAAS,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC;gBACjC,MAAM,MAAM,GAAG,GAAG,CAAC,WAAW,CAAC;gBAC/B,MAAM,oBAAoB,GAAG,MAAM,KAAK,SAAS,CAAC,OAAO,CAAC;gBAE1D,IAAI,oBAAoB,EAAE,CAAC;oBACzB,GAAG,CAAC,WAAW,GAAG,SAAS,CAAC,OAAO,CAAC;gBACtC,CAAC;gBAED,eAAe,CAAC,SAAS,EAAE,GAAG,EAAE,MAAM,CAAC,SAAS,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,QAAQ,EAAE,EAAE,CAAC,CAAC;gBAExE,IAAI,oBAAoB,EAAE,CAAC;oBACzB,GAAG,CAAC,WAAW,GAAG,MAAM,CAAC;gBAC3B,CAAC;YACH,CAAC;QACH,CAAC;IACH,CAAC,CAAC,CAAC;IAEH,KAAK,CAAC,eAAe,CAAC,OAAO,CAAC,SAAS,CAAC,EAAE;QACxC,MAAM,EAAE,GAAG,SAAS,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC;QACjC,MAAM,EAAE,GAAG,SAAS,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC;QAEjC,eAAe,CAAC,SAAS,EAAE,GAAG,EAAE,MAAM,CAAC,SAAS,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,QAAQ,EAAE,EAAE,CAAC,CAAC;IAC1E,CAAC,CAAC,CAAC;AACL,CAAC","sourcesContent":["import type { GfxModel } from '@lumensuite/block-std/gfx';\nimport type { IBound } from '@lumensuite/global/utils';\n\nimport type { MindmapElementModel } from '../../element-model/mindmap.js';\nimport type { RoughCanvas } from '../../utils/rough/canvas.js';\nimport type { CanvasRenderer } from '../canvas-renderer.js';\n\nimport { ConnectorPathGenerator } from '../../managers/connector-manager.js';\nimport { connector as renderConnector } from './connector/index.js';\n\nexport function mindmap(\n  model: MindmapElementModel,\n  ctx: CanvasRenderingContext2D,\n  matrix: DOMMatrix,\n  renderer: CanvasRenderer,\n  rc: RoughCanvas,\n  bound: IBound\n) {\n  const dx = model.x - bound.x;\n  const dy = model.y - bound.y;\n\n  matrix = matrix.translate(-dx, -dy);\n\n  model.traverse((to, from) => {\n    if (from) {\n      const connector = model.getConnector(from, to);\n      if (!connector) return;\n\n      const elementGetter = (id: string) =>\n        model.surface.getElementById(id) ??\n        (model.surface.doc.getBlockById(id) as GfxModel);\n      ConnectorPathGenerator.updatePath(connector, null, elementGetter);\n\n      if (connector) {\n        const dx = connector.x - bound.x;\n        const dy = connector.y - bound.y;\n        const origin = ctx.globalAlpha;\n        const shouldSetGlobalAlpha = origin !== connector.opacity;\n\n        if (shouldSetGlobalAlpha) {\n          ctx.globalAlpha = connector.opacity;\n        }\n\n        renderConnector(connector, ctx, matrix.translate(dx, dy), renderer, rc);\n\n        if (shouldSetGlobalAlpha) {\n          ctx.globalAlpha = origin;\n        }\n      }\n    }\n  });\n\n  model.extraConnectors.forEach(connector => {\n    const dx = connector.x - bound.x;\n    const dy = connector.y - bound.y;\n\n    renderConnector(connector, ctx, matrix.translate(dx, dy), renderer, rc);\n  });\n}\n"]}