{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../../../src/renderer/elements/text/utils.ts"],"names":[],"mappings":"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","sourcesContent":["import type {\n  FontFamily,\n  FontStyle,\n  FontWeight,\n  TextElementModel,\n} from '@lumensuite/affine-model';\nimport type { Bound } from '@lumensuite/global/utils';\nimport type { Y } from '@lumensuite/store';\n\nimport {\n  getPointsFromBoundsWithRotation,\n  rotatePoints,\n} from '@lumensuite/global/utils';\n\nimport {\n  getFontFacesByFontFamily,\n  wrapFontFamily,\n} from '../../../utils/font.js';\n\nexport type TextDelta = {\n  insert: string;\n  attributes?: Record<string, unknown>;\n};\n\nconst getMeasureCtx = (function initMeasureContext() {\n  let ctx: CanvasRenderingContext2D | null = null;\n  let canvas: HTMLCanvasElement | null = null;\n\n  return () => {\n    if (!canvas) {\n      canvas = document.createElement('canvas');\n      ctx = canvas.getContext('2d')!;\n    }\n\n    return ctx!;\n  };\n})();\n\nconst textMeasureCache = new Map<\n  string,\n  {\n    lineHeight: number;\n    lineGap: number;\n    fontSize: number;\n  }\n>();\n\nexport function measureTextInDOM(\n  fontFamily: string,\n  fontSize: number,\n  fontWeight: string\n) {\n  const cacheKey = `${wrapFontFamily(fontFamily)}-${fontWeight}`;\n\n  if (textMeasureCache.has(cacheKey)) {\n    const {\n      fontSize: cacheFontSize,\n      lineGap,\n      lineHeight,\n    } = textMeasureCache.get(cacheKey)!;\n\n    return {\n      lineHeight: lineHeight * (fontSize / cacheFontSize),\n      lineGap: lineGap * (fontSize / cacheFontSize),\n    };\n  }\n\n  const div = document.createElement('div');\n  const span = document.createElement('span');\n\n  div.append(span);\n\n  span.innerText = 'x';\n\n  div.style.position = 'absolute';\n  div.style.top = '0px';\n  div.style.left = '0px';\n  div.style.visibility = 'hidden';\n  div.style.fontFamily = wrapFontFamily(fontFamily);\n  div.style.fontWeight = fontWeight;\n  div.style.fontSize = `${fontSize}px`;\n\n  div.style.pointerEvents = 'none';\n\n  document.body.append(div);\n\n  const lineHeight = span.getBoundingClientRect().height;\n  const height = div.getBoundingClientRect().height;\n  const result = {\n    lineHeight,\n    lineGap: height - lineHeight,\n  };\n\n  div.remove();\n\n  textMeasureCache.set(cacheKey, {\n    ...result,\n    fontSize,\n  });\n\n  return result;\n}\n\nexport function getFontString({\n  fontStyle,\n  fontWeight,\n  fontSize,\n  fontFamily,\n}: {\n  fontStyle: string;\n  fontWeight: string;\n  fontSize: number;\n  fontFamily: string;\n}): string {\n  const lineHeight = getLineHeight(fontFamily, fontSize, fontWeight);\n  return `${fontStyle} ${fontWeight} ${fontSize}px/${lineHeight}px ${wrapFontFamily(\n    fontFamily\n  )}, sans-serif`.trim();\n}\n\nexport function getLineHeight(\n  fontFamily: string,\n  fontSize: number,\n  fontWeight: string\n): number {\n  const { lineHeight } = measureTextInDOM(fontFamily, fontSize, fontWeight);\n  return lineHeight;\n}\n\ntype Writeable<T> = { -readonly [P in keyof T]: T[P] };\n\ntype TextMetricsLike = Writeable<TextMetrics>;\n\nconst metricsCache = new Map<\n  string,\n  {\n    fontSize: number;\n    metrics: TextMetrics;\n  }\n>();\nexport function getFontMetrics(\n  fontFamily: string,\n  fontSize: number,\n  fontWeight: string\n) {\n  const ctx = getMeasureCtx();\n  const cacheKey = `${wrapFontFamily(fontFamily)}-${fontWeight}`;\n\n  if (metricsCache.has(cacheKey)) {\n    const { fontSize: cacheFontSize, metrics } = metricsCache.get(cacheKey)!;\n\n    return Object.keys(Object.getPrototypeOf(metrics)).reduce((acc, key) => {\n      acc[key as keyof TextMetrics] =\n        metrics[key as keyof TextMetrics] * (fontSize / cacheFontSize);\n      return acc;\n    }, {} as TextMetricsLike);\n  }\n\n  const font = `${fontWeight} ${fontSize}px ${wrapFontFamily(fontFamily)}`;\n  ctx.font = font;\n  const metrics = ctx.measureText('x');\n\n  // check if font does not fallback\n  if (ctx.font === font) {\n    metricsCache.set(cacheKey, {\n      fontSize,\n      metrics,\n    });\n  }\n\n  return metrics;\n}\n\nfunction transformDelta(delta: TextDelta): (TextDelta | '\\n')[] {\n  const result: (TextDelta | '\\n')[] = [];\n\n  let tmpString = delta.insert;\n  while (tmpString.length > 0) {\n    const index = tmpString.indexOf('\\n');\n    if (index === -1) {\n      result.push({\n        insert: tmpString,\n        attributes: delta.attributes,\n      });\n      break;\n    }\n\n    if (tmpString.slice(0, index).length > 0) {\n      result.push({\n        insert: tmpString.slice(0, index),\n        attributes: delta.attributes,\n      });\n    }\n\n    result.push('\\n');\n    tmpString = tmpString.slice(index + 1);\n  }\n\n  return result;\n}\n\n/**\n * convert a delta insert array to chunks, each chunk is a line\n */\nexport function deltaInsertsToChunks(delta: TextDelta[]): TextDelta[][] {\n  if (delta.length === 0) {\n    return [[]];\n  }\n\n  const transformedDelta = delta.flatMap(transformDelta);\n\n  function* chunksGenerator(arr: (TextDelta | '\\n')[]) {\n    let start = 0;\n    for (let i = 0; i < arr.length; i++) {\n      if (arr[i] === '\\n') {\n        const chunk = arr.slice(start, i);\n        start = i + 1;\n        yield chunk as TextDelta[];\n      } else if (i === arr.length - 1) {\n        yield arr.slice(start) as TextDelta[];\n      }\n    }\n\n    if (arr.at(-1) === '\\n') {\n      yield [];\n    }\n  }\n\n  return Array.from(chunksGenerator(transformedDelta));\n}\n\nconst RS_LTR_CHARS =\n  'A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02B8\\u0300-\\u0590\\u0800-\\u1FFF' +\n  '\\u2C00-\\uFB1C\\uFDFE-\\uFE6F\\uFEFD-\\uFFFF';\nconst RS_RTL_CHARS = '\\u0591-\\u07FF\\uFB1D-\\uFDFD\\uFE70-\\uFEFC';\n// eslint-disable-next-line no-misleading-character-class\nconst RE_RTL_CHECK = new RegExp(`^[^${RS_LTR_CHARS}]*[${RS_RTL_CHARS}]`);\nexport function isRTL(text: string) {\n  return RE_RTL_CHECK.test(text);\n}\n\nexport function normalizeText(text: string): string {\n  return (\n    text\n      // replace tabs with spaces so they render and measure correctly\n      .replace(/\\t/g, '        ')\n      // normalize newlines\n      .replace(/\\r?\\n|\\r/g, '\\n')\n  );\n}\n\nexport function splitIntoLines(text: string): string[] {\n  return normalizeText(text).split('\\n');\n}\n\nexport function getLineWidth(text: string, font: string): number {\n  const ctx = getMeasureCtx();\n  if (font !== ctx.font) ctx.font = font;\n  const width = ctx.measureText(text).width;\n\n  return width;\n}\n\nexport function getTextWidth(text: string, font: string): number {\n  const lines = splitIntoLines(text);\n  let width = 0;\n  lines.forEach(line => {\n    width = Math.max(width, getLineWidth(line, font));\n  });\n  return width;\n}\n\nexport function wrapTextDeltas(text: Y.Text, font: string, w: number) {\n  const deltas: TextDelta[] = (text.toDelta() as TextDelta[]).flatMap(\n    delta => ({\n      insert: wrapText(delta.insert, font, w),\n      attributes: delta.attributes,\n    })\n  ) as TextDelta[];\n\n  return deltas;\n}\n\nexport const charWidth = (() => {\n  const cachedCharWidth: Record<string, Array<number>> = {};\n\n  const calculate = (char: string, font: string) => {\n    const ascii = char.charCodeAt(0);\n    if (!cachedCharWidth[font]) {\n      cachedCharWidth[font] = [];\n    }\n    if (!cachedCharWidth[font][ascii]) {\n      const width = getLineWidth(char, font);\n      cachedCharWidth[font][ascii] = width;\n    }\n\n    return cachedCharWidth[font][ascii];\n  };\n\n  const getCache = (font: string) => {\n    return cachedCharWidth[font];\n  };\n  return {\n    calculate,\n    getCache,\n  };\n})();\n\nexport function parseTokens(text: string): string[] {\n  // Splitting words containing \"-\" as those are treated as separate words\n  // by css wrapping algorithm eg non-profit => non-, profit\n  const words = text.split('-');\n  if (words.length > 1) {\n    // non-proft org => ['non-', 'profit org']\n    words.forEach((word, index) => {\n      if (index !== words.length - 1) {\n        words[index] = word += '-';\n      }\n    });\n  }\n  // Joining the words with space and splitting them again with space to get the\n  // final list of tokens\n  // ['non-', 'profit org'] =>,'non- proft org' => ['non-','profit','org']\n  return words.join(' ').split(' ');\n}\n\nexport function wrapText(text: string, font: string, maxWidth: number): string {\n  // if maxWidth is not finite or NaN which can happen in case of bugs in\n  // computation, we need to make sure we don't continue as we'll end up\n  // in an infinite loop\n  if (!Number.isFinite(maxWidth) || maxWidth < 0) {\n    return text;\n  }\n\n  const lines: Array<string> = [];\n  const originalLines = text.split('\\n');\n  const spaceWidth = getLineWidth(' ', font);\n\n  let currentLine = '';\n  let currentLineWidthTillNow = 0;\n\n  const push = (str: string) => {\n    if (str.trim()) {\n      lines.push(str);\n    }\n  };\n\n  const resetParams = () => {\n    currentLine = '';\n    currentLineWidthTillNow = 0;\n  };\n  originalLines.forEach(originalLine => {\n    const currentLineWidth = getTextWidth(originalLine, font);\n\n    // Push the line if its <= maxWidth\n    if (currentLineWidth <= maxWidth) {\n      lines.push(originalLine);\n      return; // continue\n    }\n\n    const words = parseTokens(originalLine);\n    resetParams();\n\n    let index = 0;\n\n    while (index < words.length) {\n      const currentWordWidth = getLineWidth(words[index], font);\n\n      // This will only happen when single word takes entire width\n      if (currentWordWidth === maxWidth) {\n        push(words[index]);\n        index++;\n      }\n\n      // Start breaking longer words exceeding max width\n      else if (currentWordWidth > maxWidth) {\n        // push current line since the current word exceeds the max width\n        // so will be appended in next line\n\n        push(currentLine);\n\n        resetParams();\n\n        while (words[index].length > 0) {\n          const currentChar = String.fromCodePoint(\n            words[index].codePointAt(0)!\n          );\n          const width = charWidth.calculate(currentChar, font);\n          currentLineWidthTillNow += width;\n          words[index] = words[index].slice(currentChar.length);\n\n          if (currentLineWidthTillNow >= maxWidth) {\n            push(currentLine);\n            currentLine = currentChar;\n            currentLineWidthTillNow = width;\n          } else {\n            currentLine += currentChar;\n          }\n        }\n        // push current line if appending space exceeds max width\n        if (currentLineWidthTillNow + spaceWidth >= maxWidth) {\n          push(currentLine);\n          resetParams();\n          // space needs to be appended before next word\n          // as currentLine contains chars which couldn't be appended\n          // to previous line unless the line ends with hyphen to sync\n          // with css word-wrap\n        } else if (!currentLine.endsWith('-')) {\n          currentLine += ' ';\n          currentLineWidthTillNow += spaceWidth;\n        }\n        index++;\n      } else {\n        // Start appending words in a line till max width reached\n        while (currentLineWidthTillNow < maxWidth && index < words.length) {\n          const word = words[index];\n          currentLineWidthTillNow = getLineWidth(currentLine + word, font);\n\n          if (currentLineWidthTillNow > maxWidth) {\n            push(currentLine);\n            resetParams();\n\n            break;\n          }\n          index++;\n\n          // if word ends with \"-\" then we don't need to add space\n          // to sync with css word-wrap\n          const shouldAppendSpace = !word.endsWith('-');\n          currentLine += word;\n\n          if (shouldAppendSpace) {\n            currentLine += ' ';\n          }\n\n          // Push the word if appending space exceeds max width\n          if (currentLineWidthTillNow + spaceWidth >= maxWidth) {\n            if (shouldAppendSpace) {\n              lines.push(currentLine.slice(0, -1));\n            } else {\n              lines.push(currentLine);\n            }\n            resetParams();\n            break;\n          }\n        }\n      }\n    }\n    if (currentLine.slice(-1) === ' ') {\n      // only remove last trailing space which we have added when joining words\n      currentLine = currentLine.slice(0, -1);\n      push(currentLine);\n    }\n  });\n  return lines.join('\\n');\n}\n\nexport const truncateTextByWidth = (\n  text: string,\n  font: string,\n  width: number\n) => {\n  let totalWidth = 0;\n  let i = 0;\n  for (; i < text.length; i++) {\n    const char = text[i];\n    totalWidth += charWidth.calculate(char, font);\n    if (totalWidth > width) {\n      break;\n    }\n  }\n  return text.slice(0, i);\n};\n\nexport function getTextCursorPosition(\n  model: TextElementModel,\n  coord: { x: number; y: number }\n) {\n  const leftTop = getPointsFromBoundsWithRotation(model)[0];\n  const mousePos = rotatePoints(\n    [[coord.x, coord.y]],\n    leftTop,\n    -model.rotate\n  )[0];\n\n  return [\n    Math.floor(\n      (mousePos[1] - leftTop[1]) /\n        getLineHeight(model.fontFamily, model.fontSize, model.fontWeight)\n    ),\n    mousePos[0] - leftTop[0],\n  ];\n}\n\nexport function getCursorByCoord(\n  model: TextElementModel,\n  coord: { x: number; y: number }\n) {\n  const [lineIndex, offsetX] = getTextCursorPosition(model, coord);\n\n  const font = getFontString(model);\n  const deltas = wrapTextDeltas(model.text, font, model.w);\n  const lines = deltaInsertsToChunks(deltas).map(line =>\n    line.map(iTextDelta => iTextDelta.insert).join('')\n  );\n  const string = lines[lineIndex];\n\n  let index = lines.slice(0, lineIndex).join('').length - 1;\n  let currentStringWidth = 0;\n  let charIndex = 0;\n  while (currentStringWidth < offsetX) {\n    index += 1;\n    if (charIndex === string.length) {\n      break;\n    }\n    currentStringWidth += charWidth.calculate(string[charIndex], font);\n    charIndex += 1;\n  }\n  return index;\n}\n\nexport function normalizeTextBound(\n  {\n    yText,\n    fontStyle,\n    fontWeight,\n    fontSize,\n    fontFamily,\n    hasMaxWidth,\n    maxWidth,\n  }: {\n    yText: Y.Text;\n    fontStyle: FontStyle;\n    fontWeight: FontWeight;\n    fontSize: number;\n    fontFamily: FontFamily;\n    hasMaxWidth?: boolean;\n    maxWidth?: number;\n  },\n  bound: Bound,\n  dragging: boolean = false\n): Bound {\n  if (!yText) return bound;\n\n  const lineHeightPx = getLineHeight(fontFamily, fontSize, fontWeight);\n  const font = getFontString({\n    fontStyle,\n    fontWeight,\n    fontSize,\n    fontFamily,\n  });\n\n  let lines: TextDelta[][] = [];\n  const deltas: TextDelta[] = yText.toDelta() as TextDelta[];\n  const text = yText.toString();\n  const widestCharWidth =\n    [...text]\n      .map(char => getTextWidth(char, font))\n      .sort((a, b) => a - b)\n      .pop() ?? getTextWidth('W', font);\n\n  if (bound.w < widestCharWidth) {\n    bound.w = widestCharWidth;\n  }\n\n  const width = bound.w;\n  const insertDeltas = deltas.flatMap(delta => ({\n    insert: wrapText(delta.insert, font, width),\n    attributes: delta.attributes,\n  })) as TextDelta[];\n  lines = deltaInsertsToChunks(insertDeltas);\n  if (!dragging) {\n    lines = deltaInsertsToChunks(deltas);\n    const widestLineWidth = Math.max(\n      ...text.split('\\n').map(line => getTextWidth(line, font))\n    );\n    bound.w = widestLineWidth;\n    if (hasMaxWidth && maxWidth && maxWidth > 0) {\n      bound.w = Math.min(bound.w, maxWidth);\n    }\n  }\n  bound.h = lineHeightPx * lines.length;\n\n  return bound;\n}\n\nexport function isFontWeightSupported(\n  fontFamily: FontFamily | string,\n  weight: FontWeight\n) {\n  const fontFaces = getFontFacesByFontFamily(fontFamily);\n  const fontFace = fontFaces.find(fontFace => fontFace.weight === weight);\n  return !!fontFace;\n}\n\nexport function isFontStyleSupported(\n  fontFamily: FontFamily | string,\n  style: FontStyle\n) {\n  const fontFaces = getFontFacesByFontFamily(fontFamily);\n  const fontFace = fontFaces.find(fontFace => fontFace.style === style);\n  return !!fontFace;\n}\n"]}