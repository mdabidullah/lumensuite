{"version":3,"file":"ellipse.js","sourceRoot":"","sources":["../../../../src/renderer/elements/shape/ellipse.ts"],"names":[],"mappings":"AAKA,OAAO,EAAe,gBAAgB,EAAE,MAAM,YAAY,CAAC;AAE3D,MAAM,UAAU,OAAO,CACrB,KAAwB,EACxB,GAA6B,EAC7B,MAAiB,EACjB,QAAwB,EACxB,EAAe,EACf,MAAc;IAEd,MAAM,EACJ,IAAI,EACJ,WAAW,EACX,MAAM,EACN,WAAW,EACX,SAAS,EACT,MAAM,EACN,UAAU,GACX,GAAG,KAAK,CAAC;IACV,MAAM,CAAC,EAAE,AAAD,EAAG,CAAC,EAAE,CAAC,CAAC,GAAG,KAAK,CAAC,gBAAgB,CAAC;IAC1C,MAAM,YAAY,GAAG,IAAI,CAAC,GAAG,CAAC,WAAW,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC;IAClD,MAAM,WAAW,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,YAAY,GAAG,CAAC,CAAC,CAAC;IACtD,MAAM,YAAY,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,YAAY,GAAG,CAAC,CAAC,CAAC;IACvD,MAAM,EAAE,GAAG,WAAW,GAAG,CAAC,CAAC;IAC3B,MAAM,EAAE,GAAG,YAAY,GAAG,CAAC,CAAC;IAE5B,MAAM,EAAE,SAAS,EAAE,WAAW,EAAE,GAAG,MAAM,CAAC;IAE1C,GAAG,CAAC,YAAY,CACd,MAAM;SACH,aAAa,CAAC,YAAY,EAAE,YAAY,CAAC;SACzC,aAAa,CAAC,EAAE,EAAE,EAAE,CAAC;SACrB,UAAU,CAAC,MAAM,CAAC;SAClB,aAAa,CAAC,CAAC,EAAE,EAAE,CAAC,EAAE,CAAC,CAC3B,CAAC;IAEF,IAAI,UAAU,KAAK,SAAS,EAAE,CAAC;QAC7B,gBAAgB,CAAC,GAAG,EAAE,KAAK,EAAE,QAAQ,EAAE,MAAM,EAAE,SAAS,EAAE,WAAW,CAAC,CAAC;IACzE,CAAC;SAAM,CAAC;QACN,EAAE,CAAC,OAAO,CAAC,EAAE,EAAE,EAAE,EAAE,WAAW,EAAE,YAAY,EAAE;YAC5C,IAAI;YACJ,SAAS,EAAE,UAAU,KAAK,WAAW,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;YACrD,cAAc,EAAE,WAAW,KAAK,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,SAAS;YAC7D,MAAM,EAAE,WAAW,KAAK,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,WAAW;YACrD,WAAW;YACX,IAAI,EAAE,MAAM,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,SAAS;YACpC,YAAY,EAAE,CAAC;SAChB,CAAC,CAAC;IACL,CAAC;AACH,CAAC","sourcesContent":["import type { ShapeElementModel } from '@blocksuite/affine-model';\n\nimport type { RoughCanvas } from '../../../utils/rough/canvas.js';\nimport type { CanvasRenderer } from '../../canvas-renderer.js';\n\nimport { type Colors, drawGeneralShape } from './utils.js';\n\nexport function ellipse(\n  model: ShapeElementModel,\n  ctx: CanvasRenderingContext2D,\n  matrix: DOMMatrix,\n  renderer: CanvasRenderer,\n  rc: RoughCanvas,\n  colors: Colors\n) {\n  const {\n    seed,\n    strokeWidth,\n    filled,\n    strokeStyle,\n    roughness,\n    rotate,\n    shapeStyle,\n  } = model;\n  const [, , w, h] = model.deserializedXYWH;\n  const renderOffset = Math.max(strokeWidth, 0) / 2;\n  const renderWidth = Math.max(1, w - renderOffset * 2);\n  const renderHeight = Math.max(1, h - renderOffset * 2);\n  const cx = renderWidth / 2;\n  const cy = renderHeight / 2;\n\n  const { fillColor, strokeColor } = colors;\n\n  ctx.setTransform(\n    matrix\n      .translateSelf(renderOffset, renderOffset)\n      .translateSelf(cx, cy)\n      .rotateSelf(rotate)\n      .translateSelf(-cx, -cy)\n  );\n\n  if (shapeStyle === 'General') {\n    drawGeneralShape(ctx, model, renderer, filled, fillColor, strokeColor);\n  } else {\n    rc.ellipse(cx, cy, renderWidth, renderHeight, {\n      seed,\n      roughness: shapeStyle === 'Scribbled' ? roughness : 0,\n      strokeLineDash: strokeStyle === 'dash' ? [12, 12] : undefined,\n      stroke: strokeStyle === 'none' ? 'none' : strokeColor,\n      strokeWidth,\n      fill: filled ? fillColor : undefined,\n      curveFitting: 1,\n    });\n  }\n}\n"]}