{"version":3,"file":"a-star.js","sourceRoot":"","sources":["../../src/utils/a-star.ts"],"names":[],"mappings":"AAEA,OAAO,EAAE,WAAW,EAAE,YAAY,EAAE,MAAM,0BAA0B,CAAC;AAErE,OAAO,EAAE,KAAK,EAAE,MAAM,YAAY,CAAC;AACnC,OAAO,EAAE,aAAa,EAAE,MAAM,qBAAqB,CAAC;AAEpD,SAAS,IAAI,CAAC,KAAY,EAAE,MAAa;IACvC,OAAO,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;AACzE,CAAC;AAED,SAAS,OAAO,CAAC,CAA2B,EAAE,CAA2B;IACvE,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,GAAG,CAAC,CAAC,CAAC,CAAC;QAAE,OAAO,CAAC,CAAC,CAAC;SAC7B,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,GAAG,CAAC,CAAC,CAAC,CAAC;QAAE,OAAO,CAAC,CAAC;SACjC,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QAAE,OAAO,CAAC,CAAC,CAAC;SAC3B,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QAAE,OAAO,CAAC,CAAC;SAC1B,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QAAE,OAAO,CAAC,CAAC,CAAC;SAC3B,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QAAE,OAAO,CAAC,CAAC;;QAC1B,OAAO,CAAC,CAAC;AAChB,CAAC;AAED,SAAS,SAAS,CAAC,CAAQ,EAAE,CAAQ;IACnC,OAAO,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvD,CAAC;AAED,SAAS,gBAAgB,CAAC,CAAQ,EAAE,IAAW,EAAE,KAAY;IAC3D,IAAI,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC;QAAE,OAAO,CAAC,CAAC;IACxE,IAAI,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC;QAAE,OAAO,CAAC,CAAC;IACxE,OAAO,CAAC,CAAC;AACX,CAAC;AAED,SAAS,gBAAgB,CAAC,CAAQ,EAAE,CAAQ;IAC1C,OAAO,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,IAAI,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;AACxE,CAAC;AAED,MAAM,OAAO,WAAW;IAoBtB,IAAI,IAAI;QACN,MAAM,MAAM,GAAY,EAAE,CAAC;QAC3B,IAAI,OAAO,GAAiB,IAAI,CAAC,SAAS;YACxC,CAAC,CAAC,IAAI,CAAC,WAAW;YAClB,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC;QAClB,MAAM,UAAU,GAAG,CAAC,CAAC,CAAC,CAAC;QACvB,OAAO,OAAO,EAAE,CAAC;YACf,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;YACxB,MAAM,KAAK,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;YAC1C,IAAI,CAAC,KAAK;gBAAE,OAAO,MAAM,CAAC;YAC1B,MAAM,KAAK,GAAG,UAAU,CAAC,KAAK,EAAE,CAAC;YACjC,YAAY,CAAC,KAAK,CAAC,CAAC;YACpB,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;YACrC,OAAO,GAAG,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAC9B,CAAC;QACD,OAAO,MAAM,CAAC;IAChB,CAAC;IAED,YACE,MAAe,EACP,GAAU,EACV,GAAU,EACV,WAAkB,EAClB,WAAkB,EAC1B,SAAkB,EAAE,EACpB,eAAwB,EAAE;QALlB,QAAG,GAAH,GAAG,CAAO;QACV,QAAG,GAAH,GAAG,CAAO;QACV,gBAAW,GAAX,WAAW,CAAO;QAClB,gBAAW,GAAX,WAAW,CAAO;QA1CpB,cAAS,GAAG,IAAI,GAAG,EAA8C,CAAC;QAElE,cAAS,GAAG,KAAK,CAAC;QAElB,eAAU,GAAG,IAAI,GAAG,EAAmB,CAAC;QAExC,aAAQ,GAAiB,IAAI,CAAC;QAE9B,mBAAc,GAAG,IAAI,GAAG,EAAmB,CAAC;QAS5C,mBAAc,GAAG,IAAI,GAAG,EAAmB,CAAC;QA6BlD,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;QAChB,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;QAChB,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;QACxB,IAAI,CAAC,MAAM,GAAG,IAAI,KAAK,CAAC,CAAC,GAAG,MAAM,CAAC,EAAE,MAAM,EAAE,YAAY,CAAC,CAAC;QAC3D,IAAI,CAAC,KAAK,EAAE,CAAC;IACf,CAAC;IAEO,KAAK;QACX,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,EAAE,EAAE,IAAI,EAAE,CAAC,IAAI,CAAC,WAAW,CAAC,EAAE,MAAM,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;QACzE,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,WAAW,EAAE,EAAE,IAAI,EAAE,EAAE,EAAE,MAAM,EAAE,EAAE,EAAE,CAAC,CAAC;QAE/D,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;QACnC,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;QACvC,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;QACvC,IAAI,CAAC,SAAS,GAAG,IAAI,aAAa,CAGhC,OAAO,CAAC,CAAC;QACX,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IAC9C,CAAC;IAEO,UAAU,CAAC,GAAU;QAC3B,MAAM,SAAS,GAAG,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;QAC7C,MAAM,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QAC1C,YAAY,CAAC,SAAS,CAAC,CAAC;QAExB,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;YAC5B,MAAM,KAAK,GAAG,SAAS,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,CAAC,gBAAgB,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;YAClE,IAAI,KAAK,IAAI,CAAC,EAAE,CAAC;gBACf,SAAS,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;YAC7B,CAAC;QACH,CAAC,CAAC,CAAC;QACH,IAAI,GAAG,KAAK,IAAI,CAAC,GAAG;YAAE,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QACvD,OAAO,SAAS,CAAC;IACnB,CAAC;IAED,KAAK;QACH,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,CAAC;QACvB,IAAI,CAAC,UAAU,CAAC,KAAK,EAAE,CAAC;QACxB,IAAI,CAAC,cAAc,CAAC,KAAK,EAAE,CAAC;QAC5B,IAAI,CAAC,cAAc,CAAC,KAAK,EAAE,CAAC;QAC5B,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;QACvB,IAAI,CAAC,KAAK,EAAE,CAAC;IACf,CAAC;IAED,GAAG;QACD,OAAO,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC;YACvB,IAAI,CAAC,IAAI,EAAE,CAAC;QACd,CAAC;IACH,CAAC;IAED,IAAI;QACF,IAAI,IAAI,CAAC,SAAS;YAAE,OAAO;QAC3B,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC,OAAO,EAAE,CAAC;QACzC,MAAM,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC;QAC9B,IAAI,CAAC,OAAO,EAAE,CAAC;YACb,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;YACtB,OAAO;QACT,CAAC;QACD,IAAI,OAAO,KAAK,IAAI,CAAC,GAAG,IAAI,gBAAgB,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,WAAW,CAAC,EAAE,CAAC;YACzE,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,GAAG,CAAC;QAC9B,CAAC;QACD,MAAM,SAAS,GAAG,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;QAE3C,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;YAC1C,MAAM,IAAI,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC;YAC1B,MAAM,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;YAC9C,MAAM,gBAAgB,GAAG,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;YAC1D,MAAM,iBAAiB,GAAG,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;YAC3D,MAAM,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;YAC9C,YAAY,CAAC,QAAQ,CAAC,CAAC;YACvB,YAAY,CAAC,gBAAgB,CAAC,CAAC;YAC/B,YAAY,CAAC,iBAAiB,CAAC,CAAC;YAChC,YAAY,CAAC,SAAS,CAAC,CAAC;YACxB,MAAM,QAAQ,GAAG,QAAQ,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,GAAG,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC,CAAC;YAE9D,MAAM,iBAAiB,GAAG,gBAAgB,CAAC,GAAG,CAC5C,CAAC,KAAK,EAAE,KAAK,EAAE,EAAE,CACf,KAAK,GAAG,gBAAgB,CAAC,IAAI,EAAE,OAAO,EAAE,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CACjE,CAAC;YACF,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;YACtB,MAAM,iBAAiB,GAAG,iBAAiB,CAAC,GAAG,CAC7C,aAAa,CAAC,EAAE,CAAC,aAAa,GAAG,IAAI,CAAC,CAAC,CAAC,CACzC,CAAC;YACF,IAAI,KAAK,GAAG,CAAC,CAAC,CAAC;YACf,IAAI,QAAQ,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;gBAC1B,KAAK,GAAG,CAAC,CAAC;YACZ,CAAC;iBAAM,CAAC;gBACN,MAAM,WAAW,GAAG,oBAAoB,CACtC,QAAQ,EACR,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,GAAG,IAAI,GAAG,CAAC,EACtB,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,WAAW,CAAC,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,CAClC,CAAC;gBACF,IAAI,WAAW,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;oBAC7B,KAAK,GAAG,WAAW,CAAC,CAAC,CAAC,CAAC;gBACzB,CAAC;qBAAM,CAAC;oBACN,MAAM,cAAc,GAAG,WAAW,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC,CAAC;oBAClE,MAAM,oBAAoB,GAAG,oBAAoB,CAC/C,cAAc,EACd,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,GAAG,CAAC,EACf,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,KAAK,CAAC,CAClB,CAAC;oBACF,IAAI,oBAAoB,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;wBACtC,KAAK,GAAG,WAAW,CAAC,oBAAoB,CAAC,CAAC,CAAC,CAAC,CAAC;oBAC/C,CAAC;yBAAM,CAAC;wBACN,MAAM,eAAe,GAAG,oBAAoB,CAAC,GAAG,CAC9C,CAAC,CAAC,EAAE,CAAC,iBAAiB,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,CACvC,CAAC;wBACF,MAAM,qBAAqB,GAAG,oBAAoB,CAChD,eAAe,EACf,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,GAAG,CAAC,EACf,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,KAAK,CAAC,CAClB,CAAC;wBACF,KAAK,GAAG,qBAAqB,CAAC,CAAC,CAAC,CAAC;oBACnC,CAAC;gBACH,CAAC;YACH,CAAC;YACD,MAAM,aAAa,GAAG,CAAC,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;YACjD,MAAM,SAAS,GAAG,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC;YAClD,MAAM,kBAAkB,GAAG,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC;YAC/D,MAAM,mBAAmB,GAAG,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC;YAChE,MAAM,YAAY,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,EAAE,EAAE,EAAE,MAAM,EAAE,EAAE,EAAE,CAAC;YAC1E,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;YAChC,kBAAkB,CAAC,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC,CAAC;YAClD,mBAAmB,CAAC,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC,CAAC;YACnD,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YAChC,YAAY,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YAEhC,MAAM,gBAAgB,GAAG,iBAAiB,CAAC,KAAK,CAAC,CAAC;YAClD,MAAM,gBAAgB,GAAG,iBAAiB,CAAC,KAAK,CAAC,CAAC;YAClD,MAAM,OAAO,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC;YAEhC,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;YACrC,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,IAAI,EAAE,kBAAkB,CAAC,CAAC;YAClD,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,IAAI,EAAE,mBAAmB,CAAC,CAAC;YACnD,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,IAAI,EAAE,YAAY,CAAC,CAAC;YACvC,MAAM,WAAW,GAA6B;gBAC5C,gBAAgB;gBAChB,gBAAgB;gBAChB,OAAO,GAAG,SAAS,CAAC,IAAI,EAAE,IAAI,CAAC,GAAG,CAAC;aACpC,CAAC;YACF,IAAI,aAAa,EAAE,CAAC;gBAClB,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,IAAI,EAAE,WAAW,CAAC,CAAC;YAC5C,CAAC;iBAAM,CAAC;gBACN,MAAM,KAAK,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,SAAS,CACzC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,KAAK,KAAK,IAAI,CAC5B,CAAC;gBACF,MAAM,GAAG,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;gBACvC,IAAI,GAAG,EAAE,CAAC;oBACR,IAAI,OAAO,CAAC,WAAW,EAAE,GAAG,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE,CAAC;wBAC3C,GAAG,CAAC,QAAQ,GAAG,WAAW,CAAC;wBAC3B,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;oBACjC,CAAC;gBACH,CAAC;qBAAM,CAAC;oBACN,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,IAAI,EAAE,WAAW,CAAC,CAAC;gBAC5C,CAAC;YACH,CAAC;YACD,IACE,gBAAgB,CAAC,OAAO,EAAE,IAAI,CAAC,GAAG,CAAC;gBACnC,gBAAgB,CAAC,IAAI,EAAE,IAAI,CAAC,WAAW,CAAC,EACxC,CAAC;gBACD,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;gBACxB,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;gBACtB,OAAO;YACT,CAAC;QACH,CAAC;IACH,CAAC;CACF;AAED,SAAS,oBAAoB,CAC3B,IAAc,EACd,MAAyC,EACzC,OAA0C;IAE1C,IAAI,GAAG,GAAG,QAAQ,CAAC;IACnB,IAAI,MAAM,GAAa,EAAE,CAAC;IAC1B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;QACrC,MAAM,GAAG,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;QACpB,IAAI,MAAM,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE,CAAC;YACrB,GAAG,GAAG,GAAG,CAAC;YACV,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;QACf,CAAC;aAAM,IAAI,OAAO,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE,CAAC;YAC7B,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QACjB,CAAC;IACH,CAAC;IACD,OAAO,MAAM,CAAC;AAChB,CAAC;AAED,SAAS,oBAAoB,CAC3B,IAAc,EACd,OAA0C,EAC1C,OAA0C;IAE1C,IAAI,GAAG,GAAG,CAAC,QAAQ,CAAC;IACpB,IAAI,MAAM,GAAa,EAAE,CAAC;IAC1B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;QACrC,MAAM,GAAG,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;QACpB,IAAI,OAAO,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE,CAAC;YACtB,GAAG,GAAG,GAAG,CAAC;YACV,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;QACf,CAAC;aAAM,IAAI,OAAO,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE,CAAC;YAC7B,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QACjB,CAAC;IACH,CAAC;IACD,OAAO,MAAM,CAAC;AAChB,CAAC","sourcesContent":["import type { Bound, IVec3 } from '@lumensuite/global/utils';\n\nimport { almostEqual, assertExists } from '@lumensuite/global/utils';\n\nimport { Graph } from './graph.js';\nimport { PriorityQueue } from './priority-queue.js';\n\nfunction cost(point: IVec3, point2: IVec3) {\n  return Math.abs(point[0] - point2[0]) + Math.abs(point[1] - point2[1]);\n}\n\nfunction compare(a: [number, number, number], b: [number, number, number]) {\n  if (a[2] + 0.01 < b[2]) return -1;\n  else if (a[2] - 0.01 > b[2]) return 1;\n  else if (a[0] < b[0]) return -1;\n  else if (a[0] > b[0]) return 1;\n  else if (a[1] > b[1]) return -1;\n  else if (a[1] < b[1]) return 1;\n  else return 0;\n}\n\nfunction heuristic(a: IVec3, b: IVec3): number {\n  return Math.abs(a[0] - b[0]) + Math.abs(a[1] - b[1]);\n}\n\nfunction getDiagonalCount(a: IVec3, last: IVec3, last2: IVec3): number {\n  if (almostEqual(a[0], last[0]) && almostEqual(a[0], last2[0])) return 0;\n  if (almostEqual(a[1], last[1]) && almostEqual(a[1], last2[1])) return 0;\n  return 1;\n}\n\nfunction pointAlmostEqual(a: IVec3, b: IVec3): boolean {\n  return almostEqual(a[0], b[0], 0.02) && almostEqual(a[1], b[1], 0.02);\n}\n\nexport class AStarRunner {\n  private _cameFrom = new Map<IVec3, { from: IVec3[]; indexs: number[] }>();\n\n  private _complete = false;\n\n  private _costSoFar = new Map<IVec3, number[]>();\n\n  private _current: IVec3 | null = null;\n\n  private _diagonalCount = new Map<IVec3, number[]>();\n\n  private _frontier!: PriorityQueue<\n    IVec3,\n    [diagonalCount: number, pointPriority: number, distCost: number]\n  >;\n\n  private _graph: Graph<IVec3>;\n\n  private _pointPriority = new Map<IVec3, number[]>();\n\n  get path() {\n    const result: IVec3[] = [];\n    let current: null | IVec3 = this._complete\n      ? this._originalEp\n      : this._current;\n    const nextIndexs = [0];\n    while (current) {\n      result.unshift(current);\n      const froms = this._cameFrom.get(current);\n      if (!froms) return result;\n      const index = nextIndexs.shift();\n      assertExists(index);\n      nextIndexs.push(froms.indexs[index]);\n      current = froms.from[index];\n    }\n    return result;\n  }\n\n  constructor(\n    points: IVec3[],\n    private _sp: IVec3,\n    private _ep: IVec3,\n    private _originalSp: IVec3,\n    private _originalEp: IVec3,\n    blocks: Bound[] = [],\n    expandBlocks: Bound[] = []\n  ) {\n    this._sp[2] = 0;\n    this._ep[2] = 0;\n    this._originalEp[2] = 0;\n    this._graph = new Graph([...points], blocks, expandBlocks);\n    this._init();\n  }\n\n  private _init() {\n    this._cameFrom.set(this._sp, { from: [this._originalSp], indexs: [-1] });\n    this._cameFrom.set(this._originalSp, { from: [], indexs: [] });\n\n    this._costSoFar.set(this._sp, [0]);\n    this._diagonalCount.set(this._sp, [0]);\n    this._pointPriority.set(this._sp, [0]);\n    this._frontier = new PriorityQueue<\n      IVec3,\n      [diagonalCount: number, pointPriority: number, distCost: number]\n    >(compare);\n    this._frontier.enqueue(this._sp, [0, 0, 0]);\n  }\n\n  private _neighbors(cur: IVec3) {\n    const neighbors = this._graph.neighbors(cur);\n    const cameFroms = this._cameFrom.get(cur);\n    assertExists(cameFroms);\n\n    cameFroms.from.forEach(from => {\n      const index = neighbors.findIndex(n => pointAlmostEqual(n, from));\n      if (index >= 0) {\n        neighbors.splice(index, 1);\n      }\n    });\n    if (cur === this._ep) neighbors.push(this._originalEp);\n    return neighbors;\n  }\n\n  reset() {\n    this._cameFrom.clear();\n    this._costSoFar.clear();\n    this._diagonalCount.clear();\n    this._pointPriority.clear();\n    this._complete = false;\n    this._init();\n  }\n\n  run() {\n    while (!this._complete) {\n      this.step();\n    }\n  }\n\n  step() {\n    if (this._complete) return;\n    this._current = this._frontier.dequeue();\n    const current = this._current;\n    if (!current) {\n      this._complete = true;\n      return;\n    }\n    if (current === this._ep && pointAlmostEqual(this._ep, this._originalEp)) {\n      this._originalEp = this._ep;\n    }\n    const neighbors = this._neighbors(current);\n\n    for (let i = 0; i < neighbors.length; i++) {\n      const next = neighbors[i];\n      const curCosts = this._costSoFar.get(current);\n      const curDiagoalCounts = this._diagonalCount.get(current);\n      const curPointPrioritys = this._pointPriority.get(current);\n      const cameFroms = this._cameFrom.get(current);\n      assertExists(curCosts);\n      assertExists(curDiagoalCounts);\n      assertExists(curPointPrioritys);\n      assertExists(cameFroms);\n      const newCosts = curCosts.map(co => co + cost(current, next));\n\n      const newDiagonalCounts = curDiagoalCounts.map(\n        (count, index) =>\n          count + getDiagonalCount(next, current, cameFroms.from[index])\n      );\n      assertExists(next[2]);\n      const newPointPrioritys = curPointPrioritys.map(\n        pointPriority => pointPriority + next[2]\n      );\n      let index = -1;\n      if (newCosts.length === 1) {\n        index = 0;\n      } else {\n        const costsIndexs = findAllMinimalIndexs(\n          newCosts,\n          (a, b) => a + 0.01 < b,\n          (a, b) => almostEqual(a, b, 0.02)\n        );\n        if (costsIndexs.length === 1) {\n          index = costsIndexs[0];\n        } else {\n          const diagonalCounts = costsIndexs.map(i => newDiagonalCounts[i]);\n          const diagonalCountsIndexs = findAllMinimalIndexs(\n            diagonalCounts,\n            (a, b) => a < b,\n            (a, b) => a === b\n          );\n          if (diagonalCountsIndexs.length === 1) {\n            index = costsIndexs[diagonalCountsIndexs[0]];\n          } else {\n            const pointPriorities = diagonalCountsIndexs.map(\n              i => newPointPrioritys[costsIndexs[i]]\n            );\n            const pointPrioritiesIndexs = findAllMaximalIndexs(\n              pointPriorities,\n              (a, b) => a > b,\n              (a, b) => a === b\n            );\n            index = pointPrioritiesIndexs[0];\n          }\n        }\n      }\n      const shouldEnqueue = !this._costSoFar.has(next);\n      const nextCosts = this._costSoFar.get(next) ?? [];\n      const nextDiagonalCounts = this._diagonalCount.get(next) ?? [];\n      const nextPointPriorities = this._pointPriority.get(next) ?? [];\n      const nextCameFrom = this._cameFrom.get(next) ?? { from: [], indexs: [] };\n      nextCosts.push(newCosts[index]);\n      nextDiagonalCounts.push(newDiagonalCounts[index]);\n      nextPointPriorities.push(newPointPrioritys[index]);\n      nextCameFrom.from.push(current);\n      nextCameFrom.indexs.push(index);\n\n      const newDiagonalCount = newDiagonalCounts[index];\n      const newPointPriority = newPointPrioritys[index];\n      const newCost = newCosts[index];\n\n      this._costSoFar.set(next, nextCosts);\n      this._diagonalCount.set(next, nextDiagonalCounts);\n      this._pointPriority.set(next, nextPointPriorities);\n      this._cameFrom.set(next, nextCameFrom);\n      const newPriority: [number, number, number] = [\n        newDiagonalCount,\n        newPointPriority,\n        newCost + heuristic(next, this._ep),\n      ];\n      if (shouldEnqueue) {\n        this._frontier.enqueue(next, newPriority);\n      } else {\n        const index = this._frontier.heap.findIndex(\n          item => item.value === next\n        );\n        const old = this._frontier.heap[index];\n        if (old) {\n          if (compare(newPriority, old.priority) < 0) {\n            old.priority = newPriority;\n            this._frontier.bubbleUp(index);\n          }\n        } else {\n          this._frontier.enqueue(next, newPriority);\n        }\n      }\n      if (\n        pointAlmostEqual(current, this._ep) &&\n        pointAlmostEqual(next, this._originalEp)\n      ) {\n        this._originalEp = next;\n        this._complete = true;\n        return;\n      }\n    }\n  }\n}\n\nfunction findAllMinimalIndexs(\n  data: number[],\n  isLess: (a: number, b: number) => boolean,\n  isEqual: (a: number, b: number) => boolean\n) {\n  let min = Infinity;\n  let indexs: number[] = [];\n  for (let i = 0; i < data.length; i++) {\n    const cur = data[i];\n    if (isLess(cur, min)) {\n      min = cur;\n      indexs = [i];\n    } else if (isEqual(cur, min)) {\n      indexs.push(i);\n    }\n  }\n  return indexs;\n}\n\nfunction findAllMaximalIndexs(\n  data: number[],\n  isGreat: (a: number, b: number) => boolean,\n  isEqual: (a: number, b: number) => boolean\n) {\n  let max = -Infinity;\n  let indexs: number[] = [];\n  for (let i = 0; i < data.length; i++) {\n    const cur = data[i];\n    if (isGreat(cur, max)) {\n      max = cur;\n      indexs = [i];\n    } else if (isEqual(cur, max)) {\n      indexs.push(i);\n    }\n  }\n  return indexs;\n}\n"]}