{"version":3,"file":"sort.js","sourceRoot":"","sources":["../../src/utils/sort.ts"],"names":[],"mappings":"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","sourcesContent":["export function loadingSort<T extends { id: string; deps: string[] }>(\n  elements: T[]\n) {\n  const graph = new Map<string, string[]>();\n  const outDegree = new Map<string, number>();\n  const sortedOrder = [];\n  const map = new Map<string, T>();\n\n  elements.forEach(element => {\n    outDegree.set(element.id, 0);\n    map.set(element.id, element);\n  });\n\n  elements.forEach(element => {\n    element.deps.forEach(depId => {\n      if (outDegree.has(depId)) {\n        graph.has(depId)\n          ? graph.get(depId)!.push(element.id)\n          : graph.set(depId, [element.id]);\n        outDegree.set(element.id, outDegree.get(element.id)! + 1);\n      }\n    });\n  });\n\n  const queue: string[] = [];\n\n  for (const [id, degree] of outDegree) {\n    if (degree === 0) {\n      queue.push(id);\n    }\n  }\n\n  while (queue.length > 0) {\n    const node = queue.shift()!;\n    sortedOrder.push(node);\n\n    const deps = graph.get(node) || [];\n    deps.forEach(depId => {\n      if (outDegree.has(depId)) {\n        outDegree.set(depId, outDegree.get(depId)! - 1);\n\n        if (outDegree.get(depId) === 0) {\n          queue.push(depId);\n        }\n      }\n    });\n  }\n\n  return sortedOrder.map(id => map.get(id)!);\n}\n\nexport function sortIndex(\n  a: { id: string; index: string },\n  b: { id: string; index: string },\n  groupIndexMap: Map<string, { id: string; index: string }>\n) {\n  const aGroupIndex = groupIndexMap.get(a.id);\n  const bGroupIndex = groupIndexMap.get(b.id);\n\n  if (aGroupIndex && bGroupIndex) {\n    return aGroupIndex.id === bGroupIndex.id\n      ? a.index === b.index\n        ? 0\n        : a.index > b.index\n          ? 1\n          : -1\n      : aGroupIndex.index > bGroupIndex.index\n        ? 1\n        : -1;\n  }\n\n  if (aGroupIndex) {\n    return aGroupIndex.id === b.id\n      ? 1\n      : aGroupIndex.index === b.index\n        ? 0\n        : aGroupIndex.index > b.index\n          ? 1\n          : -1;\n  }\n\n  if (bGroupIndex) {\n    return a.id === bGroupIndex.id\n      ? -1\n      : a.index === bGroupIndex.index\n        ? 0\n        : a.index > bGroupIndex.index\n          ? 1\n          : -1;\n  }\n\n  return a.index === b.index ? 0 : a.index > b.index ? 1 : -1;\n}\n"]}