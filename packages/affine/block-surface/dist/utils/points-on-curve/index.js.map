{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/utils/points-on-curve/index.ts"],"names":[],"mappings":"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","sourcesContent":["import type { Point } from '../rough/geometry.js';\n\n// distance between 2 points\nfunction distance(p1: Point, p2: Point): number {\n  return Math.sqrt(distanceSq(p1, p2));\n}\n\n// distance between 2 points squared\nfunction distanceSq(p1: Point, p2: Point): number {\n  return Math.pow(p1[0] - p2[0], 2) + Math.pow(p1[1] - p2[1], 2);\n}\n\n// Sistance squared from a point p to the line segment vw\nfunction distanceToSegmentSq(p: Point, v: Point, w: Point): number {\n  const l2 = distanceSq(v, w);\n  if (l2 === 0) {\n    return distanceSq(p, v);\n  }\n  let t = ((p[0] - v[0]) * (w[0] - v[0]) + (p[1] - v[1]) * (w[1] - v[1])) / l2;\n  t = Math.max(0, Math.min(1, t));\n  return distanceSq(p, lerp(v, w, t));\n}\n\nfunction lerp(a: Point, b: Point, t: number): Point {\n  return [a[0] + (b[0] - a[0]) * t, a[1] + (b[1] - a[1]) * t];\n}\n\n// Adapted from https://seant23.wordpress.com/2010/11/12/offset-bezier-curves/\nfunction flatness(points: readonly Point[], offset: number): number {\n  const p1 = points[offset + 0];\n  const p2 = points[offset + 1];\n  const p3 = points[offset + 2];\n  const p4 = points[offset + 3];\n\n  let ux = 3 * p2[0] - 2 * p1[0] - p4[0];\n  ux *= ux;\n  let uy = 3 * p2[1] - 2 * p1[1] - p4[1];\n  uy *= uy;\n  let vx = 3 * p3[0] - 2 * p4[0] - p1[0];\n  vx *= vx;\n  let vy = 3 * p3[1] - 2 * p4[1] - p1[1];\n  vy *= vy;\n\n  if (ux < vx) {\n    ux = vx;\n  }\n\n  if (uy < vy) {\n    uy = vy;\n  }\n\n  return ux + uy;\n}\n\nfunction getPointsOnBezierCurveWithSplitting(\n  points: readonly Point[],\n  offset: number,\n  tolerance: number,\n  newPoints?: Point[]\n): Point[] {\n  const outPoints = newPoints || [];\n  if (flatness(points, offset) < tolerance) {\n    const p0 = points[offset + 0];\n    if (outPoints.length) {\n      const d = distance(outPoints[outPoints.length - 1], p0);\n      if (d > 1) {\n        outPoints.push(p0);\n      }\n    } else {\n      outPoints.push(p0);\n    }\n    outPoints.push(points[offset + 3]);\n  } else {\n    // subdivide\n    const t = 0.5;\n    const p1 = points[offset + 0];\n    const p2 = points[offset + 1];\n    const p3 = points[offset + 2];\n    const p4 = points[offset + 3];\n\n    const q1 = lerp(p1, p2, t);\n    const q2 = lerp(p2, p3, t);\n    const q3 = lerp(p3, p4, t);\n\n    const r1 = lerp(q1, q2, t);\n    const r2 = lerp(q2, q3, t);\n\n    const red = lerp(r1, r2, t);\n\n    getPointsOnBezierCurveWithSplitting(\n      [p1, q1, r1, red],\n      0,\n      tolerance,\n      outPoints\n    );\n    getPointsOnBezierCurveWithSplitting(\n      [red, r2, q3, p4],\n      0,\n      tolerance,\n      outPoints\n    );\n  }\n  return outPoints;\n}\n\nexport function simplify(points: readonly Point[], distance: number): Point[] {\n  return simplifyPoints(points, 0, points.length, distance);\n}\n\n// Ramer–Douglas–Peucker algorithm\n// https://en.wikipedia.org/wiki/Ramer%E2%80%93Douglas%E2%80%93Peucker_algorithm\nfunction simplifyPoints(\n  points: readonly Point[],\n  start: number,\n  end: number,\n  epsilon: number,\n  newPoints?: Point[]\n): Point[] {\n  const outPoints = newPoints || [];\n\n  // find the most distance point from the endpoints\n  const s = points[start];\n  const e = points[end - 1];\n  let maxDistSq = 0;\n  let maxNdx = 1;\n  for (let i = start + 1; i < end - 1; ++i) {\n    const distSq = distanceToSegmentSq(points[i], s, e);\n    if (distSq > maxDistSq) {\n      maxDistSq = distSq;\n      maxNdx = i;\n    }\n  }\n\n  // if that point is too far, split\n  if (Math.sqrt(maxDistSq) > epsilon) {\n    simplifyPoints(points, start, maxNdx + 1, epsilon, outPoints);\n    simplifyPoints(points, maxNdx, end, epsilon, outPoints);\n  } else {\n    if (!outPoints.length) {\n      outPoints.push(s);\n    }\n    outPoints.push(e);\n  }\n\n  return outPoints;\n}\n\nexport function pointsOnBezierCurves(\n  points: Point[],\n  tolerance = 0.15,\n  distance?: number\n): Point[] {\n  const newPoints: Point[] = [];\n  const numSegments = (points.length - 1) / 3;\n  for (let i = 0; i < numSegments; i++) {\n    const offset = i * 3;\n    getPointsOnBezierCurveWithSplitting(points, offset, tolerance, newPoints);\n  }\n  if (distance && distance > 0) {\n    return simplifyPoints(newPoints, 0, newPoints.length, distance);\n  }\n  return newPoints;\n}\n"]}