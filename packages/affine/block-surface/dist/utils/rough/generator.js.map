{"version":3,"file":"generator.js","sourceRoot":"","sources":["../../../src/utils/rough/generator.ts"],"names":[],"mappings":"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","sourcesContent":["import type {\n  Config,\n  Drawable,\n  OpSet,\n  Options,\n  PathInfo,\n  ResolvedOptions,\n} from './core.js';\nimport type { Point } from './geometry.js';\n\nimport { curveToBezier } from '../points-on-curve/curve-to-bezier.js';\nimport { pointsOnBezierCurves } from '../points-on-curve/index.js';\nimport { pointsOnPath } from '../points-on-path/index.js';\nimport { randomSeed } from './math.js';\nimport {\n  arc,\n  curve,\n  ellipseWithParams,\n  generateEllipseParams,\n  line,\n  linearPath,\n  patternFillArc,\n  patternFillPolygons,\n  rectangle,\n  solidFillPolygon,\n  svgPath,\n} from './renderer.js';\n\nconst NOS = 'none';\n\nexport class RoughGenerator {\n  private config: Config;\n\n  defaultOptions: ResolvedOptions = {\n    maxRandomnessOffset: 2,\n    roughness: 1,\n    bowing: 1,\n    stroke: '#000',\n    strokeWidth: 1,\n    curveTightness: 0,\n    curveFitting: 0.95,\n    curveStepCount: 9,\n    fillStyle: 'hachure',\n    fillWeight: -1,\n    hachureAngle: -41,\n    hachureGap: -1,\n    dashOffset: -1,\n    dashGap: -1,\n    zigzagOffset: -1,\n    seed: 0,\n    disableMultiStroke: false,\n    disableMultiStrokeFill: false,\n    preserveVertices: false,\n  };\n\n  constructor(config?: Config) {\n    this.config = config || {};\n    if (this.config.options) {\n      this.defaultOptions = this._o(this.config.options);\n    }\n  }\n\n  static newSeed(): number {\n    return randomSeed();\n  }\n\n  private _d(shape: string, sets: OpSet[], options: ResolvedOptions): Drawable {\n    return { shape, sets: sets || [], options: options || this.defaultOptions };\n  }\n\n  private _o(options?: Options): ResolvedOptions {\n    return options\n      ? Object.assign({}, this.defaultOptions, options)\n      : this.defaultOptions;\n  }\n\n  private fillSketch(drawing: OpSet, o: ResolvedOptions): PathInfo {\n    let fweight = o.fillWeight;\n    if (fweight < 0) {\n      fweight = o.strokeWidth / 2;\n    }\n    return {\n      d: this.opsToPath(drawing),\n      stroke: o.fill || NOS,\n      strokeWidth: fweight,\n      fill: NOS,\n    };\n  }\n\n  arc(\n    x: number,\n    y: number,\n    width: number,\n    height: number,\n    start: number,\n    stop: number,\n    closed = false,\n    options?: Options\n  ): Drawable {\n    const o = this._o(options);\n    const paths = [];\n    const outline = arc(x, y, width, height, start, stop, closed, true, o);\n    if (closed && o.fill) {\n      if (o.fillStyle === 'solid') {\n        const fillOptions: ResolvedOptions = { ...o };\n        fillOptions.disableMultiStroke = true;\n        const shape = arc(\n          x,\n          y,\n          width,\n          height,\n          start,\n          stop,\n          true,\n          false,\n          fillOptions\n        );\n        shape.type = 'fillPath';\n        paths.push(shape);\n      } else {\n        paths.push(patternFillArc(x, y, width, height, start, stop, o));\n      }\n    }\n    if (o.stroke !== NOS) {\n      paths.push(outline);\n    }\n    return this._d('arc', paths, o);\n  }\n\n  circle(x: number, y: number, diameter: number, options?: Options): Drawable {\n    const ret = this.ellipse(x, y, diameter, diameter, options);\n    ret.shape = 'circle';\n    return ret;\n  }\n\n  curve(points: Point[], options?: Options): Drawable {\n    const o = this._o(options);\n    const paths: OpSet[] = [];\n    const outline = curve(points, o);\n    if (o.fill && o.fill !== NOS && points.length >= 3) {\n      const bcurve = curveToBezier(points);\n      const polyPoints = pointsOnBezierCurves(\n        bcurve,\n        10,\n        (1 + o.roughness) / 2\n      );\n      if (o.fillStyle === 'solid') {\n        paths.push(solidFillPolygon([polyPoints], o));\n      } else {\n        paths.push(patternFillPolygons([polyPoints], o));\n      }\n    }\n    if (o.stroke !== NOS) {\n      paths.push(outline);\n    }\n    return this._d('curve', paths, o);\n  }\n\n  ellipse(\n    x: number,\n    y: number,\n    width: number,\n    height: number,\n    options?: Options\n  ): Drawable {\n    const o = this._o(options);\n    const paths: OpSet[] = [];\n    const ellipseParams = generateEllipseParams(width, height, o);\n    const ellipseResponse = ellipseWithParams(x, y, o, ellipseParams);\n    if (o.fill) {\n      if (o.fillStyle === 'solid') {\n        const shape = ellipseWithParams(x, y, o, ellipseParams).opset;\n        shape.type = 'fillPath';\n        paths.push(shape);\n      } else {\n        paths.push(patternFillPolygons([ellipseResponse.estimatedPoints], o));\n      }\n    }\n    if (o.stroke !== NOS) {\n      paths.push(ellipseResponse.opset);\n    }\n    return this._d('ellipse', paths, o);\n  }\n\n  line(\n    x1: number,\n    y1: number,\n    x2: number,\n    y2: number,\n    options?: Options\n  ): Drawable {\n    const o = this._o(options);\n    return this._d('line', [line(x1, y1, x2, y2, o)], o);\n  }\n\n  linearPath(points: Point[], options?: Options): Drawable {\n    const o = this._o(options);\n    return this._d('linearPath', [linearPath(points, false, o)], o);\n  }\n\n  opsToPath(drawing: OpSet, fixedDecimals?: number): string {\n    let path = '';\n    for (const item of drawing.ops) {\n      const data =\n        typeof fixedDecimals === 'number' && fixedDecimals >= 0\n          ? item.data.map(d => +d.toFixed(fixedDecimals))\n          : item.data;\n      switch (item.op) {\n        case 'move':\n          path += `M${data[0]} ${data[1]} `;\n          break;\n        case 'bcurveTo':\n          path += `C${data[0]} ${data[1]}, ${data[2]} ${data[3]}, ${data[4]} ${data[5]} `;\n          break;\n        case 'lineTo':\n          path += `L${data[0]} ${data[1]} `;\n          break;\n      }\n    }\n    return path.trim();\n  }\n\n  path(d: string, options?: Options): Drawable {\n    const o = this._o(options);\n    const paths: OpSet[] = [];\n    if (!d) {\n      return this._d('path', paths, o);\n    }\n    d = (d || '')\n      .replace(/\\n/g, ' ')\n      .replace(/(-\\s)/g, '-')\n      .replace('/(ss)/g', ' ');\n\n    const hasFill = o.fill && o.fill !== 'transparent' && o.fill !== NOS;\n    const hasStroke = o.stroke !== NOS;\n    const simplified = !!(o.simplification && o.simplification < 1);\n    const distance = simplified\n      ? 4 - 4 * o.simplification!\n      : (1 + o.roughness) / 2;\n    const sets = pointsOnPath(d, 1, distance);\n\n    if (hasFill) {\n      if (o.fillStyle === 'solid') {\n        paths.push(solidFillPolygon(sets, o));\n      } else {\n        paths.push(patternFillPolygons(sets, o));\n      }\n    }\n    if (hasStroke) {\n      if (simplified) {\n        sets.forEach(set => {\n          paths.push(linearPath(set, false, o));\n        });\n      } else {\n        paths.push(svgPath(d, o));\n      }\n    }\n\n    return this._d('path', paths, o);\n  }\n\n  polygon(points: Point[], options?: Options): Drawable {\n    const o = this._o(options);\n    const paths: OpSet[] = [];\n    const outline = linearPath(points, true, o);\n    if (o.fill) {\n      if (o.fillStyle === 'solid') {\n        paths.push(solidFillPolygon([points], o));\n      } else {\n        paths.push(patternFillPolygons([points], o));\n      }\n    }\n    if (o.stroke !== NOS) {\n      paths.push(outline);\n    }\n    return this._d('polygon', paths, o);\n  }\n\n  rectangle(\n    x: number,\n    y: number,\n    width: number,\n    height: number,\n    options?: Options\n  ): Drawable {\n    const o = this._o(options);\n    const paths = [];\n    const outline = rectangle(x, y, width, height, o);\n    if (o.fill) {\n      const points: Point[] = [\n        [x, y],\n        [x + width, y],\n        [x + width, y + height],\n        [x, y + height],\n      ];\n      if (o.fillStyle === 'solid') {\n        paths.push(solidFillPolygon([points], o));\n      } else {\n        paths.push(patternFillPolygons([points], o));\n      }\n    }\n    if (o.stroke !== NOS) {\n      paths.push(outline);\n    }\n    return this._d('rectangle', paths, o);\n  }\n\n  toPaths(drawable: Drawable): PathInfo[] {\n    const sets = drawable.sets || [];\n    const o = drawable.options || this.defaultOptions;\n    const paths: PathInfo[] = [];\n    for (const drawing of sets) {\n      let path: PathInfo | null = null;\n      switch (drawing.type) {\n        case 'path':\n          path = {\n            d: this.opsToPath(drawing),\n            stroke: o.stroke,\n            strokeWidth: o.strokeWidth,\n            fill: NOS,\n          };\n          break;\n        case 'fillPath':\n          path = {\n            d: this.opsToPath(drawing),\n            stroke: NOS,\n            strokeWidth: 0,\n            fill: o.fill || NOS,\n          };\n          break;\n        case 'fillSketch':\n          path = this.fillSketch(drawing, o);\n          break;\n      }\n      if (path) {\n        paths.push(path);\n      }\n    }\n    return paths;\n  }\n}\n"]}