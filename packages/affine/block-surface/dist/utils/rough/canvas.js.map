{"version":3,"file":"canvas.js","sourceRoot":"","sources":["../../../src/utils/rough/canvas.ts"],"names":[],"mappings":"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","sourcesContent":["import type {\n  Config,\n  Drawable,\n  OpSet,\n  Options,\n  ResolvedOptions,\n} from './core.js';\nimport type { Point } from './geometry.js';\n\nimport { RoughGenerator } from './generator.js';\n\nexport class RoughCanvas {\n  private canvas: HTMLCanvasElement;\n\n  private ctx: CanvasRenderingContext2D;\n\n  private gen: RoughGenerator;\n\n  get generator(): RoughGenerator {\n    return this.gen;\n  }\n\n  constructor(canvas: HTMLCanvasElement, config?: Config) {\n    this.canvas = canvas;\n\n    this.ctx = this.canvas.getContext('2d')!;\n    this.gen = new RoughGenerator(config);\n  }\n\n  private _drawToContext(\n    ctx: CanvasRenderingContext2D,\n    drawing: OpSet,\n    fixedDecimals?: number,\n    rule: CanvasFillRule = 'nonzero'\n  ) {\n    ctx.beginPath();\n    for (const item of drawing.ops) {\n      const data =\n        typeof fixedDecimals === 'number' && fixedDecimals >= 0\n          ? item.data.map(d => +d.toFixed(fixedDecimals))\n          : item.data;\n      switch (item.op) {\n        case 'move':\n          ctx.moveTo(data[0], data[1]);\n          break;\n        case 'bcurveTo':\n          ctx.bezierCurveTo(\n            data[0],\n            data[1],\n            data[2],\n            data[3],\n            data[4],\n            data[5]\n          );\n          break;\n        case 'lineTo':\n          ctx.lineTo(data[0], data[1]);\n          break;\n      }\n    }\n    if (drawing.type === 'fillPath') {\n      ctx.fill(rule);\n    } else {\n      ctx.stroke();\n    }\n  }\n\n  private fillSketch(\n    ctx: CanvasRenderingContext2D,\n    drawing: OpSet,\n    o: ResolvedOptions\n  ) {\n    let fweight = o.fillWeight;\n    if (fweight < 0) {\n      fweight = o.strokeWidth / 2;\n    }\n    ctx.save();\n    if (o.fillLineDash) {\n      ctx.setLineDash(o.fillLineDash);\n    }\n    if (o.fillLineDashOffset) {\n      ctx.lineDashOffset = o.fillLineDashOffset;\n    }\n    ctx.strokeStyle = o.fill || '';\n    ctx.lineWidth = fweight;\n    this._drawToContext(ctx, drawing, o.fixedDecimalPlaceDigits);\n    ctx.restore();\n  }\n\n  arc(\n    x: number,\n    y: number,\n    width: number,\n    height: number,\n    start: number,\n    stop: number,\n    closed = false,\n    options?: Options\n  ): Drawable {\n    const d = this.gen.arc(x, y, width, height, start, stop, closed, options);\n    this.draw(d);\n    return d;\n  }\n\n  circle(x: number, y: number, diameter: number, options?: Options): Drawable {\n    const d = this.gen.circle(x, y, diameter, options);\n    this.draw(d);\n    return d;\n  }\n\n  curve(points: Point[], options?: Options): Drawable {\n    const d = this.gen.curve(points, options);\n    this.draw(d);\n    return d;\n  }\n\n  draw(drawable: Drawable): void {\n    const sets = drawable.sets || [];\n    const o = drawable.options || this.getDefaultOptions();\n    const ctx = this.ctx;\n    const precision = drawable.options.fixedDecimalPlaceDigits;\n\n    for (const drawing of sets) {\n      switch (drawing.type) {\n        case 'path':\n          ctx.save();\n          ctx.strokeStyle = o.stroke === 'none' ? 'transparent' : o.stroke;\n          ctx.lineWidth = o.strokeWidth;\n          if (o.strokeLineDash) {\n            ctx.setLineDash(o.strokeLineDash);\n          }\n          if (o.strokeLineDashOffset) {\n            ctx.lineDashOffset = o.strokeLineDashOffset;\n          }\n          this._drawToContext(ctx, drawing, precision);\n          ctx.restore();\n          break;\n        case 'fillPath': {\n          ctx.save();\n          ctx.fillStyle = o.fill || '';\n          const fillRule: CanvasFillRule =\n            drawable.shape === 'curve' ||\n            drawable.shape === 'polygon' ||\n            drawable.shape === 'path'\n              ? 'evenodd'\n              : 'nonzero';\n          this._drawToContext(ctx, drawing, precision, fillRule);\n          ctx.restore();\n          break;\n        }\n        case 'fillSketch':\n          this.fillSketch(ctx, drawing, o);\n          break;\n      }\n    }\n  }\n\n  ellipse(\n    x: number,\n    y: number,\n    width: number,\n    height: number,\n    options?: Options\n  ): Drawable {\n    const d = this.gen.ellipse(x, y, width, height, options);\n    this.draw(d);\n    return d;\n  }\n\n  getDefaultOptions(): ResolvedOptions {\n    return this.gen.defaultOptions;\n  }\n\n  line(\n    x1: number,\n    y1: number,\n    x2: number,\n    y2: number,\n    options?: Options\n  ): Drawable {\n    const d = this.gen.line(x1, y1, x2, y2, options);\n    this.draw(d);\n    return d;\n  }\n\n  linearPath(points: Point[], options?: Options): Drawable {\n    const d = this.gen.linearPath(points, options);\n    this.draw(d);\n    return d;\n  }\n\n  path(d: string, options?: Options): Drawable {\n    const drawing = this.gen.path(d, options);\n    this.draw(drawing);\n    return drawing;\n  }\n\n  polygon(points: Point[], options?: Options): Drawable {\n    const d = this.gen.polygon(points, options);\n    this.draw(d);\n    return d;\n  }\n\n  rectangle(\n    x: number,\n    y: number,\n    width: number,\n    height: number,\n    options?: Options\n  ): Drawable {\n    const d = this.gen.rectangle(x, y, width, height, options);\n    this.draw(d);\n    return d;\n  }\n}\n"]}