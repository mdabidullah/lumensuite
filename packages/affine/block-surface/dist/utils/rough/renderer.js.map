{"version":3,"file":"renderer.js","sourceRoot":"","sources":["../../../src/utils/rough/renderer.ts"],"names":[],"mappings":"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","sourcesContent":["import type { Op, OpSet, ResolvedOptions } from './core.js';\nimport type { RenderHelper } from './fillers/filler-interface.js';\nimport type { Point } from './geometry.js';\n\nimport { absolutize } from '../path-data-parser/absolutize.js';\nimport { normalize } from '../path-data-parser/normalize.js';\nimport { parsePath } from '../path-data-parser/parser.js';\nimport { getFiller } from './fillers/filler.js';\nimport { Random } from './math.js';\n\ninterface EllipseParams {\n  rx: number;\n  ry: number;\n  increment: number;\n}\n\nconst helper: RenderHelper = {\n  randOffset,\n  randOffsetWithRange,\n  ellipse,\n  doubleLineOps: doubleLineFillOps,\n};\n\nexport function line(\n  x1: number,\n  y1: number,\n  x2: number,\n  y2: number,\n  o: ResolvedOptions\n): OpSet {\n  return { type: 'path', ops: _doubleLine(x1, y1, x2, y2, o) };\n}\n\nexport function linearPath(\n  points: Point[],\n  close: boolean,\n  o: ResolvedOptions\n): OpSet {\n  const len = (points || []).length;\n  if (len > 2) {\n    const ops: Op[] = [];\n    for (let i = 0; i < len - 1; i++) {\n      ops.push(\n        ..._doubleLine(\n          points[i][0],\n          points[i][1],\n          points[i + 1][0],\n          points[i + 1][1],\n          o\n        )\n      );\n    }\n    if (close) {\n      ops.push(\n        ..._doubleLine(\n          points[len - 1][0],\n          points[len - 1][1],\n          points[0][0],\n          points[0][1],\n          o\n        )\n      );\n    }\n    return { type: 'path', ops };\n  } else if (len === 2) {\n    return line(points[0][0], points[0][1], points[1][0], points[1][1], o);\n  }\n  return { type: 'path', ops: [] };\n}\n\nexport function polygon(points: Point[], o: ResolvedOptions): OpSet {\n  return linearPath(points, true, o);\n}\n\nexport function rectangle(\n  x: number,\n  y: number,\n  width: number,\n  height: number,\n  o: ResolvedOptions\n): OpSet {\n  const points: Point[] = [\n    [x, y],\n    [x + width, y],\n    [x + width, y + height],\n    [x, y + height],\n  ];\n  return polygon(points, o);\n}\n\nexport function curve(points: Point[], o: ResolvedOptions): OpSet {\n  let o1 = _curveWithOffset(points, 1 * (1 + o.roughness * 0.2), o);\n  if (!o.disableMultiStroke) {\n    const o2 = _curveWithOffset(\n      points,\n      1.5 * (1 + o.roughness * 0.22),\n      cloneOptionsAlterSeed(o)\n    );\n    o1 = o1.concat(o2);\n  }\n  return { type: 'path', ops: o1 };\n}\n\nexport interface EllipseResult {\n  opset: OpSet;\n  estimatedPoints: Point[];\n}\n\nexport function ellipse(\n  x: number,\n  y: number,\n  width: number,\n  height: number,\n  o: ResolvedOptions\n): OpSet {\n  const params = generateEllipseParams(width, height, o);\n  return ellipseWithParams(x, y, o, params).opset;\n}\n\nexport function generateEllipseParams(\n  width: number,\n  height: number,\n  o: ResolvedOptions\n): EllipseParams {\n  const psq = Math.sqrt(\n    Math.PI *\n      2 *\n      Math.sqrt((Math.pow(width / 2, 2) + Math.pow(height / 2, 2)) / 2)\n  );\n  const stepCount = Math.ceil(\n    Math.max(o.curveStepCount, (o.curveStepCount / Math.sqrt(200)) * psq)\n  );\n  const increment = (Math.PI * 2) / stepCount;\n  let rx = Math.abs(width / 2);\n  let ry = Math.abs(height / 2);\n  const curveFitRandomness = 1 - o.curveFitting;\n  rx += _offsetOpt(rx * curveFitRandomness, o);\n  ry += _offsetOpt(ry * curveFitRandomness, o);\n  return { increment, rx, ry };\n}\n\nexport function ellipseWithParams(\n  x: number,\n  y: number,\n  o: ResolvedOptions,\n  ellipseParams: EllipseParams\n): EllipseResult {\n  const [ap1, cp1] = _computeEllipsePoints(\n    ellipseParams.increment,\n    x,\n    y,\n    ellipseParams.rx,\n    ellipseParams.ry,\n    1,\n    ellipseParams.increment * _offset(0.1, _offset(0.4, 1, o), o),\n    o\n  );\n  let o1 = _curve(ap1, null, o);\n  if (!o.disableMultiStroke && o.roughness !== 0) {\n    const [ap2] = _computeEllipsePoints(\n      ellipseParams.increment,\n      x,\n      y,\n      ellipseParams.rx,\n      ellipseParams.ry,\n      1.5,\n      0,\n      o\n    );\n    const o2 = _curve(ap2, null, o);\n    o1 = o1.concat(o2);\n  }\n  return {\n    estimatedPoints: cp1,\n    opset: { type: 'path', ops: o1 },\n  };\n}\n\nexport function arc(\n  x: number,\n  y: number,\n  width: number,\n  height: number,\n  start: number,\n  stop: number,\n  closed: boolean,\n  roughClosure: boolean,\n  o: ResolvedOptions\n): OpSet {\n  const cx = x;\n  const cy = y;\n  let rx = Math.abs(width / 2);\n  let ry = Math.abs(height / 2);\n  rx += _offsetOpt(rx * 0.01, o);\n  ry += _offsetOpt(ry * 0.01, o);\n  let strt = start;\n  let stp = stop;\n  while (strt < 0) {\n    strt += Math.PI * 2;\n    stp += Math.PI * 2;\n  }\n  if (stp - strt > Math.PI * 2) {\n    strt = 0;\n    stp = Math.PI * 2;\n  }\n  const ellipseInc = (Math.PI * 2) / o.curveStepCount;\n  const arcInc = Math.min(ellipseInc / 2, (stp - strt) / 2);\n  const ops = _arc(arcInc, cx, cy, rx, ry, strt, stp, 1, o);\n  if (!o.disableMultiStroke) {\n    const o2 = _arc(arcInc, cx, cy, rx, ry, strt, stp, 1.5, o);\n    ops.push(...o2);\n  }\n  if (closed) {\n    if (roughClosure) {\n      ops.push(\n        ..._doubleLine(\n          cx,\n          cy,\n          cx + rx * Math.cos(strt),\n          cy + ry * Math.sin(strt),\n          o\n        ),\n        ..._doubleLine(\n          cx,\n          cy,\n          cx + rx * Math.cos(stp),\n          cy + ry * Math.sin(stp),\n          o\n        )\n      );\n    } else {\n      ops.push(\n        { op: 'lineTo', data: [cx, cy] },\n        {\n          op: 'lineTo',\n          data: [cx + rx * Math.cos(strt), cy + ry * Math.sin(strt)],\n        }\n      );\n    }\n  }\n  return { type: 'path', ops };\n}\n\nexport function svgPath(path: string, o: ResolvedOptions): OpSet {\n  const segments = normalize(absolutize(parsePath(path)));\n  const ops: Op[] = [];\n  let first: Point = [0, 0];\n  let current: Point = [0, 0];\n  for (const { key, data } of segments) {\n    switch (key) {\n      case 'M': {\n        const ro = 1 * (o.maxRandomnessOffset || 0);\n        const pv = o.preserveVertices;\n        ops.push({\n          op: 'move',\n          data: data.map(d => d + (pv ? 0 : _offsetOpt(ro, o))),\n        });\n        current = [data[0], data[1]];\n        first = [data[0], data[1]];\n        break;\n      }\n      case 'L':\n        ops.push(..._doubleLine(current[0], current[1], data[0], data[1], o));\n        current = [data[0], data[1]];\n        break;\n      case 'C': {\n        const [x1, y1, x2, y2, x, y] = data;\n        ops.push(..._bezierTo(x1, y1, x2, y2, x, y, current, o));\n        current = [x, y];\n        break;\n      }\n      case 'Z':\n        ops.push(..._doubleLine(current[0], current[1], first[0], first[1], o));\n        current = [first[0], first[1]];\n        break;\n    }\n  }\n  return { type: 'path', ops };\n}\n\n// Fills\n\nexport function solidFillPolygon(\n  polygonList: Point[][],\n  o: ResolvedOptions\n): OpSet {\n  const ops: Op[] = [];\n  for (const points of polygonList) {\n    if (points.length) {\n      const offset = o.maxRandomnessOffset || 0;\n      const len = points.length;\n      if (len > 2) {\n        ops.push({\n          op: 'move',\n          data: [\n            points[0][0] + _offsetOpt(offset, o),\n            points[0][1] + _offsetOpt(offset, o),\n          ],\n        });\n        for (let i = 1; i < len; i++) {\n          ops.push({\n            op: 'lineTo',\n            data: [\n              points[i][0] + _offsetOpt(offset, o),\n              points[i][1] + _offsetOpt(offset, o),\n            ],\n          });\n        }\n      }\n    }\n  }\n  return { type: 'fillPath', ops };\n}\n\nexport function patternFillPolygons(\n  polygonList: Point[][],\n  o: ResolvedOptions\n): OpSet {\n  return getFiller(o, helper).fillPolygons(polygonList, o);\n}\n\nexport function patternFillArc(\n  x: number,\n  y: number,\n  width: number,\n  height: number,\n  start: number,\n  stop: number,\n  o: ResolvedOptions\n): OpSet {\n  const cx = x;\n  const cy = y;\n  let rx = Math.abs(width / 2);\n  let ry = Math.abs(height / 2);\n  rx += _offsetOpt(rx * 0.01, o);\n  ry += _offsetOpt(ry * 0.01, o);\n  let strt = start;\n  let stp = stop;\n  while (strt < 0) {\n    strt += Math.PI * 2;\n    stp += Math.PI * 2;\n  }\n  if (stp - strt > Math.PI * 2) {\n    strt = 0;\n    stp = Math.PI * 2;\n  }\n  const increment = (stp - strt) / o.curveStepCount;\n  const points: Point[] = [];\n  for (let angle = strt; angle <= stp; angle = angle + increment) {\n    points.push([cx + rx * Math.cos(angle), cy + ry * Math.sin(angle)]);\n  }\n  points.push([cx + rx * Math.cos(stp), cy + ry * Math.sin(stp)]);\n  points.push([cx, cy]);\n  return patternFillPolygons([points], o);\n}\n\nexport function randOffset(x: number, o: ResolvedOptions): number {\n  return _offsetOpt(x, o);\n}\n\nexport function randOffsetWithRange(\n  min: number,\n  max: number,\n  o: ResolvedOptions\n): number {\n  return _offset(min, max, o);\n}\n\nexport function doubleLineFillOps(\n  x1: number,\n  y1: number,\n  x2: number,\n  y2: number,\n  o: ResolvedOptions\n): Op[] {\n  return _doubleLine(x1, y1, x2, y2, o, true);\n}\n\n// Private helpers\n\nfunction cloneOptionsAlterSeed(ops: ResolvedOptions): ResolvedOptions {\n  const result: ResolvedOptions = { ...ops };\n  result.randomizer = undefined;\n  if (ops.seed) {\n    result.seed = ops.seed + 1;\n  }\n  return result;\n}\n\nfunction random(ops: ResolvedOptions): number {\n  if (!ops.randomizer) {\n    ops.randomizer = new Random(ops.seed || 0);\n  }\n  return ops.randomizer.next();\n}\n\nfunction _offset(\n  min: number,\n  max: number,\n  ops: ResolvedOptions,\n  roughnessGain = 1\n): number {\n  return ops.roughness * roughnessGain * (random(ops) * (max - min) + min);\n}\n\nfunction _offsetOpt(\n  x: number,\n  ops: ResolvedOptions,\n  roughnessGain = 1\n): number {\n  return _offset(-x, x, ops, roughnessGain);\n}\n\nfunction _doubleLine(\n  x1: number,\n  y1: number,\n  x2: number,\n  y2: number,\n  o: ResolvedOptions,\n  filling = false\n): Op[] {\n  const singleStroke = filling\n    ? o.disableMultiStrokeFill\n    : o.disableMultiStroke;\n  const o1 = _line(x1, y1, x2, y2, o, true, false);\n  if (singleStroke) {\n    return o1;\n  }\n  const o2 = _line(x1, y1, x2, y2, o, true, true);\n  return o1.concat(o2);\n}\n\nfunction _line(\n  x1: number,\n  y1: number,\n  x2: number,\n  y2: number,\n  o: ResolvedOptions,\n  move: boolean,\n  overlay: boolean\n): Op[] {\n  const lengthSq = Math.pow(x1 - x2, 2) + Math.pow(y1 - y2, 2);\n  const length = Math.sqrt(lengthSq);\n  let roughnessGain = 1;\n  if (length < 200) {\n    roughnessGain = 1;\n  } else if (length > 500) {\n    roughnessGain = 0.4;\n  } else {\n    roughnessGain = -0.0016668 * length + 1.233334;\n  }\n\n  let offset = o.maxRandomnessOffset || 0;\n  if (offset * offset * 100 > lengthSq) {\n    offset = length / 10;\n  }\n  const halfOffset = offset / 2;\n  const divergePoint = 0.2 + random(o) * 0.2;\n  let midDispX = (o.bowing * o.maxRandomnessOffset * (y2 - y1)) / 200;\n  let midDispY = (o.bowing * o.maxRandomnessOffset * (x1 - x2)) / 200;\n  midDispX = _offsetOpt(midDispX, o, roughnessGain);\n  midDispY = _offsetOpt(midDispY, o, roughnessGain);\n  const ops: Op[] = [];\n  const randomHalf = () => _offsetOpt(halfOffset, o, roughnessGain);\n  const randomFull = () => _offsetOpt(offset, o, roughnessGain);\n  const preserveVertices = o.preserveVertices;\n  if (move) {\n    if (overlay) {\n      ops.push({\n        op: 'move',\n        data: [\n          x1 + (preserveVertices ? 0 : randomHalf()),\n          y1 + (preserveVertices ? 0 : randomHalf()),\n        ],\n      });\n    } else {\n      ops.push({\n        op: 'move',\n        data: [\n          x1 + (preserveVertices ? 0 : _offsetOpt(offset, o, roughnessGain)),\n          y1 + (preserveVertices ? 0 : _offsetOpt(offset, o, roughnessGain)),\n        ],\n      });\n    }\n  }\n  if (overlay) {\n    ops.push({\n      op: 'bcurveTo',\n      data: [\n        midDispX + x1 + (x2 - x1) * divergePoint + randomHalf(),\n        midDispY + y1 + (y2 - y1) * divergePoint + randomHalf(),\n        midDispX + x1 + 2 * (x2 - x1) * divergePoint + randomHalf(),\n        midDispY + y1 + 2 * (y2 - y1) * divergePoint + randomHalf(),\n        x2 + (preserveVertices ? 0 : randomHalf()),\n        y2 + (preserveVertices ? 0 : randomHalf()),\n      ],\n    });\n  } else {\n    ops.push({\n      op: 'bcurveTo',\n      data: [\n        midDispX + x1 + (x2 - x1) * divergePoint + randomFull(),\n        midDispY + y1 + (y2 - y1) * divergePoint + randomFull(),\n        midDispX + x1 + 2 * (x2 - x1) * divergePoint + randomFull(),\n        midDispY + y1 + 2 * (y2 - y1) * divergePoint + randomFull(),\n        x2 + (preserveVertices ? 0 : randomFull()),\n        y2 + (preserveVertices ? 0 : randomFull()),\n      ],\n    });\n  }\n  return ops;\n}\n\nfunction _curveWithOffset(\n  points: Point[],\n  offset: number,\n  o: ResolvedOptions\n): Op[] {\n  const ps: Point[] = [];\n  ps.push([\n    points[0][0] + _offsetOpt(offset, o),\n    points[0][1] + _offsetOpt(offset, o),\n  ]);\n  ps.push([\n    points[0][0] + _offsetOpt(offset, o),\n    points[0][1] + _offsetOpt(offset, o),\n  ]);\n  for (let i = 1; i < points.length; i++) {\n    ps.push([\n      points[i][0] + _offsetOpt(offset, o),\n      points[i][1] + _offsetOpt(offset, o),\n    ]);\n    if (i === points.length - 1) {\n      ps.push([\n        points[i][0] + _offsetOpt(offset, o),\n        points[i][1] + _offsetOpt(offset, o),\n      ]);\n    }\n  }\n  return _curve(ps, null, o);\n}\n\nfunction _curve(\n  points: Point[],\n  closePoint: Point | null,\n  o: ResolvedOptions\n): Op[] {\n  const len = points.length;\n  const ops: Op[] = [];\n  if (len > 3) {\n    const b = [];\n    const s = 1 - o.curveTightness;\n    ops.push({ op: 'move', data: [points[1][0], points[1][1]] });\n    for (let i = 1; i + 2 < len; i++) {\n      const cachedVertArray = points[i];\n      b[0] = [cachedVertArray[0], cachedVertArray[1]];\n      b[1] = [\n        cachedVertArray[0] + (s * points[i + 1][0] - s * points[i - 1][0]) / 6,\n        cachedVertArray[1] + (s * points[i + 1][1] - s * points[i - 1][1]) / 6,\n      ];\n      b[2] = [\n        points[i + 1][0] + (s * points[i][0] - s * points[i + 2][0]) / 6,\n        points[i + 1][1] + (s * points[i][1] - s * points[i + 2][1]) / 6,\n      ];\n      b[3] = [points[i + 1][0], points[i + 1][1]];\n      ops.push({\n        op: 'bcurveTo',\n        data: [b[1][0], b[1][1], b[2][0], b[2][1], b[3][0], b[3][1]],\n      });\n    }\n    if (closePoint && closePoint.length === 2) {\n      const ro = o.maxRandomnessOffset;\n      ops.push({\n        op: 'lineTo',\n        data: [\n          closePoint[0] + _offsetOpt(ro, o),\n          closePoint[1] + _offsetOpt(ro, o),\n        ],\n      });\n    }\n  } else if (len === 3) {\n    ops.push({ op: 'move', data: [points[1][0], points[1][1]] });\n    ops.push({\n      op: 'bcurveTo',\n      data: [\n        points[1][0],\n        points[1][1],\n        points[2][0],\n        points[2][1],\n        points[2][0],\n        points[2][1],\n      ],\n    });\n  } else if (len === 2) {\n    ops.push(\n      ..._doubleLine(points[0][0], points[0][1], points[1][0], points[1][1], o)\n    );\n  }\n  return ops;\n}\n\nfunction _computeEllipsePoints(\n  increment: number,\n  cx: number,\n  cy: number,\n  rx: number,\n  ry: number,\n  offset: number,\n  overlap: number,\n  o: ResolvedOptions\n): Point[][] {\n  const coreOnly = o.roughness === 0;\n  const corePoints: Point[] = [];\n  const allPoints: Point[] = [];\n\n  if (coreOnly) {\n    increment = increment / 4;\n    allPoints.push([\n      cx + rx * Math.cos(-increment),\n      cy + ry * Math.sin(-increment),\n    ]);\n    for (let angle = 0; angle <= Math.PI * 2; angle = angle + increment) {\n      const p: Point = [cx + rx * Math.cos(angle), cy + ry * Math.sin(angle)];\n      corePoints.push(p);\n      allPoints.push(p);\n    }\n    allPoints.push([cx + rx * Math.cos(0), cy + ry * Math.sin(0)]);\n    allPoints.push([\n      cx + rx * Math.cos(increment),\n      cy + ry * Math.sin(increment),\n    ]);\n  } else {\n    const radOffset = _offsetOpt(0.5, o) - Math.PI / 2;\n    allPoints.push([\n      _offsetOpt(offset, o) + cx + 0.9 * rx * Math.cos(radOffset - increment),\n      _offsetOpt(offset, o) + cy + 0.9 * ry * Math.sin(radOffset - increment),\n    ]);\n    const endAngle = Math.PI * 2 + radOffset - 0.01;\n    for (let angle = radOffset; angle < endAngle; angle = angle + increment) {\n      const p: Point = [\n        _offsetOpt(offset, o) + cx + rx * Math.cos(angle),\n        _offsetOpt(offset, o) + cy + ry * Math.sin(angle),\n      ];\n      corePoints.push(p);\n      allPoints.push(p);\n    }\n    allPoints.push([\n      _offsetOpt(offset, o) +\n        cx +\n        rx * Math.cos(radOffset + Math.PI * 2 + overlap * 0.5),\n      _offsetOpt(offset, o) +\n        cy +\n        ry * Math.sin(radOffset + Math.PI * 2 + overlap * 0.5),\n    ]);\n    allPoints.push([\n      _offsetOpt(offset, o) + cx + 0.98 * rx * Math.cos(radOffset + overlap),\n      _offsetOpt(offset, o) + cy + 0.98 * ry * Math.sin(radOffset + overlap),\n    ]);\n    allPoints.push([\n      _offsetOpt(offset, o) +\n        cx +\n        0.9 * rx * Math.cos(radOffset + overlap * 0.5),\n      _offsetOpt(offset, o) +\n        cy +\n        0.9 * ry * Math.sin(radOffset + overlap * 0.5),\n    ]);\n  }\n\n  return [allPoints, corePoints];\n}\n\nfunction _arc(\n  increment: number,\n  cx: number,\n  cy: number,\n  rx: number,\n  ry: number,\n  strt: number,\n  stp: number,\n  offset: number,\n  o: ResolvedOptions\n) {\n  const radOffset = strt + _offsetOpt(0.1, o);\n  const points: Point[] = [];\n  points.push([\n    _offsetOpt(offset, o) + cx + 0.9 * rx * Math.cos(radOffset - increment),\n    _offsetOpt(offset, o) + cy + 0.9 * ry * Math.sin(radOffset - increment),\n  ]);\n  for (let angle = radOffset; angle <= stp; angle = angle + increment) {\n    points.push([\n      _offsetOpt(offset, o) + cx + rx * Math.cos(angle),\n      _offsetOpt(offset, o) + cy + ry * Math.sin(angle),\n    ]);\n  }\n  points.push([cx + rx * Math.cos(stp), cy + ry * Math.sin(stp)]);\n  points.push([cx + rx * Math.cos(stp), cy + ry * Math.sin(stp)]);\n  return _curve(points, null, o);\n}\n\nfunction _bezierTo(\n  x1: number,\n  y1: number,\n  x2: number,\n  y2: number,\n  x: number,\n  y: number,\n  current: Point,\n  o: ResolvedOptions\n): Op[] {\n  const ops: Op[] = [];\n  const ros = [o.maxRandomnessOffset || 1, (o.maxRandomnessOffset || 1) + 0.3];\n  let f: Point = [0, 0];\n  const iterations = o.disableMultiStroke ? 1 : 2;\n  const preserveVertices = o.preserveVertices;\n  for (let i = 0; i < iterations; i++) {\n    if (i === 0) {\n      ops.push({ op: 'move', data: [current[0], current[1]] });\n    } else {\n      ops.push({\n        op: 'move',\n        data: [\n          current[0] + (preserveVertices ? 0 : _offsetOpt(ros[0], o)),\n          current[1] + (preserveVertices ? 0 : _offsetOpt(ros[0], o)),\n        ],\n      });\n    }\n    f = preserveVertices\n      ? [x, y]\n      : [x + _offsetOpt(ros[i], o), y + _offsetOpt(ros[i], o)];\n    ops.push({\n      op: 'bcurveTo',\n      data: [\n        x1 + _offsetOpt(ros[i], o),\n        y1 + _offsetOpt(ros[i], o),\n        x2 + _offsetOpt(ros[i], o),\n        y2 + _offsetOpt(ros[i], o),\n        f[0],\n        f[1],\n      ],\n    });\n  }\n  return ops;\n}\n"]}