{"version":3,"file":"zigzag-line-filler.js","sourceRoot":"","sources":["../../../../src/utils/rough/fillers/zigzag-line-filler.ts"],"names":[],"mappings":"AAIA,OAAO,EAAE,UAAU,EAAE,MAAM,gBAAgB,CAAC;AAC5C,OAAO,EAAE,mBAAmB,EAAE,MAAM,wBAAwB,CAAC;AAE7D,MAAM,OAAO,gBAAgB;IAG3B,YAAY,MAAoB;QAC9B,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;IACvB,CAAC;IAEO,WAAW,CAAC,KAAa,EAAE,EAAU,EAAE,CAAkB;QAC/D,MAAM,GAAG,GAAS,EAAE,CAAC;QACrB,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;YACnB,MAAM,MAAM,GAAG,UAAU,CAAC,IAAI,CAAC,CAAC;YAChC,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;YAC5C,IAAI,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;YACjB,IAAI,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;YACjB,IAAI,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC;gBAClB,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;gBACb,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;YACf,CAAC;YACD,MAAM,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YAC3D,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,EAAE,CAAC,EAAE,EAAE,CAAC;gBAC/B,MAAM,MAAM,GAAG,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC;gBAC1B,MAAM,IAAI,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC;gBAC9B,MAAM,EAAE,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;gBAC1C,MAAM,KAAK,GAAU;oBACnB,EAAE,CAAC,CAAC,CAAC,GAAG,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC;oBAChC,EAAE,CAAC,CAAC,CAAC,GAAG,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC;iBACjC,CAAC;gBACF,MAAM,GAAG,GAAU;oBACjB,EAAE,CAAC,CAAC,CAAC,GAAG,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC;oBAC9B,EAAE,CAAC,CAAC,CAAC,GAAG,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC;iBAC/B,CAAC;gBACF,MAAM,MAAM,GAAU;oBACpB,KAAK,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,GAAG,IAAI,CAAC,EAAE,GAAG,CAAC,CAAC;oBAC7C,KAAK,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,GAAG,IAAI,CAAC,EAAE,GAAG,CAAC,CAAC;iBAC9C,CAAC;gBACF,GAAG,CAAC,IAAI,CACN,GAAG,IAAI,CAAC,MAAM,CAAC,aAAa,CAC1B,KAAK,CAAC,CAAC,CAAC,EACR,KAAK,CAAC,CAAC,CAAC,EACR,MAAM,CAAC,CAAC,CAAC,EACT,MAAM,CAAC,CAAC,CAAC,EACT,CAAC,CACF,EACD,GAAG,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CACtE,CAAC;YACJ,CAAC;QACH,CAAC,CAAC,CAAC;QACH,OAAO,GAAG,CAAC;IACb,CAAC;IAED,YAAY,CAAC,WAAsB,EAAE,CAAkB;QACrD,MAAM,GAAG,GAAG,CAAC,CAAC,UAAU,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,WAAW,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC;QAChE,MAAM,EAAE,GAAG,CAAC,CAAC,YAAY,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,YAAY,CAAC;QACrD,CAAC,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,CAAC,EAAE,EAAE,UAAU,EAAE,GAAG,GAAG,EAAE,EAAE,CAAC,CAAC;QACnD,MAAM,KAAK,GAAG,mBAAmB,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC;QAClD,OAAO,EAAE,IAAI,EAAE,YAAY,EAAE,GAAG,EAAE,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC;IACrE,CAAC;CACF","sourcesContent":["import type { Op, OpSet, ResolvedOptions } from '../core.js';\nimport type { Line, Point } from '../geometry.js';\nimport type { PatternFiller, RenderHelper } from './filler-interface.js';\n\nimport { lineLength } from '../geometry.js';\nimport { polygonHachureLines } from './scan-line-hachure.js';\n\nexport class ZigZagLineFiller implements PatternFiller {\n  private helper: RenderHelper;\n\n  constructor(helper: RenderHelper) {\n    this.helper = helper;\n  }\n\n  private zigzagLines(lines: Line[], zo: number, o: ResolvedOptions): Op[] {\n    const ops: Op[] = [];\n    lines.forEach(line => {\n      const length = lineLength(line);\n      const count = Math.round(length / (2 * zo));\n      let p1 = line[0];\n      let p2 = line[1];\n      if (p1[0] > p2[0]) {\n        p1 = line[1];\n        p2 = line[0];\n      }\n      const alpha = Math.atan((p2[1] - p1[1]) / (p2[0] - p1[0]));\n      for (let i = 0; i < count; i++) {\n        const lstart = i * 2 * zo;\n        const lend = (i + 1) * 2 * zo;\n        const dz = Math.sqrt(2 * Math.pow(zo, 2));\n        const start: Point = [\n          p1[0] + lstart * Math.cos(alpha),\n          p1[1] + lstart * Math.sin(alpha),\n        ];\n        const end: Point = [\n          p1[0] + lend * Math.cos(alpha),\n          p1[1] + lend * Math.sin(alpha),\n        ];\n        const middle: Point = [\n          start[0] + dz * Math.cos(alpha + Math.PI / 4),\n          start[1] + dz * Math.sin(alpha + Math.PI / 4),\n        ];\n        ops.push(\n          ...this.helper.doubleLineOps(\n            start[0],\n            start[1],\n            middle[0],\n            middle[1],\n            o\n          ),\n          ...this.helper.doubleLineOps(middle[0], middle[1], end[0], end[1], o)\n        );\n      }\n    });\n    return ops;\n  }\n\n  fillPolygons(polygonList: Point[][], o: ResolvedOptions): OpSet {\n    const gap = o.hachureGap < 0 ? o.strokeWidth * 4 : o.hachureGap;\n    const zo = o.zigzagOffset < 0 ? gap : o.zigzagOffset;\n    o = Object.assign({}, o, { hachureGap: gap + zo });\n    const lines = polygonHachureLines(polygonList, o);\n    return { type: 'fillSketch', ops: this.zigzagLines(lines, zo, o) };\n  }\n}\n"]}