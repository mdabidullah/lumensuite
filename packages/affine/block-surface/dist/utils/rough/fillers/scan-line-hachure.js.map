{"version":3,"file":"scan-line-hachure.js","sourceRoot":"","sources":["../../../../src/utils/rough/fillers/scan-line-hachure.ts"],"names":[],"mappings":"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","sourcesContent":["import type { ResolvedOptions } from '../core.js';\nimport type { Line, Point } from '../geometry.js';\n\nimport { rotateLines, rotatePoints } from '../geometry.js';\n\ninterface EdgeEntry {\n  ymin: number;\n  ymax: number;\n  x: number;\n  islope: number;\n}\n\ninterface ActiveEdgeEntry {\n  s: number;\n  edge: EdgeEntry;\n}\n\nexport function polygonHachureLines(\n  polygonList: Point[][],\n  o: ResolvedOptions\n): Line[] {\n  const angle = o.hachureAngle + 90;\n  let gap = o.hachureGap;\n  if (gap < 0) {\n    gap = o.strokeWidth * 4;\n  }\n  gap = Math.max(gap, 0.1);\n\n  const rotationCenter: Point = [0, 0];\n  if (angle) {\n    for (const polygon of polygonList) {\n      rotatePoints(polygon, rotationCenter, angle);\n    }\n  }\n  const lines = straightHachureLines(polygonList, gap);\n  if (angle) {\n    for (const polygon of polygonList) {\n      rotatePoints(polygon, rotationCenter, -angle);\n    }\n    rotateLines(lines, rotationCenter, -angle);\n  }\n  return lines;\n}\n\nfunction straightHachureLines(polygonList: Point[][], gap: number): Line[] {\n  const vertexArray: Point[][] = [];\n  for (const polygon of polygonList) {\n    const vertices = [...polygon];\n    if (vertices[0].join(',') !== vertices[vertices.length - 1].join(',')) {\n      vertices.push([vertices[0][0], vertices[0][1]]);\n    }\n    if (vertices.length > 2) {\n      vertexArray.push(vertices);\n    }\n  }\n\n  const lines: Line[] = [];\n  gap = Math.max(gap, 0.1);\n\n  // Create sorted edges table\n  const edges: EdgeEntry[] = [];\n\n  for (const vertices of vertexArray) {\n    for (let i = 0; i < vertices.length - 1; i++) {\n      const p1 = vertices[i];\n      const p2 = vertices[i + 1];\n      if (p1[1] !== p2[1]) {\n        const ymin = Math.min(p1[1], p2[1]);\n        edges.push({\n          ymin,\n          ymax: Math.max(p1[1], p2[1]),\n          x: ymin === p1[1] ? p1[0] : p2[0],\n          islope: (p2[0] - p1[0]) / (p2[1] - p1[1]),\n        });\n      }\n    }\n  }\n\n  edges.sort((e1, e2) => {\n    if (e1.ymin < e2.ymin) {\n      return -1;\n    }\n    if (e1.ymin > e2.ymin) {\n      return 1;\n    }\n    if (e1.x < e2.x) {\n      return -1;\n    }\n    if (e1.x > e2.x) {\n      return 1;\n    }\n    if (e1.ymax === e2.ymax) {\n      return 0;\n    }\n    return (e1.ymax - e2.ymax) / Math.abs(e1.ymax - e2.ymax);\n  });\n  if (!edges.length) {\n    return lines;\n  }\n\n  // Start scanning\n  let activeEdges: ActiveEdgeEntry[] = [];\n  let y = edges[0].ymin;\n  while (activeEdges.length || edges.length) {\n    if (edges.length) {\n      let ix = -1;\n      for (let i = 0; i < edges.length; i++) {\n        if (edges[i].ymin > y) {\n          break;\n        }\n        ix = i;\n      }\n      const removed = edges.splice(0, ix + 1);\n      removed.forEach(edge => {\n        activeEdges.push({ s: y, edge });\n      });\n    }\n    activeEdges = activeEdges.filter(ae => {\n      if (ae.edge.ymax <= y) {\n        return false;\n      }\n      return true;\n    });\n    activeEdges.sort((ae1, ae2) => {\n      if (ae1.edge.x === ae2.edge.x) {\n        return 0;\n      }\n      return (ae1.edge.x - ae2.edge.x) / Math.abs(ae1.edge.x - ae2.edge.x);\n    });\n\n    // fill between the edges\n    if (activeEdges.length > 1) {\n      for (let i = 0; i < activeEdges.length; i = i + 2) {\n        const nexti = i + 1;\n        if (nexti >= activeEdges.length) {\n          break;\n        }\n        const ce = activeEdges[i].edge;\n        const ne = activeEdges[nexti].edge;\n        lines.push([\n          [Math.round(ce.x), y],\n          [Math.round(ne.x), y],\n        ]);\n      }\n    }\n\n    y += gap;\n    activeEdges.forEach(ae => {\n      ae.edge.x = ae.edge.x + gap * ae.edge.islope;\n    });\n  }\n  return lines;\n}\n"]}