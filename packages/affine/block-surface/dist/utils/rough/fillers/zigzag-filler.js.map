{"version":3,"file":"zigzag-filler.js","sourceRoot":"","sources":["../../../../src/utils/rough/fillers/zigzag-filler.ts"],"names":[],"mappings":"AAGA,OAAO,EAAE,UAAU,EAAE,MAAM,gBAAgB,CAAC;AAC5C,OAAO,EAAE,aAAa,EAAE,MAAM,qBAAqB,CAAC;AACpD,OAAO,EAAE,mBAAmB,EAAE,MAAM,wBAAwB,CAAC;AAE7D,MAAM,OAAO,YAAa,SAAQ,aAAa;IACpC,YAAY,CAAC,WAAsB,EAAE,CAAkB;QAC9D,IAAI,GAAG,GAAG,CAAC,CAAC,UAAU,CAAC;QACvB,IAAI,GAAG,GAAG,CAAC,EAAE,CAAC;YACZ,GAAG,GAAG,CAAC,CAAC,WAAW,GAAG,CAAC,CAAC;QAC1B,CAAC;QACD,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;QACzB,MAAM,EAAE,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,CAAC,EAAE,EAAE,UAAU,EAAE,GAAG,EAAE,CAAC,CAAC;QACrD,MAAM,KAAK,GAAG,mBAAmB,CAAC,WAAW,EAAE,EAAE,CAAC,CAAC;QACnD,MAAM,WAAW,GAAG,CAAC,IAAI,CAAC,EAAE,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC,YAAY,CAAC;QACrD,MAAM,WAAW,GAAW,EAAE,CAAC;QAC/B,MAAM,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;QAC9C,MAAM,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;QAC9C,KAAK,MAAM,CAAC,EAAE,EAAE,EAAE,CAAC,IAAI,KAAK,EAAE,CAAC;YAC7B,IAAI,UAAU,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC;gBACzB,WAAW,CAAC,IAAI,CACd,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,EACrC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,CACtC,CAAC;YACJ,CAAC;QACH,CAAC;QACD,MAAM,GAAG,GAAG,IAAI,CAAC,WAAW,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC;QAC7C,OAAO,EAAE,IAAI,EAAE,YAAY,EAAE,GAAG,EAAE,CAAC;IACrC,CAAC;CACF","sourcesContent":["import type { OpSet, ResolvedOptions } from '../core.js';\nimport type { Line, Point } from '../geometry.js';\n\nimport { lineLength } from '../geometry.js';\nimport { HachureFiller } from './hachure-filler.js';\nimport { polygonHachureLines } from './scan-line-hachure.js';\n\nexport class ZigZagFiller extends HachureFiller {\n  override fillPolygons(polygonList: Point[][], o: ResolvedOptions): OpSet {\n    let gap = o.hachureGap;\n    if (gap < 0) {\n      gap = o.strokeWidth * 4;\n    }\n    gap = Math.max(gap, 0.1);\n    const o2 = Object.assign({}, o, { hachureGap: gap });\n    const lines = polygonHachureLines(polygonList, o2);\n    const zigZagAngle = (Math.PI / 180) * o.hachureAngle;\n    const zigzagLines: Line[] = [];\n    const dgx = gap * 0.5 * Math.cos(zigZagAngle);\n    const dgy = gap * 0.5 * Math.sin(zigZagAngle);\n    for (const [p1, p2] of lines) {\n      if (lineLength([p1, p2])) {\n        zigzagLines.push(\n          [[p1[0] - dgx, p1[1] + dgy], [...p2]],\n          [[p1[0] + dgx, p1[1] - dgy], [...p2]]\n        );\n      }\n    }\n    const ops = this.renderLines(zigzagLines, o);\n    return { type: 'fillSketch', ops };\n  }\n}\n"]}