{"version":3,"file":"dot-filler.js","sourceRoot":"","sources":["../../../../src/utils/rough/fillers/dot-filler.ts"],"names":[],"mappings":"AAIA,OAAO,EAAE,UAAU,EAAE,MAAM,gBAAgB,CAAC;AAC5C,OAAO,EAAE,mBAAmB,EAAE,MAAM,wBAAwB,CAAC;AAE7D,MAAM,OAAO,SAAS;IAGpB,YAAY,MAAoB;QAC9B,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;IACvB,CAAC;IAEO,WAAW,CAAC,KAAa,EAAE,CAAkB;QACnD,MAAM,GAAG,GAAS,EAAE,CAAC;QACrB,IAAI,GAAG,GAAG,CAAC,CAAC,UAAU,CAAC;QACvB,IAAI,GAAG,GAAG,CAAC,EAAE,CAAC;YACZ,GAAG,GAAG,CAAC,CAAC,WAAW,GAAG,CAAC,CAAC;QAC1B,CAAC;QACD,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;QACzB,IAAI,OAAO,GAAG,CAAC,CAAC,UAAU,CAAC;QAC3B,IAAI,OAAO,GAAG,CAAC,EAAE,CAAC;YAChB,OAAO,GAAG,CAAC,CAAC,WAAW,GAAG,CAAC,CAAC;QAC9B,CAAC;QACD,MAAM,EAAE,GAAG,GAAG,GAAG,CAAC,CAAC;QACnB,KAAK,MAAM,IAAI,IAAI,KAAK,EAAE,CAAC;YACzB,MAAM,MAAM,GAAG,UAAU,CAAC,IAAI,CAAC,CAAC;YAChC,MAAM,EAAE,GAAG,MAAM,GAAG,GAAG,CAAC;YACxB,MAAM,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;YAChC,MAAM,MAAM,GAAG,MAAM,GAAG,KAAK,GAAG,GAAG,CAAC;YACpC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,GAAG,GAAG,CAAC,CAAC;YAClD,MAAM,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YAE9C,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,EAAE,CAAC,EAAE,EAAE,CAAC;gBAC/B,MAAM,CAAC,GAAG,IAAI,GAAG,MAAM,GAAG,CAAC,GAAG,GAAG,CAAC;gBAClC,MAAM,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,MAAM,EAAE,GAAG,CAAC,GAAG,EAAE,CAAC;gBAC3C,MAAM,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,MAAM,EAAE,GAAG,CAAC,GAAG,EAAE,CAAC;gBAC3C,MAAM,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,EAAE,EAAE,EAAE,EAAE,OAAO,EAAE,OAAO,EAAE,CAAC,CAAC,CAAC;gBAC5D,GAAG,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC;YACtB,CAAC;QACH,CAAC;QACD,OAAO,EAAE,IAAI,EAAE,YAAY,EAAE,GAAG,EAAE,CAAC;IACrC,CAAC;IAED,YAAY,CAAC,WAAsB,EAAE,CAAkB;QACrD,CAAC,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,CAAC,EAAE,EAAE,YAAY,EAAE,CAAC,EAAE,CAAC,CAAC;QAC9C,MAAM,KAAK,GAAG,mBAAmB,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC;QAClD,OAAO,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;IACpC,CAAC;CACF","sourcesContent":["import type { Op, OpSet, ResolvedOptions } from '../core.js';\nimport type { Line, Point } from '../geometry.js';\nimport type { PatternFiller, RenderHelper } from './filler-interface.js';\n\nimport { lineLength } from '../geometry.js';\nimport { polygonHachureLines } from './scan-line-hachure.js';\n\nexport class DotFiller implements PatternFiller {\n  private helper: RenderHelper;\n\n  constructor(helper: RenderHelper) {\n    this.helper = helper;\n  }\n\n  private dotsOnLines(lines: Line[], o: ResolvedOptions): OpSet {\n    const ops: Op[] = [];\n    let gap = o.hachureGap;\n    if (gap < 0) {\n      gap = o.strokeWidth * 4;\n    }\n    gap = Math.max(gap, 0.1);\n    let fweight = o.fillWeight;\n    if (fweight < 0) {\n      fweight = o.strokeWidth / 2;\n    }\n    const ro = gap / 4;\n    for (const line of lines) {\n      const length = lineLength(line);\n      const dl = length / gap;\n      const count = Math.ceil(dl) - 1;\n      const offset = length - count * gap;\n      const x = (line[0][0] + line[1][0]) / 2 - gap / 4;\n      const minY = Math.min(line[0][1], line[1][1]);\n\n      for (let i = 0; i < count; i++) {\n        const y = minY + offset + i * gap;\n        const cx = x - ro + Math.random() * 2 * ro;\n        const cy = y - ro + Math.random() * 2 * ro;\n        const el = this.helper.ellipse(cx, cy, fweight, fweight, o);\n        ops.push(...el.ops);\n      }\n    }\n    return { type: 'fillSketch', ops };\n  }\n\n  fillPolygons(polygonList: Point[][], o: ResolvedOptions): OpSet {\n    o = Object.assign({}, o, { hachureAngle: 0 });\n    const lines = polygonHachureLines(polygonList, o);\n    return this.dotsOnLines(lines, o);\n  }\n}\n"]}