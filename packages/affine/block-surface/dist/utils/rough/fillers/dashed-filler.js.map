{"version":3,"file":"dashed-filler.js","sourceRoot":"","sources":["../../../../src/utils/rough/fillers/dashed-filler.ts"],"names":[],"mappings":"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","sourcesContent":["import type { Op, OpSet, ResolvedOptions } from '../core.js';\nimport type { Line, Point } from '../geometry.js';\nimport type { PatternFiller, RenderHelper } from './filler-interface.js';\n\nimport { lineLength } from '../geometry.js';\nimport { polygonHachureLines } from './scan-line-hachure.js';\n\nexport class DashedFiller implements PatternFiller {\n  private helper: RenderHelper;\n\n  constructor(helper: RenderHelper) {\n    this.helper = helper;\n  }\n\n  private dashedLine(lines: Line[], o: ResolvedOptions): Op[] {\n    const offset =\n      o.dashOffset < 0\n        ? o.hachureGap < 0\n          ? o.strokeWidth * 4\n          : o.hachureGap\n        : o.dashOffset;\n    const gap =\n      o.dashGap < 0\n        ? o.hachureGap < 0\n          ? o.strokeWidth * 4\n          : o.hachureGap\n        : o.dashGap;\n    const ops: Op[] = [];\n    lines.forEach(line => {\n      const length = lineLength(line);\n      const count = Math.floor(length / (offset + gap));\n      const startOffset = (length + gap - count * (offset + gap)) / 2;\n      let p1 = line[0];\n      let p2 = line[1];\n      if (p1[0] > p2[0]) {\n        p1 = line[1];\n        p2 = line[0];\n      }\n      const alpha = Math.atan((p2[1] - p1[1]) / (p2[0] - p1[0]));\n      for (let i = 0; i < count; i++) {\n        const lstart = i * (offset + gap);\n        const lend = lstart + offset;\n        const start: Point = [\n          p1[0] + lstart * Math.cos(alpha) + startOffset * Math.cos(alpha),\n          p1[1] + lstart * Math.sin(alpha) + startOffset * Math.sin(alpha),\n        ];\n        const end: Point = [\n          p1[0] + lend * Math.cos(alpha) + startOffset * Math.cos(alpha),\n          p1[1] + lend * Math.sin(alpha) + startOffset * Math.sin(alpha),\n        ];\n        ops.push(\n          ...this.helper.doubleLineOps(start[0], start[1], end[0], end[1], o)\n        );\n      }\n    });\n    return ops;\n  }\n\n  fillPolygons(polygonList: Point[][], o: ResolvedOptions): OpSet {\n    const lines = polygonHachureLines(polygonList, o);\n    return { type: 'fillSketch', ops: this.dashedLine(lines, o) };\n  }\n}\n"]}