{"version":3,"file":"font.js","sourceRoot":"","sources":["../../src/utils/font.ts"],"names":[],"mappings":"AAEA,OAAO,EAAE,UAAU,EAAE,MAAM,wBAAwB,CAAC;AAEpD,MAAM,UAAU,cAAc,CAAC,UAA+B;IAC5D,OAAO,IAAI,UAAU,GAAG,CAAC;AAC3B,CAAC;AAED,MAAM,CAAC,MAAM,YAAY,GAAG,UAAU;IACpC,CAAC,CAAC,GAAG,EAAE;QACH,MAAM,IAAI,GAAG,QAAQ,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC;QACnC,MAAM,KAAK,GAAG,EAAE,CAAC;QACjB,IAAI,IAAI,GAAG,KAAK,CAAC;QACjB,OAAO,CAAC,IAAI,EAAE,CAAC;YACb,MAAM,IAAI,GAAG,IAAI,CAAC,IAAI,EAAE,CAAC;YACzB,IAAI,GAAG,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC;YACnB,IAAI,IAAI,CAAC,KAAK,EAAE,CAAC;gBACf,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YACzB,CAAC;QACH,CAAC;QACD,OAAO,KAAK,CAAC;IACf,CAAC;IACH,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,QAAQ,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,CAAC;AAErC,MAAM,CAAC,MAAM,gBAAgB,GAAG,UAAU;IACxC,CAAC,CAAC,CAAC,UAA+B,EAAE,EAAE,CAAC,CAAC,QAAkB,EAAE,EAAE,CAC1D,QAAQ,CAAC,MAAM,KAAK,IAAI,UAAU,GAAG;IACzC,CAAC,CAAC,CAAC,UAA+B,EAAE,EAAE,CAAC,CAAC,QAAkB,EAAE,EAAE,CAC1D,QAAQ,CAAC,MAAM,KAAK,UAAU,CAAC;AAErC,MAAM,UAAU,wBAAwB,CACtC,UAA+B;IAE/B,OAAO,CACL,YAAY,EAAE;SACX,MAAM,CAAC,gBAAgB,CAAC,UAAU,CAAC,CAAC;QACrC,8BAA8B;SAC7B,MAAM,CACL,CAAC,IAAI,EAAE,KAAK,EAAE,GAAG,EAAE,EAAE,CACnB,GAAG,CAAC,SAAS,CACX,QAAQ,CAAC,EAAE,CACT,QAAQ,CAAC,MAAM,KAAK,IAAI,CAAC,MAAM;QAC/B,QAAQ,CAAC,MAAM,KAAK,IAAI,CAAC,MAAM;QAC/B,QAAQ,CAAC,KAAK,KAAK,IAAI,CAAC,KAAK,CAChC,KAAK,KAAK,CACd,CACJ,CAAC;AACJ,CAAC","sourcesContent":["import type { FontFamily } from '@lumensuite/affine-model';\n\nimport { IS_FIREFOX } from '@lumensuite/global/env';\n\nexport function wrapFontFamily(fontFamily: FontFamily | string): string {\n  return `\"${fontFamily}\"`;\n}\n\nexport const getFontFaces = IS_FIREFOX\n  ? () => {\n      const keys = document.fonts.keys();\n      const fonts = [];\n      let done = false;\n      while (!done) {\n        const item = keys.next();\n        done = !!item.done;\n        if (item.value) {\n          fonts.push(item.value);\n        }\n      }\n      return fonts;\n    }\n  : () => [...document.fonts.keys()];\n\nexport const isSameFontFamily = IS_FIREFOX\n  ? (fontFamily: FontFamily | string) => (fontFace: FontFace) =>\n      fontFace.family === `\"${fontFamily}\"`\n  : (fontFamily: FontFamily | string) => (fontFace: FontFace) =>\n      fontFace.family === fontFamily;\n\nexport function getFontFacesByFontFamily(\n  fontFamily: FontFamily | string\n): FontFace[] {\n  return (\n    getFontFaces()\n      .filter(isSameFontFamily(fontFamily))\n      // remove duplicate font faces\n      .filter(\n        (item, index, arr) =>\n          arr.findIndex(\n            fontFace =>\n              fontFace.family === item.family &&\n              fontFace.weight === item.weight &&\n              fontFace.style === item.style\n          ) === index\n      )\n  );\n}\n"]}