{"version":3,"file":"normalize.js","sourceRoot":"","sources":["../../../src/utils/path-data-parser/normalize.ts"],"names":[],"mappings":"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","sourcesContent":["import type { Segment } from './parser.js';\n\n// Normalize path to include only M, L, C, and Z commands\nexport function normalize(segments: Segment[]): Segment[] {\n  const out: Segment[] = [];\n\n  let lastType = '';\n  let cx = 0,\n    cy = 0;\n  let subx = 0,\n    suby = 0;\n  let lcx = 0,\n    lcy = 0;\n\n  for (const { key, data } of segments) {\n    switch (key) {\n      case 'M':\n        out.push({ key: 'M', data: [...data] });\n        [cx, cy] = data;\n        [subx, suby] = data;\n        break;\n      case 'C':\n        out.push({ key: 'C', data: [...data] });\n        cx = data[4];\n        cy = data[5];\n        lcx = data[2];\n        lcy = data[3];\n        break;\n      case 'L':\n        out.push({ key: 'L', data: [...data] });\n        [cx, cy] = data;\n        break;\n      case 'H':\n        cx = data[0];\n        out.push({ key: 'L', data: [cx, cy] });\n        break;\n      case 'V':\n        cy = data[0];\n        out.push({ key: 'L', data: [cx, cy] });\n        break;\n      case 'S': {\n        let cx1 = 0,\n          cy1 = 0;\n        if (lastType === 'C' || lastType === 'S') {\n          cx1 = cx + (cx - lcx);\n          cy1 = cy + (cy - lcy);\n        } else {\n          cx1 = cx;\n          cy1 = cy;\n        }\n        out.push({ key: 'C', data: [cx1, cy1, ...data] });\n        lcx = data[0];\n        lcy = data[1];\n        cx = data[2];\n        cy = data[3];\n        break;\n      }\n      case 'T': {\n        const [x, y] = data;\n        let x1 = 0,\n          y1 = 0;\n        if (lastType === 'Q' || lastType === 'T') {\n          x1 = cx + (cx - lcx);\n          y1 = cy + (cy - lcy);\n        } else {\n          x1 = cx;\n          y1 = cy;\n        }\n        const cx1 = cx + (2 * (x1 - cx)) / 3;\n        const cy1 = cy + (2 * (y1 - cy)) / 3;\n        const cx2 = x + (2 * (x1 - x)) / 3;\n        const cy2 = y + (2 * (y1 - y)) / 3;\n        out.push({ key: 'C', data: [cx1, cy1, cx2, cy2, x, y] });\n        lcx = x1;\n        lcy = y1;\n        cx = x;\n        cy = y;\n        break;\n      }\n      case 'Q': {\n        const [x1, y1, x, y] = data;\n        const cx1 = cx + (2 * (x1 - cx)) / 3;\n        const cy1 = cy + (2 * (y1 - cy)) / 3;\n        const cx2 = x + (2 * (x1 - x)) / 3;\n        const cy2 = y + (2 * (y1 - y)) / 3;\n        out.push({ key: 'C', data: [cx1, cy1, cx2, cy2, x, y] });\n        lcx = x1;\n        lcy = y1;\n        cx = x;\n        cy = y;\n        break;\n      }\n      case 'A': {\n        const r1 = Math.abs(data[0]);\n        const r2 = Math.abs(data[1]);\n        const angle = data[2];\n        const largeArcFlag = data[3];\n        const sweepFlag = data[4];\n        const x = data[5];\n        const y = data[6];\n        if (r1 === 0 || r2 === 0) {\n          out.push({ key: 'C', data: [cx, cy, x, y, x, y] });\n          cx = x;\n          cy = y;\n        } else {\n          if (cx !== x || cy !== y) {\n            const curves: number[][] = arcToCubicCurves(\n              cx,\n              cy,\n              x,\n              y,\n              r1,\n              r2,\n              angle,\n              largeArcFlag,\n              sweepFlag\n            );\n            curves.forEach(function (curve) {\n              out.push({ key: 'C', data: curve });\n            });\n            cx = x;\n            cy = y;\n          }\n        }\n        break;\n      }\n      case 'Z':\n        out.push({ key: 'Z', data: [] });\n        cx = subx;\n        cy = suby;\n        break;\n    }\n    lastType = key;\n  }\n  return out;\n}\n\nfunction degToRad(degrees: number): number {\n  return (Math.PI * degrees) / 180;\n}\n\nfunction rotate(x: number, y: number, angleRad: number): [number, number] {\n  const X = x * Math.cos(angleRad) - y * Math.sin(angleRad);\n  const Y = x * Math.sin(angleRad) + y * Math.cos(angleRad);\n  return [X, Y];\n}\n\nfunction arcToCubicCurves(\n  x1: number,\n  y1: number,\n  x2: number,\n  y2: number,\n  r1: number,\n  r2: number,\n  angle: number,\n  largeArcFlag: number,\n  sweepFlag: number,\n  recursive?: number[]\n): number[][] {\n  const angleRad = degToRad(angle);\n  let params: number[][] = [];\n\n  let f1 = 0,\n    f2 = 0,\n    cx = 0,\n    cy = 0;\n  if (recursive) {\n    [f1, f2, cx, cy] = recursive;\n  } else {\n    [x1, y1] = rotate(x1, y1, -angleRad);\n    [x2, y2] = rotate(x2, y2, -angleRad);\n\n    const x = (x1 - x2) / 2;\n    const y = (y1 - y2) / 2;\n    let h = (x * x) / (r1 * r1) + (y * y) / (r2 * r2);\n    if (h > 1) {\n      h = Math.sqrt(h);\n      r1 = h * r1;\n      r2 = h * r2;\n    }\n\n    const sign = largeArcFlag === sweepFlag ? -1 : 1;\n\n    const r1Pow = r1 * r1;\n    const r2Pow = r2 * r2;\n\n    const left = r1Pow * r2Pow - r1Pow * y * y - r2Pow * x * x;\n    const right = r1Pow * y * y + r2Pow * x * x;\n\n    const k = sign * Math.sqrt(Math.abs(left / right));\n\n    cx = (k * r1 * y) / r2 + (x1 + x2) / 2;\n    cy = (k * -r2 * x) / r1 + (y1 + y2) / 2;\n\n    f1 = Math.asin(parseFloat(((y1 - cy) / r2).toFixed(9)));\n    f2 = Math.asin(parseFloat(((y2 - cy) / r2).toFixed(9)));\n\n    if (x1 < cx) {\n      f1 = Math.PI - f1;\n    }\n    if (x2 < cx) {\n      f2 = Math.PI - f2;\n    }\n\n    if (f1 < 0) {\n      f1 = Math.PI * 2 + f1;\n    }\n    if (f2 < 0) {\n      f2 = Math.PI * 2 + f2;\n    }\n\n    if (sweepFlag && f1 > f2) {\n      f1 = f1 - Math.PI * 2;\n    }\n    if (!sweepFlag && f2 > f1) {\n      f2 = f2 - Math.PI * 2;\n    }\n  }\n\n  let df = f2 - f1;\n\n  if (Math.abs(df) > (Math.PI * 120) / 180) {\n    const f2old = f2;\n    const x2old = x2;\n    const y2old = y2;\n\n    if (sweepFlag && f2 > f1) {\n      f2 = f1 + ((Math.PI * 120) / 180) * 1;\n    } else {\n      f2 = f1 + ((Math.PI * 120) / 180) * -1;\n    }\n\n    x2 = cx + r1 * Math.cos(f2);\n    y2 = cy + r2 * Math.sin(f2);\n    params = arcToCubicCurves(\n      x2,\n      y2,\n      x2old,\n      y2old,\n      r1,\n      r2,\n      angle,\n      0,\n      sweepFlag,\n      [f2, f2old, cx, cy]\n    );\n  }\n\n  df = f2 - f1;\n\n  const c1 = Math.cos(f1);\n  const s1 = Math.sin(f1);\n  const c2 = Math.cos(f2);\n  const s2 = Math.sin(f2);\n  const t = Math.tan(df / 4);\n  const hx = (4 / 3) * r1 * t;\n  const hy = (4 / 3) * r2 * t;\n\n  const m1 = [x1, y1];\n  const m2 = [x1 + hx * s1, y1 - hy * c1];\n  const m3 = [x2 + hx * s2, y2 - hy * c2];\n  const m4 = [x2, y2];\n\n  m2[0] = 2 * m1[0] - m2[0];\n  m2[1] = 2 * m1[1] - m2[1];\n\n  if (recursive) {\n    return [m2, m3, m4].concat(params);\n  } else {\n    params = [m2, m3, m4].concat(params);\n    const curves = [];\n    for (let i = 0; i < params.length; i += 3) {\n      const r1 = rotate(params[i][0], params[i][1], angleRad);\n      const r2 = rotate(params[i + 1][0], params[i + 1][1], angleRad);\n      const r3 = rotate(params[i + 2][0], params[i + 2][1], angleRad);\n      curves.push([r1[0], r1[1], r2[0], r2[1], r3[0], r3[1]]);\n    }\n    return curves;\n  }\n}\n"]}