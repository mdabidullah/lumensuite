{"version":3,"file":"graph.js","sourceRoot":"","sources":["../../src/utils/graph.ts"],"names":[],"mappings":"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","sourcesContent":["import type { Bound, IVec, IVec3 } from '@blocksuite/global/utils';\n\nimport {\n  isOverlap as _isOverlap,\n  almostEqual,\n  linePolygonIntersects,\n} from '@blocksuite/global/utils';\n\nfunction isOverlap(line: IVec[], line2: IVec[]) {\n  if (\n    [line[0][1], line[1][1], line2[0][1], line2[1][1]].every(y =>\n      almostEqual(y, line[0][1], 0.02)\n    )\n  ) {\n    return _isOverlap(line, line2, 0);\n  } else if (\n    [line[0][0], line[1][0], line2[0][0], line2[1][0]].every(x =>\n      almostEqual(x, line[0][0], 0.02)\n    )\n  ) {\n    return _isOverlap(line, line2, 1);\n  }\n  return false;\n}\n\nfunction arrayAlmostEqual(point: IVec | IVec3, point2: IVec | IVec3) {\n  return almostEqual(point[0], point2[0]) && almostEqual(point[1], point2[1]);\n}\n\nexport class Graph<V extends IVec | IVec3 = IVec> {\n  private _xMap = new Map<number, V[]>();\n\n  private _yMap = new Map<number, V[]>();\n\n  constructor(\n    private points: V[],\n    private blocks: Bound[] = [],\n    private expandedBlocks: Bound[] = [],\n    private excludedPoints: V[] = []\n  ) {\n    const xMap = this._xMap;\n    const yMap = this._yMap;\n    this.points.forEach(point => {\n      const [x, y] = point;\n      if (!xMap.has(x)) xMap.set(x, []);\n      if (!yMap.has(y)) yMap.set(y, []);\n      xMap.get(x)?.push(point);\n      yMap.get(y)?.push(point);\n    });\n  }\n\n  private _canSkipBlock(point: IVec | IVec3) {\n    return this.excludedPoints.some(excludedPoint => {\n      return arrayAlmostEqual(point, excludedPoint);\n    });\n  }\n\n  private _isBlock(sp: IVec | IVec3, ep: IVec | IVec3) {\n    return (\n      this.blocks.some(block => {\n        const rst = linePolygonIntersects(sp as IVec, ep as IVec, block.points);\n        return (\n          rst?.length === 2 ||\n          block.isPointInBound(sp as IVec, 0) ||\n          block.isPointInBound(ep as IVec, 0) ||\n          [\n            block.leftLine,\n            block.upperLine,\n            block.rightLine,\n            block.lowerLine,\n          ].some(line => {\n            return isOverlap(line, [sp, ep] as IVec[]);\n          })\n        );\n      }) ||\n      this.expandedBlocks.some(block => {\n        const result = linePolygonIntersects(\n          sp as IVec,\n          ep as IVec,\n          block.expand(-0.5).points\n        );\n        return result?.length === 2;\n      })\n    );\n  }\n\n  neighbors(curPoint: V): V[] {\n    const [x, y] = curPoint;\n    const neighbors = new Set<V>();\n    const xPoints = this._xMap.get(x);\n    const yPoints = this._yMap.get(y);\n    if (xPoints) {\n      let plusMin = Infinity;\n      let minusMin = Infinity;\n      let plusPoint: V | undefined;\n      let minusPoint: V | undefined;\n      xPoints.forEach(point => {\n        if (arrayAlmostEqual(point, curPoint as unknown as IVec)) return;\n        const dif = point[1] - curPoint[1];\n        if (dif > 0 && dif < plusMin) {\n          plusMin = dif;\n          plusPoint = point;\n        }\n        if (dif < 0 && Math.abs(dif) < minusMin) {\n          minusMin = Math.abs(dif);\n          minusPoint = point;\n        }\n      });\n      if (\n        plusPoint &&\n        (this._canSkipBlock(plusPoint) || !this._isBlock(curPoint, plusPoint))\n      ) {\n        neighbors.add(plusPoint);\n      }\n      if (\n        minusPoint &&\n        (this._canSkipBlock(minusPoint) || !this._isBlock(curPoint, minusPoint))\n      )\n        neighbors.add(minusPoint);\n    }\n    if (yPoints) {\n      let plusMin = Infinity;\n      let minusMin = Infinity;\n      let plusPoint: V | undefined;\n      let minusPoint: V | undefined;\n      yPoints.forEach(point => {\n        if (arrayAlmostEqual(point, curPoint)) return;\n        const dif = point[0] - curPoint[0];\n        if (dif > 0 && dif < plusMin) {\n          plusMin = dif;\n          plusPoint = point;\n        }\n        if (dif < 0 && Math.abs(dif) < minusMin) {\n          minusMin = Math.abs(dif);\n          minusPoint = point;\n        }\n      });\n      if (\n        plusPoint &&\n        (this._canSkipBlock(plusPoint) || !this._isBlock(curPoint, plusPoint))\n      )\n        neighbors.add(plusPoint);\n      if (\n        minusPoint &&\n        (this._canSkipBlock(minusPoint) || !this._isBlock(curPoint, minusPoint))\n      )\n        neighbors.add(minusPoint);\n    }\n\n    return Array.from(neighbors);\n  }\n}\n"]}