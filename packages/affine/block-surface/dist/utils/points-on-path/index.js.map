{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/utils/points-on-path/index.ts"],"names":[],"mappings":"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","sourcesContent":["import type { Point } from '../rough/geometry.js';\n\nimport { absolutize } from '../path-data-parser/absolutize.js';\nimport { normalize } from '../path-data-parser/normalize.js';\nimport { parsePath } from '../path-data-parser/parser.js';\nimport { pointsOnBezierCurves, simplify } from '../points-on-curve/index.js';\n\nexport function pointsOnPath(\n  path: string,\n  tolerance?: number,\n  distance?: number\n): Point[][] {\n  const segments = parsePath(path);\n  const normalized = normalize(absolutize(segments));\n\n  const sets: Point[][] = [];\n  let currentPoints: Point[] = [];\n  let start: Point = [0, 0];\n  let pendingCurve: Point[] = [];\n\n  const appendPendingCurve = () => {\n    if (pendingCurve.length >= 4) {\n      currentPoints.push(...pointsOnBezierCurves(pendingCurve, tolerance));\n    }\n    pendingCurve = [];\n  };\n\n  const appendPendingPoints = () => {\n    appendPendingCurve();\n    if (currentPoints.length) {\n      sets.push(currentPoints);\n      currentPoints = [];\n    }\n  };\n\n  for (const { key, data } of normalized) {\n    switch (key) {\n      case 'M':\n        appendPendingPoints();\n        start = [data[0], data[1]];\n        currentPoints.push(start);\n        break;\n      case 'L':\n        appendPendingCurve();\n        currentPoints.push([data[0], data[1]]);\n        break;\n      case 'C':\n        if (!pendingCurve.length) {\n          const lastPoint = currentPoints.length\n            ? currentPoints[currentPoints.length - 1]\n            : start;\n          pendingCurve.push([lastPoint[0], lastPoint[1]]);\n        }\n        pendingCurve.push([data[0], data[1]]);\n        pendingCurve.push([data[2], data[3]]);\n        pendingCurve.push([data[4], data[5]]);\n        break;\n      case 'Z':\n        appendPendingCurve();\n        currentPoints.push([start[0], start[1]]);\n        break;\n    }\n  }\n  appendPendingPoints();\n\n  if (!distance) {\n    return sets;\n  }\n\n  const out: Point[][] = [];\n  for (const set of sets) {\n    const simplifiedSet = simplify(set, distance);\n    if (simplifiedSet.length) {\n      out.push(simplifiedSet);\n    }\n  }\n  return out;\n}\n"]}