{"version":3,"file":"a-star.unit.spec.js","sourceRoot":"","sources":["../../src/__tests__/a-star.unit.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import type { IVec, IVec3 } from '@blocksuite/global/utils';\n\nimport { almostEqual } from '@blocksuite/global/utils';\nimport { describe, expect, it } from 'vitest';\n\nimport { AStarRunner } from '../utils/a-star.js';\n\nfunction mergePath(points: IVec3[]) {\n  if (points.length === 0) return points;\n  const rst: IVec3[] = [points[0]];\n  for (let i = 1; i < points.length - 1; i++) {\n    const cur = points[i];\n    const last = points[i - 1];\n    const next = points[i + 1];\n    if (\n      almostEqual(last[0], cur[0], 0.02) &&\n      almostEqual(cur[0], next[0], 0.02)\n    )\n      continue;\n    if (\n      almostEqual(last[1], cur[1], 0.02) &&\n      almostEqual(cur[1], next[1], 0.02)\n    )\n      continue;\n    rst.push(cur);\n  }\n  rst.push(points[points.length - 1]);\n  return rst;\n}\n\ndescribe('a* algorithm', () => {\n  /**\n   * 0 ----------------\n   *                  |\n   *                  |\n   *                  ------------------- 0\n   */\n  it('width is greater than height', () => {\n    const sp: IVec3 = [0, 0, 0];\n    const ep: IVec3 = [200, 100, 0];\n    const osp: IVec3 = [-1, 0, 0];\n    const oep: IVec3 = [201, 100, 0];\n    const points: IVec3[] = [\n      sp,\n      ep,\n      [100, 0, 0],\n      [200, 0, 0],\n      [0, 50, 0],\n      [100, 50, 3],\n      [200, 50, 0],\n      [0, 100, 0],\n      [100, 100, 0],\n    ] as IVec3[];\n    const aStar = new AStarRunner(points, sp, ep, osp, oep);\n    aStar.run();\n    let path: IVec[] | IVec3[] = aStar.path;\n    path.pop();\n    path.shift();\n    path = mergePath(path);\n    const expected = [\n      [0, 0],\n      [100, 0],\n      [100, 100],\n      [200, 100],\n    ];\n    path.forEach((p, i) => {\n      expect(p[0]).toBe(expected[i][0]);\n      expect(p[1]).toBe(expected[i][1]);\n    });\n  });\n  /**\n   * 0\n   * |\n   * |\n   * |\n   * |----|\n   *      |\n   *      |\n   *      |\n   *      0\n   */\n  it('height is greater than width', () => {\n    const sp: IVec3 = [0, 0, 0];\n    const ep: IVec3 = [100, 200, 0];\n    const osp: IVec3 = [0, -1, 0];\n    const oep: IVec3 = [100, 201, 0];\n    const points: IVec3[] = [\n      sp,\n      [50, 0, 0],\n      [100, 0, 0],\n      [0, 100, 0],\n      [50, 100, 3],\n      [100, 100, 0],\n      [0, 200, 0],\n      [50, 200, 0],\n      ep,\n    ];\n    const aStar = new AStarRunner(points, sp, ep, osp, oep);\n    aStar.run();\n    let path = aStar.path;\n    path.pop();\n    path.shift();\n    path = mergePath(path);\n    const expected = [\n      [0, 0],\n      [0, 100],\n      [100, 100],\n      [100, 200],\n    ];\n    path.forEach((p, i) => {\n      expect(p[0]).toBe(expected[i][0]);\n      expect(p[1]).toBe(expected[i][1]);\n    });\n  });\n});\n"]}