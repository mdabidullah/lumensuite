{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../src/commands/utils.ts"],"names":[],"mappings":"AAGA,OAAO,EACL,8BAA8B,EAC9B,aAAa,GACd,MAAM,iCAAiC,CAAC;AAEzC;;;;;GAKG;AACH,MAAM,UAAU,+BAA+B,CAC7C,GAAQ,EACR,SAA8B,EAC9B,QAAQ,GAAG,IAAI;IAEf,MAAM,KAAK,GACT,OAAO,SAAS,KAAK,QAAQ,CAAC,CAAC,CAAC,GAAG,CAAC,QAAQ,CAAC,SAAS,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC,SAAS,CAAC;IAE7E,IAAI,CAAC,KAAK;QAAE,OAAO;IAEnB,IACE,CAAC,aAAa,CAAC,KAAK,EAAE,CAAC,aAAa,CAAC,CAAC;QACtC,KAAK,CAAC,KAAK,CAAC,KAAK,KAAK,UAAU,EAChC,CAAC;QACD,OAAO;IACT,CAAC;IAED,MAAM,EAAE,GAAG,GAAG,EAAE;QACd,SAAS;QACT,MAAM,eAAe,GAAG,GAAG,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QAC3C,IACE,eAAe;YACf,aAAa,CAAC,eAAe,EAAE,CAAC,aAAa,CAAC,CAAC;YAC/C,eAAe,CAAC,IAAI,KAAK,UAAU,EACnC,CAAC;YACD,IAAI,CAAC,eAAe,CAAC,KAAK;gBAAE,eAAe,CAAC,KAAK,GAAG,CAAC,CAAC;YACtD,KAAK,CAAC,KAAK,GAAG,eAAe,CAAC,KAAK,GAAG,CAAC,CAAC;QAC1C,CAAC;aAAM,CAAC;YACN,KAAK,CAAC,KAAK,GAAG,CAAC,CAAC;QAClB,CAAC;QAED,SAAS;QACT,IAAI,IAAI,GAAG,KAAK,CAAC,KAAK,GAAG,CAAC,CAAC;QAC3B,MAAM,uBAAuB,GAAG,8BAA8B,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;QAC3E,uBAAuB,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;YACrC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;YAClB,IAAI,EAAE,CAAC;QACT,CAAC,CAAC,CAAC;IACL,CAAC,CAAC;IAEF,IAAI,QAAQ,EAAE,CAAC;QACb,GAAG,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;IACnB,CAAC;SAAM,CAAC;QACN,EAAE,EAAE,CAAC;IACP,CAAC;AACH,CAAC;AAED,MAAM,UAAU,gBAAgB,CAAC,GAAQ,EAAE,KAAqB;IAC9D,iCAAiC;IACjC,IAAI,KAAK,CAAC,IAAI,KAAK,UAAU,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE,CAAC;QAChE,+BAA+B,CAAC,GAAG,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;IACrD,CAAC;IACD,gDAAgD;IAChD,IAAI,KAAK,CAAC,IAAI,KAAK,UAAU,EAAE,CAAC;QAC9B,KAAK,CAAC,KAAK,GAAG,IAAI,CAAC;IACrB,CAAC;AACH,CAAC","sourcesContent":["import type { ListBlockModel } from '@lumensuite/affine-model';\nimport type { BlockModel, Doc } from '@lumensuite/store';\n\nimport {\n  getNextContinuousNumberedLists,\n  matchFlavours,\n} from '@lumensuite/affine-shared/utils';\n\n/**\n * correct target is a numbered list, which is divided into two steps:\n * 1. check if there is a numbered list before the target list. If so, adjust the order of the target list\n *    to the order of the previous list plus 1, otherwise set the order to 1\n * 2. find continuous lists starting from the target list and keep their order continuous\n */\nexport function correctNumberedListsOrderToPrev(\n  doc: Doc,\n  modelOrId: BlockModel | string,\n  transact = true\n) {\n  const model =\n    typeof modelOrId === 'string' ? doc.getBlock(modelOrId)?.model : modelOrId;\n\n  if (!model) return;\n\n  if (\n    !matchFlavours(model, ['affine:list']) ||\n    model.type$.value !== 'numbered'\n  ) {\n    return;\n  }\n\n  const fn = () => {\n    // step 1\n    const previousSibling = doc.getPrev(model);\n    if (\n      previousSibling &&\n      matchFlavours(previousSibling, ['affine:list']) &&\n      previousSibling.type === 'numbered'\n    ) {\n      if (!previousSibling.order) previousSibling.order = 1;\n      model.order = previousSibling.order + 1;\n    } else {\n      model.order = 1;\n    }\n\n    // step 2\n    let base = model.order + 1;\n    const continuousNumberedLists = getNextContinuousNumberedLists(doc, model);\n    continuousNumberedLists.forEach(list => {\n      list.order = base;\n      base++;\n    });\n  };\n\n  if (transact) {\n    doc.transact(fn);\n  } else {\n    fn();\n  }\n}\n\nexport function correctListOrder(doc: Doc, model: ListBlockModel) {\n  // old numbered list has no order\n  if (model.type === 'numbered' && !Number.isInteger(model.order)) {\n    correctNumberedListsOrderToPrev(doc, model, false);\n  }\n  // if list is not numbered, order should be null\n  if (model.type !== 'numbered') {\n    model.order = null;\n  }\n}\n"]}