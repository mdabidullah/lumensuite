{"version":3,"file":"split-list.js","sourceRoot":"","sources":["../../src/commands/split-list.ts"],"names":[],"mappings":"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","sourcesContent":["import type { Command, EditorHost } from '@blocksuite/block-std';\n\nimport { focusTextModel } from '@blocksuite/affine-components/rich-text';\nimport {\n  getNextContinuousNumberedLists,\n  matchFlavours,\n} from '@blocksuite/affine-shared/utils';\n\nimport { correctNumberedListsOrderToPrev } from './utils.js';\n\nexport const splitListCommand: Command<\n  never,\n  never,\n  {\n    blockId: string;\n    inlineIndex: number;\n  }\n> = (ctx, next) => {\n  const { blockId, inlineIndex, std } = ctx;\n  const host = std.host as EditorHost;\n  const doc = host.doc;\n\n  const model = doc.getBlock(blockId)?.model;\n  if (!model || !matchFlavours(model, ['affine:list'])) {\n    console.error(`block ${blockId} is not a list block`);\n    return;\n  }\n  const parent = doc.getParent(model);\n  if (!parent) {\n    console.error(`block ${blockId} has no parent`);\n    return;\n  }\n  const modelIndex = parent.children.indexOf(model);\n  if (modelIndex === -1) {\n    console.error(`block ${blockId} is not a child of its parent`);\n    return;\n  }\n\n  doc.captureSync();\n\n  if (model.text.length === 0) {\n    /**\n     * case 1: target is top most, convert the list into a paragraph\n     *\n     * before:\n     * - aaa\n     * - | <- split here\n     *   - bbb\n     *\n     * after:\n     * - aaa\n     * |\n     *   - bbb\n     */\n    if (parent.role === 'hub') {\n      const id = doc.addBlock('affine:paragraph', {}, parent, modelIndex);\n      const paragraph = doc.getBlock(id);\n      if (!paragraph) return;\n      doc.deleteBlock(model, {\n        bringChildrenTo: paragraph.model,\n      });\n\n      // reset next continuous numbered list's order\n      const nextContinuousNumberedLists = getNextContinuousNumberedLists(\n        doc,\n        paragraph.model\n      );\n      let base = 1;\n      nextContinuousNumberedLists.forEach(list => {\n        doc.transact(() => {\n          list.order = base;\n        });\n        base += 1;\n      });\n\n      host.updateComplete\n        .then(() => {\n          focusTextModel(std, id);\n        })\n        .catch(console.error);\n\n      next();\n      return;\n    }\n\n    /**\n     * case 2: not top most, unindent the list\n     *\n     * before:\n     * - aaa\n     *   - bbb\n     *   - | <- split here\n     *   - ccc\n     *\n     * after:\n     * - aaa\n     *   - bbb\n     * - |\n     *   - ccc\n     */\n    if (parent.role === 'content') {\n      host.command.exec('dedentList', {\n        blockId,\n        inlineIndex: 0,\n      });\n\n      next();\n      return;\n    }\n\n    return;\n  }\n\n  let newListId: string | null = null;\n\n  if (model.children.length > 0 && !model.collapsed) {\n    /**\n     * case 3: list has children (list not collapsed)\n     *\n     * before:\n     * - aa|a <- split here\n     *   - bbb\n     *\n     * after:\n     * - aa\n     *   - |a\n     *   - bbb\n     */\n    const afterText = model.text.split(inlineIndex);\n    newListId = doc.addBlock(\n      'affine:list',\n      {\n        type: model.type,\n        text: afterText,\n        order: model.type === 'numbered' ? 1 : null,\n      },\n      model,\n      0\n    );\n\n    if (model.type === 'numbered') {\n      const nextContinuousNumberedLists = getNextContinuousNumberedLists(\n        doc,\n        newListId\n      );\n      let base = 2;\n      nextContinuousNumberedLists.forEach(list => {\n        doc.transact(() => {\n          list.order = base;\n        });\n        base += 1;\n      });\n    }\n  } else {\n    /**\n     * case 4: list has children (list collapsed)\n     *\n     * before:\n     * - aa|a <- split here\n     *   - bbb\n     *\n     * after:\n     * - aa\n     *   - bbb\n     * - |a\n     *\n     *\n     * case 5: list does not have children\n     *\n     * before:\n     * - aa|a <- split here\n     * - bbb\n     *\n     * after:\n     * - aa\n     * - |a\n     * - bbb\n     */\n    const afterText = model.text.split(inlineIndex);\n    newListId = doc.addBlock(\n      'affine:list',\n      {\n        type: model.type,\n        text: afterText,\n        order: null,\n      },\n      parent,\n      modelIndex + 1\n    );\n    correctNumberedListsOrderToPrev(doc, newListId);\n  }\n\n  if (newListId) {\n    host.updateComplete\n      .then(() => {\n        focusTextModel(std, newListId);\n      })\n      .catch(console.error);\n\n    next();\n    return;\n  }\n};\n\ndeclare global {\n  namespace BlockSuite {\n    interface Commands {\n      splitList: typeof splitListCommand;\n    }\n  }\n}\n"]}