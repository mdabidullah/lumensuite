{"version":3,"file":"indent-list.js","sourceRoot":"","sources":["../../src/commands/indent-list.ts"],"names":[],"mappings":"AAEA,OAAO,EAAE,cAAc,EAAE,MAAM,yCAAyC,CAAC;AACzE,OAAO,EAAE,aAAa,EAAE,MAAM,iCAAiC,CAAC;AAEhE,OAAO,EAAE,+BAA+B,EAAE,MAAM,YAAY,CAAC;AAE7D,MAAM,CAAC,MAAM,iBAAiB,GAO1B,CAAC,GAAG,EAAE,IAAI,EAAE,EAAE;IAChB,IAAI,EAAE,OAAO,EAAE,WAAW,EAAE,GAAG,GAAG,CAAC;IACnC,MAAM,EAAE,GAAG,EAAE,GAAG,GAAG,CAAC;IACpB,MAAM,EAAE,SAAS,EAAE,GAAG,EAAE,GAAG,GAAG,CAAC;IAC/B,IAAI,CAAC,OAAO,EAAE,CAAC;QACb,MAAM,IAAI,GAAG,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QACpC;;;;WAIG;QACH,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,EAAE,IAAI,IAAI,CAAC,IAAI,CAAC,OAAO,KAAK,IAAI,CAAC,EAAE,CAAC,OAAO,CAAC,EAAE,CAAC;YAChE,OAAO;QACT,CAAC;QAED,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC;QAC5B,WAAW,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC;IAChC,CAAC;IACD,IAAI,OAAO,IAAI,IAAI,IAAI,WAAW,IAAI,IAAI,EAAE,CAAC;QAC3C,OAAO;IACT,CAAC;IAED;;;;;;;;;;;;;;OAcG;IAEH;;OAEG;IACH,MAAM,KAAK,GAAG,GAAG,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAE,KAAK,CAAC;IAC3C,IAAI,CAAC,KAAK,IAAI,CAAC,aAAa,CAAC,KAAK,EAAE,CAAC,aAAa,CAAC,CAAC,EAAE,CAAC;QACrD,OAAO,CAAC,KAAK,CAAC,SAAS,OAAO,sBAAsB,CAAC,CAAC;QACtD,OAAO;IACT,CAAC;IACD,MAAM,MAAM,GAAG,GAAG,CAAC,GAAG,CAAC,MAAM,CAAC;IAC9B;;OAEG;IACH,MAAM,eAAe,GAAG,GAAG,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;IAC3C,IACE,GAAG,CAAC,QAAQ;QACZ,CAAC,eAAe;QAChB,CAAC,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,OAAO,EAAE,eAAe,CAAC,OAAO,CAAC,EACvD,CAAC;QACD,4BAA4B;QAC5B,OAAO;IACT,CAAC;IACD;;OAEG;IACH,MAAM,WAAW,GAAG,GAAG,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;IAEvC,GAAG,CAAC,WAAW,EAAE,CAAC;IAElB,GAAG,CAAC,UAAU,CAAC,CAAC,KAAK,CAAC,EAAE,eAAe,CAAC,CAAC;IACzC,+BAA+B,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;IAC5C,IAAI,WAAW;QAAE,+BAA+B,CAAC,GAAG,EAAE,WAAW,CAAC,CAAC;IAEnE,cAAc,CAAC,GAAG,EAAE,KAAK,CAAC,EAAE,EAAE,WAAW,CAAC,CAAC;IAE3C,OAAO,IAAI,EAAE,CAAC;AAChB,CAAC,CAAC","sourcesContent":["import type { Command } from '@lumensuite/block-std';\n\nimport { focusTextModel } from '@lumensuite/affine-components/rich-text';\nimport { matchFlavours } from '@lumensuite/affine-shared/utils';\n\nimport { correctNumberedListsOrderToPrev } from './utils.js';\n\nexport const indentListCommand: Command<\n  never,\n  never,\n  {\n    blockId?: string;\n    inlineIndex?: number;\n  }\n> = (ctx, next) => {\n  let { blockId, inlineIndex } = ctx;\n  const { std } = ctx;\n  const { selection, doc } = std;\n  if (!blockId) {\n    const text = selection.find('text');\n    /**\n     * Do nothing if the selection:\n     * - is not a text selection\n     * - or spans multiple blocks\n     */\n    if (!text || (text.to && text.from.blockId !== text.to.blockId)) {\n      return;\n    }\n\n    blockId = text.from.blockId;\n    inlineIndex = text.from.index;\n  }\n  if (blockId == null || inlineIndex == null) {\n    return;\n  }\n\n  /**\n   * initial state:\n   * - aaa\n   *   - bbb\n   * - ccc <- indent\n   *   - ddd\n   * - eee\n   *\n   * final state:\n   * - aaa\n   *   - bbb\n   *   - ccc\n   *     - ddd\n   * - eee\n   */\n\n  /**\n   * ccc\n   */\n  const model = doc.getBlock(blockId)?.model;\n  if (!model || !matchFlavours(model, ['affine:list'])) {\n    console.error(`block ${blockId} is not a list block`);\n    return;\n  }\n  const schema = std.doc.schema;\n  /**\n   * aaa\n   */\n  const previousSibling = doc.getPrev(model);\n  if (\n    doc.readonly ||\n    !previousSibling ||\n    !schema.isValid(model.flavour, previousSibling.flavour)\n  ) {\n    // cannot indent, do nothing\n    return;\n  }\n  /**\n   * eee\n   */\n  const nextSibling = doc.getNext(model);\n\n  doc.captureSync();\n\n  doc.moveBlocks([model], previousSibling);\n  correctNumberedListsOrderToPrev(doc, model);\n  if (nextSibling) correctNumberedListsOrderToPrev(doc, nextSibling);\n\n  focusTextModel(std, model.id, inlineIndex);\n\n  return next();\n};\n\ndeclare global {\n  namespace LumenSuite {\n    interface Commands {\n      indentList: typeof indentListCommand;\n    }\n  }\n}\n"]}