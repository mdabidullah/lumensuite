{"version":3,"file":"list-to-paragraph.js","sourceRoot":"","sources":["../../src/commands/list-to-paragraph.ts"],"names":[],"mappings":"AAEA,OAAO,EAAE,cAAc,EAAE,MAAM,yCAAyC,CAAC;AACzE,OAAO,EAAE,aAAa,EAAE,MAAM,iCAAiC,CAAC;AAEhE,MAAM,CAAC,MAAM,sBAAsB,GAO/B,CAAC,GAAG,EAAE,IAAI,EAAE,EAAE;IAChB,MAAM,EAAE,EAAE,EAAE,aAAa,GAAG,IAAI,EAAE,GAAG,GAAG,CAAC;IACzC,MAAM,GAAG,GAAG,GAAG,CAAC,GAAG,CAAC;IACpB,MAAM,GAAG,GAAG,GAAG,CAAC,GAAG,CAAC;IACpB,MAAM,KAAK,GAAG,GAAG,CAAC,QAAQ,CAAC,EAAE,CAAC,EAAE,KAAK,CAAC;IAEtC,IAAI,CAAC,KAAK,IAAI,CAAC,aAAa,CAAC,KAAK,EAAE,CAAC,aAAa,CAAC,CAAC;QAAE,OAAO,KAAK,CAAC;IAEnE,MAAM,MAAM,GAAG,GAAG,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;IACpC,IAAI,CAAC,MAAM;QAAE,OAAO,KAAK,CAAC;IAE1B,MAAM,KAAK,GAAG,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;IAC7C,MAAM,UAAU,GAAG;QACjB,IAAI,EAAE,MAAe;QACrB,IAAI,EAAE,KAAK,CAAC,IAAI,EAAE,KAAK,EAAE;QACzB,QAAQ,EAAE,KAAK,CAAC,QAAQ;KACzB,CAAC;IACF,IAAI,aAAa;QAAE,GAAG,CAAC,GAAG,CAAC,WAAW,EAAE,CAAC;IACzC,GAAG,CAAC,WAAW,CAAC,KAAK,EAAE;QACrB,cAAc,EAAE,KAAK;KACtB,CAAC,CAAC;IAEH,MAAM,eAAe,GAAG,GAAG,CAAC,QAAQ,CAClC,kBAAkB,EAClB,UAAU,EACV,MAAM,EACN,KAAK,CACN,CAAC;IACF,cAAc,CAAC,GAAG,EAAE,eAAe,CAAC,CAAC;IACrC,OAAO,IAAI,CAAC,EAAE,eAAe,EAAE,CAAC,CAAC;AACnC,CAAC,CAAC","sourcesContent":["import type { Command } from '@lumensuite/block-std';\n\nimport { focusTextModel } from '@lumensuite/affine-components/rich-text';\nimport { matchFlavours } from '@lumensuite/affine-shared/utils';\n\nexport const listToParagraphCommand: Command<\n  never,\n  'listConvertedId',\n  {\n    id: string;\n    stopCapturing?: boolean;\n  }\n> = (ctx, next) => {\n  const { id, stopCapturing = true } = ctx;\n  const std = ctx.std;\n  const doc = std.doc;\n  const model = doc.getBlock(id)?.model;\n\n  if (!model || !matchFlavours(model, ['affine:list'])) return false;\n\n  const parent = doc.getParent(model);\n  if (!parent) return false;\n\n  const index = parent.children.indexOf(model);\n  const blockProps = {\n    type: 'text' as const,\n    text: model.text?.clone(),\n    children: model.children,\n  };\n  if (stopCapturing) std.doc.captureSync();\n  doc.deleteBlock(model, {\n    deleteChildren: false,\n  });\n\n  const listConvertedId = doc.addBlock(\n    'affine:paragraph',\n    blockProps,\n    parent,\n    index\n  );\n  focusTextModel(std, listConvertedId);\n  return next({ listConvertedId });\n};\n\ndeclare global {\n  namespace LumenSuite {\n    interface Commands {\n      listToParagraph: typeof listToParagraphCommand;\n    }\n  }\n}\n"]}