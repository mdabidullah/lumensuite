{"version":3,"file":"list-keymap.js","sourceRoot":"","sources":["../src/list-keymap.ts"],"names":[],"mappings":"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","sourcesContent":["import type { BlockStdScope, UIEventHandler } from '@blocksuite/block-std';\n\nimport { markdownInput } from '@blocksuite/affine-components/rich-text';\nimport { IS_MAC } from '@blocksuite/global/env';\n\nimport { forwardDelete } from './utils/forward-delete.js';\n\nexport const listKeymap = (\n  std: BlockStdScope\n): Record<string, UIEventHandler> => {\n  return {\n    Enter: ctx => {\n      const text = std.selection.find('text');\n      if (!text) return false;\n\n      ctx.get('keyboardState').raw.preventDefault();\n      std.command.exec('splitList', {\n        blockId: text.from.blockId,\n        inlineIndex: text.from.index,\n      });\n      return true;\n    },\n    'Mod-Enter': ctx => {\n      const text = std.selection.find('text');\n      if (!text) return false;\n\n      ctx.get('keyboardState').raw.preventDefault();\n      std.command.exec('splitList', {\n        blockId: text.from.blockId,\n        inlineIndex: text.from.index,\n      });\n      return true;\n    },\n    Tab: ctx => {\n      const { selectedModels } = std.command.exec('getSelectedModels', {\n        types: ['text'],\n      });\n      if (selectedModels?.length !== 1) {\n        return false;\n      }\n      const text = std.selection.find('text');\n      if (!text) return false;\n\n      ctx.get('keyboardState').raw.preventDefault();\n      std.command.exec('indentList', {\n        blockId: text.from.blockId,\n        inlineIndex: text.from.index,\n      });\n      return true;\n    },\n    'Shift-Tab': ctx => {\n      const { selectedModels } = std.command.exec('getSelectedModels', {\n        types: ['text'],\n      });\n      if (selectedModels?.length !== 1) {\n        return;\n      }\n      const text = std.selection.find('text');\n      if (!text) return false;\n\n      ctx.get('keyboardState').raw.preventDefault();\n      std.command.exec('dedentList', {\n        blockId: text.from.blockId,\n        inlineIndex: text.from.index,\n      });\n      return true;\n    },\n    Backspace: ctx => {\n      const text = std.selection.find('text');\n      if (!text) return false;\n      const isCollapsed = text.isCollapsed();\n      const isStart = isCollapsed && text.from.index === 0;\n      if (!isStart) return false;\n\n      ctx.get('keyboardState').raw.preventDefault();\n      std.command.exec('listToParagraph', { id: text.from.blockId });\n      return true;\n    },\n    'Control-d': ctx => {\n      if (!IS_MAC) return;\n      const deleted = forwardDelete(std);\n      if (!deleted) return;\n      ctx.get('keyboardState').raw.preventDefault();\n      return true;\n    },\n    Delete: ctx => {\n      const deleted = forwardDelete(std);\n      if (!deleted) return;\n      ctx.get('keyboardState').raw.preventDefault();\n      return true;\n    },\n    Space: ctx => {\n      if (!markdownInput(std)) {\n        return;\n      }\n      ctx.get('keyboardState').raw.preventDefault();\n      return true;\n    },\n    'Shift-Space': ctx => {\n      if (!markdownInput(std)) {\n        return;\n      }\n      ctx.get('keyboardState').raw.preventDefault();\n      return true;\n    },\n  };\n};\n"]}