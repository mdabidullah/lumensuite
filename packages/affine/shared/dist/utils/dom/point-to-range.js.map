{"version":3,"file":"point-to-range.js","sourceRoot":"","sources":["../../../src/utils/dom/point-to-range.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,wBAAwB,CAAC;AAepD;;;GAGG;AACH,MAAM,UAAU,mBAAmB,CACjC,OAAe,EACf,OAAe;IAEf,IAAI,UAAU,EAAE,CAAC;QACf,MAAM,KAAK,GAAG,QAAQ,CAAC,sBAAsB,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;QAChE,wCAAwC;QACxC,MAAM,KAAK,GAAG,QAAQ,CAAC,WAAW,EAAE,CAAC;QACrC,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,UAAU,EAAE,KAAK,CAAC,MAAM,CAAC,CAAC;QAC/C,OAAO,KAAK,CAAC;IACf,CAAC;IAED,MAAM,KAAK,GAAG,QAAQ,CAAC,mBAAmB,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;IAE7D,IAAI,CAAC,KAAK,EAAE,CAAC;QACX,OAAO,IAAI,CAAC;IACd,CAAC;IAED,6DAA6D;IAC7D,MAAM,UAAU,GAAG,KAAK,EAAE,cAAc,EAAE,CAAC;IAC3C,IACE,UAAU;QACV,UAAU,CAAC,MAAM,KAAK,CAAC;QACvB,KAAK,CAAC,WAAW,KAAK,KAAK,CAAC,SAAS;QACrC,OAAO,GAAG,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,UAAU,CAAC,CAAC,CAAC,CAAC,MAAM,EAChD,CAAC;QACD,MAAM,MAAM,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;QAE7D,IAAI,MAAM,GAAG,CAAC,EAAE,CAAC;YACf,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,cAAc,EAAE,KAAK,CAAC,WAAW,GAAG,CAAC,CAAC,CAAC;YAC5D,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,YAAY,EAAE,KAAK,CAAC,SAAS,GAAG,CAAC,CAAC,CAAC;QACxD,CAAC;IACH,CAAC;IACD,OAAO,KAAK,CAAC;AACf,CAAC;AAED,MAAM,UAAU,oBAAoB,CAAC,KAAmB;IACtD,MAAM,SAAS,GAAG,MAAM,CAAC,YAAY,EAAE,CAAC;IACxC,IAAI,CAAC,SAAS;QAAE,OAAO;IACvB,SAAS,CAAC,eAAe,EAAE,CAAC;IAC5B,KAAK,IAAI,SAAS,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;AACrC,CAAC;AAED,MAAM,UAAU,qBAAqB,CAAC,SAAS,GAAG,MAAM,CAAC,YAAY,EAAE;IACrE,+GAA+G;IAC/G,4FAA4F;IAC5F,IAAI,CAAC,SAAS,EAAE,CAAC;QACf,OAAO,CAAC,KAAK,CAAC,gDAAgD,CAAC,CAAC;QAChE,OAAO,IAAI,CAAC;IACd,CAAC;IACD,IAAI,SAAS,CAAC,UAAU,KAAK,CAAC,EAAE,CAAC;QAC/B,OAAO,IAAI,CAAC;IACd,CAAC;IACD,IAAI,SAAS,CAAC,UAAU,GAAG,CAAC,EAAE,CAAC;QAC7B,OAAO,CAAC,IAAI,CAAC,oDAAoD,CAAC,CAAC;IACrE,CAAC;IACD,OAAO,SAAS,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;AACjC,CAAC;AAED,MAAM,UAAU,wBAAwB,CAAC,CAAS,EAAE,CAAS;IAC3D,MAAM,KAAK,GAAG,mBAAmB,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IACxC,MAAM,cAAc,GAAG,KAAK,EAAE,cAAc,CAAC;IAC7C,qBAAqB;IACrB,IAAI,cAAc,YAAY,IAAI,EAAE,CAAC;QACnC,oBAAoB,CAAC,KAAK,CAAC,CAAC;IAC9B,CAAC;AACH,CAAC","sourcesContent":["import { IS_FIREFOX } from '@lumensuite/global/env';\n\ndeclare global {\n  interface Document {\n    // firefox API\n    caretPositionFromPoint(\n      x: number,\n      y: number\n    ): {\n      offsetNode: Node;\n      offset: number;\n    };\n  }\n}\n\n/**\n * A wrapper for the browser's `caretPositionFromPoint` and `caretRangeFromPoint`,\n * but adapted for different browsers.\n */\nexport function caretRangeFromPoint(\n  clientX: number,\n  clientY: number\n): Range | null {\n  if (IS_FIREFOX) {\n    const caret = document.caretPositionFromPoint(clientX, clientY);\n    // TODO handle caret is covered by popup\n    const range = document.createRange();\n    range.setStart(caret.offsetNode, caret.offset);\n    return range;\n  }\n\n  const range = document.caretRangeFromPoint(clientX, clientY);\n\n  if (!range) {\n    return null;\n  }\n\n  // See https://github.com/toeverything/lumensuite/issues/1382\n  const rangeRects = range?.getClientRects();\n  if (\n    rangeRects &&\n    rangeRects.length === 2 &&\n    range.startOffset === range.endOffset &&\n    clientY < rangeRects[0].y + rangeRects[0].height\n  ) {\n    const deltaX = (rangeRects[0].x | 0) - (rangeRects[1].x | 0);\n\n    if (deltaX > 0) {\n      range.setStart(range.startContainer, range.startOffset - 1);\n      range.setEnd(range.endContainer, range.endOffset - 1);\n    }\n  }\n  return range;\n}\n\nexport function resetNativeSelection(range: Range | null) {\n  const selection = window.getSelection();\n  if (!selection) return;\n  selection.removeAllRanges();\n  range && selection.addRange(range);\n}\n\nexport function getCurrentNativeRange(selection = window.getSelection()) {\n  // When called on an <iframe> that is not displayed (e.g., where display: none is set) Firefox will return null\n  // See https://developer.mozilla.org/en-US/docs/Web/API/Window/getSelection for more details\n  if (!selection) {\n    console.error('Failed to get current range, selection is null');\n    return null;\n  }\n  if (selection.rangeCount === 0) {\n    return null;\n  }\n  if (selection.rangeCount > 1) {\n    console.warn('getCurrentNativeRange may be wrong, rangeCount > 1');\n  }\n  return selection.getRangeAt(0);\n}\n\nexport function handleNativeRangeAtPoint(x: number, y: number) {\n  const range = caretRangeFromPoint(x, y);\n  const startContainer = range?.startContainer;\n  // click on rich text\n  if (startContainer instanceof Node) {\n    resetNativeSelection(range);\n  }\n}\n"]}