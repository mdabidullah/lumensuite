{"version":3,"file":"header-value-parser.js","sourceRoot":"","sources":["../../../src/utils/file/header-value-parser.ts"],"names":[],"mappings":"AAAA,0DAA0D;AAE1D,MAAM,CAAC,MAAM,iCAAiC,GAAG,CAAC,YAAoB,EAAE,EAAE;IACxE,YAAY,GAAG,YAAY,CAAC,IAAI,EAAE,CAAC;IACnC,MAAM,aAAa,GAAG,EAAE,CAAC;IACzB,MAAM,SAAS,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;IACtC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,YAAY,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;QAC7C,IAAI,YAAY,CAAC,CAAC,CAAC,KAAK,GAAG,IAAI,YAAY,CAAC,CAAC,GAAG,CAAC,CAAC,KAAK,IAAI,EAAE,CAAC;YAC5D,aAAa,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QACxB,CAAC;IACH,CAAC;IACD,IAAI,YAAY,GAAG,YAAY,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;IACrD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,aAAa,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC;QACjD,MAAM,KAAK,GAAG,aAAa,CAAC,CAAC,CAAC,CAAC;QAC/B,MAAM,GAAG,GAAG,aAAa,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;QACjC,SAAS,CAAC,KAAK,CAAC,GAAG,GAAG,CAAC;QACvB,IAAI,KAAK,GAAG,YAAY,IAAI,YAAY,GAAG,GAAG,EAAE,CAAC;YAC/C,YAAY,GAAG,YAAY,CAAC,OAAO,CAAC,WAAW,EAAE,GAAG,CAAC,CAAC;QACxD,CAAC;IACH,CAAC;IACD,IAAI,YAAY,KAAK,CAAC,CAAC,EAAE,CAAC;QACxB,OAAO,SAAS,CAAC;IACnB,CAAC;IACD,IAAI,SAAS,CAAC,YAAY,GAAG,CAAC,CAAC,KAAK,SAAS,EAAE,CAAC;QAC9C,MAAM,SAAS,GAAG,YAAY,CAAC,OAAO,CAAC,GAAG,EAAE,YAAY,CAAC,CAAC;QAC1D,OAAO,YAAY,CAAC,KAAK,CACvB,YAAY,GAAG,CAAC,EAChB,SAAS,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,CAAC,SAAS,CACnD,CAAC;IACJ,CAAC;IACD,OAAO,YAAY,CAAC,KAAK,CAAC,YAAY,GAAG,EAAE,EAAE,SAAS,CAAC,YAAY,GAAG,CAAC,CAAC,CAAC,CAAC;AAC5E,CAAC,CAAC","sourcesContent":["// https://www.rfc-editor.org/rfc/rfc9110#name-field-names\n\nexport const getFilenameFromContentDisposition = (header_value: string) => {\n  header_value = header_value.trim();\n  const quote_indices = [];\n  const quote_map = Object.create(null);\n  for (let i = 0; i < header_value.length; i++) {\n    if (header_value[i] === '\"' && header_value[i - 1] !== '\\\\') {\n      quote_indices.push(i);\n    }\n  }\n  let target_index = header_value.indexOf('filename=');\n  for (let i = 0; i < quote_indices.length; i += 2) {\n    const start = quote_indices[i];\n    const end = quote_indices[i + 1];\n    quote_map[start] = end;\n    if (start < target_index && target_index < end) {\n      target_index = header_value.indexOf('filename=', end);\n    }\n  }\n  if (target_index === -1) {\n    return undefined;\n  }\n  if (quote_map[target_index + 9] === undefined) {\n    const end_space = header_value.indexOf(' ', target_index);\n    return header_value.slice(\n      target_index + 9,\n      end_space === -1 ? header_value.length : end_space\n    );\n  }\n  return header_value.slice(target_index + 10, quote_map[target_index + 9]);\n};\n"]}