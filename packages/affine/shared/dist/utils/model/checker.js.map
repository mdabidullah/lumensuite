{"version":3,"file":"checker.js","sourceRoot":"","sources":["../../../src/utils/model/checker.ts"],"names":[],"mappings":"AAEA,OAAO,EAAE,SAAS,EAAE,MAAM,WAAW,CAAC;AAEtC,MAAM,UAAU,aAAa,CAC3B,KAAwB,EACxB,QAAa;IAEb,OAAO,CACL,CAAC,CAAC,KAAK;QACP,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAClB,SAAS,CAAC,KAAK,CAAC,OAAuC,EAAE,GAAG,CAAC,CAC9D,CACF,CAAC;AACJ,CAAC;AAED,MAAM,UAAU,sBAAsB,CACpC,GAAQ,EACR,KAA0B,EAC1B,OAAe;IAEf,MAAM,MAAM,GAAG,GAAG,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;IACpC,IAAI,MAAM,KAAK,IAAI,EAAE,CAAC;QACpB,OAAO,KAAK,CAAC;IACf,CAAC;IACD,IAAI,OAAO,KAAK,MAAM,CAAC,OAAO,EAAE,CAAC;QAC/B,OAAO,IAAI,CAAC;IACd,CAAC;IACD,OAAO,sBAAsB,CAAC,GAAG,EAAE,MAAM,EAAE,OAAO,CAAC,CAAC;AACtD,CAAC","sourcesContent":["import type { BlockModel, Doc } from '@lumensuite/store';\n\nimport { minimatch } from 'minimatch';\n\nexport function matchFlavours<Key extends (keyof LumenSuite.BlockModels)[]>(\n  model: BlockModel | null,\n  expected: Key\n): model is LumenSuite.BlockModels[Key[number]] {\n  return (\n    !!model &&\n    expected.some(key =>\n      minimatch(model.flavour as keyof LumenSuite.BlockModels, key)\n    )\n  );\n}\n\nexport function isInsideBlockByFlavour(\n  doc: Doc,\n  block: BlockModel | string,\n  flavour: string\n): boolean {\n  const parent = doc.getParent(block);\n  if (parent === null) {\n    return false;\n  }\n  if (flavour === parent.flavour) {\n    return true;\n  }\n  return isInsideBlockByFlavour(doc, parent, flavour);\n}\n"]}