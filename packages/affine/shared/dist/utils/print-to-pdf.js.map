{"version":3,"file":"print-to-pdf.js","sourceRoot":"","sources":["../../src/utils/print-to-pdf.ts"],"names":[],"mappings":"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","sourcesContent":["export async function printToPdf(\n  rootElement: HTMLElement | null = document.querySelector(\n    '.affine-page-viewport'\n  ),\n  options: {\n    /**\n     * Callback that is called when ready to print.\n     */\n    beforeprint?: (iframe: HTMLIFrameElement) => Promise<void> | void;\n    /**\n     * Callback that is called after the print dialog is closed.\n     * Notice: in some browser this may be triggered immediately.\n     */\n    afterprint?: () => Promise<void> | void;\n  } = {}\n) {\n  return new Promise<void>((resolve, reject) => {\n    const iframe = document.createElement('iframe');\n    document.body.append(iframe);\n    iframe.style.display = 'none';\n    iframe.srcdoc = '<!DOCTYPE html>';\n    iframe.onload = async () => {\n      if (!iframe.contentWindow) {\n        reject(new Error('unable to print pdf'));\n        return;\n      }\n      if (!rootElement) {\n        reject(new Error('Root element not defined, unable to print pdf'));\n        return;\n      }\n      iframe.contentWindow.document\n        .write(`<!DOCTYPE html><html><head><style>@media print {\n              html, body {\n                height: initial !important;\n                overflow: initial !important;\n                print-color-adjust: exact;\n                -webkit-print-color-adjust: exact;\n              }\n              ::-webkit-scrollbar {\n                display: none;\n              }\n              :root {\n                --affine-note-shadow-box: none !important;\n                --affine-note-shadow-sticker: none !important;\n              }\n            }</style></head><body></body></html>`);\n\n      // copy all styles to iframe\n      for (const element of document.styleSheets) {\n        try {\n          for (const cssRule of element.cssRules) {\n            const target = iframe.contentWindow.document.styleSheets[0];\n            target.insertRule(cssRule.cssText, target.cssRules.length);\n          }\n        } catch (e) {\n          if (element.href) {\n            console.warn(\n              'css cannot be applied when printing pdf, this may be because of CORS policy from its domain.',\n              element.href\n            );\n          } else {\n            reject(e);\n          }\n        }\n      }\n\n      // convert all canvas to image\n      const canvasImgObjectUrlMap = new Map<string, string>();\n      const allCanvas = rootElement.getElementsByTagName('canvas');\n      let canvasKey = 1;\n      for (const canvas of allCanvas) {\n        canvas.dataset['printToPdfCanvasKey'] = canvasKey.toString();\n        canvasKey++;\n        const canvasImgObjectUrl = await new Promise<Blob | null>(resolve => {\n          try {\n            canvas.toBlob(resolve);\n          } catch (_e) {\n            resolve(null);\n          }\n        });\n        if (!canvasImgObjectUrl) {\n          console.warn(\n            'canvas cannot be converted to image when printing pdf, this may be because of CORS policy'\n          );\n          continue;\n        }\n        canvasImgObjectUrlMap.set(\n          canvas.dataset['printToPdfCanvasKey'],\n          URL.createObjectURL(canvasImgObjectUrl)\n        );\n      }\n\n      const importedRoot = iframe.contentWindow.document.importNode(\n        rootElement,\n        true\n      ) as HTMLDivElement;\n\n      // draw saved canvas image to canvas\n      const allImportedCanvas = importedRoot.getElementsByTagName('canvas');\n      for (const importedCanvas of allImportedCanvas) {\n        const canvasKey = importedCanvas.dataset['printToPdfCanvasKey'];\n        if (canvasKey) {\n          const canvasImg = canvasImgObjectUrlMap.get(canvasKey);\n          const ctx = importedCanvas.getContext('2d');\n          if (canvasImg && ctx) {\n            const image = new Image();\n            image.src = canvasImg;\n            await image.decode();\n            ctx.drawImage(image, 0, 0, ctx.canvas.width, ctx.canvas.height);\n          }\n        }\n      }\n\n      // append to iframe and print\n      iframe.contentWindow.document.body.append(importedRoot);\n\n      await options.beforeprint?.(iframe);\n\n      // browser may take some time to load font\n      await new Promise<void>(resolve => {\n        setTimeout(() => {\n          resolve();\n        }, 1000);\n      });\n\n      iframe.contentWindow.print();\n      iframe.contentWindow.onafterprint = async () => {\n        iframe.remove();\n\n        // clean up\n        for (const canvas of allCanvas) {\n          delete canvas.dataset['printToPdfCanvasKey'];\n        }\n        for (const [_, url] of canvasImgObjectUrlMap) {\n          URL.revokeObjectURL(url);\n        }\n\n        await options.afterprint?.();\n\n        resolve();\n      };\n    };\n  });\n}\n"]}