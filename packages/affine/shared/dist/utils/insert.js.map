{"version":3,"file":"insert.js","sourceRoot":"","sources":["../../src/utils/insert.ts"],"names":[],"mappings":"AAkBA,MAAM,UAAU,qBAAqB,CACnC,QAA0B,EAC1B,GAAQ;AACR,8DAA8D;AAC9D,MAA4B,CAAC,KAAU,EAAE,EAAE,CAAC,KAAK,CAAC,EAAE;IAEpD,IAAI,OAAO,QAAQ,KAAK,QAAQ,EAAE,CAAC;QACjC,MAAM,KAAK,GAAG,GAAG,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,KAAK,QAAQ,CAAC,EAAE,CAAC,CAAC;QACzD,OAAO,KAAK,GAAG,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAC3C,CAAC;IACD,IAAI,QAAQ,IAAI,IAAI,IAAI,QAAQ,KAAK,OAAO,EAAE,CAAC;QAC7C,OAAO,CAAC,CAAC;IACX,CAAC;IACD,IAAI,QAAQ,KAAK,KAAK,EAAE,CAAC;QACvB,OAAO,GAAG,CAAC,MAAM,CAAC;IACpB,CAAC;IACD,OAAO,GAAG,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,KAAK,QAAQ,CAAC,GAAG,CAAC,CAAC;AACrD,CAAC;AACD,MAAM,CAAC,MAAM,SAAS,GAAG,CACvB,GAAQ,EACR,IAAuB,EACvB,EAAwB,EACnB,EAAE;IACP,MAAM,WAAW,GAAG,GAAG,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;IAChD,IAAI,WAAW,GAAG,CAAC,EAAE,CAAC;QACpB,OAAO,GAAG,CAAC;IACb,CAAC;IACD,MAAM,MAAM,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC;IACxB,MAAM,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC,MAAM,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC;IAC5C,MAAM,KAAK,GAAG,EAAE,CAAC,MAAM,CAAC,CAAC;IACzB,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,EAAE,GAAG,CAAC,CAAC;IAC7B,OAAO,MAAM,CAAC;AAChB,CAAC,CAAC","sourcesContent":["export type InsertToPosition =\n  | 'end'\n  | 'start'\n  | {\n      id: string;\n      before: boolean;\n    };\n\nexport function insertPositionToIndex<\n  T extends {\n    id: string;\n  },\n>(position: InsertToPosition, arr: T[]): number;\nexport function insertPositionToIndex<T>(\n  position: InsertToPosition,\n  arr: T[],\n  key: (value: T) => string\n): number;\nexport function insertPositionToIndex<T>(\n  position: InsertToPosition,\n  arr: T[],\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  key: (value: T) => string = (value: any) => value.id\n): number {\n  if (typeof position === 'object') {\n    const index = arr.findIndex(v => key(v) === position.id);\n    return index + (position.before ? 0 : 1);\n  }\n  if (position == null || position === 'start') {\n    return 0;\n  }\n  if (position === 'end') {\n    return arr.length;\n  }\n  return arr.findIndex(v => key(v) === position) + 1;\n}\nexport const arrayMove = <T>(\n  arr: T[],\n  from: (t: T) => boolean,\n  to: (arr: T[]) => number\n): T[] => {\n  const columnIndex = arr.findIndex(v => from(v));\n  if (columnIndex < 0) {\n    return arr;\n  }\n  const newArr = [...arr];\n  const [ele] = newArr.splice(columnIndex, 1);\n  const index = to(newArr);\n  newArr.splice(index, 0, ele);\n  return newArr;\n};\n"]}