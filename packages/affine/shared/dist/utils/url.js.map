{"version":3,"file":"url.js","sourceRoot":"","sources":["../../src/utils/url.ts"],"names":[],"mappings":"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","sourcesContent":["export const ALLOWED_SCHEMES = [\n  'http',\n  'https',\n  'ftp',\n  'sftp',\n  'mailto',\n  'tel',\n  // may need support other schemes\n];\n// I guess you don't want to use the regex base the RFC 5322 Official Standard\n// For more detail see https://stackoverflow.com/questions/201323/how-can-i-validate-an-email-address-using-a-regular-expression/1917982#1917982\nconst MAIL_REGEX =\n  /^[a-zA-Z0-9.!#$%&â€™*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/;\n\n// For more detail see https://stackoverflow.com/questions/8667070/javascript-regular-expression-to-validate-url\nconst URL_REGEX = new RegExp(\n  '^' +\n    // protocol identifier (optional)\n    // short syntax // still required\n    '(?:(?:(?:https?|ftp):)?\\\\/\\\\/)' +\n    // user:pass BasicAuth (optional)\n    '(?:\\\\S+(?::\\\\S*)?@)?' +\n    '(?:' +\n    // IP address exclusion\n    // private & local networks\n    '(?!(?:10|127)(?:\\\\.\\\\d{1,3}){3})' +\n    '(?!(?:169\\\\.254|192\\\\.168)(?:\\\\.\\\\d{1,3}){2})' +\n    '(?!172\\\\.(?:1[6-9]|2\\\\d|3[0-1])(?:\\\\.\\\\d{1,3}){2})' +\n    // IP address dotted notation octets\n    // excludes loopback network 0.0.0.0\n    // excludes reserved space >= 224.0.0.0\n    // excludes network & broadcast addresses\n    // (first & last IP address of each class)\n    '(?:[1-9]\\\\d?|1\\\\d\\\\d|2[01]\\\\d|22[0-3])' +\n    '(?:\\\\.(?:1?\\\\d{1,2}|2[0-4]\\\\d|25[0-5])){2}' +\n    '(?:\\\\.(?:[1-9]\\\\d?|1\\\\d\\\\d|2[0-4]\\\\d|25[0-4]))' +\n    '|' +\n    // host & domain names, may end with dot\n    // can be replaced by a shortest alternative\n    // (?![-_])(?:[-\\\\w\\\\u00a1-\\\\uffff]{0,63}[^-_]\\\\.)+\n    '(?:' +\n    '(?:' +\n    '[a-z0-9\\\\u00a1-\\\\uffff]' +\n    '[a-z0-9\\\\u00a1-\\\\uffff_-]{0,62}' +\n    ')?' +\n    '[a-z0-9\\\\u00a1-\\\\uffff]\\\\.' +\n    ')+' +\n    // TLD identifier name, may end with dot\n    // Addition: We limit the TLD to 2-6 characters, because it can cover most of the cases.\n    '(?:[a-z\\\\u00a1-\\\\uffff]{2,6}\\\\.?)' +\n    ')' +\n    // port number (optional)\n    '(?::\\\\d{2,5})?' +\n    // resource path (optional)\n    '(?:[/?#]\\\\S*)?' +\n    '$',\n  'i'\n);\n\nexport function normalizeUrl(url: string) {\n  const includeScheme = ALLOWED_SCHEMES.find(scheme =>\n    url.startsWith(scheme + ':')\n  );\n  if (includeScheme) {\n    // Any link include schema is a valid url\n    return url;\n  }\n  const isEmail = MAIL_REGEX.test(url);\n  if (isEmail) {\n    return 'mailto:' + url;\n  }\n  return 'http://' + url;\n}\n\n/**\n * Assume user will input a url, we just need to check if it is valid.\n *\n * For more detail see https://www.ietf.org/rfc/rfc1738.txt\n */\nexport function isValidUrl(str: string) {\n  if (!str) {\n    return false;\n  }\n  const url = normalizeUrl(str);\n  if (url === str) {\n    // Skip check if user input scheme manually\n    try {\n      new URL(url);\n    } catch {\n      return false;\n    }\n    return true;\n  }\n  return URL_REGEX.test(url);\n}\n\n// https://en.wikipedia.org/wiki/Top-level_domain\nconst COMMON_TLDS = [\n  'com',\n  'org',\n  'net',\n  'edu',\n  'gov',\n  'co',\n  'io',\n  'me',\n  'moe',\n  'mil',\n  'top',\n  'dev',\n  'xyz',\n  'info',\n  'cat',\n  'ru',\n  'de',\n  'jp',\n  'uk',\n  'pro',\n];\n\nfunction isCommonTLD(url: URL) {\n  const tld = url.hostname.split('.').pop();\n  if (!tld) {\n    return false;\n  }\n  return COMMON_TLDS.includes(tld);\n}\n\n/**\n * Assuming the user will input anything, we need to check rigorously.\n */\nexport function isStrictUrl(str: string) {\n  if (!isValidUrl(str)) {\n    return false;\n  }\n  const url = new URL(normalizeUrl(str));\n  if (isCommonTLD(url)) {\n    return true;\n  }\n  return false;\n}\n\nexport function isUrlInClipboard(clipboardData: DataTransfer) {\n  const url = clipboardData.getData('text/plain');\n  return isValidUrl(url);\n}\n\nexport function getHostName(url: string) {\n  try {\n    return new URL(url).hostname;\n  } catch {\n    return url;\n  }\n}\n"]}