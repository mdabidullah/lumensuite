{"version":3,"file":"string.js","sourceRoot":"","sources":["../../src/utils/string.ts"],"names":[],"mappings":"AAAA,SAAS,YAAY,CAAC,KAAa;IACjC,6EAA6E;IAC7E,OAAO,KAAK,CAAC,OAAO,CAAC,qBAAqB,EAAE,MAAM,CAAC,CAAC;AACtD,CAAC;AAED;;;;;;;;;;GAUG;AACH,MAAM,UAAU,YAAY,CAAC,IAAY,EAAE,KAAa;IACtD,MAAM,QAAQ,GAAG,IAAI;SAClB,IAAI,EAAE;SACN,WAAW,EAAE;SACb,KAAK,CAAC,EAAE,CAAC;SACT,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,KAAK,GAAG,CAAC;SAC5B,IAAI,CAAC,EAAE,CAAC,CAAC;IAEZ,MAAM,KAAK,GAAG,IAAI,MAAM,CACtB,KAAK;SACF,KAAK,CAAC,EAAE,CAAC;SACT,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,KAAK,GAAG,CAAC;SAC5B,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,GAAG,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC;SACtC,IAAI,CAAC,EAAE,CAAC,EACX,GAAG,CACJ,CAAC;IACF,OAAO,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;AAC9B,CAAC;AAED;;;;;;;GAOG;AACH,MAAM,UAAU,mBAAmB,CAAC,IAAY,EAAE,KAAa;IAC7D,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC;QAAE,OAAO,CAAC,CAAC;IACjC,IAAI,IAAI,CAAC,MAAM,KAAK,CAAC;QAAE,OAAO,CAAC,CAAC;IAChC,IAAI,KAAK,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM;QAAE,OAAO,CAAC,CAAC;IAEzC,KAAK,GAAG,KAAK,CAAC,WAAW,EAAE,CAAC;IAC5B,IAAI,GAAG,IAAI,CAAC,iBAAiB,EAAE,CAAC;IAEhC,IAAI,KAAK,CAAC;IACV,IAAI,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE,CAAC;QACzB,KAAK,GAAG,CAAC,GAAG,KAAK,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;IACzC,CAAC;SAAM,CAAC;QACN,IAAI,cAAc,GAAG,CAAC,CAAC;QACvB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;YACtC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;gBACrC,IAAI,WAAW,GAAG,CAAC,CAAC;gBACpB,OACE,CAAC,GAAG,WAAW,GAAG,KAAK,CAAC,MAAM;oBAC9B,CAAC,GAAG,WAAW,GAAG,IAAI,CAAC,MAAM;oBAC7B,KAAK,CAAC,CAAC,GAAG,WAAW,CAAC,KAAK,IAAI,CAAC,CAAC,GAAG,WAAW,CAAC,EAChD,CAAC;oBACD,WAAW,EAAE,CAAC;gBAChB,CAAC;gBACD,cAAc,GAAG,IAAI,CAAC,GAAG,CAAC,cAAc,EAAE,WAAW,CAAC,CAAC;YACzD,CAAC;QACH,CAAC;QACD,KAAK,GAAG,cAAc,GAAG,IAAI,CAAC,MAAM,CAAC;IACvC,CAAC;IAED,YAAY;IACZ,OAAO,GAAG,GAAG,KAAK,CAAC;AACrB,CAAC;AAED;;;GAGG;AACH,MAAM,UAAU,gBAAgB,CAAC,MAAc;IAC7C,OAAO,CAAC,CAAC,MAAM,CAAC,KAAK,CACnB,yEAAyE,CAC1E,CAAC;AACJ,CAAC","sourcesContent":["function escapeRegExp(input: string) {\n  // escape regex characters in the input string to prevent regex format errors\n  return input.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n}\n\n/**\n * Checks if the name is a fuzzy match of the query.\n *\n * @example\n * ```ts\n * const name = 'John Smith';\n * const query = 'js';\n * const isMatch = isFuzzyMatch(name, query);\n * // isMatch: true\n * ```\n */\nexport function isFuzzyMatch(name: string, query: string) {\n  const pureName = name\n    .trim()\n    .toLowerCase()\n    .split('')\n    .filter(char => char !== ' ')\n    .join('');\n\n  const regex = new RegExp(\n    query\n      .split('')\n      .filter(char => char !== ' ')\n      .map(item => `${escapeRegExp(item)}.*`)\n      .join(''),\n    'i'\n  );\n  return regex.test(pureName);\n}\n\n/**\n * Calculate the score of the substring match.\n * s = [0.5, 1] if the query is a substring of the name\n * s = (0, 0.5) if there exists a common non-maximal length substring\n * s = 0 if there is no match\n *\n * s is greater if the query has a longer substring.\n */\nexport function substringMatchScore(name: string, query: string) {\n  if (query.length === 0) return 0;\n  if (name.length === 0) return 0;\n  if (query.length > name.length) return 0;\n\n  query = query.toLowerCase();\n  name = name.toLocaleLowerCase();\n\n  let score;\n  if (name.includes(query)) {\n    score = 1 + query.length / name.length;\n  } else {\n    let maxMatchLength = 0;\n    for (let i = 0; i < query.length; i++) {\n      for (let j = 0; j < name.length; j++) {\n        let matchLength = 0;\n        while (\n          i + matchLength < query.length &&\n          j + matchLength < name.length &&\n          query[i + matchLength] === name[j + matchLength]\n        ) {\n          matchLength++;\n        }\n        maxMatchLength = Math.max(maxMatchLength, matchLength);\n      }\n    }\n    score = maxMatchLength / name.length;\n  }\n\n  // normalize\n  return 0.5 * score;\n}\n\n/**\n * Checks if the prefix is a markdown prefix.\n * Ex. 1. 2. 3. - * [] [ ] [x] # ## ### #### ##### ###### --- *** > ```\n */\nexport function isMarkdownPrefix(prefix: string) {\n  return !!prefix.match(\n    /^(\\d+\\.|-|\\*|\\[ ?\\]|\\[x\\]|(#){1,6}|(-){3}|(\\*){3}|>|```([a-zA-Z0-9]*))$/\n  );\n}\n"]}