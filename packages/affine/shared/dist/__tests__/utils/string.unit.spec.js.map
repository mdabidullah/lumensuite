{"version":3,"file":"string.unit.spec.js","sourceRoot":"","sources":["../../../src/__tests__/utils/string.unit.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { describe, expect, it } from 'vitest';\n\nimport { isFuzzyMatch, substringMatchScore } from '../../utils/string.js';\n\ndescribe('fuzzyMatch', () => {\n  it('basic case', () => {\n    expect(isFuzzyMatch('John Smith', 'j')).toEqual(true);\n    expect(isFuzzyMatch('John Smith', 'js')).toEqual(true);\n    expect(isFuzzyMatch('John Smith', 'jsa')).toEqual(false);\n  });\n\n  it('should works with CJK', () => {\n    expect(isFuzzyMatch('中', '中')).toEqual(true);\n    expect(isFuzzyMatch('中文', '中')).toEqual(true);\n    expect(isFuzzyMatch('中文字符', '中字')).toEqual(true);\n    expect(isFuzzyMatch('中文字符', '字中')).toEqual(false);\n  });\n\n  it('should works with IME', () => {\n    // IME will generate a space between 'da' and 't'\n    expect(isFuzzyMatch('database', 'da t')).toEqual(true);\n  });\n});\n\ndescribe('substringMatchScore', () => {\n  it('should return a fraction if there exists a common maximal length substring. ', () => {\n    const result = substringMatchScore('testing the function', 'tet');\n    expect(result).toBeLessThan(1);\n    expect(result).toBeGreaterThan(0);\n  });\n\n  it('should return bigger score for longer match', () => {\n    const result = substringMatchScore('testing the function', 'functin');\n    const result2 = substringMatchScore('testing the function', 'tet');\n    // because th length of common substring of 'functin' is bigger than 'tet'\n    expect(result).toBeGreaterThan(result2);\n  });\n\n  it('should return bigger score when using same query to search a shorter string', () => {\n    const result = substringMatchScore('test', 'test');\n    const result2 = substringMatchScore('testing the function', 'test');\n    expect(result).toBeGreaterThan(result2);\n  });\n\n  it('should return 0 when there is no match', () => {\n    const result = substringMatchScore('abc', 'defghijk');\n    expect(result).toBe(0);\n  });\n\n  it('should handle cases where the query is longer than the string', () => {\n    const result = substringMatchScore('short', 'longer substring');\n    expect(result).toBe(0);\n  });\n\n  it('should handle empty strings correctly', () => {\n    const result = substringMatchScore('any string', '');\n    expect(result).toBe(0);\n  });\n\n  it('should handle both strings being empty', () => {\n    const result = substringMatchScore('', '');\n    expect(result).toBe(0);\n  });\n\n  it('should handle cases where both strings are identical', () => {\n    const result = substringMatchScore('identical', 'identical');\n    expect(result).toBe(1);\n  });\n});\n"]}