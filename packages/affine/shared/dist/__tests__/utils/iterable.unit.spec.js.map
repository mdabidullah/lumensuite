{"version":3,"file":"iterable.unit.spec.js","sourceRoot":"","sources":["../../../src/__tests__/utils/iterable.unit.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  atLeastNMatches,\n  countBy,\n  groupBy,\n  maxBy,\n} from '@lumensuite/global/utils';\nimport { describe, expect, it } from 'vitest';\n\ndescribe('countBy', () => {\n  it('basic', () => {\n    const items = [\n      { name: 'a', classroom: 'c1' },\n      { name: 'b', classroom: 'c2' },\n      { name: 'a', classroom: 'c2' },\n    ];\n    const counted = countBy(items, i => i.name);\n    expect(counted).toEqual({ a: 2, b: 1 });\n  });\n\n  it('empty items', () => {\n    const counted = countBy([], i => i);\n    expect(Object.keys(counted).length).toBe(0);\n  });\n});\n\ndescribe('maxBy', () => {\n  it('basic', () => {\n    const items = [{ n: 1 }, { n: 2 }];\n    const max = maxBy(items, i => i.n);\n    expect(max).toBe(items[1]);\n  });\n\n  it('empty items', () => {\n    expect(maxBy([], i => i)).toBeNull();\n  });\n});\n\ndescribe('atLeastNMatches', () => {\n  it('basic', () => {\n    const arr = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n    const isEven = (num: number): boolean => num % 2 === 0;\n    const isGreaterThan5 = (num: number): boolean => num > 5;\n    const isNegative = (num: number): boolean => num < 0;\n\n    expect(atLeastNMatches(arr, isEven, 3)).toBe(true);\n    expect(atLeastNMatches(arr, isGreaterThan5, 5)).toBe(false);\n    expect(atLeastNMatches(arr, isNegative, 1)).toBe(false);\n\n    const strArr = ['apple', 'banana', 'orange', 'kiwi', 'mango'];\n    const startsWithA = (str: string): boolean => str[0].toLowerCase() === 'a';\n    const longerThan5 = (str: string): boolean => str.length > 5;\n\n    expect(atLeastNMatches(strArr, startsWithA, 1)).toBe(true);\n    expect(atLeastNMatches(strArr, longerThan5, 3)).toBe(false);\n  });\n});\n\ndescribe('groupBy', () => {\n  it('basic', () => {\n    const students = [\n      { name: 'Alice', age: 25 },\n      { name: 'Bob', age: 23 },\n      { name: 'Cathy', age: 25 },\n      { name: 'David', age: 23 },\n    ];\n\n    const groupedByAge = groupBy(students, student => student.age.toString());\n    const expectedGroupedByAge = {\n      '23': [\n        { name: 'Bob', age: 23 },\n        { name: 'David', age: 23 },\n      ],\n      '25': [\n        { name: 'Alice', age: 25 },\n        { name: 'Cathy', age: 25 },\n      ],\n    };\n    expect(groupedByAge).toMatchObject(expectedGroupedByAge);\n  });\n\n  it('empty', () => {\n    const emptyArray: string[] = [];\n    const groupedEmptyArray = groupBy(emptyArray, item => item);\n    expect(Object.keys(groupedEmptyArray).length).toBe(0);\n  });\n});\n"]}