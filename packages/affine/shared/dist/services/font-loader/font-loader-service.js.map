{"version":3,"file":"font-loader-service.js","sourceRoot":"","sources":["../../../src/services/font-loader/font-loader-service.ts"],"names":[],"mappings":"AAAA,OAAO,EAAsB,gBAAgB,EAAE,MAAM,uBAAuB,CAAC;AAC7E,OAAO,EAAE,gBAAgB,EAAE,MAAM,uBAAuB,CAAC;AACzD,OAAO,EAAE,UAAU,EAAE,MAAM,wBAAwB,CAAC;AAIpD,MAAM,YAAY,GAAG,UAAU;IAC7B,CAAC,CAAC,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,GAAG,EAAE,KAAK,EAAc,EAAE,EAAE,CAC3C,IAAI,QAAQ,CAAC,IAAI,IAAI,GAAG,EAAE,OAAO,GAAG,GAAG,EAAE;QACvC,MAAM;QACN,KAAK;KACN,CAAC;IACN,CAAC,CAAC,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,GAAG,EAAE,KAAK,EAAc,EAAE,EAAE,CAC3C,IAAI,QAAQ,CAAC,IAAI,EAAE,OAAO,GAAG,GAAG,EAAE;QAChC,MAAM;QACN,KAAK;KACN,CAAC,CAAC;AAET,MAAM,OAAO,iBAAkB,SAAQ,gBAAgB;IAAvD;;QAGW,cAAS,GAAe,EAAE,CAAC;IA4BtC,CAAC;aA9B0B,QAAG,GAAG,aAAa,AAAhB,CAAiB;IAI7C,IAAI,KAAK;QACP,OAAO,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC;IACtE,CAAC;IAED,IAAI,CAAC,KAAmB;QACtB,IAAI,CAAC,SAAS,CAAC,IAAI,CACjB,GAAG,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE;YAClB,MAAM,QAAQ,GAAG,YAAY,CAAC,IAAI,CAAC,CAAC;YACpC,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;YAC7B,QAAQ,CAAC,IAAI,EAAE,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;YACrC,OAAO,QAAQ,CAAC;QAClB,CAAC,CAAC,CACH,CAAC;IACJ,CAAC;IAEQ,OAAO;QACd,MAAM,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,WAAW,CAAC,oBAAoB,CAAC,CAAC;QAC1D,IAAI,MAAM,EAAE,CAAC;YACX,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QACpB,CAAC;IACH,CAAC;IAEQ,SAAS;QAChB,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE,CAAC,QAAQ,CAAC,KAAK,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC;QACpE,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,EAAE,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;IAClD,CAAC;;AAGH,MAAM,CAAC,MAAM,oBAAoB,GAC/B,gBAAgB,CAAe,kBAAkB,CAAC,CAAC;AAErD,MAAM,CAAC,MAAM,mBAAmB,GAAG,CACjC,UAAwB,EACT,EAAE,CAAC,CAAC;IACnB,KAAK,EAAE,EAAE,CAAC,EAAE;QACV,EAAE,CAAC,OAAO,CAAC,oBAAoB,EAAE,GAAG,EAAE,CAAC,UAAU,CAAC,CAAC;IACrD,CAAC;CACF,CAAC,CAAC","sourcesContent":["import { type ExtensionType, LifeCycleWatcher } from '@blocksuite/block-std';\nimport { createIdentifier } from '@blocksuite/global/di';\nimport { IS_FIREFOX } from '@blocksuite/global/env';\n\nimport type { FontConfig } from './config.js';\n\nconst initFontFace = IS_FIREFOX\n  ? ({ font, weight, url, style }: FontConfig) =>\n      new FontFace(`\"${font}\"`, `url(${url})`, {\n        weight,\n        style,\n      })\n  : ({ font, weight, url, style }: FontConfig) =>\n      new FontFace(font, `url(${url})`, {\n        weight,\n        style,\n      });\n\nexport class FontLoaderService extends LifeCycleWatcher {\n  static override readonly key = 'font-loader';\n\n  readonly fontFaces: FontFace[] = [];\n\n  get ready() {\n    return Promise.all(this.fontFaces.map(fontFace => fontFace.loaded));\n  }\n\n  load(fonts: FontConfig[]) {\n    this.fontFaces.push(\n      ...fonts.map(font => {\n        const fontFace = initFontFace(font);\n        document.fonts.add(fontFace);\n        fontFace.load().catch(console.error);\n        return fontFace;\n      })\n    );\n  }\n\n  override mounted() {\n    const config = this.std.getOptional(FontConfigIdentifier);\n    if (config) {\n      this.load(config);\n    }\n  }\n\n  override unmounted() {\n    this.fontFaces.forEach(fontFace => document.fonts.delete(fontFace));\n    this.fontFaces.splice(0, this.fontFaces.length);\n  }\n}\n\nexport const FontConfigIdentifier =\n  createIdentifier<FontConfig[]>('AffineFontConfig');\n\nexport const FontConfigExtension = (\n  fontConfig: FontConfig[]\n): ExtensionType => ({\n  setup: di => {\n    di.addImpl(FontConfigIdentifier, () => fontConfig);\n  },\n});\n"]}