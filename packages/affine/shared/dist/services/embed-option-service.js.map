{"version":3,"file":"embed-option-service.js","sourceRoot":"","sources":["../../src/services/embed-option-service.ts"],"names":[],"mappings":"AAGA,OAAO,EAAE,SAAS,EAAE,MAAM,uBAAuB,CAAC;AAClD,OAAO,EAAE,gBAAgB,EAAE,MAAM,uBAAuB,CAAC;AAczD,MAAM,CAAC,MAAM,mBAAmB,GAAG,gBAAgB,CACjD,2BAA2B,CAC5B,CAAC;AAEF,MAAM,OAAO,kBACX,SAAQ,SAAS;IADnB;;QAIU,wBAAmB,GAAG,IAAI,GAAG,EAAgB,CAAC;QAEtD,yBAAoB,GAAG,CAAC,GAAW,EAAuB,EAAE;YAC1D,MAAM,OAAO,GAAG,IAAI,CAAC,mBAAmB,CAAC,OAAO,EAAE,CAAC;YACnD,KAAK,MAAM,CAAC,OAAO,CAAC,IAAI,OAAO,EAAE,CAAC;gBAChC,MAAM,KAAK,GAAG,OAAO,CAAC,QAAQ,CAAC;gBAC/B,IAAI,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC;oBAAE,OAAO,OAAO,CAAC;YACtC,CAAC;YACD,OAAO,IAAI,CAAC;QACd,CAAC,CAAC;QAEF,8BAAyB,GAAG,CAAC,OAAqB,EAAQ,EAAE;YAC1D,IAAI,CAAC,mBAAmB,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;QACxC,CAAC,CAAC;IAKJ,CAAC;IAHC,MAAM,CAAU,KAAK,CAAC,EAAa;QACjC,EAAE,CAAC,OAAO,CAAC,mBAAmB,EAAE,kBAAkB,CAAC,CAAC;IACtD,CAAC;CACF","sourcesContent":["import type { EmbedCardStyle } from '@lumensuite/affine-model';\nimport type { Container } from '@lumensuite/global/di';\n\nimport { Extension } from '@lumensuite/block-std';\nimport { createIdentifier } from '@lumensuite/global/di';\n\nexport type EmbedOptions = {\n  flavour: string;\n  urlRegex: RegExp;\n  styles: EmbedCardStyle[];\n  viewType: 'card' | 'embed';\n};\n\nexport interface EmbedOptionProvider {\n  getEmbedBlockOptions(url: string): EmbedOptions | null;\n  registerEmbedBlockOptions(options: EmbedOptions): void;\n}\n\nexport const EmbedOptionProvider = createIdentifier<EmbedOptionProvider>(\n  'AffineEmbedOptionProvider'\n);\n\nexport class EmbedOptionService\n  extends Extension\n  implements EmbedOptionProvider\n{\n  private _embedBlockRegistry = new Set<EmbedOptions>();\n\n  getEmbedBlockOptions = (url: string): EmbedOptions | null => {\n    const entries = this._embedBlockRegistry.entries();\n    for (const [options] of entries) {\n      const regex = options.urlRegex;\n      if (regex.test(url)) return options;\n    }\n    return null;\n  };\n\n  registerEmbedBlockOptions = (options: EmbedOptions): void => {\n    this._embedBlockRegistry.add(options);\n  };\n\n  static override setup(di: Container) {\n    di.addImpl(EmbedOptionProvider, EmbedOptionService);\n  }\n}\n"]}