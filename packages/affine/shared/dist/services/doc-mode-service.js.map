{"version":3,"file":"doc-mode-service.js","sourceRoot":"","sources":["../../src/services/doc-mode-service.ts"],"names":[],"mappings":"AAIA,OAAO,EAAE,SAAS,EAAE,aAAa,EAAE,MAAM,uBAAuB,CAAC;AACjE,OAAO,EAAE,gBAAgB,EAAE,MAAM,uBAAuB,CAAC;AACzD,OAAO,EAAmB,IAAI,EAAE,IAAI,EAAE,MAAM,0BAA0B,CAAC;AAEvE,MAAM,YAAY,GAAY,MAAM,CAAC;AAkDrC,MAAM,CAAC,MAAM,eAAe,GAAG,gBAAgB,CAC7C,sBAAsB,CACvB,CAAC;AAEF,MAAM,OAAO,GAAG,IAAI,GAAG,EAAmB,CAAC;AAC3C,MAAM,OAAO,GAAG,IAAI,GAAG,EAAyB,CAAC;AAEjD,MAAM,OAAO,cAAe,SAAQ,SAAS;IAC3C,YAAmB,GAAkB;QACnC,KAAK,EAAE,CAAC;QADS,QAAG,GAAH,GAAG,CAAe;IAErC,CAAC;IAED,MAAM,CAAU,KAAK,CAAC,EAAa;QACjC,EAAE,CAAC,OAAO,CAAC,eAAe,EAAE,cAAc,EAAE,CAAC,aAAa,CAAC,CAAC,CAAC;IAC/D,CAAC;IAED,aAAa;QACX,OAAO,IAAI,CAAC;IACd,CAAC;IAED,cAAc,CAAC,EAAU;QACvB,OAAO,OAAO,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,YAAY,CAAC;IACzC,CAAC;IAED,mBAAmB,CAAC,OAAgC,EAAE,EAAU;QAC9D,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC;YACrB,OAAO,CAAC,GAAG,CAAC,EAAE,EAAE,IAAI,IAAI,EAAE,CAAC,CAAC;QAC9B,CAAC;QACD,OAAO,OAAO,CAAC,GAAG,CAAC,EAAE,CAAE,CAAC,EAAE,CAAC,OAAO,CAAC,CAAC;IACtC,CAAC;IAED,aAAa,CAAC,IAAa;QACzB,IAAI,CAAC,IAAI,CAAC,CAAC;IACb,CAAC;IAED,cAAc,CAAC,IAAa,EAAE,EAAU;QACtC,OAAO,CAAC,GAAG,CAAC,EAAE,EAAE,IAAI,CAAC,CAAC;QACtB,OAAO,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;IAC9B,CAAC;IAED,iBAAiB,CAAC,EAAU;QAC1B,MAAM,IAAI,GAAG,IAAI,CAAC,cAAc,CAAC,EAAE,CAAC,KAAK,MAAM,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,MAAM,CAAC;QACtE,IAAI,CAAC,cAAc,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;QAE9B,OAAO,IAAI,CAAC;IACd,CAAC;CACF","sourcesContent":["import type { DocMode } from '@lumensuite/affine-model';\nimport type { BlockStdScope } from '@lumensuite/block-std';\nimport type { Container } from '@lumensuite/global/di';\n\nimport { Extension, StdIdentifier } from '@lumensuite/block-std';\nimport { createIdentifier } from '@lumensuite/global/di';\nimport { type Disposable, noop, Slot } from '@lumensuite/global/utils';\n\nconst DEFAULT_MODE: DocMode = 'page';\n\nexport interface DocModeProvider {\n  /**\n   * Set the primary mode of the doc.\n   * This would not affect the current editor mode.\n   * If you want to switch the editor mode, use `setEditorMode` instead.\n   * @param mode - The mode to set.\n   * @param docId - The id of the doc.\n   */\n  setPrimaryMode: (mode: DocMode, docId: string) => void;\n  /**\n   * Get the primary mode of the doc.\n   * Normally, it would be used to query the mode of other doc.\n   * @param docId - The id of the doc.\n   * @returns The primary mode of the document.\n   */\n  getPrimaryMode: (docId: string) => DocMode;\n  /**\n   * Toggle the primary mode of the doc.\n   * @param docId - The id of the doc.\n   * @returns The new primary mode of the doc.\n   */\n  togglePrimaryMode: (docId: string) => DocMode;\n  /**\n   * Subscribe to changes in the primary mode of the doc.\n   * For example:\n   * Embed-linked-doc-block will subscribe to the primary mode of the linked doc,\n   * and will display different UI according to the primary mode of the linked doc.\n   * @param handler - The handler to call when the primary mode of certain doc changes.\n   * @param docId - The id of the doc.\n   * @returns A disposable to stop the subscription.\n   */\n  onPrimaryModeChange: (\n    handler: (mode: DocMode) => void,\n    docId: string\n  ) => Disposable;\n  /**\n   * Set the editor mode. Normally, it would be used to set the mode of the current editor.\n   * When patch or override the doc mode service, can pass a callback to set the editor mode.\n   * @param mode - The mode to set.\n   */\n  setEditorMode: (mode: DocMode) => void;\n  /**\n   * Get current editor mode.\n   * @returns The editor mode.\n   */\n  getEditorMode: () => DocMode | null;\n}\n\nexport const DocModeProvider = createIdentifier<DocModeProvider>(\n  'AffineDocModeService'\n);\n\nconst modeMap = new Map<string, DocMode>();\nconst slotMap = new Map<string, Slot<DocMode>>();\n\nexport class DocModeService extends Extension implements DocModeProvider {\n  constructor(public std: BlockStdScope) {\n    super();\n  }\n\n  static override setup(di: Container) {\n    di.addImpl(DocModeProvider, DocModeService, [StdIdentifier]);\n  }\n\n  getEditorMode() {\n    return null;\n  }\n\n  getPrimaryMode(id: string) {\n    return modeMap.get(id) ?? DEFAULT_MODE;\n  }\n\n  onPrimaryModeChange(handler: (mode: DocMode) => void, id: string) {\n    if (!slotMap.get(id)) {\n      slotMap.set(id, new Slot());\n    }\n    return slotMap.get(id)!.on(handler);\n  }\n\n  setEditorMode(mode: DocMode) {\n    noop(mode);\n  }\n\n  setPrimaryMode(mode: DocMode, id: string) {\n    modeMap.set(id, mode);\n    slotMap.get(id)?.emit(mode);\n  }\n\n  togglePrimaryMode(id: string) {\n    const mode = this.getPrimaryMode(id) === 'page' ? 'edgeless' : 'page';\n    this.setPrimaryMode(mode, id);\n\n    return mode;\n  }\n}\n"]}