{"version":3,"file":"get-selected-blocks.js","sourceRoot":"","sources":["../../../src/commands/block-crud/get-selected-blocks.ts"],"names":[],"mappings":"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","sourcesContent":["import type { ImageSelection } from '@blocksuite/affine-shared/selection';\nimport type {\n  BlockSelection,\n  Command,\n  TextSelection,\n} from '@blocksuite/block-std';\nimport type { RoleType } from '@blocksuite/store';\n\nimport { BlockComponent } from '@blocksuite/block-std';\n\nexport const getSelectedBlocksCommand: Command<\n  'currentTextSelection' | 'currentBlockSelections' | 'currentImageSelections',\n  'selectedBlocks',\n  {\n    textSelection?: TextSelection;\n    blockSelections?: BlockSelection[];\n    imageSelections?: ImageSelection[];\n    filter?: (el: BlockComponent) => boolean;\n    types?: Extract<BlockSuite.SelectionType, 'block' | 'text' | 'image'>[];\n    roles?: RoleType[];\n    mode?: 'all' | 'flat' | 'highest';\n  }\n> = (ctx, next) => {\n  const {\n    types = ['block', 'text', 'image'],\n    roles = ['content'],\n    mode = 'flat',\n  } = ctx;\n\n  let dirtyResult: BlockComponent[] = [];\n\n  const textSelection = ctx.textSelection ?? ctx.currentTextSelection;\n  if (types.includes('text') && textSelection) {\n    try {\n      const range = ctx.std.range.textSelectionToRange(textSelection);\n      if (!range) return;\n\n      const selectedBlocks = ctx.std.range.getSelectedBlockComponentsByRange(\n        range,\n        {\n          match: (el: BlockComponent) => roles.includes(el.model.role),\n          mode,\n        }\n      );\n      dirtyResult.push(...selectedBlocks);\n    } catch {\n      return;\n    }\n  }\n\n  const blockSelections = ctx.blockSelections ?? ctx.currentBlockSelections;\n  if (types.includes('block') && blockSelections) {\n    const viewStore = ctx.std.view;\n    const doc = ctx.std.doc;\n    const selectedBlockComponents = blockSelections.flatMap(selection => {\n      const el = viewStore.getBlock(selection.blockId);\n      if (!el) {\n        return [];\n      }\n      const blocks: BlockComponent[] = [el];\n      let selectionPath = selection.blockId;\n      if (mode === 'all') {\n        let parent = null;\n        do {\n          parent = doc.getParent(selectionPath);\n          if (!parent) {\n            break;\n          }\n          const view = parent;\n          if (\n            view instanceof BlockComponent &&\n            !roles.includes(view.model.role)\n          ) {\n            break;\n          }\n          selectionPath = parent.id;\n        } while (parent);\n        parent = viewStore.getBlock(selectionPath);\n        if (parent) {\n          blocks.push(parent);\n        }\n      }\n      if (['all', 'flat'].includes(mode)) {\n        viewStore.walkThrough(node => {\n          const view = node;\n          if (!(view instanceof BlockComponent)) {\n            return true;\n          }\n          if (roles.includes(view.model.role)) {\n            blocks.push(view);\n          }\n          return;\n        }, selectionPath);\n      }\n      return blocks;\n    });\n    dirtyResult.push(...selectedBlockComponents);\n  }\n\n  const imageSelections = ctx.imageSelections ?? ctx.currentImageSelections;\n  if (types.includes('image') && imageSelections) {\n    const viewStore = ctx.std.view;\n    const selectedBlocks = imageSelections\n      .map(selection => {\n        const el = viewStore.getBlock(selection.blockId);\n        return el;\n      })\n      .filter((el): el is BlockComponent => Boolean(el));\n    dirtyResult.push(...selectedBlocks);\n  }\n\n  if (ctx.filter) {\n    dirtyResult = dirtyResult.filter(ctx.filter);\n  }\n\n  // remove duplicate elements\n  const result: BlockComponent[] = dirtyResult\n    .filter((el, index) => dirtyResult.indexOf(el) === index)\n    // sort by document position\n    .sort((a, b) => {\n      if (a === b) {\n        return 0;\n      }\n\n      const position = a.compareDocumentPosition(b);\n      if (\n        position & Node.DOCUMENT_POSITION_FOLLOWING ||\n        position & Node.DOCUMENT_POSITION_CONTAINED_BY\n      ) {\n        return -1;\n      }\n\n      if (\n        position & Node.DOCUMENT_POSITION_PRECEDING ||\n        position & Node.DOCUMENT_POSITION_CONTAINS\n      ) {\n        return 1;\n      }\n\n      return 0;\n    });\n\n  if (result.length === 0) return;\n\n  next({\n    selectedBlocks: result,\n  });\n};\n\ndeclare global {\n  namespace BlockSuite {\n    interface CommandContext {\n      selectedBlocks?: BlockComponent[];\n    }\n\n    interface Commands {\n      getSelectedBlocks: typeof getSelectedBlocksCommand;\n    }\n  }\n}\n"]}