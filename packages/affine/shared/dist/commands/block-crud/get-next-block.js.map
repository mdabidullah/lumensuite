{"version":3,"file":"get-next-block.js","sourceRoot":"","sources":["../../../src/commands/block-crud/get-next-block.ts"],"names":[],"mappings":"AAEA,OAAO,EAAE,YAAY,EAAE,MAAM,0BAA0B,CAAC;AAExD,SAAS,OAAO,CAAC,GAAmB,EAAE,KAAqB;IACzD,MAAM,IAAI,GAAG,GAAG,CAAC,IAAI,CAAC;IACtB,MAAM,IAAI,GAAG,GAAG,CAAC,GAAG,CAAC,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;IAC1C,IAAI,CAAC,IAAI;QAAE,OAAO,IAAI,CAAC;IACvB,OAAO,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;AAChC,CAAC;AAED,SAAS,YAAY,CAAC,GAAmB,EAAE,IAAY;IACrD,MAAM,IAAI,GAAG,GAAG,CAAC,IAAI,CAAC;IACtB,MAAM,UAAU,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;IACvC,IAAI,CAAC,UAAU;QAAE,OAAO,IAAI,CAAC;IAE7B,IAAI,IAAI,GAA0B,IAAI,CAAC;IACvC,IAAI,UAAU,CAAC,WAAW,CAAC,CAAC,CAAC,EAAE,CAAC;QAC9B,IAAI,GAAG,UAAU,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;IACnC,CAAC;IAED,IAAI,CAAC,IAAI,EAAE,CAAC;QACV,IAAI,GAAG,OAAO,CAAC,GAAG,EAAE,UAAU,CAAC,CAAC;IAClC,CAAC;IAED,IAAI,IAAI,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,EAAE,CAAC;QACvC,OAAO,IAAI,CAAC;IACd,CAAC;IAED,OAAO,IAAI,CAAC;AACd,CAAC;AAED,MAAM,CAAC,MAAM,mBAAmB,GAM5B,CAAC,GAAG,EAAE,IAAI,EAAE,EAAE;IAChB,MAAM,IAAI,GAAG,GAAG,CAAC,IAAI,IAAI,GAAG,CAAC,oBAAoB,CAAC;IAClD,YAAY,CACV,IAAI,EACJ,oGAAoG,CACrG,CAAC;IAEF,MAAM,SAAS,GAAG,YAAY,CAAC,GAAG,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;IAE9C,IAAI,SAAS,EAAE,CAAC;QACd,IAAI,CAAC,EAAE,SAAS,EAAE,CAAC,CAAC;IACtB,CAAC;AACH,CAAC,CAAC","sourcesContent":["import type { BlockComponent, Command } from '@lumensuite/block-std';\n\nimport { assertExists } from '@lumensuite/global/utils';\n\nfunction getNext(std: LumenSuite.Std, block: BlockComponent) {\n  const view = std.view;\n  const next = std.doc.getNext(block.model);\n  if (!next) return null;\n  return view.getBlock(next.id);\n}\n\nfunction getNextBlock(std: LumenSuite.Std, path: string) {\n  const view = std.view;\n  const focusBlock = view.getBlock(path);\n  if (!focusBlock) return null;\n\n  let next: BlockComponent | null = null;\n  if (focusBlock.childBlocks[0]) {\n    next = focusBlock.childBlocks[0];\n  }\n\n  if (!next) {\n    next = getNext(std, focusBlock);\n  }\n\n  if (next && !next.contains(focusBlock)) {\n    return next;\n  }\n\n  return null;\n}\n\nexport const getNextBlockCommand: Command<\n  'currentSelectionPath',\n  'nextBlock',\n  {\n    path?: string;\n  }\n> = (ctx, next) => {\n  const path = ctx.path ?? ctx.currentSelectionPath;\n  assertExists(\n    path,\n    '`path` is required, you need to pass it in args or ctx before adding this command to the pipeline.'\n  );\n\n  const nextBlock = getNextBlock(ctx.std, path);\n\n  if (nextBlock) {\n    next({ nextBlock });\n  }\n};\n\ndeclare global {\n  namespace LumenSuite {\n    interface CommandContext {\n      nextBlock?: BlockComponent;\n    }\n\n    interface Commands {\n      getNextBlock: typeof getNextBlockCommand;\n    }\n  }\n}\n"]}