{"version":3,"file":"get-selected-models.js","sourceRoot":"","sources":["../../../src/commands/model-crud/get-selected-models.ts"],"names":[],"mappings":"AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;GA0BG;AACH,MAAM,CAAC,MAAM,wBAAwB,GAOjC,CAAC,GAAG,EAAE,IAAI,EAAE,EAAE;IAChB,MAAM,KAAK,GAAG,GAAG,CAAC,KAAK,IAAI,CAAC,OAAO,EAAE,MAAM,EAAE,OAAO,CAAC,CAAC;IACtD,MAAM,IAAI,GAAG,GAAG,CAAC,IAAI,IAAI,MAAM,CAAC;IAChC,MAAM,cAAc,GAAiB,EAAE,CAAC;IACxC,GAAG,CAAC,GAAG,CAAC,OAAO;SACZ,KAAK,EAAE;SACP,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC;QACf,KAAK,CAAC,gBAAgB,EAAE;QACxB,KAAK,CAAC,kBAAkB,EAAE;QAC1B,KAAK,CAAC,kBAAkB,EAAE;KAC3B,CAAC;SACD,iBAAiB,CAAC;QACjB,KAAK;QACL,IAAI;KACL,CAAC;SACD,MAAM,CAAC,GAAG,CAAC,EAAE;QACZ,MAAM,EAAE,cAAc,GAAG,EAAE,EAAE,GAAG,GAAG,CAAC;QACpC,cAAc,CAAC,IAAI,CAAC,GAAG,cAAc,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC;IAC7D,CAAC,CAAC;SACD,GAAG,EAAE,CAAC;IAET,IAAI,CAAC,EAAE,cAAc,EAAE,CAAC,CAAC;AAC3B,CAAC,CAAC","sourcesContent":["import type { Command } from '@blocksuite/block-std';\nimport type { BlockModel } from '@blocksuite/store';\n\n/**\n * Retrieves the selected models based on the provided selection types and mode.\n *\n * @param ctx - The command context, which includes the types of selections to be retrieved and the mode of the selection.\n * @param ctx.types - The selection types to be retrieved. Can be an array of 'block', 'text', or 'image'.\n * @param ctx.mode - The mode of the selection. Can be 'all', 'flat', or 'highest'.\n * @example\n * // Assuming `commandContext` is an instance of the command context\n * getSelectedModelsCommand(commandContext, (result) => {\n *   console.log(result.selectedModels);\n * });\n *\n * // Example selection:\n * // aaa\n * //   b[bb\n * //     ccc\n * // ddd\n * //   ee]e\n *\n * // all mode: [aaa, bbb, ccc, ddd, eee]\n * // flat mode: [bbb, ccc, ddd, eee]\n * // highest mode: [bbb, ddd]\n *\n * // The match function will be evaluated before filtering using mode\n * @param next - The next function to be called.\n * @returns An object containing the selected models as an array of BlockModel instances.\n */\nexport const getSelectedModelsCommand: Command<\n  never,\n  'selectedModels',\n  {\n    types?: Extract<BlockSuite.SelectionType, 'block' | 'text' | 'image'>[];\n    mode?: 'all' | 'flat' | 'highest';\n  }\n> = (ctx, next) => {\n  const types = ctx.types ?? ['block', 'text', 'image'];\n  const mode = ctx.mode ?? 'flat';\n  const selectedModels: BlockModel[] = [];\n  ctx.std.command\n    .chain()\n    .tryAll(chain => [\n      chain.getTextSelection(),\n      chain.getBlockSelections(),\n      chain.getImageSelections(),\n    ])\n    .getSelectedBlocks({\n      types,\n      mode,\n    })\n    .inline(ctx => {\n      const { selectedBlocks = [] } = ctx;\n      selectedModels.push(...selectedBlocks.map(el => el.model));\n    })\n    .run();\n\n  next({ selectedModels });\n};\n\ndeclare global {\n  namespace BlockSuite {\n    interface CommandContext {\n      selectedModels?: BlockModel[];\n    }\n\n    interface Commands {\n      getSelectedModels: typeof getSelectedModelsCommand;\n    }\n  }\n}\n"]}