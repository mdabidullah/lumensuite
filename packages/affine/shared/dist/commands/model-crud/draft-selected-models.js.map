{"version":3,"file":"draft-selected-models.js","sourceRoot":"","sources":["../../../src/commands/model-crud/draft-selected-models.ts"],"names":[],"mappings":"AAEA,OAAO,EAGL,YAAY,GACb,MAAM,mBAAmB,CAAC;AAE3B,MAAM,CAAC,MAAM,0BAA0B,GAGnC,CAAC,GAAG,EAAE,IAAI,EAAE,EAAE;IAChB,MAAM,MAAM,GAAG,GAAG,CAAC,cAAc,CAAC;IAClC,IAAI,CAAC,MAAM,EAAE,CAAC;QACZ,OAAO,CAAC,KAAK,CACX,uHAAuH,CACxH,CAAC;QACF,OAAO;IACT,CAAC;IAED,MAAM,oBAAoB,GAAG,IAAI,OAAO,CAAe,OAAO,CAAC,EAAE;QAC/D,MAAM,aAAa,GAAG,MAAM,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;QAE/C,MAAM,QAAQ,GAAG,IAAI,GAAG,CAAC,aAAa,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,EAAE,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC;QAExE,MAAM,QAAQ,GAAG,CAAC,KAAiB,EAAE,EAAE;YACrC,MAAM,UAAU,GAAG,KAAK,CAAC,OAAO,KAAK,iBAAiB,CAAC;YACvD,MAAM,QAAQ,GAAG,UAAU;gBACzB,CAAC,CAAC,KAAK,CAAC,QAAQ;gBAChB,CAAC,CAAC,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,QAAQ,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,CAAC;YAE3D,QAAQ,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;gBACvB,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;gBAC1B,QAAQ,CAAC,KAAK,CAAC,CAAC;YAClB,CAAC,CAAC,CAAC;YACH,KAAK,CAAC,QAAQ,GAAG,QAAQ,CAAC;QAC5B,CAAC,CAAC;QAEF,aAAa,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;QAEhC,MAAM,sBAAsB,GAAG,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC,CAAC;QAE7D,OAAO,CAAC,sBAAsB,CAAC,CAAC;IAClC,CAAC,CAAC,CAAC;IAEH,OAAO,IAAI,CAAC,EAAE,aAAa,EAAE,oBAAoB,EAAE,CAAC,CAAC;AACvD,CAAC,CAAC","sourcesContent":["import type { Command } from '@lumensuite/block-std';\n\nimport {\n  type BlockModel,\n  type DraftModel,\n  toDraftModel,\n} from '@lumensuite/store';\n\nexport const draftSelectedModelsCommand: Command<\n  'selectedModels',\n  'draftedModels'\n> = (ctx, next) => {\n  const models = ctx.selectedModels;\n  if (!models) {\n    console.error(\n      '`selectedModels` is required, you need to use `getSelectedModels` command before adding this command to the pipeline.'\n    );\n    return;\n  }\n\n  const draftedModelsPromise = new Promise<DraftModel[]>(resolve => {\n    const draftedModels = models.map(toDraftModel);\n\n    const modelMap = new Map(draftedModels.map(model => [model.id, model]));\n\n    const traverse = (model: DraftModel) => {\n      const isDatabase = model.flavour === 'affine:database';\n      const children = isDatabase\n        ? model.children\n        : model.children.filter(child => modelMap.has(child.id));\n\n      children.forEach(child => {\n        modelMap.delete(child.id);\n        traverse(child);\n      });\n      model.children = children;\n    };\n\n    draftedModels.forEach(traverse);\n\n    const remainingDraftedModels = Array.from(modelMap.values());\n\n    resolve(remainingDraftedModels);\n  });\n\n  return next({ draftedModels: draftedModelsPromise });\n};\n\ndeclare global {\n  namespace LumenSuite {\n    interface CommandContext {\n      draftedModels?: Promise<DraftModel<BlockModel<object>>[]>;\n    }\n\n    interface Commands {\n      draftSelectedModels: typeof draftSelectedModelsCommand;\n    }\n  }\n}\n"]}