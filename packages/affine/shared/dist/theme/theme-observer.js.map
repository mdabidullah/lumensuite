{"version":3,"file":"theme-observer.js","sourceRoot":"","sources":["../../src/theme/theme-observer.ts"],"names":[],"mappings":"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","sourcesContent":["import { type Color, ColorScheme } from '@lumensuite/affine-model';\nimport { signal } from '@lit-labs/preact-signals';\n\nconst TRANSPARENT = 'transparent';\n\n/**\n * Observer theme changing by `data-theme` property\n */\nexport class ThemeObserver {\n  static #computedStyle: CSSStyleDeclaration;\n\n  static #instance: ThemeObserver;\n\n  #observer?: MutationObserver;\n\n  mode$ = signal<ColorScheme>(ColorScheme.Light);\n\n  // A live `CSSStyleDeclaration` object, which updates automatically when the element's styles are changed.\n  static get computedStyle() {\n    let computedStyle = ThemeObserver.#computedStyle;\n    if (!computedStyle) {\n      computedStyle = window.getComputedStyle(document.documentElement);\n      ThemeObserver.#computedStyle = computedStyle;\n    }\n    return computedStyle;\n  }\n\n  static get instance(): ThemeObserver {\n    if (!ThemeObserver.#instance) {\n      const instance = new ThemeObserver();\n      instance.observe(document.documentElement);\n      ThemeObserver.#instance = instance;\n    }\n\n    return ThemeObserver.#instance;\n  }\n\n  static get mode() {\n    return ThemeObserver.instance.mode$.peek();\n  }\n\n  /**\n   * Generates a CSS's color property with `var` or `light-dark` functions.\n   *\n   * Sometimes used to set the frame/note background.\n   *\n   * @param color - A color value.\n   * @param fallback  - If color value processing fails, it will be used as a fallback.\n   * @returns - A color property string.\n   *\n   * @example\n   *\n   * ```\n   * `rgba(255,0,0)`\n   * `#fff`\n   * `light-dark(#fff, #000)`\n   * `var(--affine-palette-shape-blue)`\n   * ```\n   */\n  static generateColorProperty(color: Color, fallback = 'transparent') {\n    fallback = fallback.startsWith('--')\n      ? fallback.endsWith(TRANSPARENT)\n        ? TRANSPARENT\n        : `var(${fallback})`\n      : fallback;\n\n    if (typeof color === 'string') {\n      return (\n        (color.startsWith('--')\n          ? color.endsWith(TRANSPARENT)\n            ? TRANSPARENT\n            : `var(${color})`\n          : color) ?? fallback\n      );\n    }\n\n    if (!color) {\n      return fallback;\n    }\n\n    if (color.light && color.dark) {\n      return this.mode === ColorScheme.Dark\n        ? `var(${color.dark})`\n        : `var(${color.light})`;\n    }\n\n    return color.normal ?? fallback;\n  }\n\n  /**\n   * Gets a color with the current theme.\n   *\n   * @param color - A color value.\n   * @param fallback - If color value processing fails, it will be used as a fallback.\n   * @param real - If true, it returns the computed style.\n   * @returns - A color property string.\n   *\n   * @example\n   *\n   * ```\n   * `rgba(255,0,0)`\n   * `#fff`\n   * `--affine-palette-shape-blue`\n   * ```\n   */\n  static getColorValue(color: Color, fallback = TRANSPARENT, real?: boolean) {\n    if (typeof color === 'object') {\n      color = color[ThemeObserver.mode] ?? color.normal ?? fallback;\n    }\n    if (!color) {\n      color = fallback ?? TRANSPARENT;\n    }\n    if (real && color.startsWith('--')) {\n      color = color.endsWith(TRANSPARENT)\n        ? TRANSPARENT\n        : ThemeObserver.getPropertyValue(color);\n\n      if (!color) {\n        color = fallback.startsWith('--')\n          ? ThemeObserver.getPropertyValue(fallback)\n          : fallback;\n      }\n    }\n\n    return color;\n  }\n\n  static getPropertyValue(property: string) {\n    if (property.startsWith('--')) {\n      if (property.endsWith(TRANSPARENT)) {\n        return TRANSPARENT;\n      }\n      return (\n        ThemeObserver.computedStyle.getPropertyValue(property).trim() ||\n        property\n      );\n    }\n    return property;\n  }\n\n  static subscribe(callback: (T: ColorScheme) => void) {\n    return ThemeObserver.instance.mode$.subscribe(callback);\n  }\n\n  disconnect() {\n    this.#observer?.disconnect();\n  }\n\n  observe(element: HTMLElement) {\n    const callback = () => {\n      const mode = element.dataset.theme;\n      if (mode && this.mode$.peek() !== mode) {\n        this.mode$.value = mode as ColorScheme;\n      }\n    };\n\n    this.#observer?.disconnect();\n    this.#observer = new MutationObserver(callback);\n    this.#observer.observe(element, {\n      attributes: true,\n      attributeFilter: ['data-theme'],\n    });\n\n    callback();\n  }\n}\n"]}