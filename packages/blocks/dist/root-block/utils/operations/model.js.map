{"version":3,"file":"model.js","sourceRoot":"","sources":["../../../../src/root-block/utils/operations/model.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,YAAY,EAAE,MAAM,0BAA0B,CAAC;AACxD,OAAO,EAA6B,IAAI,EAAE,MAAM,mBAAmB,CAAC;AAEpE;;;;GAIG;AAEH,MAAM,UAAU,gBAAgB,CAAC,MAAoB;IACnD,IAAI,MAAM,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;QACxB,OAAO,IAAI,CAAC;IACd,CAAC;IACD,MAAM,GAAG,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC;IAE1B,MAAM,MAAM,GAAG,GAAG,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;IACxC,IAAI,CAAC,MAAM,EAAE,CAAC;QACZ,OAAO,IAAI,CAAC;IACd,CAAC;IACD,MAAM,KAAK,GAAG,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;IACjD,MAAM,IAAI,GAAG,MAAM;SAChB,GAAG,CAAC,KAAK,CAAC,EAAE;QACX,IAAI,KAAK,CAAC,IAAI,YAAY,IAAI,EAAE,CAAC;YAC/B,OAAO,KAAK,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC;QAC/B,CAAC;QACD,OAAO,IAAI,CAAC;IACd,CAAC,CAAC;SACD,MAAM,CAAC,OAAO,CAAC;SACf,IAAI,CAAC,IAAI,CAAC,CAAC;IACd,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC,GAAG,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC;IAE5C,MAAM,EAAE,GAAG,GAAG,CAAC,QAAQ,CACrB,aAAa,EACb,EAAE,IAAI,EAAE,IAAI,IAAI,CAAC,IAAI,CAAC,EAAE,EACxB,MAAM,EACN,KAAK,CACN,CAAC;IACF,OAAO,EAAE,CAAC;AACZ,CAAC;AAED,MAAM,UAAU,cAAc,CAC5B,KAAiB,EACjB,OAA2B,EAC3B,KAAsC;IAEtC,MAAM,GAAG,GAAG,KAAK,CAAC,GAAG,CAAC;IACtB,MAAM,MAAM,GAAG,GAAG,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;IACpC,YAAY,CAAC,MAAM,CAAC,CAAC;IACrB,MAAM,UAAU,GAIZ;QACF,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE,oCAAoC;QAChE,QAAQ,EAAE,KAAK,CAAC,QAAQ;QACxB,GAAG,KAAK;KACT,CAAC;IACF,MAAM,KAAK,GAAG,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;IAE7C,0FAA0F;IAC1F,mGAAmG;IACnG,MAAM,EAAE,GAAG,GAAG,CAAC,QAAQ,CAAC,OAAO,EAAE,UAAU,EAAE,MAAM,EAAE,KAAK,CAAC,CAAC;IAC5D,GAAG,CAAC,WAAW,CAAC,KAAK,EAAE;QACrB,cAAc,EAAE,KAAK;KACtB,CAAC,CAAC;IACH,OAAO,EAAE,CAAC;AACZ,CAAC","sourcesContent":["import { assertExists } from '@lumensuite/global/utils';\nimport { type BlockModel, type Doc, Text } from '@lumensuite/store';\n\n/**\n * This file should only contain functions that are used to\n * operate on block models in store, which means that this operations\n * just operate on data and will not involve in something about ui like selection reset.\n */\n\nexport function mergeToCodeModel(models: BlockModel[]) {\n  if (models.length === 0) {\n    return null;\n  }\n  const doc = models[0].doc;\n\n  const parent = doc.getParent(models[0]);\n  if (!parent) {\n    return null;\n  }\n  const index = parent.children.indexOf(models[0]);\n  const text = models\n    .map(model => {\n      if (model.text instanceof Text) {\n        return model.text.toString();\n      }\n      return null;\n    })\n    .filter(Boolean)\n    .join('\\n');\n  models.map(model => doc.deleteBlock(model));\n\n  const id = doc.addBlock(\n    'affine:code',\n    { text: new Text(text) },\n    parent,\n    index\n  );\n  return id;\n}\n\nexport function transformModel(\n  model: BlockModel,\n  flavour: LumenSuite.Flavour,\n  props?: Parameters<Doc['addBlock']>[1]\n) {\n  const doc = model.doc;\n  const parent = doc.getParent(model);\n  assertExists(parent);\n  const blockProps: {\n    type?: string;\n    text?: Text;\n    children?: BlockModel[];\n  } = {\n    text: model?.text?.clone(), // should clone before `deleteBlock`\n    children: model.children,\n    ...props,\n  };\n  const index = parent.children.indexOf(model);\n\n  // Sometimes the new block can not be added due to some reason, e.g. invalid schema check.\n  // So we need to try to add the new block first, and if it fails, we will not delete the old block.\n  const id = doc.addBlock(flavour, blockProps, parent, index);\n  doc.deleteBlock(model, {\n    deleteChildren: false,\n  });\n  return id;\n}\n"]}