{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../src/root-block/widgets/code-language-list/index.ts"],"names":[],"mappings":"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","sourcesContent":["import type { CodeBlockModel } from '@blocksuite/affine-model';\n\nimport { HoverController } from '@blocksuite/affine-components/hover';\nimport { WidgetComponent } from '@blocksuite/block-std';\nimport { sleep } from '@blocksuite/global/utils';\nimport { offset } from '@floating-ui/dom';\nimport { computed } from '@lit-labs/preact-signals';\nimport { html } from 'lit';\nimport { customElement } from 'lit/decorators.js';\n\nimport type { CodeBlockComponent } from '../../../code-block/index.js';\n\nimport './components/lang-button.js';\n\nexport const AFFINE_CODE_LANGUAGE_LIST_WIDGET =\n  'affine-code-language-list-widget';\n\n@customElement(AFFINE_CODE_LANGUAGE_LIST_WIDGET)\nexport class AffineCodeLanguageListWidget extends WidgetComponent<\n  CodeBlockModel,\n  CodeBlockComponent\n> {\n  private _hoverController = new HoverController(\n    this,\n    () => {\n      if (!this._shouldDisplay.value) {\n        return null;\n      }\n\n      return {\n        template: html`<language-list-button\n          .blockComponent=${this.block}\n          .onActiveStatusChange=${async (active: boolean) => {\n            this._isActivated = active;\n            if (!active) {\n              // Wait a moment for the user to see the result.\n              // This is to prevent the language list from closing immediately.\n              //\n              // This snippet is not perfect, it only checks the hover status at the moment.\n              if (this._hoverController.isHovering) return;\n              await sleep(1000);\n              if (this._hoverController.isHovering || this._isActivated) return;\n              this._hoverController.abort();\n            }\n          }}\n        >\n        </language-list-button>`,\n        // stacking-context(editor-host)\n        portalStyles: {\n          zIndex: 'var(--affine-z-index-popover)',\n        },\n        container: this.block,\n        computePosition: {\n          referenceElement: this.block,\n          placement: 'left-start',\n          middleware: [offset({ mainAxis: -5, crossAxis: 5 })],\n          autoUpdate: true,\n        },\n      };\n    },\n    {\n      allowMultiple: true,\n    }\n  );\n\n  private _isActivated = false;\n\n  private _shouldDisplay = computed(() => {\n    const selection = this.host.selection;\n\n    const textSelection = selection.find('text');\n    const hasTextSelection =\n      !!textSelection && (!!textSelection.to || !!textSelection.from.length);\n\n    if (hasTextSelection) {\n      return false;\n    }\n\n    const blockSelections = selection.filter('block');\n    const hasMultipleBlockSelections =\n      blockSelections.length > 1 ||\n      (blockSelections.length === 1 &&\n        blockSelections[0].blockId !== this.block.blockId);\n\n    if (hasMultipleBlockSelections) {\n      return false;\n    }\n\n    return true;\n  });\n\n  override connectedCallback() {\n    super.connectedCallback();\n    this._hoverController.setReference(this.block);\n    this._hoverController.onAbort = () => {\n      // If the language list is opened, don't close it.\n      if (this._isActivated) return;\n      this._hoverController.abort();\n      return;\n    };\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    [AFFINE_CODE_LANGUAGE_LIST_WIDGET]: AffineCodeLanguageListWidget;\n  }\n}\n"]}