{"version":3,"file":"generating.js","sourceRoot":"","sources":["../../../../../../src/root-block/widgets/ai-panel/components/state/generating.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,EACL,uBAAuB,EACvB,UAAU,GACX,MAAM,qCAAqC,CAAC;AAC7C,OAAO,EAAE,cAAc,EAAE,MAAM,uBAAuB,CAAC;AACvD,OAAO,EAAE,SAAS,EAAE,MAAM,qBAAqB,CAAC;AAChD,OAAO,EAAE,GAAG,EAAE,IAAI,EAAE,UAAU,EAAE,OAAO,EAAE,SAAS,EAAE,MAAM,KAAK,CAAC;AAChE,OAAO,EAAE,aAAa,EAAE,QAAQ,EAAE,MAAM,mBAAmB,CAAC;AAI5D,OAAO,8BAA8B,CAAC;IAGzB,iBAAiB;4BAD7B,aAAa,CAAC,qBAAqB,CAAC;;;;sBACE,cAAc,CAAC,UAAU,CAAC;;;;;;;;;;;;;iCAAlC,SAAQ,WAA0B;;;;kCAyF9D,QAAQ,CAAC,EAAE,SAAS,EAAE,KAAK,EAAE,CAAC;2CAG9B,QAAQ,CAAC,EAAE,SAAS,EAAE,KAAK,EAAE,CAAC;0CAG9B,QAAQ,CAAC,EAAE,SAAS,EAAE,KAAK,EAAE,CAAC;sCAG9B,QAAQ,CAAC,EAAE,SAAS,EAAE,KAAK,EAAE,CAAC;YAR/B,uKAAS,MAAM,6BAAN,MAAM,uFAA2B;YAG1C,kMAAS,eAAe,6BAAf,eAAe,yGAAa;YAGrC,+LAAS,cAAc,6BAAd,cAAc,uGAAc;YAGrC,mLAAS,UAAU,6BAAV,UAAU,+FAAW;YAnGhC,6KAoGC;;;;iBAnGiB,WAAM,GAAG,GAAG,CAAA;;;;;qBAKT,SAAS,CAAC,SAAS,CAAC,cAAc,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAmDrD,AAxDqB,CAwDpB;QAEO,MAAM;YACb,MAAM,EACJ,cAAc,GAAG,uBAAuB,EACxC,MAAM,EACN,MAAM,GAAG,GAAG,GACb,GAAG,IAAI,CAAC,MAAM,CAAC;YAChB,OAAO,IAAI,CAAA;QACP,MAAM,IAAI,MAAM,CAAC,MAAM,GAAG,CAAC;gBAC3B,CAAC,CAAC,IAAI,CAAA;sBACQ,MAAM;+BACG,IAAI,CAAC,eAAe;sBAC7B,MAAM;0BACF,CAAC,IAAI,CAAC,UAAU;qCACL;gBAC7B,CAAC,CAAC,OAAO;;4BAEW,cAAc;;sBAEpB,IAAI,CAAC,cAAc;oCACL,UAAU;;;;KAIzC,CAAC;QACJ,CAAC;QAED,qBAAqB,CAAC,QAAgB;YACpC,IAAI,CAAC,eAAe,GAAG,QAAQ,CAAC;QAClC,CAAC;QAGD,iFAA0C;QAA1C,IAAS,MAAM,4CAA2B;QAA1C,IAAS,MAAM,kDAA2B;QAG1C,gJAAmC,CAAC,GAAC;QAArC,IAAS,eAAe,qDAAa;QAArC,IAAS,eAAe,2DAAa;QAGrC,gKAAqC;QAArC,IAAS,cAAc,oDAAc;QAArC,IAAS,cAAc,0DAAc;QAGrC,uJAA8B;QAA9B,IAAS,UAAU,gDAAW;QAA9B,IAAS,UAAU,sDAAW;;;;;;YAnGnB,uDAAiB;;;;;SAAjB,iBAAiB","sourcesContent":["import {\n  AIStarIconWithAnimation,\n  AIStopIcon,\n} from '@lumensuite/affine-components/icons';\nimport { WithDisposable } from '@lumensuite/block-std';\nimport { baseTheme } from '@toeverything/theme';\nimport { css, html, LitElement, nothing, unsafeCSS } from 'lit';\nimport { customElement, property } from 'lit/decorators.js';\n\nimport type { AIPanelGeneratingConfig } from '../../type.js';\n\nimport '../generating-placeholder.js';\n\n@customElement('ai-panel-generating')\nexport class AIPanelGenerating extends WithDisposable(LitElement) {\n  static override styles = css`\n    :host {\n      width: 100%;\n      padding: 0 12px;\n      box-sizing: border-box;\n      font-family: ${unsafeCSS(baseTheme.fontSansFamily)};\n    }\n\n    .generating-tip {\n      display: flex;\n      width: 100%;\n      height: 22px;\n      align-items: center;\n      gap: 8px;\n\n      color: var(--affine-brand-color);\n\n      .text {\n        display: flex;\n        align-items: flex-start;\n        gap: 10px;\n        flex: 1 0 0;\n\n        /* light/smMedium */\n        font-size: var(--affine-font-sm);\n        font-style: normal;\n        font-weight: 500;\n        line-height: 22px; /* 157.143% */\n      }\n\n      .left,\n      .right {\n        display: flex;\n        height: 20px;\n        justify-content: center;\n        align-items: center;\n      }\n      .left {\n        width: 20px;\n      }\n      .right {\n        gap: 6px;\n      }\n      .right:hover {\n        cursor: pointer;\n      }\n      .stop-icon {\n        height: 20px;\n        width: 20px;\n      }\n      .esc-label {\n        font-size: var(--affine-font-xs);\n        font-weight: 500;\n        line-height: 20px;\n      }\n    }\n  `;\n\n  override render() {\n    const {\n      generatingIcon = AIStarIconWithAnimation,\n      stages,\n      height = 300,\n    } = this.config;\n    return html`\n      ${stages && stages.length > 0\n        ? html`<generating-placeholder\n            .height=${height}\n            .loadingProgress=${this.loadingProgress}\n            .stages=${stages}\n            .showHeader=${!this.withAnswer}\n          ></generating-placeholder>`\n        : nothing}\n      <div class=\"generating-tip\">\n        <div class=\"left\">${generatingIcon}</div>\n        <div class=\"text\">AI is generating...</div>\n        <div @click=${this.stopGenerating} class=\"right\">\n          <span class=\"stop-icon\">${AIStopIcon}</span>\n          <span class=\"esc-label\">ESC</span>\n        </div>\n      </div>\n    `;\n  }\n\n  updateLoadingProgress(progress: number) {\n    this.loadingProgress = progress;\n  }\n\n  @property({ attribute: false })\n  accessor config!: AIPanelGeneratingConfig;\n\n  @property({ attribute: false })\n  accessor loadingProgress: number = 1;\n\n  @property({ attribute: false })\n  accessor stopGenerating!: () => void;\n\n  @property({ attribute: false })\n  accessor withAnswer!: boolean;\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'ai-panel-generating': AIPanelGenerating;\n  }\n}\n"]}