{"version":3,"file":"config.js","sourceRoot":"","sources":["../../../../src/root-block/widgets/format-bar/config.ts"],"names":[],"mappings":"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","sourcesContent":["import type { MenuItemGroup } from '@blocksuite/affine-components/toolbar';\nimport type {\n  Chain,\n  CommandKeyToData,\n  InitCommandCtx,\n} from '@blocksuite/block-std';\n\nimport {\n  BoldIcon,\n  BulletedListIcon,\n  CheckBoxIcon,\n  CodeIcon,\n  CopyIcon,\n  DatabaseTableViewIcon20,\n  DeleteIcon,\n  DuplicateIcon,\n  Heading1Icon,\n  Heading2Icon,\n  Heading3Icon,\n  Heading4Icon,\n  Heading5Icon,\n  Heading6Icon,\n  ItalicIcon,\n  LinkedDocIcon,\n  LinkIcon,\n  MoreVerticalIcon,\n  NumberedListIcon,\n  QuoteIcon,\n  StrikethroughIcon,\n  TextIcon,\n  UnderlineIcon,\n} from '@blocksuite/affine-components/icons';\nimport { createSimplePortal } from '@blocksuite/affine-components/portal';\nimport { toast } from '@blocksuite/affine-components/toast';\nimport { renderGroups } from '@blocksuite/affine-components/toolbar';\nimport { TelemetryProvider } from '@blocksuite/affine-shared/services';\nimport { assertExists } from '@blocksuite/global/utils';\nimport { Slice } from '@blocksuite/store';\nimport { html, type TemplateResult } from 'lit';\n\nimport type { AffineFormatBarWidget } from './format-bar.js';\n\nimport { DATABASE_CONVERT_WHITE_LIST } from '../../../_common/configs/quick-action/database-convert-view.js';\nimport {\n  convertSelectedBlocksToLinkedDoc,\n  getTitleFromSelectedModels,\n  notifyDocCreated,\n  promptDocTitle,\n} from '../../../_common/utils/render-linked-doc.js';\nimport { FormatBarContext } from './context.js';\n\nexport type DividerConfigItem = {\n  type: 'divider';\n};\nexport type HighlighterDropdownConfigItem = {\n  type: 'highlighter-dropdown';\n};\nexport type ParagraphDropdownConfigItem = {\n  type: 'paragraph-dropdown';\n};\nexport type InlineActionConfigItem = {\n  id: string;\n  name: string;\n  type: 'inline-action';\n  action: (\n    chain: Chain<InitCommandCtx>,\n    formatBar: AffineFormatBarWidget\n  ) => void;\n  icon: TemplateResult | (() => HTMLElement);\n  isActive: (\n    chain: Chain<InitCommandCtx>,\n    formatBar: AffineFormatBarWidget\n  ) => boolean;\n  showWhen: (\n    chain: Chain<InitCommandCtx>,\n    formatBar: AffineFormatBarWidget\n  ) => boolean;\n};\nexport type ParagraphActionConfigItem = {\n  id: string;\n  type: 'paragraph-action';\n  name: string;\n  action: (\n    chain: Chain<InitCommandCtx>,\n    formatBar: AffineFormatBarWidget\n  ) => void;\n  icon: TemplateResult | (() => HTMLElement);\n  flavour: string;\n};\n\nexport type CustomConfigItem = {\n  type: 'custom';\n  render: (formatBar: AffineFormatBarWidget) => TemplateResult | null;\n};\n\nexport type FormatBarConfigItem =\n  | DividerConfigItem\n  | HighlighterDropdownConfigItem\n  | ParagraphDropdownConfigItem\n  | ParagraphActionConfigItem\n  | InlineActionConfigItem\n  | CustomConfigItem;\n\nexport function toolbarDefaultConfig(toolbar: AffineFormatBarWidget) {\n  toolbar\n    .clearConfig()\n    .addParagraphDropdown()\n    .addDivider()\n    .addTextStyleToggle({\n      key: 'bold',\n      action: chain => chain.toggleBold().run(),\n      icon: BoldIcon,\n    })\n    .addTextStyleToggle({\n      key: 'italic',\n      action: chain => chain.toggleItalic().run(),\n      icon: ItalicIcon,\n    })\n    .addTextStyleToggle({\n      key: 'underline',\n      action: chain => chain.toggleUnderline().run(),\n      icon: UnderlineIcon,\n    })\n    .addTextStyleToggle({\n      key: 'strike',\n      action: chain => chain.toggleStrike().run(),\n      icon: StrikethroughIcon,\n    })\n    .addTextStyleToggle({\n      key: 'code',\n      action: chain => chain.toggleCode().run(),\n      icon: CodeIcon,\n    })\n    .addTextStyleToggle({\n      key: 'link',\n      action: chain => chain.toggleLink().run(),\n      icon: LinkIcon,\n    })\n    .addDivider()\n    .addHighlighterDropdown()\n    .addDivider()\n    .addInlineAction({\n      id: 'convert-to-database',\n      name: 'Create Database',\n      icon: DatabaseTableViewIcon20,\n      isActive: () => false,\n      action: () => {\n        createSimplePortal({\n          template: html`<database-convert-view\n            .host=${toolbar.host}\n          ></database-convert-view>`,\n        });\n      },\n      showWhen: chain => {\n        const middleware = (count = 0) => {\n          return (\n            ctx: CommandKeyToData<'selectedBlocks'>,\n            next: () => void\n          ) => {\n            const { selectedBlocks } = ctx;\n            if (!selectedBlocks || selectedBlocks.length === count) return;\n\n            const allowed = selectedBlocks.every(block =>\n              DATABASE_CONVERT_WHITE_LIST.includes(block.flavour)\n            );\n            if (!allowed) return;\n\n            next();\n          };\n        };\n        let [result] = chain\n          .getTextSelection()\n          .getSelectedBlocks({\n            types: ['text'],\n          })\n          .inline(middleware(1))\n          .run();\n\n        if (result) return true;\n\n        [result] = chain\n          .tryAll(chain => [\n            chain.getBlockSelections(),\n            chain.getImageSelections(),\n          ])\n          .getSelectedBlocks({\n            types: ['block', 'image'],\n          })\n          .inline(middleware(0))\n          .run();\n\n        return result;\n      },\n    })\n    .addDivider()\n    .addInlineAction({\n      id: 'convert-to-linked-doc',\n      name: 'Create Linked Doc',\n      icon: LinkedDocIcon,\n      isActive: () => false,\n      action: (chain, formatBar) => {\n        const [_, ctx] = chain\n          .getSelectedModels({\n            types: ['block', 'text'],\n            mode: 'highest',\n          })\n          .run();\n        const { selectedModels } = ctx;\n        assertExists(selectedModels);\n        if (!selectedModels.length) return;\n\n        const host = formatBar.host;\n        host.selection.clear();\n\n        const doc = host.doc;\n        const autofill = getTitleFromSelectedModels(selectedModels);\n        void promptDocTitle(host, autofill).then(title => {\n          if (title === null) return;\n          convertSelectedBlocksToLinkedDoc(doc, selectedModels, title);\n          notifyDocCreated(host, doc);\n          host.std.getOptional(TelemetryProvider)?.track('DocCreated', {\n            control: 'create linked doc',\n            page: 'doc editor',\n            module: 'format toolbar',\n            type: 'embed-linked-doc',\n          });\n          host.std.getOptional(TelemetryProvider)?.track('LinkedDocCreated', {\n            control: 'create linked doc',\n            page: 'doc editor',\n            module: 'format toolbar',\n            type: 'embed-linked-doc',\n          });\n        });\n      },\n      showWhen: chain => {\n        const [_, ctx] = chain\n          .getSelectedModels({\n            types: ['block', 'text'],\n            mode: 'highest',\n          })\n          .run();\n        const { selectedModels } = ctx;\n        return !!selectedModels && selectedModels.length > 0;\n      },\n    })\n    .addBlockTypeSwitch({\n      flavour: 'affine:paragraph',\n      type: 'text',\n      name: 'Text',\n      icon: TextIcon,\n    })\n    .addBlockTypeSwitch({\n      flavour: 'affine:paragraph',\n      type: 'h1',\n      name: 'Heading 1',\n      icon: Heading1Icon,\n    })\n    .addBlockTypeSwitch({\n      flavour: 'affine:paragraph',\n      type: 'h2',\n      name: 'Heading 2',\n      icon: Heading2Icon,\n    })\n    .addBlockTypeSwitch({\n      flavour: 'affine:paragraph',\n      type: 'h3',\n      name: 'Heading 3',\n      icon: Heading3Icon,\n    })\n    .addBlockTypeSwitch({\n      flavour: 'affine:paragraph',\n      type: 'h4',\n      name: 'Heading 4',\n      icon: Heading4Icon,\n    })\n    .addBlockTypeSwitch({\n      flavour: 'affine:paragraph',\n      type: 'h5',\n      name: 'Heading 5',\n      icon: Heading5Icon,\n    })\n    .addBlockTypeSwitch({\n      flavour: 'affine:paragraph',\n      type: 'h6',\n      name: 'Heading 6',\n      icon: Heading6Icon,\n    })\n    .addBlockTypeSwitch({\n      flavour: 'affine:list',\n      type: 'bulleted',\n      name: 'Bulleted List',\n      icon: BulletedListIcon,\n    })\n    .addBlockTypeSwitch({\n      flavour: 'affine:list',\n      type: 'numbered',\n      name: 'Numbered List',\n      icon: NumberedListIcon,\n    })\n    .addBlockTypeSwitch({\n      flavour: 'affine:list',\n      type: 'todo',\n      name: 'To-do List',\n      icon: CheckBoxIcon,\n    })\n    .addBlockTypeSwitch({\n      flavour: 'affine:code',\n      name: 'Code Block',\n      icon: CodeIcon,\n    })\n    .addBlockTypeSwitch({\n      flavour: 'affine:paragraph',\n      type: 'quote',\n      name: 'Quote',\n      icon: QuoteIcon,\n    });\n}\n\nexport const BUILT_IN_GROUPS: MenuItemGroup<FormatBarContext>[] = [\n  {\n    type: 'clipboard',\n    items: [\n      {\n        type: 'copy',\n        label: 'Copy',\n        icon: CopyIcon,\n        disabled: c => c.doc.readonly,\n        action: c => {\n          c.std.command\n            .chain()\n            .getSelectedModels()\n            .with({\n              onCopy: () => {\n                toast(c.host, 'Copied to clipboard');\n              },\n            })\n            .draftSelectedModels()\n            .copySelectedModels()\n            .run();\n        },\n      },\n      {\n        type: 'duplicate',\n        label: 'Duplicate',\n        icon: DuplicateIcon,\n        disabled: c => c.doc.readonly,\n        action: c => {\n          c.doc.captureSync();\n          c.std.command\n            .chain()\n            .try(cmd => [\n              cmd\n                .getTextSelection()\n                .inline<'currentSelectionPath'>((ctx, next) => {\n                  const textSelection = ctx.currentTextSelection;\n                  assertExists(textSelection);\n                  const end = textSelection.to ?? textSelection.from;\n                  next({ currentSelectionPath: end.blockId });\n                }),\n              cmd\n                .getBlockSelections()\n                .inline<'currentSelectionPath'>((ctx, next) => {\n                  const currentBlockSelections = ctx.currentBlockSelections;\n                  assertExists(currentBlockSelections);\n                  const blockSelection = currentBlockSelections.at(-1);\n                  if (!blockSelection) {\n                    return;\n                  }\n                  next({ currentSelectionPath: blockSelection.blockId });\n                }),\n            ])\n            .getBlockIndex()\n            .getSelectedModels()\n            .draftSelectedModels()\n            .inline((ctx, next) => {\n              if (!ctx.draftedModels) {\n                return next();\n              }\n\n              ctx.draftedModels\n                .then(models => {\n                  const slice = Slice.fromModels(ctx.std.doc, models);\n                  return ctx.std.clipboard.duplicateSlice(\n                    slice,\n                    ctx.std.doc,\n                    ctx.parentBlock?.model.id,\n                    ctx.blockIndex ? ctx.blockIndex + 1 : undefined\n                  );\n                })\n                .catch(console.error);\n\n              return next();\n            })\n            .run();\n        },\n      },\n    ],\n  },\n  {\n    type: 'delete',\n    items: [\n      {\n        type: 'delete',\n        label: 'Delete',\n        icon: DeleteIcon,\n        disabled: c => c.doc.readonly,\n        action: c => {\n          // remove text\n          const [result] = c.std.command\n            .chain()\n            .getTextSelection()\n            .deleteText()\n            .run();\n\n          if (result) {\n            return;\n          }\n\n          // remove blocks\n          c.std.command\n            .chain()\n            .tryAll(chain => [\n              chain.getBlockSelections(),\n              chain.getImageSelections(),\n            ])\n            .getSelectedModels()\n            .deleteSelectedModels()\n            .run();\n\n          c.toolbar.reset();\n        },\n      },\n    ],\n  },\n];\n\nexport function toolbarMoreButton(toolbar: AffineFormatBarWidget) {\n  const context = new FormatBarContext(toolbar);\n  const actions = renderGroups(toolbar.moreGroups, context);\n\n  return html`\n    <editor-menu-button\n      .contentPadding=${'8px'}\n      .button=${html`\n        <editor-icon-button aria-label=\"More\" .tooltip=${'More'}>\n          ${MoreVerticalIcon}\n        </editor-icon-button>\n      `}\n    >\n      <div data-size=\"large\" data-orientation=\"vertical\">${actions}</div>\n    </editor-menu-button>\n  `;\n}\n"]}