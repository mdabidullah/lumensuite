{"version":3,"file":"config-renderer.js","sourceRoot":"","sources":["../../../../../src/root-block/widgets/format-bar/components/config-renderer.ts"],"names":[],"mappings":"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","sourcesContent":["import { isFormatSupported } from '@blocksuite/affine-components/rich-text';\nimport { renderToolbarSeparator } from '@blocksuite/affine-components/toolbar';\nimport { html, type TemplateResult } from 'lit';\n\nimport type { AffineFormatBarWidget } from '../format-bar.js';\n\nimport { HighlightButton } from './highlight/highlight-button.js';\nimport { ParagraphButton } from './paragraph-button.js';\n\nexport function ConfigRenderer(formatBar: AffineFormatBarWidget) {\n  return (\n    formatBar.configItems\n      .filter(item => {\n        if (item.type === 'paragraph-action') {\n          return false;\n        }\n        if (item.type === 'highlighter-dropdown') {\n          const [supported] = isFormatSupported(\n            formatBar.std.command.chain()\n          ).run();\n          return supported;\n        }\n        if (item.type === 'inline-action') {\n          return item.showWhen(formatBar.std.command.chain(), formatBar);\n        }\n        return true;\n      })\n      .map(item => {\n        let template: TemplateResult | null = null;\n        switch (item.type) {\n          case 'divider':\n            template = renderToolbarSeparator();\n            break;\n          case 'highlighter-dropdown': {\n            template = HighlightButton(formatBar);\n            break;\n          }\n          case 'paragraph-dropdown':\n            template = ParagraphButton(formatBar);\n            break;\n          case 'inline-action': {\n            template = html`\n              <editor-icon-button\n                data-testid=${item.id}\n                ?active=${item.isActive(\n                  formatBar.std.command.chain(),\n                  formatBar\n                )}\n                .tooltip=${item.name}\n                @click=${() => {\n                  item.action(formatBar.std.command.chain(), formatBar);\n                  formatBar.requestUpdate();\n                }}\n              >\n                ${typeof item.icon === 'function' ? item.icon() : item.icon}\n              </editor-icon-button>\n            `;\n            break;\n          }\n          case 'custom': {\n            template = item.render(formatBar);\n            break;\n          }\n          default:\n            template = null;\n        }\n\n        return [template, item] as const;\n      })\n      .filter(([template]) => template !== null && template !== undefined)\n      // 1. delete the redundant dividers in the middle\n      .filter(([_, item], index, list) => {\n        if (\n          item.type === 'divider' &&\n          index + 1 < list.length &&\n          list[index + 1][1].type === 'divider'\n        ) {\n          return false;\n        }\n        return true;\n      })\n      // 2. delete the redundant dividers at the head and tail\n      .filter(([_, item], index, list) => {\n        if (item.type === 'divider') {\n          if (index === 0) {\n            return false;\n          }\n          if (index === list.length - 1) {\n            return false;\n          }\n        }\n        return true;\n      })\n      .map(([template]) => template)\n  );\n}\n"]}