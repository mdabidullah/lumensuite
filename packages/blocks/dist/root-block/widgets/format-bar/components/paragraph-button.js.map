{"version":3,"file":"paragraph-button.js","sourceRoot":"","sources":["../../../../../src/root-block/widgets/format-bar/components/paragraph-button.ts"],"names":[],"mappings":"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","sourcesContent":["import type { ParagraphBlockModel } from '@blocksuite/affine-model';\nimport type { EditorHost } from '@blocksuite/block-std';\n\nimport { whenHover } from '@blocksuite/affine-components/hover';\nimport { ArrowDownIcon } from '@blocksuite/affine-components/icons';\nimport { assertExists } from '@blocksuite/global/utils';\nimport { computePosition, flip, offset, shift } from '@floating-ui/dom';\nimport { html } from 'lit';\nimport { ref, type RefOrCallback } from 'lit/directives/ref.js';\nimport { repeat } from 'lit/directives/repeat.js';\n\nimport type { ParagraphActionConfigItem } from '../config.js';\nimport type { AffineFormatBarWidget } from '../format-bar.js';\n\nimport { textConversionConfigs } from '../../../../_common/configs/text-conversion.js';\n\ninterface ParagraphPanelProps {\n  host: EditorHost;\n  formatBar: AffineFormatBarWidget;\n  ref?: RefOrCallback;\n}\n\nconst ParagraphPanel = ({\n  formatBar,\n  host,\n  ref: containerRef,\n}: ParagraphPanelProps) => {\n  const config = formatBar.configItems\n    .filter(\n      (item): item is ParagraphActionConfigItem =>\n        item.type === 'paragraph-action'\n    )\n    .filter(({ flavour }) => host.doc.schema.flavourSchemaMap.has(flavour));\n\n  const renderedConfig = repeat(\n    config,\n    item => html`\n      <editor-menu-action\n        data-testid=\"${item.id}\"\n        @click=\"${() => item.action(formatBar.std.command.chain(), formatBar)}\"\n      >\n        ${typeof item.icon === 'function' ? item.icon() : item.icon}\n        ${item.name}\n      </editor-menu-action>\n    `\n  );\n\n  return html`\n    <editor-menu-content class=\"paragraph-panel\" data-show ${ref(containerRef)}>\n      <div data-orientation=\"vertical\">${renderedConfig}</div>\n    </editor-menu-content>\n  `;\n};\n\nexport const ParagraphButton = (formatBar: AffineFormatBarWidget) => {\n  if (formatBar.displayType !== 'text' && formatBar.displayType !== 'block') {\n    return null;\n  }\n\n  const selectedBlocks = formatBar.selectedBlocks;\n  // only support model with text\n  if (selectedBlocks.some(el => !el.model.text)) {\n    return null;\n  }\n\n  const paragraphIcon =\n    selectedBlocks.length < 1\n      ? textConversionConfigs[0].icon\n      : (textConversionConfigs.find(\n          ({ flavour, type }) =>\n            selectedBlocks[0].flavour === flavour &&\n            (selectedBlocks[0].model as ParagraphBlockModel).type === type\n        )?.icon ?? textConversionConfigs[0].icon);\n\n  const rootComponent = formatBar.block;\n  if (rootComponent.model.flavour !== 'affine:page') {\n    console.error('paragraph button host is not a page component');\n    return null;\n  }\n\n  const { setFloating, setReference } = whenHover(isHover => {\n    if (!isHover) {\n      const panel =\n        formatBar.shadowRoot?.querySelector<HTMLElement>('.paragraph-panel');\n      if (!panel) return;\n      panel.style.display = 'none';\n      return;\n    }\n    const formatQuickBarElement = formatBar.formatBarElement;\n    const button =\n      formatBar.shadowRoot?.querySelector<HTMLElement>('.paragraph-button');\n    const panel =\n      formatBar.shadowRoot?.querySelector<HTMLElement>('.paragraph-panel');\n    assertExists(button);\n    assertExists(panel);\n    assertExists(formatQuickBarElement, 'format quick bar should exist');\n    panel.style.display = 'flex';\n    computePosition(formatQuickBarElement, panel, {\n      placement: 'top-start',\n      middleware: [\n        flip(),\n        offset(6),\n        shift({\n          padding: 6,\n        }),\n      ],\n    })\n      .then(({ x, y }) => {\n        panel.style.left = `${x}px`;\n        panel.style.top = `${y}px`;\n      })\n      .catch(console.error);\n  });\n\n  const paragraphPanel = ParagraphPanel({\n    formatBar,\n    host: formatBar.host,\n    ref: setFloating,\n  });\n\n  return html`\n    <div class=\"paragraph-button\" ${ref(setReference)}>\n      <editor-icon-button class=\"paragraph-button-icon\">\n        ${paragraphIcon} ${ArrowDownIcon}\n      </editor-icon-button>\n      ${paragraphPanel}\n    </div>\n  `;\n};\n"]}