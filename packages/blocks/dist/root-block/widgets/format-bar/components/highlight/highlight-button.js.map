{"version":3,"file":"highlight-button.js","sourceRoot":"","sources":["../../../../../../src/root-block/widgets/format-bar/components/highlight/highlight-button.ts"],"names":[],"mappings":"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","sourcesContent":["import type { AffineTextAttributes } from '@lumensuite/affine-components/rich-text';\nimport type { EditorHost } from '@lumensuite/block-std';\n\nimport { whenHover } from '@lumensuite/affine-components/hover';\nimport {\n  ArrowDownIcon,\n  HighLightDuotoneIcon,\n  TextBackgroundDuotoneIcon,\n  TextForegroundDuotoneIcon,\n} from '@lumensuite/affine-components/icons';\nimport { assertExists } from '@lumensuite/global/utils';\nimport { computePosition, flip, offset, shift } from '@floating-ui/dom';\nimport { html } from 'lit';\nimport { ref, type RefOrCallback } from 'lit/directives/ref.js';\n\nimport type { AffineFormatBarWidget } from '../../format-bar.js';\n\nimport { backgroundConfig, foregroundConfig } from './consts.js';\n\nenum HighlightType {\n  Foreground,\n  Background,\n}\n\nlet lastUsedColor: string | null = null;\nlet lastUsedHighlightType: HighlightType = HighlightType.Background;\n\nconst updateHighlight = (\n  host: EditorHost,\n  color: string | null,\n  highlightType: HighlightType\n) => {\n  lastUsedColor = color;\n  lastUsedHighlightType = highlightType;\n\n  const payload: {\n    styles: AffineTextAttributes;\n  } = {\n    styles: {\n      color: highlightType === HighlightType.Foreground ? color : null,\n      background: highlightType === HighlightType.Background ? color : null,\n    },\n  };\n  host.std.command\n    .chain()\n    .try(chain => [\n      chain.getTextSelection().formatText(payload),\n      chain.getBlockSelections().formatBlock(payload),\n      chain.formatNative(payload),\n    ])\n    .run();\n};\n\nconst HighlightPanel = (\n  formatBar: AffineFormatBarWidget,\n  containerRef?: RefOrCallback\n) => {\n  return html`\n    <editor-menu-content class=\"highlight-panel\" data-show ${ref(containerRef)}>\n      <div data-orientation=\"vertical\">\n        <!-- Text Color Highlight -->\n        <div class=\"highligh-panel-heading\">Color</div>\n        ${foregroundConfig.map(\n          ({ name, color }) => html`\n            <editor-menu-action\n              data-testid=\"${color ?? 'unset'}\"\n              @click=\"${() => {\n                updateHighlight(\n                  formatBar.host,\n                  color,\n                  HighlightType.Foreground\n                );\n                formatBar.requestUpdate();\n              }}\"\n            >\n              <span style=\"display: flex; color: ${color}\">\n                ${TextForegroundDuotoneIcon}\n              </span>\n              ${name}\n            </editor-menu-action>\n          `\n        )}\n\n        <!-- Text Background Highlight -->\n        <div class=\"highligh-panel-heading\">Background</div>\n        ${backgroundConfig.map(\n          ({ name, color }) => html`\n            <editor-menu-action\n              @click=\"${() => {\n                updateHighlight(\n                  formatBar.host,\n                  color,\n                  HighlightType.Background\n                );\n                formatBar.requestUpdate();\n              }}\"\n            >\n              <span style=\"display: flex; color: ${color ?? 'transparent'}\">\n                ${TextBackgroundDuotoneIcon}\n              </span>\n              ${name}\n            </editor-menu-action>\n          `\n        )}\n      </div>\n    </editor-menu-content>\n  `;\n};\n\nexport const HighlightButton = (formatBar: AffineFormatBarWidget) => {\n  const editorHost = formatBar.host;\n\n  const { setFloating, setReference } = whenHover(isHover => {\n    if (!isHover) {\n      const panel =\n        formatBar.shadowRoot?.querySelector<HTMLElement>('.highlight-panel');\n      if (!panel) return;\n      panel.style.display = 'none';\n      return;\n    }\n    const button =\n      formatBar.shadowRoot?.querySelector<HTMLElement>('.highlight-button');\n    const panel =\n      formatBar.shadowRoot?.querySelector<HTMLElement>('.highlight-panel');\n    assertExists(button);\n    assertExists(panel);\n    panel.style.display = 'flex';\n    computePosition(button, panel, {\n      placement: 'bottom',\n      middleware: [\n        flip(),\n        offset(6),\n        shift({\n          padding: 6,\n        }),\n      ],\n    })\n      .then(({ x, y }) => {\n        panel.style.left = `${x}px`;\n        panel.style.top = `${y}px`;\n      })\n      .catch(console.error);\n  });\n\n  const highlightPanel = HighlightPanel(formatBar, setFloating);\n\n  return html`\n    <div class=\"highlight-button\" ${ref(setReference)}>\n      <editor-icon-button\n        class=\"highlight-icon\"\n        data-last-used=\"${lastUsedColor ?? 'unset'}\"\n        @click=\"${() =>\n          updateHighlight(editorHost, lastUsedColor, lastUsedHighlightType)}\"\n      >\n        <span style=\"display: flex; color: ${lastUsedColor}\">\n          ${HighLightDuotoneIcon}\n        </span>\n        ${ArrowDownIcon}\n      </editor-icon-button>\n      ${highlightPanel}\n    </div>\n  `;\n};\n"]}