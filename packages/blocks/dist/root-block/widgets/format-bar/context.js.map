{"version":3,"file":"context.js","sourceRoot":"","sources":["../../../../src/root-block/widgets/format-bar/context.ts"],"names":[],"mappings":"AAEA,OAAO,EAAE,WAAW,EAAE,MAAM,0BAA0B,CAAC;AAEvD,MAAM,OAAO,gBAAiB,SAAQ,WAAW;IAC/C,IAAI,GAAG;QACL,OAAO,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC;IAC/B,CAAC;IAED,IAAI,IAAI;QACN,OAAO,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC;IAC3B,CAAC;IAED,IAAI,mBAAmB;QACrB,MAAM,CAAC,OAAO,EAAE,MAAM,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,OAAO;aACvC,KAAK,EAAE;aACP,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC;YACf,KAAK,CAAC,gBAAgB,EAAE;YACxB,KAAK,CAAC,kBAAkB,EAAE;YAC1B,KAAK,CAAC,kBAAkB,EAAE;SAC3B,CAAC;aACD,iBAAiB,CAAC;YACjB,IAAI,EAAE,SAAS;SAChB,CAAC;aACD,GAAG,EAAE,CAAC;QAET,IAAI,CAAC,OAAO,EAAE,CAAC;YACb,OAAO,EAAE,CAAC;QACZ,CAAC;QAED,4DAA4D;QAC5D,IACE,MAAM,CAAC,oBAAoB;YAC3B,CAAC,MAAM,CAAC,oBAAoB,CAAC,EAAE;YAC/B,MAAM,CAAC,oBAAoB,CAAC,IAAI,CAAC,MAAM,KAAK,CAAC,EAC7C,CAAC;YACD,OAAO,EAAE,CAAC;QACZ,CAAC;QAED,IAAI,MAAM,CAAC,cAAc,EAAE,MAAM,EAAE,CAAC;YAClC,OAAO,MAAM,CAAC,cAAc,CAAC;QAC/B,CAAC;QAED,OAAO,EAAE,CAAC;IACZ,CAAC;IAED,IAAI,GAAG;QACL,OAAO,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC;IAC1B,CAAC;IAED,YAAmB,OAA8B;QAC/C,KAAK,EAAE,CAAC;QADS,YAAO,GAAP,OAAO,CAAuB;IAEjD,CAAC;IAED,OAAO;QACL,OAAO,IAAI,CAAC,mBAAmB,CAAC,MAAM,KAAK,CAAC,CAAC;IAC/C,CAAC;IAED,UAAU;QACR,OAAO,IAAI,CAAC,mBAAmB,CAAC,MAAM,GAAG,CAAC,CAAC;IAC7C,CAAC;IAED,QAAQ;QACN,OAAO,IAAI,CAAC,mBAAmB,CAAC,MAAM,KAAK,CAAC,CAAC;IAC/C,CAAC;CACF","sourcesContent":["import type { AffineFormatBarWidget } from './format-bar.js';\n\nimport { MenuContext } from '../../configs/toolbar.js';\n\nexport class FormatBarContext extends MenuContext {\n  get doc() {\n    return this.toolbar.host.doc;\n  }\n\n  get host() {\n    return this.toolbar.host;\n  }\n\n  get selectedBlockModels() {\n    const [success, result] = this.std.command\n      .chain()\n      .tryAll(chain => [\n        chain.getTextSelection(),\n        chain.getBlockSelections(),\n        chain.getImageSelections(),\n      ])\n      .getSelectedModels({\n        mode: 'highest',\n      })\n      .run();\n\n    if (!success) {\n      return [];\n    }\n\n    // should return an empty array if `to` of the range is null\n    if (\n      result.currentTextSelection &&\n      !result.currentTextSelection.to &&\n      result.currentTextSelection.from.length === 0\n    ) {\n      return [];\n    }\n\n    if (result.selectedModels?.length) {\n      return result.selectedModels;\n    }\n\n    return [];\n  }\n\n  get std() {\n    return this.toolbar.std;\n  }\n\n  constructor(public toolbar: AffineFormatBarWidget) {\n    super();\n  }\n\n  isEmpty() {\n    return this.selectedBlockModels.length === 0;\n  }\n\n  isMultiple() {\n    return this.selectedBlockModels.length > 1;\n  }\n\n  isSingle() {\n    return this.selectedBlockModels.length === 1;\n  }\n}\n"]}