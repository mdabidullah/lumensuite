{"version":3,"file":"config.js","sourceRoot":"","sources":["../../../../src/root-block/widgets/linked-doc/config.ts"],"names":[],"mappings":"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","sourcesContent":["import type { EditorHost } from '@blocksuite/block-std';\nimport type { TemplateResult } from 'lit';\n\nimport {\n  ImportIcon,\n  LinkedDocIcon,\n  LinkedEdgelessIcon,\n  NewDocIcon,\n} from '@blocksuite/affine-components/icons';\nimport {\n  type AffineInlineEditor,\n  insertLinkedNode,\n} from '@blocksuite/affine-components/rich-text';\nimport { toast } from '@blocksuite/affine-components/toast';\nimport {\n  DocModeProvider,\n  TelemetryProvider,\n} from '@blocksuite/affine-shared/services';\nimport {\n  createDefaultDoc,\n  isFuzzyMatch,\n} from '@blocksuite/affine-shared/utils';\n\nimport { showImportModal } from './import-doc/index.js';\n\nexport type LinkedMenuItem = {\n  key: string;\n  name: string;\n  icon: TemplateResult<1>;\n  // suffix?: TemplateResult<1>;\n  // disabled?: boolean;\n  action: () => Promise<void> | void;\n};\n\nexport type LinkedMenuGroup = {\n  name: string;\n  items: LinkedMenuItem[];\n  styles?: string;\n  // maximum quantity displayed by default\n  maxDisplay?: number;\n  // copywriting when display quantity exceeds\n  overflowText?: string;\n};\n\nconst DEFAULT_DOC_NAME = 'Untitled';\nconst DISPLAY_NAME_LENGTH = 8;\n\nexport function createLinkedDocMenuGroup(\n  query: string,\n  abort: () => void,\n  editorHost: EditorHost,\n  inlineEditor: AffineInlineEditor\n) {\n  const doc = editorHost.doc;\n  const { docMetas } = doc.collection.meta;\n  const filteredDocList = docMetas\n    .filter(({ id }) => id !== doc.id)\n    .filter(({ title }) => isFuzzyMatch(title, query));\n  const MAX_DOCS = 6;\n\n  return {\n    name: 'Link to Doc',\n    items: filteredDocList.map(doc => ({\n      key: doc.id,\n      name: doc.title || DEFAULT_DOC_NAME,\n      icon:\n        editorHost.std.get(DocModeProvider).getPrimaryMode(doc.id) ===\n        'edgeless'\n          ? LinkedEdgelessIcon\n          : LinkedDocIcon,\n      action: () => {\n        abort();\n        insertLinkedNode({\n          inlineEditor,\n          docId: doc.id,\n        });\n        editorHost.std\n          .getOptional(TelemetryProvider)\n          ?.track('LinkedDocCreated', {\n            control: 'linked doc',\n            module: 'inline @',\n            type: 'doc',\n            other: 'existing doc',\n          });\n      },\n    })),\n    maxDisplay: MAX_DOCS,\n    overflowText: `${filteredDocList.length - MAX_DOCS} more docs`,\n  };\n}\n\nexport function createNewDocMenuGroup(\n  query: string,\n  abort: () => void,\n  editorHost: EditorHost,\n  inlineEditor: AffineInlineEditor\n): LinkedMenuGroup {\n  const doc = editorHost.doc;\n  const docName = query || DEFAULT_DOC_NAME;\n  const displayDocName =\n    docName.slice(0, DISPLAY_NAME_LENGTH) +\n    (docName.length > DISPLAY_NAME_LENGTH ? '..' : '');\n\n  return {\n    name: 'New Doc',\n    items: [\n      {\n        key: 'create',\n        name: `Create \"${displayDocName}\" doc`,\n        icon: NewDocIcon,\n        action: () => {\n          abort();\n          const docName = query;\n          const newDoc = createDefaultDoc(doc.collection, {\n            title: docName,\n          });\n          insertLinkedNode({\n            inlineEditor,\n            docId: newDoc.id,\n          });\n          const telemetryService =\n            editorHost.std.getOptional(TelemetryProvider);\n          telemetryService?.track('LinkedDocCreated', {\n            control: 'new doc',\n            module: 'inline @',\n            type: 'doc',\n            other: 'new doc',\n          });\n          telemetryService?.track('DocCreated', {\n            control: 'new doc',\n            module: 'inline @',\n            type: 'doc',\n          });\n        },\n      },\n      {\n        key: 'import',\n        name: 'Import',\n        icon: ImportIcon,\n        action: () => {\n          abort();\n          const onSuccess = (\n            docIds: string[],\n            options: {\n              importedCount: number;\n            }\n          ) => {\n            toast(\n              editorHost,\n              `Successfully imported ${options.importedCount} Doc${options.importedCount > 1 ? 's' : ''}.`\n            );\n            for (const docId of docIds) {\n              insertLinkedNode({\n                inlineEditor,\n                docId,\n              });\n            }\n          };\n          const onFail = (message: string) => {\n            toast(editorHost, message);\n          };\n          showImportModal({\n            collection: doc.collection,\n            onSuccess,\n            onFail,\n          });\n        },\n      },\n    ],\n  };\n}\n\nexport function getMenus(\n  query: string,\n  abort: () => void,\n  editorHost: EditorHost,\n  inlineEditor: AffineInlineEditor\n): Promise<LinkedMenuGroup[]> {\n  return Promise.resolve([\n    createLinkedDocMenuGroup(query, abort, editorHost, inlineEditor),\n    createNewDocMenuGroup(query, abort, editorHost, inlineEditor),\n  ]);\n}\n\nexport const LinkedWidgetUtils = {\n  createLinkedDocMenuGroup,\n  createNewDocMenuGroup,\n  insertLinkedNode,\n};\n"]}