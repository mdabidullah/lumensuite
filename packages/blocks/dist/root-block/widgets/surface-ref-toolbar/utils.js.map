{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../../../src/root-block/widgets/surface-ref-toolbar/utils.ts"],"names":[],"mappings":"AAGA,OAAO,EAAE,YAAY,EAAE,KAAK,EAAE,MAAM,0BAA0B,CAAC;AAI/D,OAAO,EAAE,eAAe,EAAE,MAAM,6CAA6C,CAAC;AAE9E,MAAM,CAAC,MAAM,cAAc,GAAG,KAAK,EACjC,IAAgB,EAChB,OAIC,EACc,EAAE;IACjB,MAAM,EAAE,eAAe,EAAE,GAAG,OAAO,CAAC;IACpC,MAAM,WAAW,GAAG,IAAI,CAAC,GAAG,CAAC,UAAU,CAAC,aAAa,CAAC,CAAC;IACvD,MAAM,aAAa,GAAG,WAAW,CAAC,aAAa,CAAC;IAChD,MAAM,KAAK,GAAG,KAAK,CAAC,WAAW,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;IACtD,MAAM,OAAO,GAAG,eAAe,CAAC,eAAe,CAAC,CAAC;IAEjD,OAAO,aAAa;SACjB,gBAAgB,CACf,OAAO,CAAC,eAAe,EACvB,KAAK,EACL,SAAS,EACT,OAAO,CAAC,CAAC,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC,SAAS,EACvC,OAAO,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,eAAe,CAAC,EACvC,EAAE,IAAI,EAAE,OAAO,CAAC,eAAe,CAAC,QAAQ,CAAC,IAAI,EAAE,CAChD;SACA,IAAI,CAAC,MAAM,CAAC,EAAE;QACb,YAAY,CAAC,MAAM,CAAC,CAAC;QACrB,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YACrC,MAAM,CAAC,MAAM,CACX,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,EAC7C,WAAW,CACZ,CAAC;QACJ,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACP,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,yBAAyB,GAAG,KAAK,EAAE,IAAU,EAAE,EAAE;IAC5D,aAAa;IACb,IAAI,MAAM,CAAC,IAAI,EAAE,SAAS,EAAE,qBAAqB,EAAE,CAAC;QAClD,aAAa;QACb,MAAM,MAAM,CAAC,IAAI,CAAC,SAAS,EAAE,qBAAqB,CAAC,IAAI,CAAC,CAAC;IAC3D,CAAC;SAAM,CAAC;QACN,MAAM,SAAS,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,IAAI,aAAa,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC;IAC9E,CAAC;AACH,CAAC,CAAC","sourcesContent":["import type { CanvasRenderer } from '@blocksuite/affine-block-surface';\nimport type { EditorHost } from '@blocksuite/block-std';\n\nimport { assertExists, Bound } from '@blocksuite/global/utils';\n\nimport type { SurfaceRefBlockComponent } from '../../../surface-ref-block/surface-ref-block.js';\n\nimport { isTopLevelBlock } from '../../../root-block/edgeless/utils/query.js';\n\nexport const edgelessToBlob = async (\n  host: EditorHost,\n  options: {\n    surfaceRefBlock: SurfaceRefBlockComponent;\n    surfaceRenderer: CanvasRenderer;\n    edgelessElement: BlockSuite.EdgelessModel;\n  }\n): Promise<Blob> => {\n  const { edgelessElement } = options;\n  const rootService = host.std.getService('affine:page');\n  const exportManager = rootService.exportManager;\n  const bound = Bound.deserialize(edgelessElement.xywh);\n  const isBlock = isTopLevelBlock(edgelessElement);\n\n  return exportManager\n    .edgelessToCanvas(\n      options.surfaceRenderer,\n      bound,\n      undefined,\n      isBlock ? [edgelessElement] : undefined,\n      isBlock ? undefined : [edgelessElement],\n      { zoom: options.surfaceRenderer.viewport.zoom }\n    )\n    .then(canvas => {\n      assertExists(canvas);\n      return new Promise((resolve, reject) => {\n        canvas.toBlob(\n          blob => (blob ? resolve(blob) : reject(null)),\n          'image/png'\n        );\n      });\n    });\n};\n\nexport const writeImageBlobToClipboard = async (blob: Blob) => {\n  // @ts-ignore\n  if (window.apis?.clipboard?.copyAsImageFromString) {\n    // @ts-ignore\n    await window.apis.clipboard?.copyAsImageFromString(blob);\n  } else {\n    await navigator.clipboard.write([new ClipboardItem({ [blob.type]: blob })]);\n  }\n};\n"]}