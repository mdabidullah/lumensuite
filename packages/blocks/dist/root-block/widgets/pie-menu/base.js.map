{"version":3,"file":"base.js","sourceRoot":"","sources":["../../../../src/root-block/widgets/pie-menu/base.ts"],"names":[],"mappings":"","sourcesContent":["import type { TemplateResult } from 'lit';\n\nimport type { EdgelessRootBlockComponent } from '../../edgeless/edgeless-root-block.js';\nimport type { PieMenuId } from '../../types.js';\nimport type { AffinePieMenuWidget } from './index.js';\nimport type { PieMenu } from './menu.js';\nimport type { PieNode } from './node.js';\n\nexport interface PieMenuSchema {\n  id: PieMenuId;\n\n  label: string;\n\n  root: PieRootNodeModel;\n\n  trigger: (props: {\n    keyEvent: KeyboardEvent;\n    rootComponent: EdgelessRootBlockComponent;\n  }) => boolean;\n}\n\nexport type IconGetter = (ctx: PieMenuContext) => TemplateResult;\nexport type DisabledGetter = (ctx: PieMenuContext) => boolean;\nexport interface PieBaseNodeModel {\n  type: 'root' | 'command' | 'submenu' | 'toggle' | 'color';\n\n  label: string;\n\n  icon?: IconGetter | TemplateResult;\n\n  angle?: number;\n\n  startAngle?: number;\n\n  endAngle?: number;\n\n  disabled?: boolean | DisabledGetter;\n}\n\n// A menu can only have one root node\nexport interface PieRootNodeModel extends PieBaseNodeModel {\n  type: 'root';\n  children: Array<PieNonRootNode>;\n}\n\nexport type PieMenuContext = {\n  rootComponent: EdgelessRootBlockComponent;\n  menu: PieMenu;\n  widgetComponent: AffinePieMenuWidget;\n  node: PieNode;\n};\nexport type ActionFunction = (ctx: PieMenuContext) => void;\n\n// Nodes which can perform a given action\nexport interface PieCommandNodeModel extends PieBaseNodeModel {\n  type: 'command';\n  action: ActionFunction;\n}\n\n// Open a submenu\nexport interface PieSubmenuNodeModel extends PieBaseNodeModel {\n  type: 'submenu';\n  role: 'default' | 'color-picker' | 'command';\n  action?: ActionFunction;\n  children: Array<PieNonRootNode>;\n  openOnHover?: boolean;\n  timeoutOverride?: number;\n}\n\nexport interface PieColorNodeModel extends PieBaseNodeModel {\n  type: 'color';\n  color: string;\n  hollowCircle: boolean;\n  text?: string;\n  onChange: (color: string, ctx: PieMenuContext) => void;\n}\n\nexport type IPieNodeWithAction =\n  | PieCommandNodeModel\n  | (PieSubmenuNodeModel & { role: 'command'; action: ActionFunction });\n\nexport type PieNonRootNode =\n  | PieCommandNodeModel\n  | PieColorNodeModel\n  | PieSubmenuNodeModel;\n\nexport type PieNodeModel = PieRootNodeModel | PieNonRootNode;\n"]}