{"version":3,"file":"pie-manager.js","sourceRoot":"","sources":["../../../../src/root-block/widgets/pie-menu/pie-manager.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,YAAY,EAAE,eAAe,EAAE,MAAM,0BAA0B,CAAC;AACzE,OAAO,EAAE,IAAI,EAAE,MAAM,mBAAmB,CAAC;AAMzC;;GAEG;AAEH,MAAM,OAAO,UAAU;aACN,sBAAiB,GAAkC,EAAE,CAAC;aAEtD,YAAO,GAAG,IAAI,GAAG,EAAiB,CAAC;aAE3C,aAAQ,GAAG;QAChB;;WAEG;QACH,UAAU,EAAE,GAAG;QACf;;;;;WAKG;QACH,yBAAyB,EAAE,GAAG;QAE9B;;WAEG;QACH,sBAAsB,EAAE,EAAE;QAE1B;;WAEG;QACH,oBAAoB,EAAE,GAAG;QAEzB,8BAA8B,EAAE,GAAG;KACpC,CAAC;aAEK,UAAK,GAAG;QACb,IAAI,EAAE,IAAI,IAAI,EAAiB;KAChC,CAAC;IAEM,MAAM,CAAC,UAAU,CAAC,EAAU;QAClC,MAAM,MAAM,GAAG,IAAI,CAAC,iBAAiB,CAAC,EAAE,CAAC,CAAC;QAC1C,YAAY,CAAC,MAAM,CAAC,CAAC;QACrB,OAAO,MAAM,CAAC;IAChB,CAAC;IAEO,MAAM,CAAC,SAAS,CAAC,MAAqB;QAC5C,MAAM,EAAE,EAAE,EAAE,GAAG,MAAM,CAAC;QAEtB,eAAe,CACb,IAAI,CAAC,iBAAiB,CAAC,EAAE,CAAC,EAC1B,iBAAiB,EAAE,8CAA8C,CAClE,CAAC;QAEF,IAAI,CAAC,iBAAiB,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC;IACtC,CAAC;IAEO,MAAM,CAAC,cAAc,CAAC,aAAyC;QACrE,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE;YACrD,MAAM,EAAE,OAAO,EAAE,GAAG,MAAM,CAAC;YAE3B,aAAa,CAAC,WAAW,CACvB,SAAS,EACT,GAAG,CAAC,EAAE;gBACJ,MAAM,EAAE,GAAG,GAAG,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC;gBAEpC,IAAI,OAAO,CAAC,EAAE,QAAQ,EAAE,EAAE,CAAC,GAAG,EAAE,aAAa,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,GAAG,CAAC,MAAM,EAAE,CAAC;oBACnE,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;gBACvB,CAAC;YACH,CAAC,EACD,EAAE,MAAM,EAAE,IAAI,EAAE,CACjB,CAAC;QACJ,CAAC,CAAC,CAAC;IACL,CAAC;IAED,MAAM,CAAC,GAAG,CAAC,MAAqB;QAC9B,OAAO,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;IAClC,CAAC;IAED,MAAM,CAAC,OAAO;QACZ,IAAI,CAAC,iBAAiB,GAAG,EAAE,CAAC;IAC9B,CAAC;IAED,MAAM,CAAC,IAAI,CAAC,EAAa;QACvB,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE,CAAC,CAAC,CAAC;IAC5C,CAAC;IAED,MAAM,CAAC,MAAM,CAAC,MAAqB;QACjC,OAAO,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;IACrC,CAAC;IAED,MAAM,CAAC,KAAK,CAAC,EACX,aAAa,GAGd;QACC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC;QACvD,IAAI,CAAC,cAAc,CAAC,aAAa,CAAC,CAAC;IACrC,CAAC","sourcesContent":["import { assertExists, assertNotExists } from '@lumensuite/global/utils';\nimport { Slot } from '@lumensuite/store';\n\nimport type { EdgelessRootBlockComponent } from '../../edgeless/edgeless-root-block.js';\nimport type { PieMenuId } from '../../types.js';\nimport type { PieMenuSchema } from './base.js';\n\n/**\n *   Static class for managing pie menus\n */\n\nexport class PieManager {\n  private static registeredSchemas: Record<string, PieMenuSchema> = {};\n\n  private static schemas = new Set<PieMenuSchema>();\n\n  static settings = {\n    /**\n     * Specifies the distance between the root-node and the child-nodes\n     */\n    PIE_RADIUS: 150,\n    /**\n     * After the specified time if trigger is released the menu will select the currently hovered node\\\n     * If released before the time the pie menu will stay open and you can select with mouse or the trigger key\\\n     * Time is in `milliseconds`\n     * @default 150\n     */\n    SELECT_ON_RELEASE_TIMEOUT: 150,\n\n    /**\n     * Distance from the center of the active node to start focusing a child node\n     */\n    ACTIVATE_THRESHOLD_MIN: 60,\n\n    /**\n     * Time delay to open submenu after hovering a submenu node\n     */\n    SUBMENU_OPEN_TIMEOUT: 200,\n\n    EXPANDABLE_ACTION_NODE_TIMEOUT: 300,\n  };\n\n  static slots = {\n    open: new Slot<PieMenuSchema>(),\n  };\n\n  private static _getSchema(id: string) {\n    const schema = this.registeredSchemas[id];\n    assertExists(schema);\n    return schema;\n  }\n\n  private static _register(schema: PieMenuSchema) {\n    const { id } = schema;\n\n    assertNotExists(\n      this.registeredSchemas[id],\n      `Menu with id '${id}' already exists. Please provide a unique id`\n    );\n\n    this.registeredSchemas[id] = schema;\n  }\n\n  private static _setupTriggers(rootComponent: EdgelessRootBlockComponent) {\n    Object.values(this.registeredSchemas).forEach(schema => {\n      const { trigger } = schema;\n\n      rootComponent.handleEvent(\n        'keyDown',\n        ctx => {\n          const ev = ctx.get('keyboardState');\n\n          if (trigger({ keyEvent: ev.raw, rootComponent }) && !ev.raw.repeat) {\n            this.open(schema.id);\n          }\n        },\n        { global: true }\n      );\n    });\n  }\n\n  static add(schema: PieMenuSchema) {\n    return this.schemas.add(schema);\n  }\n\n  static dispose() {\n    this.registeredSchemas = {};\n  }\n\n  static open(id: PieMenuId) {\n    this.slots.open.emit(this._getSchema(id));\n  }\n\n  static remove(schema: PieMenuSchema) {\n    return this.schemas.delete(schema);\n  }\n\n  static setup({\n    rootComponent,\n  }: {\n    rootComponent: EdgelessRootBlockComponent;\n  }) {\n    this.schemas.forEach(schema => this._register(schema));\n    this._setupTriggers(rootComponent);\n  }\n}\n"]}