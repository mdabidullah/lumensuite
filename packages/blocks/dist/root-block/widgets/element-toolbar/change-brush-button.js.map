{"version":3,"file":"change-brush-button.js","sourceRoot":"","sources":["../../../../src/root-block/widgets/element-toolbar/change-brush-button.ts"],"names":[],"mappings":"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","sourcesContent":["import type {\n  BrushElementModel,\n  BrushProps,\n  ColorScheme,\n} from '@lumensuite/affine-model';\n\nimport { LINE_COLORS, LineWidth } from '@lumensuite/affine-model';\nimport { WithDisposable } from '@lumensuite/block-std';\nimport { countBy, maxBy } from '@lumensuite/global/utils';\nimport { html, LitElement, nothing } from 'lit';\nimport { customElement, property, query, state } from 'lit/decorators.js';\nimport { when } from 'lit/directives/when.js';\n\nimport type { EdgelessColorPickerButton } from '../../edgeless/components/color-picker/button.js';\nimport type { PickColorEvent } from '../../edgeless/components/color-picker/types.js';\nimport type { ColorEvent } from '../../edgeless/components/panel/color-panel.js';\nimport type { LineWidthEvent } from '../../edgeless/components/panel/line-width-panel.js';\nimport type { EdgelessRootBlockComponent } from '../../edgeless/edgeless-root-block.js';\n\nimport {\n  packColor,\n  packColorsWithColorScheme,\n} from '../../edgeless/components/color-picker/utils.js';\nimport { GET_DEFAULT_LINE_COLOR } from '../../edgeless/components/panel/color-panel.js';\nimport '../../edgeless/components/panel/line-width-panel.js';\n\nfunction getMostCommonColor(\n  elements: BrushElementModel[],\n  colorScheme: ColorScheme\n): string {\n  const colors = countBy(elements, (ele: BrushElementModel) => {\n    return typeof ele.color === 'object'\n      ? (ele.color[colorScheme] ?? ele.color.normal ?? null)\n      : ele.color;\n  });\n  const max = maxBy(Object.entries(colors), ([_k, count]) => count);\n  return max ? (max[0] as string) : GET_DEFAULT_LINE_COLOR();\n}\n\nfunction getMostCommonSize(elements: BrushElementModel[]): LineWidth {\n  const sizes = countBy(elements, ele => ele.lineWidth);\n  const max = maxBy(Object.entries(sizes), ([_k, count]) => count);\n  return max ? (Number(max[0]) as LineWidth) : LineWidth.Four;\n}\n\nfunction notEqual<K extends keyof BrushProps>(key: K, value: BrushProps[K]) {\n  return (element: BrushElementModel) => element[key] !== value;\n}\n\n@customElement('edgeless-change-brush-button')\nexport class EdgelessChangeBrushButton extends WithDisposable(LitElement) {\n  private _setBrushColor = ({ detail: color }: ColorEvent) => {\n    this._setBrushProp('color', color);\n    this._selectedColor = color;\n  };\n\n  private _setLineWidth = ({ detail: lineWidth }: LineWidthEvent) => {\n    this._setBrushProp('lineWidth', lineWidth);\n    this._selectedSize = lineWidth;\n  };\n\n  pickColor = (event: PickColorEvent) => {\n    if (event.type === 'pick') {\n      this.elements.forEach(ele =>\n        this.service.updateElement(\n          ele.id,\n          packColor('color', { ...event.detail })\n        )\n      );\n      return;\n    }\n\n    this.elements.forEach(ele =>\n      ele[event.type === 'start' ? 'stash' : 'pop']('color')\n    );\n  };\n\n  get doc() {\n    return this.edgeless.doc;\n  }\n\n  get selectedColor() {\n    const colorScheme = this.edgeless.surface.renderer.getColorScheme();\n    return (\n      this._selectedColor ?? getMostCommonColor(this.elements, colorScheme)\n    );\n  }\n\n  get selectedSize() {\n    return this._selectedSize ?? getMostCommonSize(this.elements);\n  }\n\n  get service() {\n    return this.edgeless.service;\n  }\n\n  get surface() {\n    return this.edgeless.surface;\n  }\n\n  private _setBrushProp<K extends keyof BrushProps>(\n    key: K,\n    value: BrushProps[K]\n  ) {\n    this.doc.captureSync();\n    this.elements\n      .filter(notEqual(key, value))\n      .forEach(element =>\n        this.service.updateElement(element.id, { [key]: value })\n      );\n  }\n\n  override render() {\n    const colorScheme = this.edgeless.surface.renderer.getColorScheme();\n    const elements = this.elements;\n    const { selectedSize, selectedColor } = this;\n\n    return html`\n      <edgeless-line-width-panel\n        .selectedSize=${selectedSize}\n        @select=${this._setLineWidth}\n      >\n      </edgeless-line-width-panel>\n\n      <editor-toolbar-separator></editor-toolbar-separator>\n\n      ${when(\n        this.edgeless.doc.awarenessStore.getFlag('enable_color_picker'),\n        () => {\n          const { type, colors } = packColorsWithColorScheme(\n            colorScheme,\n            selectedColor,\n            elements[0].color\n          );\n\n          return html`\n            <edgeless-color-picker-button\n              class=\"color\"\n              .label=${'Color'}\n              .pick=${this.pickColor}\n              .color=${selectedColor}\n              .colors=${colors}\n              .colorType=${type}\n              .palettes=${LINE_COLORS}\n            >\n            </edgeless-color-picker-button>\n          `;\n        },\n        () => html`\n          <editor-menu-button\n            .contentPadding=${'8px'}\n            .button=${html`\n              <editor-icon-button aria-label=\"Color\" .tooltip=${'Color'}>\n                <edgeless-color-button\n                  .color=${selectedColor}\n                ></edgeless-color-button>\n              </editor-icon-button>\n            `}\n          >\n            <edgeless-color-panel\n              .value=${selectedColor}\n              @select=${this._setBrushColor}\n            >\n            </edgeless-color-panel>\n          </editor-menu-button>\n        `\n      )}\n    `;\n  }\n\n  @state()\n  private accessor _selectedColor: string | null = null;\n\n  @state()\n  private accessor _selectedSize: LineWidth | null = null;\n\n  @query('edgeless-color-picker-button.color')\n  accessor colorButton!: EdgelessColorPickerButton;\n\n  @property({ attribute: false })\n  accessor edgeless!: EdgelessRootBlockComponent;\n\n  @property({ attribute: false })\n  accessor elements: BrushElementModel[] = [];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'edgeless-change-brush-button': EdgelessChangeBrushButton;\n  }\n}\n\nexport function renderChangeBrushButton(\n  edgeless: EdgelessRootBlockComponent,\n  elements?: BrushElementModel[]\n) {\n  if (!elements?.length) return nothing;\n\n  return html`\n    <edgeless-change-brush-button .elements=${elements} .edgeless=${edgeless}>\n    </edgeless-change-brush-button>\n  `;\n}\n"]}