{"version":3,"file":"change-text-menu.js","sourceRoot":"","sources":["../../../../src/root-block/widgets/element-toolbar/change-text-menu.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  ConnectorUtils,\n  normalizeShapeBound,\n  TextUtils,\n} from '@blocksuite/affine-block-surface';\nimport {\n  SmallArrowDownIcon,\n  TextAlignCenterIcon,\n  TextAlignLeftIcon,\n  TextAlignRightIcon,\n} from '@blocksuite/affine-components/icons';\nimport { renderToolbarSeparator } from '@blocksuite/affine-components/toolbar';\nimport {\n  type ColorScheme,\n  FontFamily,\n  FontStyle,\n  FontWeight,\n  TextAlign,\n  type TextStyleProps,\n} from '@blocksuite/affine-model';\nimport {\n  ConnectorElementModel,\n  EdgelessTextBlockModel,\n  LINE_COLORS,\n  ShapeElementModel,\n  TextElementModel,\n} from '@blocksuite/affine-model';\nimport { WithDisposable } from '@blocksuite/block-std';\nimport { Bound, countBy, maxBy } from '@blocksuite/global/utils';\nimport { css, html, LitElement, nothing, type TemplateResult } from 'lit';\nimport { customElement, property, query } from 'lit/decorators.js';\nimport { choose } from 'lit/directives/choose.js';\nimport { join } from 'lit/directives/join.js';\nimport { when } from 'lit/directives/when.js';\n\nimport type {\n  EdgelessColorPickerButton,\n  PickColorEvent,\n} from '../../edgeless/components/color-picker/index.js';\nimport type { EdgelessRootBlockComponent } from '../../edgeless/edgeless-root-block.js';\n\nimport '../../edgeless/components/color-picker/index.js';\nimport {\n  packColor,\n  packColorsWithColorScheme,\n} from '../../edgeless/components/color-picker/utils.js';\nimport '../../edgeless/components/panel/align-panel.js';\nimport {\n  type ColorEvent,\n  GET_DEFAULT_LINE_COLOR,\n} from '../../edgeless/components/panel/color-panel.js';\nimport '../../edgeless/components/panel/font-family-panel.js';\nimport '../../edgeless/components/panel/font-weight-and-style-panel.js';\nimport '../../edgeless/components/panel/size-panel.js';\n\nconst FONT_SIZE_LIST = [\n  { value: 16 },\n  { value: 24 },\n  { value: 32 },\n  { value: 40 },\n  { value: 64 },\n  { value: 128 },\n] as const;\n\nconst FONT_WEIGHT_CHOOSE: [FontWeight, () => string][] = [\n  [FontWeight.Light, () => 'Light'],\n  [FontWeight.Regular, () => 'Regular'],\n  [FontWeight.SemiBold, () => 'Semibold'],\n] as const;\n\nconst FONT_STYLE_CHOOSE: [FontStyle, () => string | typeof nothing][] = [\n  [FontStyle.Normal, () => nothing],\n  [FontStyle.Italic, () => 'Italic'],\n] as const;\n\nconst TEXT_ALIGN_CHOOSE: [TextAlign, () => TemplateResult<1>][] = [\n  [TextAlign.Left, () => TextAlignLeftIcon],\n  [TextAlign.Center, () => TextAlignCenterIcon],\n  [TextAlign.Right, () => TextAlignRightIcon],\n] as const;\n\nfunction countByField<K extends keyof Omit<TextStyleProps, 'color'>>(\n  elements: BlockSuite.EdgelessTextModelType[],\n  field: K\n) {\n  return countBy(elements, element => extractField(element, field));\n}\n\nfunction extractField<K extends keyof Omit<TextStyleProps, 'color'>>(\n  element: BlockSuite.EdgelessTextModelType,\n  field: K\n) {\n  //TODO: It's not a very good handling method.\n  //      The edgeless-change-text-menu should be refactored into a widget to allow external registration of its own logic.\n  if (element instanceof EdgelessTextBlockModel) {\n    return field === 'fontSize'\n      ? null\n      : (element[field as keyof EdgelessTextBlockModel] as TextStyleProps[K]);\n  }\n  return (\n    element instanceof ConnectorElementModel\n      ? element.labelStyle[field]\n      : element[field]\n  ) as TextStyleProps[K];\n}\n\nfunction getMostCommonValue<K extends keyof Omit<TextStyleProps, 'color'>>(\n  elements: BlockSuite.EdgelessTextModelType[],\n  field: K\n) {\n  const values = countByField(elements, field);\n  return maxBy(Object.entries(values), ([_k, count]) => count);\n}\n\nfunction getMostCommonAlign(elements: BlockSuite.EdgelessTextModelType[]) {\n  const max = getMostCommonValue(elements, 'textAlign');\n  return max ? (max[0] as TextAlign) : TextAlign.Left;\n}\n\nfunction getMostCommonColor(\n  elements: BlockSuite.EdgelessTextModelType[],\n  colorScheme: ColorScheme\n): string {\n  const colors = countBy(elements, (ele: BlockSuite.EdgelessTextModelType) => {\n    const color =\n      ele instanceof ConnectorElementModel ? ele.labelStyle.color : ele.color;\n    return typeof color === 'object'\n      ? (color[colorScheme] ?? color.normal ?? null)\n      : color;\n  });\n  const max = maxBy(Object.entries(colors), ([_k, count]) => count);\n  return max ? (max[0] as string) : GET_DEFAULT_LINE_COLOR();\n}\n\nfunction getMostCommonFontFamily(elements: BlockSuite.EdgelessTextModelType[]) {\n  const max = getMostCommonValue(elements, 'fontFamily');\n  return max ? (max[0] as FontFamily) : FontFamily.Inter;\n}\n\nfunction getMostCommonFontSize(elements: BlockSuite.EdgelessTextModelType[]) {\n  const max = getMostCommonValue(elements, 'fontSize');\n  return max ? Number(max[0]) : FONT_SIZE_LIST[0].value;\n}\n\nfunction getMostCommonFontStyle(elements: BlockSuite.EdgelessTextModelType[]) {\n  const max = getMostCommonValue(elements, 'fontStyle');\n  return max ? (max[0] as FontStyle) : FontStyle.Normal;\n}\n\nfunction getMostCommonFontWeight(elements: BlockSuite.EdgelessTextModelType[]) {\n  const max = getMostCommonValue(elements, 'fontWeight');\n  return max ? (max[0] as FontWeight) : FontWeight.Regular;\n}\n\nfunction buildProps(\n  element: BlockSuite.EdgelessTextModelType,\n  props: { [K in keyof TextStyleProps]?: TextStyleProps[K] }\n) {\n  if (element instanceof ConnectorElementModel) {\n    return {\n      labelStyle: {\n        ...element.labelStyle,\n        ...props,\n      },\n    };\n  }\n\n  return { ...props };\n}\n\n@customElement('edgeless-change-text-menu')\nexport class EdgelessChangeTextMenu extends WithDisposable(LitElement) {\n  static override styles = css`\n    :host {\n      display: inherit;\n      align-items: inherit;\n      justify-content: inherit;\n      gap: inherit;\n      height: 100%;\n    }\n  `;\n\n  private _setFontFamily = (fontFamily: FontFamily) => {\n    const currentFontWeight = getMostCommonFontWeight(this.elements);\n    const fontWeight = TextUtils.isFontWeightSupported(\n      fontFamily,\n      currentFontWeight\n    )\n      ? currentFontWeight\n      : FontWeight.Regular;\n    const currentFontStyle = getMostCommonFontStyle(this.elements);\n    const fontStyle = TextUtils.isFontStyleSupported(\n      fontFamily,\n      currentFontStyle\n    )\n      ? currentFontStyle\n      : FontStyle.Normal;\n\n    const props = { fontFamily, fontWeight, fontStyle };\n    this.elements.forEach(element => {\n      this.service.updateElement(element.id, buildProps(element, props));\n      this._updateElementBound(element);\n    });\n  };\n\n  private _setFontSize = (fontSize: number) => {\n    const props = { fontSize };\n    this.elements.forEach(element => {\n      this.service.updateElement(element.id, buildProps(element, props));\n      this._updateElementBound(element);\n    });\n  };\n\n  private _setFontWeightAndStyle = (\n    fontWeight: FontWeight,\n    fontStyle: FontStyle\n  ) => {\n    const props = { fontWeight, fontStyle };\n    this.elements.forEach(element => {\n      this.service.updateElement(element.id, buildProps(element, props));\n      this._updateElementBound(element);\n    });\n  };\n\n  private _setTextAlign = (textAlign: TextAlign) => {\n    const props = { textAlign };\n    this.elements.forEach(element => {\n      this.service.updateElement(element.id, buildProps(element, props));\n    });\n  };\n\n  private _setTextColor = ({ detail: color }: ColorEvent) => {\n    const props = { color };\n    this.elements.forEach(element => {\n      this.service.updateElement(element.id, buildProps(element, props));\n    });\n  };\n\n  private _updateElementBound = (element: BlockSuite.EdgelessTextModelType) => {\n    const elementType = this.elementType;\n    if (elementType === 'text' && element instanceof TextElementModel) {\n      // the change of font family will change the bound of the text\n      const {\n        text: yText,\n        fontFamily,\n        fontStyle,\n        fontSize,\n        fontWeight,\n        hasMaxWidth,\n      } = element;\n      const newBound = TextUtils.normalizeTextBound(\n        {\n          yText,\n          fontFamily,\n          fontStyle,\n          fontSize,\n          fontWeight,\n          hasMaxWidth,\n        },\n        Bound.fromXYWH(element.deserializedXYWH)\n      );\n      this.service.updateElement(element.id, {\n        xywh: newBound.serialize(),\n      });\n    } else if (\n      elementType === 'connector' &&\n      ConnectorUtils.isConnectorWithLabel(element)\n    ) {\n      const {\n        text,\n        labelXYWH,\n        labelStyle: { fontFamily, fontStyle, fontSize, fontWeight },\n        labelConstraints: { hasMaxWidth, maxWidth },\n      } = element as ConnectorElementModel;\n      const prevBounds = Bound.fromXYWH(labelXYWH || [0, 0, 16, 16]);\n      const center = prevBounds.center;\n      const bounds = TextUtils.normalizeTextBound(\n        {\n          yText: text!,\n          fontFamily,\n          fontStyle,\n          fontSize,\n          fontWeight,\n          hasMaxWidth,\n          maxWidth,\n        },\n        prevBounds\n      );\n      bounds.center = center;\n      this.service.updateElement(element.id, {\n        labelXYWH: bounds.toXYWH(),\n      });\n    } else if (\n      elementType === 'shape' &&\n      element instanceof ShapeElementModel\n    ) {\n      const newBound = normalizeShapeBound(\n        element,\n        Bound.fromXYWH(element.deserializedXYWH)\n      );\n      this.service.updateElement(element.id, {\n        xywh: newBound.serialize(),\n      });\n    }\n    // no need to update the bound of edgeless text block, which updates itself using ResizeObserver\n  };\n\n  pickColor = (event: PickColorEvent) => {\n    if (event.type === 'pick') {\n      this.elements.forEach(ele => {\n        if (ele instanceof ConnectorElementModel) {\n          this.service.updateElement(ele.id, {\n            labelStyle: {\n              ...ele.labelStyle,\n              ...packColor('color', { ...event.detail }),\n            },\n          });\n          this._updateElementBound(ele);\n          return;\n        }\n\n        this.service.updateElement(\n          ele.id,\n          packColor('color', { ...event.detail })\n        );\n        this._updateElementBound(ele);\n      });\n      return;\n    }\n\n    const key = this.elementType === 'connector' ? 'labelStyle' : 'color';\n    this.elements.forEach(ele => {\n      // @ts-expect-error: FIXME\n      ele[event.type === 'start' ? 'stash' : 'pop'](key);\n    });\n  };\n\n  get service() {\n    return this.edgeless.service;\n  }\n\n  override render() {\n    const colorScheme = this.edgeless.surface.renderer.getColorScheme();\n    const elements = this.elements;\n    const selectedAlign = getMostCommonAlign(elements);\n    const selectedColor = getMostCommonColor(elements, colorScheme);\n    const selectedFontFamily = getMostCommonFontFamily(elements);\n    const selectedFontSize = Math.trunc(getMostCommonFontSize(elements));\n    const selectedFontStyle = getMostCommonFontStyle(elements);\n    const selectedFontWeight = getMostCommonFontWeight(elements);\n    const matchFontFaces =\n      TextUtils.getFontFacesByFontFamily(selectedFontFamily);\n    const fontStyleBtnDisabled =\n      matchFontFaces.length === 1 &&\n      matchFontFaces[0].style === selectedFontStyle &&\n      matchFontFaces[0].weight === selectedFontWeight;\n\n    return join(\n      [\n        html`\n          <editor-menu-button\n            .contentPadding=${'8px'}\n            .button=${html`\n              <editor-icon-button\n                aria-label=\"Font\"\n                .tooltip=${'Font'}\n                .justify=${'space-between'}\n                .labelHeight=${'20px'}\n                .iconContainerWidth=${'40px'}\n              >\n                <span\n                  class=\"label padding0\"\n                  style=${`font-family: ${TextUtils.wrapFontFamily(selectedFontFamily)}`}\n                  >Aa</span\n                >${SmallArrowDownIcon}\n              </editor-icon-button>\n            `}\n          >\n            <edgeless-font-family-panel\n              .value=${selectedFontFamily}\n              .onSelect=${this._setFontFamily}\n            ></edgeless-font-family-panel>\n          </editor-menu-button>\n        `,\n\n        when(\n          this.edgeless.doc.awarenessStore.getFlag('enable_color_picker'),\n          () => {\n            const { type, colors } = packColorsWithColorScheme(\n              colorScheme,\n              selectedColor,\n              elements[0] instanceof ConnectorElementModel\n                ? elements[0].labelStyle.color\n                : elements[0].color\n            );\n\n            return html`\n              <edgeless-color-picker-button\n                class=\"text-color\"\n                .label=${'Text color'}\n                .pick=${this.pickColor}\n                .isText=${true}\n                .color=${selectedColor}\n                .colors=${colors}\n                .colorType=${type}\n                .palettes=${LINE_COLORS}\n              >\n              </edgeless-color-picker-button>\n            `;\n          },\n          () => html`\n            <editor-menu-button\n              .contentPadding=${'8px'}\n              .button=${html`\n                <editor-icon-button\n                  aria-label=\"Text color\"\n                  .tooltip=${'Text color'}\n                >\n                  <edgeless-text-color-icon\n                    .color=${selectedColor}\n                  ></edgeless-text-color-icon>\n                </editor-icon-button>\n              `}\n            >\n              <edgeless-color-panel\n                .value=${selectedColor}\n                @select=${this._setTextColor}\n              ></edgeless-color-panel>\n            </editor-menu-button>\n          `\n        ),\n\n        html`\n          <editor-menu-button\n            .contentPadding=${'8px'}\n            .button=${html`\n              <editor-icon-button\n                aria-label=\"Font style\"\n                .tooltip=${'Font style'}\n                .justify=${'space-between'}\n                .labelHeight=${'20px'}\n                .iconContainerWidth=${'90px'}\n                .disabled=${fontStyleBtnDisabled}\n              >\n                <span class=\"label ellipsis\">\n                  ${choose(selectedFontWeight, FONT_WEIGHT_CHOOSE)}\n                  ${choose(selectedFontStyle, FONT_STYLE_CHOOSE)}\n                </span>\n                ${SmallArrowDownIcon}\n              </editor-icon-button>\n            `}\n          >\n            <edgeless-font-weight-and-style-panel\n              .fontFamily=${selectedFontFamily}\n              .fontWeight=${selectedFontWeight}\n              .fontStyle=${selectedFontStyle}\n              .onSelect=${this._setFontWeightAndStyle}\n            ></edgeless-font-weight-and-style-panel>\n          </editor-menu-button>\n        `,\n\n        this.elementType === 'edgeless-text'\n          ? nothing\n          : html`\n              <editor-menu-button\n                .contentPadding=${'8px'}\n                .button=${html`\n                  <editor-icon-button\n                    aria-label=\"Font size\"\n                    .tooltip=${'Font size'}\n                    .justify=${'space-between'}\n                    .labelHeight=${'20px'}\n                    .iconContainerWidth=${'60px'}\n                  >\n                    <span class=\"label\">${selectedFontSize}</span>\n                    ${SmallArrowDownIcon}\n                  </editor-icon-button>\n                `}\n              >\n                <edgeless-size-panel\n                  data-type=\"check\"\n                  .size=${selectedFontSize}\n                  .sizeList=${FONT_SIZE_LIST}\n                  .onSelect=${this._setFontSize}\n                ></edgeless-size-panel>\n              </editor-menu-button>\n            `,\n\n        html`\n          <editor-menu-button\n            .button=${html`\n              <editor-icon-button\n                aria-label=\"Alignment\"\n                .tooltip=${'Alignment'}\n              >\n                ${choose(selectedAlign, TEXT_ALIGN_CHOOSE)}${SmallArrowDownIcon}\n              </editor-icon-button>\n            `}\n          >\n            <edgeless-align-panel\n              .value=${selectedAlign}\n              .onSelect=${this._setTextAlign}\n            ></edgeless-align-panel>\n          </editor-menu-button>\n        `,\n      ].filter(b => b !== nothing),\n      renderToolbarSeparator\n    );\n  }\n\n  @property({ attribute: false })\n  accessor edgeless!: EdgelessRootBlockComponent;\n\n  @property({ attribute: false })\n  accessor elements!: BlockSuite.EdgelessTextModelType[];\n\n  @property({ attribute: false })\n  accessor elementType!: BlockSuite.EdgelessTextModelKeyType;\n\n  @query('edgeless-color-picker-button.text-color')\n  accessor textColorButton!: EdgelessColorPickerButton;\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'edgeless-change-text-menu': EdgelessChangeTextMenu;\n  }\n}\n"]}