{"version":3,"file":"change-shape-button.js","sourceRoot":"","sources":["../../../../src/root-block/widgets/element-toolbar/change-shape-button.ts"],"names":[],"mappings":"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","sourcesContent":["import type {\n  ColorScheme,\n  ShapeElementModel,\n  ShapeProps,\n} from '@lumensuite/affine-model';\n\nimport {\n  AddTextIcon,\n  ChangeShapeIcon,\n  GeneralStyleIcon,\n  ScribbledStyleIcon,\n  SmallArrowDownIcon,\n} from '@lumensuite/affine-components/icons';\nimport { renderToolbarSeparator } from '@lumensuite/affine-components/toolbar';\nimport {\n  DEFAULT_SHAPE_FILL_COLOR,\n  DEFAULT_SHAPE_STROKE_COLOR,\n  FontFamily,\n  getShapeName,\n  getShapeRadius,\n  getShapeType,\n  LineWidth,\n  SHAPE_FILL_COLORS,\n  SHAPE_STROKE_COLORS,\n  ShapeStyle,\n  StrokeStyle,\n} from '@lumensuite/affine-model';\nimport { WithDisposable } from '@lumensuite/block-std';\nimport { countBy, maxBy } from '@lumensuite/global/utils';\nimport { css, html, LitElement, nothing, type TemplateResult } from 'lit';\nimport { customElement, property, query } from 'lit/decorators.js';\nimport { cache } from 'lit/directives/cache.js';\nimport { choose } from 'lit/directives/choose.js';\nimport { join } from 'lit/directives/join.js';\nimport { styleMap } from 'lit/directives/style-map.js';\nimport { when } from 'lit/directives/when.js';\n\nimport type { EdgelessColorPickerButton } from '../../edgeless/components/color-picker/button.js';\nimport type { PickColorEvent } from '../../edgeless/components/color-picker/types.js';\nimport type { EdgelessShapePanel } from '../../edgeless/components/panel/shape-panel.js';\nimport type { EdgelessRootBlockComponent } from '../../edgeless/edgeless-root-block.js';\nimport type { ShapeTool } from '../../edgeless/tools/shape-tool.js';\n\nimport '../../edgeless/components/color-picker/index.js';\nimport {\n  packColor,\n  packColorsWithColorScheme,\n} from '../../edgeless/components/color-picker/utils.js';\nimport '../../edgeless/components/panel/color-panel.js';\nimport {\n  type ColorEvent,\n  GET_DEFAULT_LINE_COLOR,\n  isTransparent,\n} from '../../edgeless/components/panel/color-panel.js';\nimport {\n  type LineStyleEvent,\n  LineStylesPanel,\n} from '../../edgeless/components/panel/line-styles-panel.js';\nimport '../../edgeless/components/panel/shape-panel.js';\nimport '../../edgeless/components/panel/shape-style-panel.js';\nimport '../../edgeless/components/panel/stroke-style-panel.js';\nimport {\n  SHAPE_FILL_COLOR_BLACK,\n  SHAPE_TEXT_COLOR_PURE_BLACK,\n  SHAPE_TEXT_COLOR_PURE_WHITE,\n} from '../../edgeless/utils/consts.js';\nimport { mountShapeTextEditor } from '../../edgeless/utils/text.js';\nimport './change-text-menu.js';\n\nconst changeShapeButtonStyles = [\n  css`\n    .edgeless-component-line-size-button {\n      display: flex;\n      justify-content: center;\n      align-items: center;\n      width: 16px;\n      height: 16px;\n    }\n\n    .edgeless-component-line-size-button div {\n      border-radius: 50%;\n      background-color: var(--affine-icon-color);\n    }\n\n    .edgeless-component-line-size-button.size-s div {\n      width: 4px;\n      height: 4px;\n    }\n    .edgeless-component-line-size-button.size-l div {\n      width: 10px;\n      height: 10px;\n    }\n  `,\n];\n\nfunction getMostCommonFillColor(\n  elements: ShapeElementModel[],\n  colorScheme: ColorScheme\n): string | null {\n  const colors = countBy(elements, (ele: ShapeElementModel) => {\n    if (ele.filled) {\n      return typeof ele.fillColor === 'object'\n        ? (ele.fillColor[colorScheme] ?? ele.fillColor.normal ?? null)\n        : ele.fillColor;\n    }\n    return '--affine-palette-transparent';\n  });\n  const max = maxBy(Object.entries(colors), ([_k, count]) => count);\n  return max ? (max[0] as string) : null;\n}\n\nfunction getMostCommonStrokeColor(\n  elements: ShapeElementModel[],\n  colorScheme: ColorScheme\n): string | null {\n  const colors = countBy(elements, (ele: ShapeElementModel) => {\n    return typeof ele.strokeColor === 'object'\n      ? (ele.strokeColor[colorScheme] ?? ele.strokeColor.normal ?? null)\n      : ele.strokeColor;\n  });\n  const max = maxBy(Object.entries(colors), ([_k, count]) => count);\n  return max ? (max[0] as string) : null;\n}\n\nfunction getMostCommonShape(\n  elements: ShapeElementModel[]\n): ShapeTool['shapeName'] | null {\n  const shapeTypes = countBy(elements, (ele: ShapeElementModel) => {\n    return getShapeName(ele.shapeType, ele.radius);\n  });\n  const max = maxBy(Object.entries(shapeTypes), ([_k, count]) => count);\n  return max ? (max[0] as ShapeTool['shapeName']) : null;\n}\n\nfunction getMostCommonLineSize(elements: ShapeElementModel[]): LineWidth {\n  const sizes = countBy(elements, (ele: ShapeElementModel) => {\n    return ele.strokeWidth;\n  });\n  const max = maxBy(Object.entries(sizes), ([_k, count]) => count);\n  return max ? (Number(max[0]) as LineWidth) : LineWidth.Four;\n}\n\nfunction getMostCommonLineStyle(\n  elements: ShapeElementModel[]\n): StrokeStyle | null {\n  const sizes = countBy(elements, (ele: ShapeElementModel) => ele.strokeStyle);\n  const max = maxBy(Object.entries(sizes), ([_k, count]) => count);\n  return max ? (max[0] as StrokeStyle) : null;\n}\n\nfunction getMostCommonShapeStyle(elements: ShapeElementModel[]): ShapeStyle {\n  const roughnesses = countBy(elements, (ele: ShapeElementModel) => {\n    return ele.shapeStyle;\n  });\n  const max = maxBy(Object.entries(roughnesses), ([_k, count]) => count);\n  return max ? (max[0] as ShapeStyle) : ShapeStyle.Scribbled;\n}\n\n@customElement('edgeless-change-shape-button')\nexport class EdgelessChangeShapeButton extends WithDisposable(LitElement) {\n  static override styles = [changeShapeButtonStyles];\n\n  get service() {\n    return this.edgeless.service;\n  }\n\n  #pickColor<K extends keyof Pick<ShapeProps, 'fillColor' | 'strokeColor'>>(\n    key: K\n  ) {\n    return (event: PickColorEvent) => {\n      if (event.type === 'pick') {\n        this.elements.forEach(ele => {\n          const props = packColor(key, { ...event.detail });\n          // If `filled` can be set separately, this logic can be removed\n          if (key === 'fillColor' && !ele.filled) {\n            Object.assign(props, { filled: true });\n          }\n          this.service.updateElement(ele.id, props);\n        });\n        return;\n      }\n\n      this.elements.forEach(ele =>\n        ele[event.type === 'start' ? 'stash' : 'pop'](key)\n      );\n    };\n  }\n\n  private _addText() {\n    mountShapeTextEditor(this.elements[0], this.edgeless);\n  }\n\n  private _getTextColor(fillColor: string) {\n    // When the shape is filled with black color, the text color should be white.\n    // When the shape is transparent, the text color should be set according to the theme.\n    // Otherwise, the text color should be black.\n    const textColor = isTransparent(fillColor)\n      ? GET_DEFAULT_LINE_COLOR()\n      : fillColor === SHAPE_FILL_COLOR_BLACK\n        ? SHAPE_TEXT_COLOR_PURE_WHITE\n        : SHAPE_TEXT_COLOR_PURE_BLACK;\n\n    return textColor;\n  }\n\n  private _setShapeFillColor(fillColor: string) {\n    const filled = !isTransparent(fillColor);\n    const color = this._getTextColor(fillColor);\n    this.elements.forEach(ele =>\n      this.service.updateElement(ele.id, { filled, fillColor, color })\n    );\n  }\n\n  private _setShapeStrokeColor(strokeColor: string) {\n    this.elements.forEach(ele =>\n      this.service.updateElement(ele.id, { strokeColor })\n    );\n  }\n\n  private _setShapeStrokeStyle(strokeStyle: StrokeStyle) {\n    this.elements.forEach(ele =>\n      this.service.updateElement(ele.id, { strokeStyle })\n    );\n  }\n\n  private _setShapeStrokeWidth(strokeWidth: number) {\n    this.elements.forEach(ele =>\n      this.service.updateElement(ele.id, { strokeWidth })\n    );\n  }\n\n  private _setShapeStyle(shapeStyle: ShapeStyle) {\n    const fontFamily =\n      shapeStyle === ShapeStyle.General ? FontFamily.Inter : FontFamily.Kalam;\n\n    this.elements.forEach(ele => {\n      this.service.updateElement(ele.id, { shapeStyle, fontFamily });\n    });\n  }\n\n  private _setShapeStyles({ type, value }: LineStyleEvent) {\n    if (type === 'size') {\n      this._setShapeStrokeWidth(value);\n      return;\n    }\n    if (type === 'lineStyle') {\n      this._setShapeStrokeStyle(value);\n    }\n  }\n\n  private _showAddButtonOrTextMenu() {\n    if (this.elements.length === 1 && !this.elements[0].text) {\n      return 'button';\n    }\n    if (!this.elements.some(e => !e.text)) {\n      return 'menu';\n    }\n    return 'nothing';\n  }\n\n  override firstUpdated() {\n    const _disposables = this._disposables;\n\n    _disposables.add(\n      this._shapePanel.slots.select.on(shapeName => {\n        this.edgeless.doc.captureSync();\n        this.elements.forEach(element => {\n          this.service.updateElement(element.id, {\n            shapeType: getShapeType(shapeName),\n            radius: getShapeRadius(shapeName),\n          });\n        });\n      })\n    );\n  }\n\n  override render() {\n    const colorScheme = this.edgeless.surface.renderer.getColorScheme();\n    const elements = this.elements;\n    const selectedShape = getMostCommonShape(elements);\n    const selectedFillColor =\n      getMostCommonFillColor(elements, colorScheme) ?? DEFAULT_SHAPE_FILL_COLOR;\n    const selectedStrokeColor =\n      getMostCommonStrokeColor(elements, colorScheme) ??\n      DEFAULT_SHAPE_STROKE_COLOR;\n    const selectedLineSize = getMostCommonLineSize(elements) ?? LineWidth.Four;\n    const selectedLineStyle =\n      getMostCommonLineStyle(elements) ?? StrokeStyle.Solid;\n    const selectedShapeStyle =\n      getMostCommonShapeStyle(elements) ?? ShapeStyle.Scribbled;\n\n    return join(\n      [\n        html`\n          <editor-menu-button\n            .button=${html`\n              <editor-icon-button\n                aria-label=\"Switch type\"\n                .tooltip=${'Switch type'}\n              >\n                ${ChangeShapeIcon}${SmallArrowDownIcon}\n              </editor-icon-button>\n            `}\n          >\n            <edgeless-shape-panel\n              .selectedShape=${selectedShape}\n              .shapeStyle=${selectedShapeStyle}\n            >\n            </edgeless-shape-panel>\n          </editor-menu-button>\n        `,\n\n        html`\n          <editor-menu-button\n            .button=${html`\n              <editor-icon-button aria-label=\"Style\" .tooltip=${'Style'}>\n                ${cache(\n                  selectedShapeStyle === ShapeStyle.General\n                    ? GeneralStyleIcon\n                    : ScribbledStyleIcon\n                )}\n                ${SmallArrowDownIcon}\n              </editor-icon-button>\n            `}\n          >\n            <edgeless-shape-style-panel\n              .value=${selectedShapeStyle}\n              .onSelect=${(value: ShapeStyle) => this._setShapeStyle(value)}\n            >\n            </edgeless-shape-style-panel>\n          </editor-menu-button>\n        `,\n\n        when(\n          this.edgeless.doc.awarenessStore.getFlag('enable_color_picker'),\n          () => {\n            const { type, colors } = packColorsWithColorScheme(\n              colorScheme,\n              selectedFillColor,\n              elements[0].fillColor\n            );\n\n            return html`\n              <edgeless-color-picker-button\n                class=\"fill-color\"\n                .label=${'Fill color'}\n                .pick=${this.#pickColor('fillColor')}\n                .color=${selectedFillColor}\n                .colors=${colors}\n                .colorType=${type}\n                .palettes=${SHAPE_FILL_COLORS}\n              >\n              </edgeless-color-picker-button>\n            `;\n          },\n          () => html`\n            <editor-menu-button\n              .contentPadding=${'8px'}\n              .button=${html`\n                <editor-icon-button\n                  aria-label=\"Fill color\"\n                  .tooltip=${'Fill color'}\n                >\n                  <edgeless-color-button\n                    .color=${selectedFillColor}\n                  ></edgeless-color-button>\n                </editor-icon-button>\n              `}\n            >\n              <edgeless-color-panel\n                role=\"listbox\"\n                aria-label=\"Fill colors\"\n                .value=${selectedFillColor}\n                .options=${SHAPE_FILL_COLORS}\n                @select=${(e: ColorEvent) => this._setShapeFillColor(e.detail)}\n              >\n              </edgeless-color-panel>\n            </editor-menu-button>\n          `\n        ),\n\n        when(\n          this.edgeless.doc.awarenessStore.getFlag('enable_color_picker'),\n          () => {\n            const { type, colors } = packColorsWithColorScheme(\n              colorScheme,\n              selectedStrokeColor,\n              elements[0].strokeColor\n            );\n\n            return html`\n              <edgeless-color-picker-button\n                class=\"border-style\"\n                .label=${'Border style'}\n                .pick=${this.#pickColor('strokeColor')}\n                .color=${selectedStrokeColor}\n                .colors=${colors}\n                .colorType=${type}\n                .palettes=${SHAPE_STROKE_COLORS}\n                .hollowCircle=${true}\n              >\n                <div\n                  slot=\"other\"\n                  class=\"line-styles\"\n                  style=${styleMap({\n                    display: 'flex',\n                    flexDirection: 'row',\n                    gap: '8px',\n                    alignItems: 'center',\n                  })}\n                >\n                  ${LineStylesPanel({\n                    selectedLineSize: selectedLineSize,\n                    selectedLineStyle: selectedLineStyle,\n                    onClick: (e: LineStyleEvent) => this._setShapeStyles(e),\n                    lineStyles: [StrokeStyle.Solid, StrokeStyle.Dash],\n                  })}\n                </div>\n                <editor-toolbar-separator\n                  slot=\"separator\"\n                  data-orientation=\"horizontal\"\n                ></editor-toolbar-separator>\n              </edgeless-color-picker-button>\n            `;\n          },\n          () => html`\n            <editor-menu-button\n              .contentPadding=${'8px'}\n              .button=${html`\n                <editor-icon-button\n                  aria-label=\"Border style\"\n                  .tooltip=${'Border style'}\n                >\n                  <edgeless-color-button\n                    .color=${selectedStrokeColor}\n                    .hollowCircle=${true}\n                  ></edgeless-color-button>\n                </editor-icon-button>\n              `}\n            >\n              <stroke-style-panel\n                .hollowCircle=${true}\n                .strokeWidth=${selectedLineSize}\n                .strokeStyle=${selectedLineStyle}\n                .strokeColor=${selectedStrokeColor}\n                .setStrokeStyle=${(e: LineStyleEvent) =>\n                  this._setShapeStyles(e)}\n                .setStrokeColor=${(e: ColorEvent) =>\n                  this._setShapeStrokeColor(e.detail)}\n              >\n              </stroke-style-panel>\n            </editor-menu-button>\n          `\n        ),\n\n        choose<string, TemplateResult<1> | typeof nothing>(\n          this._showAddButtonOrTextMenu(),\n          [\n            [\n              'button',\n              () => html`\n                <editor-icon-button\n                  aria-label=\"Add text\"\n                  .tooltip=${'Add text'}\n                  @click=${this._addText}\n                >\n                  ${AddTextIcon}\n                </editor-icon-button>\n              `,\n            ],\n            [\n              'menu',\n              () => html`\n                <edgeless-change-text-menu\n                  .elementType=${'shape'}\n                  .elements=${elements}\n                  .edgeless=${this.edgeless}\n                ></edgeless-change-text-menu>\n              `,\n            ],\n            ['nothing', () => nothing],\n          ]\n        ),\n      ].filter(button => button !== nothing),\n      renderToolbarSeparator\n    );\n  }\n\n  @query('edgeless-shape-panel')\n  private accessor _shapePanel!: EdgelessShapePanel;\n\n  @query('edgeless-color-picker-button.border-style')\n  accessor borderStyleButton!: EdgelessColorPickerButton;\n\n  @property({ attribute: false })\n  accessor edgeless!: EdgelessRootBlockComponent;\n\n  @property({ attribute: false })\n  accessor elements: ShapeElementModel[] = [];\n\n  @query('edgeless-color-picker-button.fill-color')\n  accessor fillColorButton!: EdgelessColorPickerButton;\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'edgeless-change-shape-button': EdgelessChangeShapeButton;\n  }\n}\n\nexport function renderChangeShapeButton(\n  edgeless: EdgelessRootBlockComponent,\n  elements?: ShapeElementModel[]\n) {\n  if (!elements?.length) return nothing;\n  if (elements.some(e => edgeless.service.surface.isInMindmap(e.id)))\n    return nothing;\n\n  return html`\n    <edgeless-change-shape-button .elements=${elements} .edgeless=${edgeless}>\n    </edgeless-change-shape-button>\n  `;\n}\n"]}