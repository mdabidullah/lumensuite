{"version":3,"file":"change-connector-button.js","sourceRoot":"","sources":["../../../../src/root-block/widgets/element-toolbar/change-connector-button.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  AddTextIcon,\n  ConnectorCWithArrowIcon,\n  ConnectorEndpointNoneIcon,\n  ConnectorLWithArrowIcon,\n  ConnectorXWithArrowIcon,\n  FlipDirectionIcon,\n  FrontEndpointArrowIcon,\n  FrontEndpointCircleIcon,\n  FrontEndpointDiamondIcon,\n  FrontEndpointTriangleIcon,\n  GeneralStyleIcon,\n  RearEndpointArrowIcon,\n  RearEndpointCircleIcon,\n  RearEndpointDiamondIcon,\n  RearEndpointTriangleIcon,\n  ScribbledStyleIcon,\n  SmallArrowDownIcon,\n} from '@lumensuite/affine-components/icons';\nimport { renderToolbarSeparator } from '@lumensuite/affine-components/toolbar';\nimport {\n  type ColorScheme,\n  type ConnectorElementModel,\n  type ConnectorElementProps,\n  ConnectorEndpoint,\n  type ConnectorLabelProps,\n  ConnectorMode,\n  DEFAULT_FRONT_END_POINT_STYLE,\n  DEFAULT_REAR_END_POINT_STYLE,\n  PointStyle,\n} from '@lumensuite/affine-model';\nimport { LINE_COLORS, LineWidth, StrokeStyle } from '@lumensuite/affine-model';\nimport { WithDisposable } from '@lumensuite/block-std';\nimport { countBy, maxBy } from '@lumensuite/global/utils';\nimport { html, LitElement, nothing, type TemplateResult } from 'lit';\nimport { customElement, property, query } from 'lit/decorators.js';\nimport { choose } from 'lit/directives/choose.js';\nimport { join } from 'lit/directives/join.js';\nimport { repeat } from 'lit/directives/repeat.js';\nimport { styleMap } from 'lit/directives/style-map.js';\nimport { when } from 'lit/directives/when.js';\n\nimport type { EdgelessColorPickerButton } from '../../edgeless/components/color-picker/button.js';\nimport type { PickColorEvent } from '../../edgeless/components/color-picker/types.js';\nimport type { EdgelessRootBlockComponent } from '../../edgeless/edgeless-root-block.js';\n\nimport {\n  packColor,\n  packColorsWithColorScheme,\n} from '../../edgeless/components/color-picker/utils.js';\nimport '../../edgeless/components/panel/color-panel.js';\nimport {\n  type ColorEvent,\n  GET_DEFAULT_LINE_COLOR,\n} from '../../edgeless/components/panel/color-panel.js';\nimport {\n  type LineStyleEvent,\n  LineStylesPanel,\n} from '../../edgeless/components/panel/line-styles-panel.js';\nimport '../../edgeless/components/panel/stroke-style-panel.js';\nimport { mountConnectorLabelEditor } from '../../edgeless/utils/text.js';\nimport './change-text-menu.js';\n\nfunction getMostCommonColor(\n  elements: ConnectorElementModel[],\n  colorScheme: ColorScheme\n): string | null {\n  const colors = countBy(elements, (ele: ConnectorElementModel) => {\n    return typeof ele.stroke === 'object'\n      ? (ele.stroke[colorScheme] ?? ele.stroke.normal ?? null)\n      : ele.stroke;\n  });\n  const max = maxBy(Object.entries(colors), ([_k, count]) => count);\n  return max ? (max[0] as string) : null;\n}\n\nfunction getMostCommonMode(\n  elements: ConnectorElementModel[]\n): ConnectorMode | null {\n  const modes = countBy(elements, ele => ele.mode);\n  const max = maxBy(Object.entries(modes), ([_k, count]) => count);\n  return max ? (Number(max[0]) as ConnectorMode) : null;\n}\n\nfunction getMostCommonLineWidth(elements: ConnectorElementModel[]): LineWidth {\n  const sizes = countBy(elements, ele => ele.strokeWidth);\n  const max = maxBy(Object.entries(sizes), ([_k, count]) => count);\n  return max ? (Number(max[0]) as LineWidth) : LineWidth.Four;\n}\n\nexport function getMostCommonLineStyle(\n  elements: ConnectorElementModel[]\n): StrokeStyle | null {\n  const sizes = countBy(elements, ele => ele.strokeStyle);\n  const max = maxBy(Object.entries(sizes), ([_k, count]) => count);\n  return max ? (max[0] as StrokeStyle) : null;\n}\n\nfunction getMostCommonRough(elements: ConnectorElementModel[]): boolean {\n  const { trueCount, falseCount } = elements.reduce(\n    (counts, ele) => {\n      if (ele.rough) {\n        counts.trueCount++;\n      } else {\n        counts.falseCount++;\n      }\n      return counts;\n    },\n    { trueCount: 0, falseCount: 0 }\n  );\n\n  return trueCount > falseCount;\n}\n\nfunction getMostCommonEndpointStyle(\n  elements: ConnectorElementModel[],\n  endpoint: ConnectorEndpoint\n): PointStyle | null {\n  const field =\n    endpoint === ConnectorEndpoint.Front\n      ? 'frontEndpointStyle'\n      : 'rearEndpointStyle';\n  const modes = countBy(elements, ele => ele[field]);\n  const max = maxBy(Object.entries(modes), ([_k, count]) => count);\n  return max ? (max[0] as PointStyle) : null;\n}\n\nfunction notEqual<\n  K extends keyof Omit<ConnectorElementProps, keyof ConnectorLabelProps>,\n>(key: K, value: ConnectorElementProps[K]) {\n  return (element: ConnectorElementModel) => element[key] !== value;\n}\n\ninterface EndpointStyle {\n  value: PointStyle;\n  icon: TemplateResult<1>;\n}\n\nconst STYLE_LIST = [\n  {\n    name: 'General',\n    value: false,\n    icon: GeneralStyleIcon,\n  },\n  {\n    name: 'Scribbled',\n    value: true,\n    icon: ScribbledStyleIcon,\n  },\n] as const;\n\nconst STYLE_CHOOSE: [boolean, () => TemplateResult<1>][] = [\n  [false, () => GeneralStyleIcon],\n  [true, () => ScribbledStyleIcon],\n] as const;\n\nconst FRONT_ENDPOINT_STYLE_LIST: EndpointStyle[] = [\n  {\n    value: PointStyle.None,\n    icon: ConnectorEndpointNoneIcon,\n  },\n  {\n    value: PointStyle.Arrow,\n    icon: FrontEndpointArrowIcon,\n  },\n  {\n    value: PointStyle.Triangle,\n    icon: FrontEndpointTriangleIcon,\n  },\n  {\n    value: PointStyle.Circle,\n    icon: FrontEndpointCircleIcon,\n  },\n  {\n    value: PointStyle.Diamond,\n    icon: FrontEndpointDiamondIcon,\n  },\n] as const;\n\nconst REAR_ENDPOINT_STYLE_LIST: EndpointStyle[] = [\n  {\n    value: PointStyle.Diamond,\n    icon: RearEndpointDiamondIcon,\n  },\n  {\n    value: PointStyle.Circle,\n    icon: RearEndpointCircleIcon,\n  },\n  {\n    value: PointStyle.Triangle,\n    icon: RearEndpointTriangleIcon,\n  },\n  {\n    value: PointStyle.Arrow,\n    icon: RearEndpointArrowIcon,\n  },\n  {\n    value: PointStyle.None,\n    icon: ConnectorEndpointNoneIcon,\n  },\n] as const;\n\nconst MODE_LIST = [\n  {\n    name: 'Curve',\n    icon: ConnectorCWithArrowIcon,\n    value: ConnectorMode.Curve,\n  },\n  {\n    name: 'Elbowed',\n    icon: ConnectorXWithArrowIcon,\n    value: ConnectorMode.Orthogonal,\n  },\n  {\n    name: 'Straight',\n    icon: ConnectorLWithArrowIcon,\n    value: ConnectorMode.Straight,\n  },\n] as const;\n\nconst MODE_CHOOSE: [ConnectorMode, () => TemplateResult<1>][] = [\n  [ConnectorMode.Curve, () => ConnectorCWithArrowIcon],\n  [ConnectorMode.Orthogonal, () => ConnectorXWithArrowIcon],\n  [ConnectorMode.Straight, () => ConnectorLWithArrowIcon],\n] as const;\n\n@customElement('edgeless-change-connector-button')\nexport class EdgelessChangeConnectorButton extends WithDisposable(LitElement) {\n  pickColor = (event: PickColorEvent) => {\n    if (event.type === 'pick') {\n      this.elements.forEach(ele =>\n        this.service.updateElement(\n          ele.id,\n          packColor('stroke', { ...event.detail })\n        )\n      );\n      return;\n    }\n\n    this.elements.forEach(ele =>\n      ele[event.type === 'start' ? 'stash' : 'pop']('stroke')\n    );\n  };\n\n  get doc() {\n    return this.edgeless.doc;\n  }\n\n  get service() {\n    return this.edgeless.service;\n  }\n\n  private _addLabel() {\n    mountConnectorLabelEditor(this.elements[0], this.edgeless);\n  }\n\n  private _flipEndpointStyle(\n    frontEndpointStyle: PointStyle,\n    rearEndpointStyle: PointStyle\n  ) {\n    if (frontEndpointStyle === rearEndpointStyle) return;\n\n    this.elements.forEach(element =>\n      this.service.updateElement(element.id, {\n        frontEndpointStyle: rearEndpointStyle,\n        rearEndpointStyle: frontEndpointStyle,\n      })\n    );\n  }\n\n  private _getEndpointIcon(list: EndpointStyle[], style: PointStyle) {\n    return (\n      list.find(({ value }) => value === style)?.icon ||\n      ConnectorEndpointNoneIcon\n    );\n  }\n\n  private _setConnectorColor(stroke: string) {\n    this._setConnectorProp('stroke', stroke);\n  }\n\n  private _setConnectorMode(mode: ConnectorMode) {\n    this._setConnectorProp('mode', mode);\n  }\n\n  private _setConnectorPointStyle(end: ConnectorEndpoint, style: PointStyle) {\n    const props = {\n      [end === ConnectorEndpoint.Front\n        ? 'frontEndpointStyle'\n        : 'rearEndpointStyle']: style,\n    };\n    this.elements.forEach(element =>\n      this.service.updateElement(element.id, { ...props })\n    );\n  }\n\n  private _setConnectorProp<\n    K extends keyof Omit<ConnectorElementProps, keyof ConnectorLabelProps>,\n  >(key: K, value: ConnectorElementProps[K]) {\n    this.doc.captureSync();\n    this.elements\n      .filter(notEqual(key, value))\n      .forEach(element =>\n        this.service.updateElement(element.id, { [key]: value })\n      );\n  }\n\n  private _setConnectorRough(rough: boolean) {\n    this._setConnectorProp('rough', rough);\n  }\n\n  private _setConnectorStroke({ type, value }: LineStyleEvent) {\n    if (type === 'size') {\n      this._setConnectorStrokeWidth(value);\n      return;\n    }\n    this._setConnectorStrokeStyle(value);\n  }\n\n  private _setConnectorStrokeStyle(strokeStyle: StrokeStyle) {\n    this._setConnectorProp('strokeStyle', strokeStyle);\n  }\n\n  private _setConnectorStrokeWidth(strokeWidth: number) {\n    this._setConnectorProp('strokeWidth', strokeWidth);\n  }\n\n  private _showAddButtonOrTextMenu() {\n    if (this.elements.length === 1 && !this.elements[0].text) {\n      return 'button';\n    }\n    if (!this.elements.some(e => !e.text)) {\n      return 'menu';\n    }\n    return 'nothing';\n  }\n\n  override render() {\n    const colorScheme = this.edgeless.surface.renderer.getColorScheme();\n    const elements = this.elements;\n    const selectedColor =\n      getMostCommonColor(elements, colorScheme) ?? GET_DEFAULT_LINE_COLOR();\n    const selectedMode = getMostCommonMode(elements);\n    const selectedLineSize = getMostCommonLineWidth(elements) ?? LineWidth.Four;\n    const selectedRough = getMostCommonRough(elements);\n    const selectedLineStyle =\n      getMostCommonLineStyle(elements) ?? StrokeStyle.Solid;\n    const selectedStartPointStyle =\n      getMostCommonEndpointStyle(elements, ConnectorEndpoint.Front) ??\n      DEFAULT_FRONT_END_POINT_STYLE;\n    const selectedEndPointStyle =\n      getMostCommonEndpointStyle(elements, ConnectorEndpoint.Rear) ??\n      DEFAULT_REAR_END_POINT_STYLE;\n\n    return join(\n      [\n        when(\n          this.edgeless.doc.awarenessStore.getFlag('enable_color_picker'),\n          () => {\n            const { type, colors } = packColorsWithColorScheme(\n              colorScheme,\n              selectedColor,\n              elements[0].stroke\n            );\n\n            return html`\n              <edgeless-color-picker-button\n                class=\"stroke-color\"\n                .label=${'Stroke style'}\n                .pick=${this.pickColor}\n                .color=${selectedColor}\n                .colors=${colors}\n                .colorType=${type}\n                .palettes=${LINE_COLORS}\n                .hollowCircle=${true}\n              >\n                <div\n                  slot=\"other\"\n                  class=\"line-styles\"\n                  style=${styleMap({\n                    display: 'flex',\n                    flexDirection: 'row',\n                    gap: '8px',\n                    alignItems: 'center',\n                  })}\n                >\n                  ${LineStylesPanel({\n                    selectedLineSize: selectedLineSize,\n                    selectedLineStyle: selectedLineStyle,\n                    onClick: (e: LineStyleEvent) => this._setConnectorStroke(e),\n                    lineStyles: [StrokeStyle.Solid, StrokeStyle.Dash],\n                  })}\n                </div>\n                <editor-toolbar-separator\n                  slot=\"separator\"\n                  data-orientation=\"horizontal\"\n                ></editor-toolbar-separator>\n              </edgeless-color-picker-button>\n            `;\n          },\n          () => html`\n            <editor-menu-button\n              .contentPadding=${'8px'}\n              .button=${html`\n                <editor-icon-button\n                  aria-label=\"Stroke style\"\n                  .tooltip=${'Stroke style'}\n                >\n                  <edgeless-color-button\n                    .color=${selectedColor}\n                  ></edgeless-color-button>\n                </editor-icon-button>\n              `}\n            >\n              <stroke-style-panel\n                .strokeWidth=${selectedLineSize}\n                .strokeStyle=${selectedLineStyle}\n                .strokeColor=${selectedColor}\n                .setStrokeStyle=${(e: LineStyleEvent) =>\n                  this._setConnectorStroke(e)}\n                .setStrokeColor=${(e: ColorEvent) =>\n                  this._setConnectorColor(e.detail)}\n              >\n              </stroke-style-panel>\n            </editor-menu-button>\n          `\n        ),\n\n        html`\n          <editor-menu-button\n            .button=${html`\n              <editor-icon-button aria-label=\"Style\" .tooltip=${'Style'}>\n                ${choose(selectedRough, STYLE_CHOOSE)}${SmallArrowDownIcon}\n              </editor-icon-button>\n            `}\n          >\n            <div>\n              ${repeat(\n                STYLE_LIST,\n                item => item.name,\n                ({ name, value, icon }) => html`\n                  <editor-icon-button\n                    aria-label=${name}\n                    .tooltip=${name}\n                    .active=${selectedRough === value}\n                    .activeMode=${'background'}\n                    @click=${() => this._setConnectorRough(value)}\n                  >\n                    ${icon}\n                  </editor-icon-button>\n                `\n              )}\n            </div>\n          </editor-menu-button>\n        `,\n\n        html`\n          <editor-menu-button\n            .button=${html`\n              <editor-icon-button\n                aria-label=\"Start point style\"\n                .tooltip=${'Start point style'}\n              >\n                ${this._getEndpointIcon(\n                  FRONT_ENDPOINT_STYLE_LIST,\n                  selectedStartPointStyle\n                )}${SmallArrowDownIcon}\n              </editor-icon-button>\n            `}\n          >\n            <div>\n              ${repeat(\n                FRONT_ENDPOINT_STYLE_LIST,\n                item => item.value,\n                ({ value, icon }) => html`\n                  <editor-icon-button\n                    aria-label=${value}\n                    .tooltip=${value}\n                    .active=${selectedStartPointStyle === value}\n                    .activeMode=${'background'}\n                    @click=${() =>\n                      this._setConnectorPointStyle(\n                        ConnectorEndpoint.Front,\n                        value\n                      )}\n                  >\n                    ${icon}\n                  </editor-icon-button>\n                `\n              )}\n            </div>\n          </editor-menu-button>\n\n          <editor-icon-button\n            aria-label=\"Flip direction\"\n            .tooltip=${'Flip direction'}\n            .disabled=${false}\n            @click=${() =>\n              this._flipEndpointStyle(\n                selectedStartPointStyle,\n                selectedEndPointStyle\n              )}\n          >\n            ${FlipDirectionIcon}\n          </editor-icon-button>\n\n          <editor-menu-button\n            .button=${html`\n              <editor-icon-button\n                aria-label=\"End point style\"\n                .tooltip=${'End point style'}\n              >\n                ${this._getEndpointIcon(\n                  REAR_ENDPOINT_STYLE_LIST,\n                  selectedEndPointStyle\n                )}${SmallArrowDownIcon}\n              </editor-icon-button>\n            `}\n          >\n            <div>\n              ${repeat(\n                REAR_ENDPOINT_STYLE_LIST,\n                item => item.value,\n                ({ value, icon }) => html`\n                  <editor-icon-button\n                    aria-label=${value}\n                    .tooltip=${value}\n                    .active=${selectedEndPointStyle === value}\n                    .activeMode=${'background'}\n                    @click=${() =>\n                      this._setConnectorPointStyle(\n                        ConnectorEndpoint.Rear,\n                        value\n                      )}\n                  >\n                    ${icon}\n                  </editor-icon-button>\n                `\n              )}\n            </div>\n          </editor-menu-button>\n\n          <editor-menu-button\n            .button=${html`\n              <editor-icon-button\n                aria-label=\"Shape\"\n                .tooltip=${'Connector shape'}\n              >\n                ${choose(selectedMode, MODE_CHOOSE)}${SmallArrowDownIcon}\n              </editor-icon-button>\n            `}\n          >\n            <div>\n              ${repeat(\n                MODE_LIST,\n                item => item.name,\n                ({ name, value, icon }) => html`\n                  <editor-icon-button\n                    aria-label=${name}\n                    .tooltip=${name}\n                    .active=${selectedMode === value}\n                    .activeMode=${'background'}\n                    @click=${() => this._setConnectorMode(value)}\n                  >\n                    ${icon}\n                  </editor-icon-button>\n                `\n              )}\n            </div>\n          </editor-menu-button>\n        `,\n\n        choose<string, TemplateResult<1> | typeof nothing>(\n          this._showAddButtonOrTextMenu(),\n          [\n            [\n              'button',\n              () => html`\n                <editor-icon-button\n                  aria-label=\"Add text\"\n                  .tooltip=${'Add text'}\n                  @click=${this._addLabel}\n                >\n                  ${AddTextIcon}\n                </editor-icon-button>\n              `,\n            ],\n            [\n              'menu',\n              () => html`\n                <edgeless-change-text-menu\n                  .elementType=${'connector'}\n                  .elements=${this.elements}\n                  .edgeless=${this.edgeless}\n                ></edgeless-change-text-menu>\n              `,\n            ],\n            ['nothing', () => nothing],\n          ]\n        ),\n      ].filter(button => button !== nothing),\n      renderToolbarSeparator\n    );\n  }\n\n  @property({ attribute: false })\n  accessor edgeless!: EdgelessRootBlockComponent;\n\n  @property({ attribute: false })\n  accessor elements: ConnectorElementModel[] = [];\n\n  @query('edgeless-color-picker-button.stroke-color')\n  accessor strokeColorButton!: EdgelessColorPickerButton;\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'edgeless-change-connector-button': EdgelessChangeConnectorButton;\n  }\n}\n\nexport function renderConnectorButton(\n  edgeless: EdgelessRootBlockComponent,\n  elements?: ConnectorElementModel[]\n) {\n  if (!elements?.length) return nothing;\n\n  return html`\n    <edgeless-change-connector-button\n      .elements=${elements}\n      .edgeless=${edgeless}\n    >\n    </edgeless-change-connector-button>\n  `;\n}\n"]}