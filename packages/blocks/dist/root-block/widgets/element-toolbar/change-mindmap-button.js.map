{"version":3,"file":"change-mindmap-button.js","sourceRoot":"","sources":["../../../../src/root-block/widgets/element-toolbar/change-mindmap-button.ts"],"names":[],"mappings":"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","sourcesContent":["import type { MindmapElementModel } from '@blocksuite/affine-block-surface';\nimport type { ShapeElementModel } from '@blocksuite/affine-model';\n\nimport {\n  MindmapBalanceLayoutIcon,\n  MindmapLeftLayoutIcon,\n  MindmapRightLayoutIcon,\n  MindmapStyleFour,\n  MindmapStyleIcon,\n  MindmapStyleOne,\n  MindmapStyleThree,\n  MindmapStyleTwo,\n  SmallArrowDownIcon,\n} from '@blocksuite/affine-components/icons';\nimport { renderToolbarSeparator } from '@blocksuite/affine-components/toolbar';\nimport { LayoutType, MindmapStyle } from '@blocksuite/affine-model';\nimport { WithDisposable } from '@blocksuite/block-std';\nimport { countBy, maxBy } from '@blocksuite/global/utils';\nimport { css, html, LitElement, nothing, type TemplateResult } from 'lit';\nimport { customElement, property, state } from 'lit/decorators.js';\nimport { join } from 'lit/directives/join.js';\nimport { repeat } from 'lit/directives/repeat.js';\n\nimport type { EdgelessRootBlockComponent } from '../../edgeless/edgeless-root-block.js';\n\nconst MINDMAP_STYLE_LIST = [\n  {\n    value: MindmapStyle.ONE,\n    icon: MindmapStyleOne,\n  },\n  {\n    value: MindmapStyle.FOUR,\n    icon: MindmapStyleFour,\n  },\n  {\n    value: MindmapStyle.THREE,\n    icon: MindmapStyleThree,\n  },\n  {\n    value: MindmapStyle.TWO,\n    icon: MindmapStyleTwo,\n  },\n];\n\ninterface LayoutItem {\n  name: string;\n  value: LayoutType;\n  icon: TemplateResult<1>;\n}\n\nconst MINDMAP_LAYOUT_LIST: LayoutItem[] = [\n  {\n    name: 'Left',\n    value: LayoutType.LEFT,\n    icon: MindmapLeftLayoutIcon,\n  },\n  {\n    name: 'Radial',\n    value: LayoutType.BALANCE,\n    icon: MindmapBalanceLayoutIcon,\n  },\n  {\n    name: 'Right',\n    value: LayoutType.RIGHT,\n    icon: MindmapRightLayoutIcon,\n  },\n] as const;\n\n@customElement('edgeless-change-mindmap-style-panel')\nclass EdgelessChangeMindmapStylePanel extends LitElement {\n  static override styles = css`\n    :host {\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      flex-direction: row;\n      gap: 8px;\n      background: var(--affine-background-overlay-panel-color);\n    }\n\n    .style-item {\n      border-radius: 4px;\n    }\n\n    .style-item > svg {\n      vertical-align: middle;\n    }\n\n    .style-item.active,\n    .style-item:hover {\n      cursor: pointer;\n      background-color: var(--affine-hover-color);\n    }\n  `;\n\n  override render() {\n    return repeat(\n      MINDMAP_STYLE_LIST,\n      item => item.value,\n      ({ value, icon }) => html`\n        <div\n          role=\"button\"\n          class=\"style-item ${value === this.mindmapStyle ? 'active' : ''}\"\n          @click=${() => this.onSelect(value)}\n        >\n          ${icon}\n        </div>\n      `\n    );\n  }\n\n  @property({ attribute: false })\n  accessor mindmapStyle!: MindmapStyle | null;\n\n  @property({ attribute: false })\n  accessor onSelect!: (style: MindmapStyle) => void;\n}\n\n@customElement('edgeless-change-mindmap-layout-panel')\nclass EdgelessChangeMindmapLayoutPanel extends LitElement {\n  static override styles = css`\n    :host {\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      flex-direction: row;\n      gap: 8px;\n    }\n  `;\n\n  override render() {\n    return repeat(\n      MINDMAP_LAYOUT_LIST,\n      item => item.value,\n      ({ name, value, icon }) => html`\n        <editor-icon-button\n          aria-label=${name}\n          .tooltip=${name}\n          .tipPosition=${'top'}\n          .active=${this.mindmapLayout === value}\n          .activeMode=${'background'}\n          @click=${() => this.onSelect(value)}\n        >\n          ${icon}\n        </editor-icon-button>\n      `\n    );\n  }\n\n  @property({ attribute: false })\n  accessor mindmapLayout!: LayoutType | null;\n\n  @property({ attribute: false })\n  accessor onSelect!: (style: LayoutType) => void;\n}\n\n@customElement('edgeless-change-mindmap-button')\nexport class EdgelessChangeMindmapButton extends WithDisposable(LitElement) {\n  private _updateLayoutType = (layoutType: LayoutType) => {\n    this.edgeless.service.editPropsStore.recordLastProps('mindmap', {\n      layoutType,\n    });\n    this.elements.forEach(element => {\n      element.layoutType = layoutType;\n      element.layout();\n    });\n    this.layoutType = layoutType;\n  };\n\n  private _updateStyle = (style: MindmapStyle) => {\n    this.edgeless.service.editPropsStore.recordLastProps('mindmap', { style });\n    this._mindmaps.forEach(element => (element.style = style));\n  };\n\n  private get _mindmaps() {\n    const mindmaps = new Set<MindmapElementModel>();\n\n    return this.elements.reduce((_, el) => {\n      mindmaps.add(el);\n\n      return mindmaps;\n    }, mindmaps);\n  }\n\n  get layout() {\n    const layoutType = this.layoutType ?? this._getCommonLayoutType();\n    return MINDMAP_LAYOUT_LIST.find(item => item.value === layoutType)!;\n  }\n\n  private _getCommonLayoutType() {\n    const values = countBy(this.elements, element => element.layoutType);\n    const max = maxBy(Object.entries(values), ([_k, count]) => count);\n    return max ? (Number(max[0]) as LayoutType) : LayoutType.BALANCE;\n  }\n\n  private _getCommonStyle() {\n    const values = countBy(this.elements, element => element.style);\n    const max = maxBy(Object.entries(values), ([_k, count]) => count);\n    return max ? (Number(max[0]) as MindmapStyle) : MindmapStyle.ONE;\n  }\n\n  private _isSubnode() {\n    return (\n      this.nodes.length === 1 &&\n      (this.nodes[0].group as MindmapElementModel).tree.element !==\n        this.nodes[0]\n    );\n  }\n\n  override render() {\n    return join(\n      [\n        html`\n          <editor-menu-button\n            .contentPadding=${'8px'}\n            .button=${html`\n              <editor-icon-button aria-label=\"Style\" .tooltip=${'Style'}>\n                ${MindmapStyleIcon}${SmallArrowDownIcon}\n              </editor-icon-button>\n            `}\n          >\n            <edgeless-change-mindmap-style-panel\n              .mindmapStyle=${this._getCommonStyle()}\n              .onSelect=${this._updateStyle}\n            >\n            </edgeless-change-mindmap-style-panel>\n          </editor-menu-button>\n        `,\n\n        this._isSubnode()\n          ? nothing\n          : html`\n              <editor-menu-button\n                .button=${html`\n                  <editor-icon-button aria-label=\"Layout\" .tooltip=${'Layout'}>\n                    ${this.layout.icon}${SmallArrowDownIcon}\n                  </editor-icon-button>\n                `}\n              >\n                <edgeless-change-mindmap-layout-panel\n                  .mindmapLayout=${this.layout.value}\n                  .onSelect=${this._updateLayoutType}\n                >\n                </edgeless-change-mindmap-layout-panel>\n              </editor-menu-button>\n            `,\n      ].filter(button => button !== nothing),\n      renderToolbarSeparator\n    );\n  }\n\n  @property({ attribute: false })\n  accessor edgeless!: EdgelessRootBlockComponent;\n\n  @property({ attribute: false })\n  accessor elements!: MindmapElementModel[];\n\n  @state()\n  accessor layoutType!: LayoutType;\n\n  @property({ attribute: false })\n  accessor nodes!: ShapeElementModel[];\n}\n\nexport function renderMindmapButton(\n  edgeless: EdgelessRootBlockComponent,\n  elements?: (ShapeElementModel | MindmapElementModel)[]\n) {\n  if (!elements?.length) return nothing;\n\n  const mindmaps: MindmapElementModel[] = [];\n\n  elements.forEach(e => {\n    if (e.type === 'mindmap') {\n      mindmaps.push(e as MindmapElementModel);\n    }\n\n    const group = edgeless.service.surface.getGroup(e.id);\n\n    if (group?.type === 'mindmap') {\n      mindmaps.push(group as MindmapElementModel);\n    }\n  });\n\n  if (mindmaps.length === 0) {\n    return nothing;\n  }\n\n  return html`\n    <edgeless-change-mindmap-button\n      .elements=${mindmaps}\n      .nodes=${elements.filter(e => e.type === 'shape')}\n      .edgeless=${edgeless}\n    >\n    </edgeless-change-mindmap-button>\n  `;\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'edgeless-change-mindmap-style-panel': EdgelessChangeMindmapStylePanel;\n    'edgeless-change-mindmap-layout-panel': EdgelessChangeMindmapLayoutPanel;\n    'edgeless-change-mindmap-button': EdgelessChangeMindmapButton;\n  }\n}\n"]}