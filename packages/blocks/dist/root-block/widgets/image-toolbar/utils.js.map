{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../../../src/root-block/widgets/image-toolbar/utils.ts"],"names":[],"mappings":"AAAA,OAAO,EACL,aAAa,EACb,kBAAkB,GACnB,MAAM,iCAAiC,CAAC;AACzC,OAAO,EAAE,YAAY,EAAE,MAAM,0BAA0B,CAAC;AAIxD,MAAM,UAAU,SAAS,CACvB,KAA0B,EAC1B,eAAiC;IAEjC,MAAM,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC;IAC1B,MAAM,UAAU,GAAG,aAAa,CAAC,KAAK,CAAC,CAAC;IACxC,MAAM,EAAE,KAAK,EAAE,MAAM,EAAE,IAAI,EAAE,MAAM,EAAE,MAAM,EAAE,GAAG,cAAc,EAAE,GAAG,UAAU,CAAC;IAE9E,MAAM,EAAE,GAAG,EAAE,GAAG,KAAK,CAAC;IACtB,MAAM,MAAM,GAAG,GAAG,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;IACpC,YAAY,CAAC,MAAM,EAAE,kBAAkB,CAAC,CAAC;IAEzC,MAAM,KAAK,GAAG,MAAM,EAAE,QAAQ,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;IAC9C,MAAM,WAAW,GAAG,GAAG,CAAC,QAAQ,CAC9B,KAAK,CAAC,OAA6B,EACnC,cAAc,EACd,MAAM,EACN,KAAK,GAAG,CAAC,CACV,CAAC;IACF,eAAe,EAAE,KAAK,EAAE,CAAC;IAEzB,MAAM,UAAU,GAAG,KAAK,CAAC,IAAI,CAAC;IAC9B,UAAU,CAAC,cAAc;SACtB,IAAI,CAAC,GAAG,EAAE;QACT,MAAM,EAAE,SAAS,EAAE,GAAG,UAAU,CAAC;QACjC,SAAS,CAAC,QAAQ,CAAC,MAAM,EAAE;YACzB,SAAS,CAAC,MAAM,CAAC,OAAO,EAAE;gBACxB,OAAO,EAAE,WAAW;aACrB,CAAC;SACH,CAAC,CAAC;QACH,IAAI,kBAAkB,CAAC,UAAU,CAAC,EAAE,CAAC;YACnC,MAAM,gBAAgB,GAAG,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC;YAC/D,IAAI,gBAAgB,EAAE,CAAC;gBACrB,gBAAgB,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;YACxC,CAAC;QACH,CAAC;IACH,CAAC,CAAC;SACD,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;AAC1B,CAAC","sourcesContent":["import {\n  getBlockProps,\n  isInsidePageEditor,\n} from '@lumensuite/affine-shared/utils';\nimport { assertExists } from '@lumensuite/global/utils';\n\nimport type { ImageBlockComponent } from '../../../image-block/image-block.js';\n\nexport function duplicate(\n  block: ImageBlockComponent,\n  abortController?: AbortController\n) {\n  const model = block.model;\n  const blockProps = getBlockProps(model);\n  const { width, height, xywh, rotate, zIndex, ...duplicateProps } = blockProps;\n\n  const { doc } = model;\n  const parent = doc.getParent(model);\n  assertExists(parent, 'Parent not found');\n\n  const index = parent?.children.indexOf(model);\n  const duplicateId = doc.addBlock(\n    model.flavour as LumenSuite.Flavour,\n    duplicateProps,\n    parent,\n    index + 1\n  );\n  abortController?.abort();\n\n  const editorHost = block.host;\n  editorHost.updateComplete\n    .then(() => {\n      const { selection } = editorHost;\n      selection.setGroup('note', [\n        selection.create('block', {\n          blockId: duplicateId,\n        }),\n      ]);\n      if (isInsidePageEditor(editorHost)) {\n        const duplicateElement = editorHost.view.getBlock(duplicateId);\n        if (duplicateElement) {\n          duplicateElement.scrollIntoView(true);\n        }\n      }\n    })\n    .catch(console.error);\n}\n"]}