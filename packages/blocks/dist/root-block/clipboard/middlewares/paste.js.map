{"version":3,"file":"paste.js","sourceRoot":"","sources":["../../../../src/root-block/clipboard/middlewares/paste.ts"],"names":[],"mappings":"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","sourcesContent":["import type { ParagraphBlockModel } from '@lumensuite/affine-model';\n\nimport {\n  QuickSearchProvider,\n  type QuickSearchService,\n  TelemetryProvider,\n} from '@lumensuite/affine-shared/services';\nimport {\n  BLOCK_ID_ATTR,\n  type BlockComponent,\n  type EditorHost,\n  type TextRangePoint,\n  type TextSelection,\n} from '@lumensuite/block-std';\nimport { assertExists } from '@lumensuite/global/utils';\nimport {\n  type BlockModel,\n  type BlockSnapshot,\n  type DeltaOperation,\n  DocCollection,\n  fromJSON,\n  type JobMiddleware,\n  type SliceSnapshot,\n  type Text,\n} from '@lumensuite/store';\n\nimport { matchFlavours } from '../../../_common/utils/index.js';\nimport { extractSearchParams } from '../../../_common/utils/url.js';\n\nfunction findLastMatchingNode(\n  root: BlockSnapshot[],\n  fn: (node: BlockSnapshot) => boolean\n): BlockSnapshot | null {\n  let lastMatchingNode: BlockSnapshot | null = null;\n\n  function traverse(node: BlockSnapshot) {\n    if (fn(node)) {\n      lastMatchingNode = node;\n    }\n    if (node.children) {\n      for (const child of node.children) {\n        traverse(child);\n      }\n    }\n  }\n\n  root.forEach(traverse);\n  return lastMatchingNode;\n}\n\n// find last child that has text as prop\nconst findLast = (snapshot: SliceSnapshot): BlockSnapshot | null => {\n  return findLastMatchingNode(snapshot.content, node => !!node.props.text);\n};\n\nclass PointState {\n  private _blockFromPath = (path: string) => {\n    const block = this.std.view.getBlock(path);\n    assertExists(block);\n    return block;\n  };\n\n  readonly block: BlockComponent;\n\n  readonly model: BlockModel;\n\n  readonly text: Text;\n\n  constructor(\n    readonly std: EditorHost['std'],\n    readonly point: TextRangePoint\n  ) {\n    this.block = this._blockFromPath(point.blockId);\n    this.model = this.block.model;\n    const text = this.model.text;\n    assertExists(text);\n    this.text = text;\n  }\n}\n\nclass PasteTr {\n  private _getDeltas = () => {\n    const firstTextSnapshot = this._textFromSnapshot(this.firstSnapshot!);\n    const lastTextSnapshot = this._textFromSnapshot(this.lastSnapshot!);\n    const fromDelta = this.fromPointState.text.sliceToDelta(\n      0,\n      this.fromPointState.point.index\n    );\n    const toDelta = this.endPointState.text.sliceToDelta(\n      this.endPointState.point.index + this.endPointState.point.length,\n      this.endPointState.text.length\n    );\n    const firstDelta = firstTextSnapshot.delta;\n    const lastDelta = lastTextSnapshot.delta;\n    return {\n      firstTextSnapshot,\n      lastTextSnapshot,\n      fromDelta,\n      toDelta,\n      firstDelta,\n      lastDelta,\n    };\n  };\n\n  private _mergeCode = () => {\n    const { toDelta } = this._getDeltas();\n    const deltas: DeltaOperation[] = [\n      { retain: this.fromPointState.point.index },\n      this.fromPointState.text.length - this.fromPointState.point.index\n        ? {\n            delete:\n              this.fromPointState.text.length - this.fromPointState.point.index,\n          }\n        : {},\n    ];\n    let i = 0;\n    for (const blockSnapshot of this.snapshot.content) {\n      if (blockSnapshot.props.text) {\n        const text = this._textFromSnapshot(blockSnapshot);\n        if (i > 0) {\n          deltas.push({ insert: '\\n' });\n        }\n        deltas.push(...text.delta);\n        i++;\n      } else {\n        break;\n      }\n    }\n    this.fromPointState.text.applyDelta(deltas.concat(toDelta));\n    this.snapshot.content = [];\n  };\n\n  private _mergeMultiple = () => {\n    this.firstSnapshot!.flavour = this.fromPointState.model.flavour;\n    if (\n      this.firstSnapshot!.props.type &&\n      (this.fromPointState.text.length > 0 || this.firstSnapshotIsPlainText)\n    ) {\n      this.firstSnapshot!.props.type = (\n        this.fromPointState.model as ParagraphBlockModel\n      ).type;\n    }\n    if (this.lastSnapshot!.props.type && this.to) {\n      this.lastSnapshot!.flavour = this.endPointState.model.flavour;\n      this.lastSnapshot!.props.type = (\n        this.endPointState.model as ParagraphBlockModel\n      ).type;\n    }\n\n    const { lastTextSnapshot, toDelta, firstDelta, lastDelta } =\n      this._getDeltas();\n\n    this.fromPointState.text.applyDelta([\n      { retain: this.fromPointState.point.index },\n      this.fromPointState.text.length - this.fromPointState.point.index\n        ? {\n            delete:\n              this.fromPointState.text.length - this.fromPointState.point.index,\n          }\n        : {},\n      ...firstDelta,\n    ]);\n\n    const removedFirstSnapshot = this.snapshot.content.shift();\n    removedFirstSnapshot?.children.map(block => {\n      this.snapshot.content.unshift(block);\n    });\n    this.pasteStartModelChildrenCount =\n      removedFirstSnapshot?.children.length ?? 0;\n\n    this._updateSnapshot();\n\n    lastTextSnapshot.delta = [...lastDelta, ...toDelta];\n  };\n\n  private _mergeSingle = () => {\n    const { firstDelta } = this._getDeltas();\n    this.fromPointState.text.applyDelta([\n      { retain: this.fromPointState.point.index },\n      this.fromPointState.point.length\n        ? { delete: this.fromPointState.point.length }\n        : {},\n      ...firstDelta,\n    ]);\n    this.snapshot.content.splice(0, 1);\n    this._updateSnapshot();\n  };\n\n  private _textFromSnapshot = (snapshot: BlockSnapshot) => {\n    return (snapshot.props.text ?? { delta: [] }) as Record<\n      'delta',\n      DeltaOperation[]\n    >;\n  };\n\n  private _updateSnapshot = () => {\n    if (this.snapshot.content.length === 0) {\n      this.firstSnapshot = this.lastSnapshot = undefined;\n      return;\n    }\n    this.firstSnapshot = this.snapshot.content[0];\n    this.lastSnapshot = findLast(this.snapshot) ?? this.firstSnapshot;\n  };\n\n  private readonly endPointState: PointState;\n\n  private firstSnapshot?: BlockSnapshot;\n\n  private readonly firstSnapshotIsPlainText: boolean;\n\n  private readonly fromPointState: PointState;\n\n  private readonly lastIndex: number;\n\n  private lastSnapshot?: BlockSnapshot;\n\n  // The model that the cursor should focus on after pasting\n  private pasteStartModel: BlockModel | null = null;\n\n  private pasteStartModelChildrenCount = 0;\n\n  private readonly to: TextRangePoint | null;\n\n  canMerge = () => {\n    if (this.snapshot.content.length === 0) {\n      return false;\n    }\n    if (!this.firstSnapshot!.props.text) {\n      return false;\n    }\n    const firstTextSnapshot = this._textFromSnapshot(this.firstSnapshot!);\n    const lastTextSnapshot = this._textFromSnapshot(this.lastSnapshot!);\n    return (\n      firstTextSnapshot &&\n      lastTextSnapshot &&\n      ((this.fromPointState.text.length > 0 &&\n        this.endPointState.text.length > 0) ||\n        this.firstSnapshotIsPlainText)\n    );\n  };\n\n  convertToLinkedDoc = async () => {\n    const quickSearchService = this.std.getOptional(QuickSearchProvider);\n\n    if (!quickSearchService) {\n      return;\n    }\n\n    const linkToDocId = new Map<string, string | null>();\n\n    for (const blockSnapshot of this.snapshot.content) {\n      if (blockSnapshot.props.text) {\n        const [delta, transformed] = await this._transformLinkDelta(\n          this._textFromSnapshot(blockSnapshot).delta,\n          linkToDocId,\n          quickSearchService\n        );\n        const model = this.std.doc.getBlockById(blockSnapshot.id);\n        if (transformed && model) {\n          this.std.doc.captureSync();\n          this.std.doc.transact(() => {\n            const text = model.text as Text;\n            text.clear();\n            text.applyDelta(delta);\n          });\n        }\n      }\n    }\n\n    const fromPointStateText = this.fromPointState.model.text;\n    if (!fromPointStateText) {\n      return;\n    }\n    const [delta, transformed] = await this._transformLinkDelta(\n      fromPointStateText.toDelta(),\n      linkToDocId,\n      quickSearchService\n    );\n    if (!transformed) {\n      return;\n    }\n    this.std.doc.captureSync();\n    this.std.doc.transact(() => {\n      fromPointStateText.clear();\n      fromPointStateText.applyDelta(delta);\n    });\n  };\n\n  focusPasted = () => {\n    const host = this.std.host;\n\n    const cursorBlock =\n      this.fromPointState.model.flavour === 'affine:code' || !this.lastSnapshot\n        ? this.std.doc.getBlock(this.fromPointState.model.id)\n        : this.std.doc.getBlock(this.lastSnapshot.id);\n    assertExists(cursorBlock);\n    const { model: cursorModel } = cursorBlock;\n\n    host.updateComplete\n      .then(() => {\n        const target = this.std.host.querySelector<BlockComponent>(\n          `[${BLOCK_ID_ATTR}=\"${cursorModel.id}\"]`\n        );\n        if (!target) {\n          return;\n        }\n        if (!cursorModel.text) {\n          if (matchFlavours(cursorModel, ['affine:image'])) {\n            const selection = this.std.selection.create('image', {\n              blockId: target.blockId,\n            });\n            this.std.selection.setGroup('note', [selection]);\n            return;\n          }\n          const selection = this.std.selection.create('block', {\n            blockId: target.blockId,\n          });\n          this.std.selection.setGroup('note', [selection]);\n          return;\n        }\n        const selection = this.std.selection.create('text', {\n          from: {\n            blockId: target.blockId,\n            index: cursorModel.text ? this.lastIndex : 0,\n            length: 0,\n          },\n          to: null,\n        });\n        this.std.selection.setGroup('note', [selection]);\n      })\n      .catch(console.error);\n  };\n\n  pasted = () => {\n    const needCleanup = this.canMerge() || this.endPointState.text.length === 0;\n    if (!needCleanup) {\n      return;\n    }\n\n    if (this.to) {\n      const context = this.std.command.exec('getSelectedModels', {\n        types: ['text'],\n      });\n      for (const model of context.selectedModels ?? []) {\n        if (\n          [this.endPointState.model.id, this.fromPointState.model.id].includes(\n            model.id\n          ) ||\n          this.snapshot.content.map(block => block.id).includes(model.id)\n        ) {\n          continue;\n        }\n        this.std.doc.deleteBlock(model);\n      }\n      this.std.doc.deleteBlock(\n        this.endPointState.model,\n        this.pasteStartModel\n          ? {\n              bringChildrenTo: this.pasteStartModel,\n            }\n          : undefined\n      );\n    }\n\n    if (this.lastSnapshot) {\n      const lastBlock = this.std.doc.getBlock(this.lastSnapshot.id);\n      assertExists(lastBlock);\n      const { model: lastModel } = lastBlock;\n      this.std.doc.moveBlocks(this.fromPointState.model.children, lastModel);\n    }\n\n    this.std.doc.moveBlocks(\n      this.std.doc\n        .getNexts(this.fromPointState.model.id)\n        .slice(0, this.pasteStartModelChildrenCount),\n      this.fromPointState.model\n    );\n    if (\n      !this.firstSnapshotIsPlainText &&\n      this.fromPointState.text.length == 0\n    ) {\n      this.std.doc.deleteBlock(this.fromPointState.model);\n    }\n  };\n\n  constructor(\n    readonly std: EditorHost['std'],\n    readonly text: TextSelection,\n    readonly snapshot: SliceSnapshot\n  ) {\n    const { from, to } = text;\n    const end = to ?? from;\n\n    this.to = to;\n\n    this.fromPointState = new PointState(std, from);\n    this.endPointState = new PointState(std, end);\n\n    this.firstSnapshot = snapshot.content[0];\n    this.lastSnapshot = findLast(snapshot) ?? this.firstSnapshot;\n    if (\n      this.firstSnapshot !== this.lastSnapshot &&\n      this.lastSnapshot.props.text &&\n      !(\n        matchFlavours(this.fromPointState.model, ['affine:code']) &&\n        matchFlavours(this.endPointState.model, ['affine:code'])\n      )\n    ) {\n      const text = fromJSON(this.lastSnapshot.props.text) as Text;\n      const doc = new DocCollection.Y.Doc();\n      const temp = doc.getMap('temp');\n      temp.set('text', text.yText);\n      this.lastIndex = text.length;\n    } else {\n      this.lastIndex =\n        this.fromPointState.point.index +\n        this.snapshot.content\n          .map(snapshot =>\n            this._textFromSnapshot(snapshot)\n              .delta.map(op => {\n                if (op.insert) {\n                  return op.insert.length;\n                } else if (op.delete) {\n                  return -op.delete;\n                } else {\n                  return 0;\n                }\n              })\n              .reduce((a, b) => a + b, 0)\n          )\n          .reduce((a, b) => a + b + 1, -1);\n    }\n    this.firstSnapshotIsPlainText =\n      this.firstSnapshot.flavour === 'affine:paragraph' &&\n      this.firstSnapshot.props.type === 'text';\n  }\n\n  private async _transformLinkDelta(\n    delta: DeltaOperation[],\n    linkToDocId: Map<string, string | null>,\n    quickSearchService: QuickSearchService\n  ): Promise<[DeltaOperation[], boolean]> {\n    let transformed = false;\n    const needToConvert = new Map<DeltaOperation, string>();\n    for (const op of delta) {\n      if (op.attributes?.link) {\n        let docId = linkToDocId.get(op.attributes.link);\n        if (docId === undefined) {\n          const searchResult = await quickSearchService.searchDoc({\n            userInput: op.attributes.link,\n            skipSelection: true,\n            action: 'insert',\n          });\n          if (searchResult && 'docId' in searchResult) {\n            const doc = this.std.collection.getDoc(searchResult.docId);\n            if (doc) {\n              docId = doc.id;\n              linkToDocId.set(op.attributes.link, doc.id);\n            }\n          }\n        }\n        if (docId) {\n          needToConvert.set(op, docId);\n        }\n      }\n    }\n    const newDelta = delta.map(op => {\n      if (needToConvert.has(op)) {\n        const link = op.attributes?.link;\n\n        if (!link) {\n          return { ...op };\n        }\n\n        const pageId = needToConvert.get(op)!;\n        const reference = { pageId, type: 'LinkedPage' };\n\n        const extracted = extractSearchParams(link);\n        const isLinkToNode = Boolean(\n          extracted?.params?.mode &&\n            (extracted.params.blockIds?.length ||\n              extracted.params.elementIds?.length)\n        );\n\n        Object.assign(reference, extracted);\n\n        this.std.getOptional(TelemetryProvider)?.track('LinkedDocCreated', {\n          page: 'doc editor',\n          category: 'pasted link',\n          type: isLinkToNode ? 'block' : 'doc',\n          other: 'existing doc',\n        });\n\n        transformed = true;\n\n        return {\n          ...op,\n          attributes: { reference },\n          insert: ' ',\n        };\n      }\n\n      return { ...op };\n    });\n    return [newDelta, transformed];\n  }\n\n  merge() {\n    if (this.fromPointState.model.flavour === 'affine:code' && !this.to) {\n      this._mergeCode();\n      return;\n    }\n\n    if (this.firstSnapshot === this.lastSnapshot) {\n      this._mergeSingle();\n      return;\n    }\n\n    this._mergeMultiple();\n  }\n}\n\nfunction flatNote(snapshot: SliceSnapshot) {\n  if (snapshot.content[0]?.flavour === 'affine:note') {\n    snapshot.content = snapshot.content[0].children;\n  }\n}\n\nexport const pasteMiddleware = (std: EditorHost['std']): JobMiddleware => {\n  return ({ slots }) => {\n    let tr: PasteTr | undefined;\n    slots.beforeImport.on(payload => {\n      if (payload.type === 'slice') {\n        const { snapshot } = payload;\n        flatNote(snapshot);\n\n        const text = std.selection.find('text');\n        if (!text) {\n          return;\n        }\n        tr = new PasteTr(std, text, payload.snapshot);\n        if (tr.canMerge()) {\n          tr.merge();\n        }\n      }\n    });\n    slots.afterImport.on(payload => {\n      if (tr && payload.type === 'slice') {\n        const context = std.command.exec('getSelectedModels', {\n          types: ['block'],\n        });\n        for (const model of context.selectedModels ?? []) {\n          // Only delete block when there is a paste tree.\n          // In the duplicate case, the block should be kept.\n          std.doc.deleteBlock(model);\n        }\n        tr.pasted();\n        tr.focusPasted();\n        tr.convertToLinkedDoc().catch(console.error);\n      }\n    });\n  };\n};\n"]}