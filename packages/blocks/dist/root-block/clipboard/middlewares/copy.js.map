{"version":3,"file":"copy.js","sourceRoot":"","sources":["../../../../src/root-block/clipboard/middlewares/copy.ts"],"names":[],"mappings":"AAQA,OAAO,EAAE,aAAa,EAAE,MAAM,iCAAiC,CAAC;AAEhE,MAAM,WAAW,GAAG,CAClB,KAAqB,EACrB,QAAuB,EACvB,KAAiB,EACjB,EAAE;IACF,MAAM,EAAE,KAAK,EAAE,MAAM,EAAE,GAAG,KAAK,CAAC;IAChC,gEAAgE;IAChE,IAAI,aAAa,CAAC,KAAK,EAAE,CAAC,aAAa,CAAC,CAAC,EAAE,CAAC;QAC1C,IAAI,MAAM,KAAK,CAAC;YAAE,OAAO;QACxB,QAAQ,CAAC,KAAK,CAAC,KAAiC,CAAC,KAAK;YACrD,KAAK,CAAC,KAAK,CAAC,YAAY,CAAC,KAAK,EAAE,MAAM,GAAG,KAAK,CAAC,CAAC;QAClD,OAAO;IACT,CAAC;IAED,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,IAAI,MAAM,KAAK,CAAC,EAAE,CAAC;QACzC,OAAO;IACT,CAAC;IACA,QAAQ,CAAC,KAAK,CAAC,IAAgC,CAAC,KAAK;QACpD,KAAK,CAAC,IAAI,EAAE,YAAY,CAAC,KAAK,EAAE,MAAM,GAAG,KAAK,CAAC,CAAC;AACpD,CAAC,CAAC;AAEF,MAAM,SAAS,GAAG,CAAC,KAAe,EAAE,GAAsB,EAAE,EAAE;IAC5D,KAAK,CAAC,WAAW,CAAC,EAAE,CAAC,OAAO,CAAC,EAAE;QAC7B,IAAI,OAAO,CAAC,IAAI,KAAK,OAAO,EAAE,CAAC;YAC7B,MAAM,QAAQ,GAAG,OAAO,CAAC,QAAQ,CAAC;YAElC,MAAM,KAAK,GAAG,OAAO,CAAC,KAAK,CAAC;YAC5B,MAAM,IAAI,GAAG,GAAG,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YACxC,IAAI,IAAI,IAAI,IAAI,CAAC,IAAI,CAAC,OAAO,KAAK,KAAK,CAAC,EAAE,EAAE,CAAC;gBAC3C,WAAW,CAAC,IAAI,CAAC,IAAI,EAAE,QAAQ,EAAE,KAAK,CAAC,CAAC;gBACxC,OAAO;YACT,CAAC;YACD,IAAI,IAAI,IAAI,IAAI,CAAC,EAAE,IAAI,IAAI,CAAC,EAAE,CAAC,OAAO,KAAK,KAAK,CAAC,EAAE,EAAE,CAAC;gBACpD,WAAW,CAAC,IAAI,CAAC,EAAE,EAAE,QAAQ,EAAE,KAAK,CAAC,CAAC;gBACtC,OAAO;YACT,CAAC;QACH,CAAC;IACH,CAAC,CAAC,CAAC;AACL,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,cAAc,GAAG,CAAC,GAAsB,EAAiB,EAAE;IACtE,OAAO,CAAC,EAAE,KAAK,EAAE,EAAE,EAAE;QACnB,SAAS,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;IACxB,CAAC,CAAC;AACJ,CAAC,CAAC","sourcesContent":["import type { EditorHost, TextRangePoint } from '@lumensuite/block-std';\nimport type {\n  BlockSnapshot,\n  DraftModel,\n  JobMiddleware,\n  JobSlots,\n} from '@lumensuite/store';\n\nimport { matchFlavours } from '../../../_common/utils/index.js';\n\nconst handlePoint = (\n  point: TextRangePoint,\n  snapshot: BlockSnapshot,\n  model: DraftModel\n) => {\n  const { index, length } = point;\n  // @ts-expect-error TODO: add match flavour type for draft model\n  if (matchFlavours(model, ['affine:page'])) {\n    if (length === 0) return;\n    (snapshot.props.title as Record<string, unknown>).delta =\n      model.title.sliceToDelta(index, length + index);\n    return;\n  }\n\n  if (!snapshot.props.text || length === 0) {\n    return;\n  }\n  (snapshot.props.text as Record<string, unknown>).delta =\n    model.text?.sliceToDelta(index, length + index);\n};\n\nconst sliceText = (slots: JobSlots, std: EditorHost['std']) => {\n  slots.afterExport.on(payload => {\n    if (payload.type === 'block') {\n      const snapshot = payload.snapshot;\n\n      const model = payload.model;\n      const text = std.selection.find('text');\n      if (text && text.from.blockId === model.id) {\n        handlePoint(text.from, snapshot, model);\n        return;\n      }\n      if (text && text.to && text.to.blockId === model.id) {\n        handlePoint(text.to, snapshot, model);\n        return;\n      }\n    }\n  });\n};\n\nexport const copyMiddleware = (std: EditorHost['std']): JobMiddleware => {\n  return ({ slots }) => {\n    sliceText(slots, std);\n  };\n};\n"]}