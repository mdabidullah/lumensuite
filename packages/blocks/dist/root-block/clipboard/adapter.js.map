{"version":3,"file":"adapter.js","sourceRoot":"","sources":["../../../src/root-block/clipboard/adapter.ts"],"names":[],"mappings":"AAeA,OAAO,EAAE,eAAe,EAAE,SAAS,EAAE,MAAM,+BAA+B,CAAC;AAC3E,OAAO,EAAE,YAAY,EAAE,MAAM,0BAA0B,CAAC;AACxD,OAAO,EAAE,WAAW,EAAE,MAAM,mBAAmB,CAAC;AAEhD,OAAO,EAAE,oBAAoB,EAAE,oBAAoB,EAAE,MAAM,YAAY,CAAC;AAQxE,MAAM,OAAO,gBAAiB,SAAQ,WAAmB;aAChD,SAAI,GAAG,qBAAqB,CAAC;IAE3B,iBAAiB,CACxB,QAAkC;QAElC,MAAM,IAAI,eAAe,CACvB,SAAS,CAAC,8BAA8B,EACxC,uDAAuD,CACxD,CAAC;IACJ,CAAC;IAEQ,eAAe,CACtB,QAAgC;QAEhC,MAAM,IAAI,eAAe,CACvB,SAAS,CAAC,8BAA8B,EACxC,qDAAqD,CACtD,CAAC;IACJ,CAAC;IAEQ,KAAK,CAAC,iBAAiB,CAC9B,OAAiC;QAEjC,MAAM,QAAQ,GAAG,OAAO,CAAC,QAAQ,CAAC;QAClC,MAAM,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC;QAC9B,YAAY,CAAC,MAAM,CAAC,CAAC;QACrB,MAAM,GAAG,GAAG,MAAM,CAAC,SAAS,EAAE,CAAC;QAC/B,MAAM,KAAK,GAAiC,MAAM,oBAAoB,CAAC,GAAG,CAAC,CAAC;QAC5E,OAAO;YACL,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC;gBACnB,QAAQ;gBACR,KAAK;aACN,CAAC;YACF,SAAS,EAAE,EAAE;SACd,CAAC;IACJ,CAAC;IAEQ,eAAe,CACtB,QAAwC;QAExC,MAAM,IAAI,eAAe,CACvB,SAAS,CAAC,8BAA8B,EACxC,qDAAqD,CACtD,CAAC;IACJ,CAAC;IAEQ,aAAa,CACpB,QAAsC;QAEtC,MAAM,IAAI,eAAe,CACvB,SAAS,CAAC,8BAA8B,EACxC,mDAAmD,CACpD,CAAC;IACJ,CAAC;IAEQ,eAAe,CACtB,OAAuC;QAEvC,MAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QACtC,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,GAAG,IAAI,CAAC;QACjC,MAAM,GAAG,GAAG,OAAO,CAAC,MAAM,EAAE,SAAS,EAAE,CAAC;QACxC,oBAAoB,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;QACjC,OAAO,OAAO,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;IACnC,CAAC","sourcesContent":["import type {\n  BlockSnapshot,\n  DocSnapshot,\n  FromBlockSnapshotPayload,\n  FromBlockSnapshotResult,\n  FromDocSnapshotPayload,\n  FromDocSnapshotResult,\n  FromSliceSnapshotPayload,\n  FromSliceSnapshotResult,\n  SliceSnapshot,\n  ToBlockSnapshotPayload,\n  ToDocSnapshotPayload,\n  ToSliceSnapshotPayload,\n} from '@lumensuite/store';\n\nimport { LumenSuiteError, ErrorCode } from '@lumensuite/global/exceptions';\nimport { assertExists } from '@lumensuite/global/utils';\nimport { BaseAdapter } from '@lumensuite/store';\n\nimport { decodeClipboardBlobs, encodeClipboardBlobs } from './utils.js';\n\nexport type FileSnapshot = {\n  name: string;\n  type: string;\n  content: string;\n};\n\nexport class ClipboardAdapter extends BaseAdapter<string> {\n  static MIME = 'BLOCKSUITE/SNAPSHOT';\n\n  override fromBlockSnapshot(\n    _payload: FromBlockSnapshotPayload\n  ): Promise<FromBlockSnapshotResult<string>> {\n    throw new LumenSuiteError(\n      ErrorCode.TransformerNotImplementedError,\n      'ClipboardAdapter.fromBlockSnapshot is not implemented'\n    );\n  }\n\n  override fromDocSnapshot(\n    _payload: FromDocSnapshotPayload\n  ): Promise<FromDocSnapshotResult<string>> {\n    throw new LumenSuiteError(\n      ErrorCode.TransformerNotImplementedError,\n      'ClipboardAdapter.fromDocSnapshot is not implemented'\n    );\n  }\n\n  override async fromSliceSnapshot(\n    payload: FromSliceSnapshotPayload\n  ): Promise<FromSliceSnapshotResult<string>> {\n    const snapshot = payload.snapshot;\n    const assets = payload.assets;\n    assertExists(assets);\n    const map = assets.getAssets();\n    const blobs: Record<string, FileSnapshot> = await encodeClipboardBlobs(map);\n    return {\n      file: JSON.stringify({\n        snapshot,\n        blobs,\n      }),\n      assetsIds: [],\n    };\n  }\n\n  override toBlockSnapshot(\n    _payload: ToBlockSnapshotPayload<string>\n  ): Promise<BlockSnapshot> {\n    throw new LumenSuiteError(\n      ErrorCode.TransformerNotImplementedError,\n      'ClipboardAdapter.toBlockSnapshot is not implemented'\n    );\n  }\n\n  override toDocSnapshot(\n    _payload: ToDocSnapshotPayload<string>\n  ): Promise<DocSnapshot> {\n    throw new LumenSuiteError(\n      ErrorCode.TransformerNotImplementedError,\n      'ClipboardAdapter.toDocSnapshot is not implemented'\n    );\n  }\n\n  override toSliceSnapshot(\n    payload: ToSliceSnapshotPayload<string>\n  ): Promise<SliceSnapshot> {\n    const json = JSON.parse(payload.file);\n    const { blobs, snapshot } = json;\n    const map = payload.assets?.getAssets();\n    decodeClipboardBlobs(blobs, map);\n    return Promise.resolve(snapshot);\n  }\n}\n"]}