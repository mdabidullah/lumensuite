{"version":3,"file":"clipboard.js","sourceRoot":"","sources":["../../../../src/root-block/edgeless/clipboard/clipboard.ts"],"names":[],"mappings":"AAUA,OAAO,EACL,iBAAiB,EACjB,WAAW,EACX,YAAY,EACZ,SAAS,EACT,qBAAqB,EACrB,SAAS,GACV,MAAM,kCAAkC,CAAC;AAC1C,OAAO,EAAE,cAAc,EAAE,MAAM,0BAA0B,CAAC;AAC1D,OAAO,EACL,mBAAmB,EACnB,mBAAmB,EACnB,iBAAiB,GAClB,MAAM,oCAAoC,CAAC;AAC5C,OAAO,EACL,kBAAkB,EAClB,gBAAgB,EAChB,aAAa,GACd,MAAM,iCAAiC,CAAC;AACzC,OAAO,EAAE,eAAe,EAAE,SAAS,EAAE,MAAM,+BAA+B,CAAC;AAC3E,OAAO,EACL,YAAY,EACZ,UAAU,EACV,KAAK,EACL,eAAe,EACf,cAAc,EACd,OAAO,EACP,GAAG,GACJ,MAAM,0BAA0B,CAAC;AAClC,OAAO,EAEL,mBAAmB,EACnB,aAAa,EACb,QAAQ,EACR,GAAG,GAEJ,MAAM,mBAAmB,CAAC;AAC3B,OAAO,SAAS,MAAM,WAAW,CAAC;AAIlC,OAAO,EACL,yBAAyB,EACzB,iBAAiB,EACjB,gBAAgB,GACjB,MAAM,4BAA4B,CAAC;AACpC,OAAO,EAAE,mBAAmB,EAAE,MAAM,iCAAiC,CAAC;AACtE,OAAO,EAAE,mBAAmB,EAAE,MAAM,+BAA+B,CAAC;AACpE,OAAO,EAAE,gBAAgB,EAAE,MAAM,4BAA4B,CAAC;AAC9D,OAAO,EAAE,aAAa,EAAE,MAAM,0BAA0B,CAAC;AACzD,OAAO,EACL,oBAAoB,EACpB,oBAAoB,GACrB,MAAM,0BAA0B,CAAC;AAClC,OAAO,EAAE,gCAAgC,EAAE,MAAM,yBAAyB,CAAC;AAC3E,OAAO,EACL,sBAAsB,EACtB,gBAAgB,GACjB,MAAM,yBAAyB,CAAC;AACjC,OAAO,EAAE,mBAAmB,EAAE,kBAAkB,EAAE,MAAM,oBAAoB,CAAC;AAC7E,OAAO,EAAE,cAAc,EAAE,MAAM,kBAAkB,CAAC;AAClD,OAAO,EACL,iBAAiB,EACjB,uBAAuB,EACvB,YAAY,EACZ,eAAe,GAChB,MAAM,mBAAmB,CAAC;AAE3B,MAAM,kBAAkB,GAAG,oBAAoB,CAAC;AAChD,MAAM,SAAS,GAAG,WAAW,CAAC;AAE9B,MAAM,EAAE,KAAK,EAAE,OAAO,EAAE,SAAS,EAAE,GAAG,iBAAiB,CAAC;AACxD,MAAM,aAAa,GAAG,CAAC,CAAC,CAAC,4CAA4C;AAkBrE,MAAM,OAAO,2BAA4B,SAAQ,aAAa;IAoR5D,IAAY,cAAc;QACxB,OAAO,IAAI,CAAC,YAAY,CAAC,aAAa,CAAC;IACzC,CAAC;IAED,IAAY,YAAY;QACtB,OAAO,IAAI,CAAC,GAAG,CAAC,UAAU,CAAC,aAAa,CAAC,CAAC;IAC5C,CAAC;IAED,IAAY,GAAG;QACb,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC;IACvB,CAAC;IAED,IAAY,QAAQ;QAClB,OAAO,IAAI,CAAC,IAAI,CAAC;IACnB,CAAC;IAED,IAAY,gBAAgB;QAC1B,OAAO,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC;IACrC,CAAC;IAED,IAAY,GAAG;QACb,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC;IACvB,CAAC;IAED,IAAY,OAAO;QACjB,OAAO,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC;IAC3B,CAAC;IAED,IAAY,WAAW;QACrB,OAAO,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC;IACzB,CAAC;IAED,YAA4B,IAAgC;QAC1D,KAAK,CAAC,IAAI,CAAC,CAAC;QADc,SAAI,GAAJ,IAAI,CAA4B;QAnTpD,kBAAa,GAAkB,EAAE,CAAC;QAElC,2BAAsB,GAAG,GAAG,EAAE;YACpC,IAAI,CAAC,IAAI,CAAC,WAAW,CACnB,MAAM,EACN,GAAG,CAAC,EAAE;gBACJ,MAAM,EAAE,iBAAiB,EAAE,WAAW,EAAE,GAAG,IAAI,CAAC,gBAAgB,CAAC;gBAEjE,IAAI,WAAW,CAAC,MAAM,KAAK,CAAC;oBAAE,OAAO,KAAK,CAAC;gBAE3C,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,iBAAiB,CAAC,CAAC;gBACrC,OAAO;YACT,CAAC,EACD,EAAE,MAAM,EAAE,IAAI,EAAE,CACjB,CAAC;YAEF,IAAI,CAAC,IAAI,CAAC,WAAW,CACnB,OAAO,EACP,GAAG,CAAC,EAAE;gBACJ,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;YAC1C,CAAC,EACD,EAAE,MAAM,EAAE,IAAI,EAAE,CACjB,CAAC;YAEF,IAAI,CAAC,IAAI,CAAC,WAAW,CACnB,KAAK,EACL,GAAG,CAAC,EAAE;gBACJ,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;YACnB,CAAC,EACD,EAAE,MAAM,EAAE,IAAI,EAAE,CACjB,CAAC;QACJ,CAAC,CAAC;QAEM,YAAO,GAAG,CAChB,QAA6B,EAC7B,gBAAoC,EACpC,EAAE;YACF,MAAM,KAAK,GAAG,QAAQ,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAC,GAAG,CAAC;YACjD,KAAK,CAAC,cAAc,EAAE,CAAC;YAEvB,MAAM,QAAQ,GAAG,sBAAsB,CACrC,IAAI,CAAC,gBAAgB,CAAC,gBAAgB,CACvC,CAAC;YAEF,+CAA+C;YAC/C,IAAI,gBAAgB,CAAC,CAAC,CAAC,IAAI,gBAAgB,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC;gBACvD,2EAA2E;gBAC3E,IAAI,uBAAuB,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;oBAAE,OAAO;gBACjD,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;gBAC1B,OAAO;YACT,CAAC;YAED,IAAI,CAAC,GAAG,CAAC,SAAS;iBACf,gBAAgB,CAAC,KAAK,EAAC,MAAM,EAAC,EAAE;gBAC/B,MAAM,IAAI,GAAG,MAAM,oBAAoB,CAAC,QAAQ,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC;gBAC5D,OAAO;oBACL,GAAG,MAAM;oBACT,CAAC,kBAAkB,CAAC,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC;iBAC3C,CAAC;YACJ,CAAC,CAAC;iBACD,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QAC1B,CAAC,CAAC;QAEM,WAAM,GAAG,CAAC,QAA6B,EAAE,EAAE;YACjD,MAAM,EAAE,iBAAiB,EAAE,gBAAgB,EAAE,GAAG,IAAI,CAAC,gBAAgB,CAAC;YAEtE,IAAI,gBAAgB,CAAC,MAAM,KAAK,CAAC;gBAAE,OAAO;YAE1C,MAAM,KAAK,GAAG,QAAQ,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAC,KAAK,CAAC;YACnD,KAAK,CAAC,cAAc,EAAE,CAAC;YAEvB,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,iBAAiB,CAAC,CAAC;YAE1C,IAAI,iBAAiB,CAAC,CAAC,CAAC,EAAE,OAAO,EAAE,CAAC;gBAClC,yEAAyE;gBACzE,IAAI,uBAAuB,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC;oBAAE,OAAO;gBACzD,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;gBACzB,OAAO;YACT,CAAC;YAED,MAAM,QAAQ,GAAG,sBAAsB,CACrC,IAAI,CAAC,gBAAgB,CAAC,gBAAgB,CACvC,CAAC;YACF,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,GAAG,EAAE;gBACrB,cAAc,CAAC,IAAI,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;YAC1C,CAAC,CAAC,CAAC;YAEH,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC;gBACxB,OAAO,EAAE,KAAK;gBACd,QAAQ,EAAE,EAAE;aACb,CAAC,CAAC;QACL,CAAC,CAAC;QAEM,aAAQ,GAAG,KAAK,EAAE,QAA6B,EAAE,EAAE;YACzD,IACE,QAAQ,CAAC,aAAa,YAAY,gBAAgB;gBAClD,QAAQ,CAAC,aAAa,YAAY,mBAAmB,EACrD,CAAC;gBACD,OAAO;YACT,CAAC;YACD,MAAM,KAAK,GAAG,QAAQ,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAC,GAAG,CAAC;YACjD,KAAK,CAAC,cAAc,EAAE,CAAC;YAEvB,MAAM,EAAE,iBAAiB,EAAE,gBAAgB,EAAE,GAAG,IAAI,CAAC,gBAAgB,CAAC;YAEtE,IAAI,iBAAiB,CAAC,CAAC,CAAC,EAAE,OAAO,EAAE,CAAC;gBAClC,6EAA6E;gBAC7E,IAAI,uBAAuB,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC;oBAAE,OAAO;gBACzD,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;gBAC3B,OAAO;YACT,CAAC;YAED,MAAM,IAAI,GAAG,KAAK,CAAC,aAAa,CAAC;YACjC,IAAI,CAAC,IAAI;gBAAE,OAAO;YAElB,MAAM,EAAE,YAAY,EAAE,GAAG,IAAI,CAAC,WAAW,CAAC;YAC1C,MAAM,KAAK,GAAS,CAAC,YAAY,CAAC,CAAC,EAAE,YAAY,CAAC,CAAC,CAAC,CAAC;YAErD,IAAI,qBAAqB,CAAC,IAAI,CAAC,EAAE,CAAC;gBAChC,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;gBACzB,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC;oBAAE,OAAO;gBAE/B,MAAM,UAAU,GAAW,EAAE,EAC3B,eAAe,GAAW,EAAE,CAAC;gBAE/B,CAAC,GAAG,KAAK,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;oBACxB,IAAI,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,EAAE,CAAC;wBACnC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;oBACxB,CAAC;yBAAM,CAAC;wBACN,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;oBAC7B,CAAC;gBACH,CAAC,CAAC,CAAC;gBAEH,oFAAoF;gBACpF,IAAI,eAAe,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;oBACjC,MAAM,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC;gBAC/C,CAAC;qBAAM,CAAC;oBACN,MAAM,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,GAAG,KAAK,CAAC,EAAE,KAAK,CAAC,CAAC;gBACpD,CAAC;gBAED,IAAI,CAAC,GAAG,CAAC,WAAW,CAAC,iBAAiB,CAAC,EAAE,KAAK,CAAC,oBAAoB,EAAE;oBACnE,OAAO,EAAE,cAAc;oBACvB,IAAI,EAAE,mBAAmB;oBACzB,MAAM,EAAE,SAAS;oBACjB,OAAO,EAAE,SAAS;oBAClB,IAAI,EAAE,eAAe,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,YAAY;iBAC5D,CAAC,CAAC;gBAEH,OAAO;YACT,CAAC;YAED,IAAI,gBAAgB,CAAC,IAAI,CAAC,EAAE,CAAC;gBAC3B,MAAM,GAAG,GAAG,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC;gBACvC,MAAM,EAAE,YAAY,EAAE,GAAG,IAAI,CAAC,WAAW,CAAC;gBAC1C,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,YAAY,CACpD,YAAY,CAAC,CAAC,EACd,YAAY,CAAC,CAAC,CACf,CAAC;gBAEF,yCAAyC;gBACzC,MAAM,kBAAkB,GAAG,IAAI,CAAC,GAAG,CAAC,WAAW,CAAC,mBAAmB,CAAC,CAAC;gBACrE,MAAM,GAAG,GAAG,MAAM,kBAAkB,EAAE,SAAS,CAAC;oBAC9C,MAAM,EAAE,QAAQ;oBAChB,SAAS,EAAE,GAAG;oBACd,aAAa,EAAE,IAAI;iBACpB,CAAC,CAAC;gBACH,MAAM,MAAM,GAAG,GAAG,IAAI,OAAO,IAAI,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,SAAS,CAAC;gBAC7D,MAAM,OAAO,GAA4B,EAAE,CAAC;gBAE5C,IAAI,OAAO,GAAG,iBAAiB,CAAC;gBAChC,IAAI,KAAK,GAAG,cAAc,CAAC,CAAC,CAAC,CAAC;gBAC9B,IAAI,YAAY,GAAG,KAAK,CAAC;gBAEzB,IAAI,MAAM,EAAE,CAAC;oBACX,OAAO,CAAC,MAAM,GAAG,MAAM,CAAC;oBACxB,OAAO,GAAG,yBAAyB,CAAC;oBACpC,KAAK,GAAG,UAAU,CAAC;oBAEnB,MAAM,SAAS,GAAG,mBAAmB,CAAC,GAAG,CAAC,CAAC;oBAE3C,YAAY,GAAG,OAAO,CACpB,SAAS,EAAE,MAAM,EAAE,IAAI;wBACrB,CAAC,SAAS,CAAC,MAAM,CAAC,QAAQ,EAAE,MAAM;4BAChC,SAAS,CAAC,MAAM,CAAC,UAAU,EAAE,MAAM,CAAC,CACzC,CAAC;oBAEF,MAAM,CAAC,MAAM,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC;gBACpC,CAAC;qBAAM,CAAC;oBACN,OAAO,CAAC,GAAG,GAAG,GAAG,CAAC;oBAElB,MAAM,YAAY,GAAG,IAAI,CAAC,GAAG;yBAC1B,GAAG,CAAC,mBAAmB,CAAC;yBACxB,oBAAoB,CAAC,GAAG,CAAC,CAAC;oBAC7B,IAAI,YAAY,EAAE,CAAC;wBACjB,OAAO,GAAG,YAAY,CAAC,OAAuC,CAAC;wBAC/D,KAAK,GAAG,YAAY,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;oBACjC,CAAC;gBACH,CAAC;gBAED,MAAM,KAAK,GAAG,gBAAgB,CAAC,KAAK,CAAC,CAAC;gBACtC,MAAM,MAAM,GAAG,iBAAiB,CAAC,KAAK,CAAC,CAAC;gBAExC,OAAO,CAAC,IAAI,GAAG,KAAK,CAAC,UAAU,CAC7B,GAAG,CAAC,KAAK,CAAC;oBACR,CAAC;oBACD,CAAC;iBACF,CAAC,EACF,KAAK,EACL,MAAM,CACP,CAAC,SAAS,EAAE,CAAC;gBACd,OAAO,CAAC,KAAK,GAAG,KAAK,CAAC;gBAEtB,MAAM,EAAE,GAAG,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,CACnC,OAAO,EACP,OAAO,EACP,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE,CACtB,CAAC;gBAEF,IAAI,CAAC,GAAG,CAAC,WAAW,CAAC,iBAAiB,CAAC,EAAE,KAAK,CAAC,oBAAoB,EAAE;oBACnE,OAAO,EAAE,cAAc;oBACvB,IAAI,EAAE,mBAAmB;oBACzB,MAAM,EAAE,SAAS;oBACjB,OAAO,EAAE,SAAS;oBAClB,IAAI,EAAE,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;iBAC5B,CAAC,CAAC;gBAEH,IAAI,CAAC,GAAG,CAAC,WAAW,CAAC,iBAAiB,CAAC,EAAE,KAAK,CAAC,kBAAkB,EAAE;oBACjE,IAAI,EAAE,mBAAmB;oBACzB,OAAO,EAAE,YAAY;oBACrB,QAAQ,EAAE,aAAa;oBACvB,KAAK,EAAE,cAAc;oBACrB,IAAI,EAAE,YAAY,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,KAAK;iBACrC,CAAC,CAAC;gBAEH,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC;oBACxB,OAAO,EAAE,KAAK;oBACd,QAAQ,EAAE,CAAC,EAAE,CAAC;iBACf,CAAC,CAAC;gBAEH,OAAO;YACT,CAAC;YAED,MAAM,GAAG,GAAG,sBAAsB,CAAC,IAAI,CAAC,CAAC;YACzC,IAAI,GAAG,EAAE,CAAC;gBACR,MAAM,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,GAAG,CAAC,EAAE,KAAK,CAAC,CAAC;gBACxC,OAAO;YACT,CAAC;YACD,IAAI,CAAC;gBACH,0CAA0C;gBAC1C,MAAM,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC;gBACxD,MAAM,oBAAoB,GAAG,IAAI,CAAC,kBAAkB,CAAC,CAAC;gBACtD,IAAI,oBAAoB,KAAK,SAAS,EAAE,CAAC;oBACvC,MAAM,eAAe,GAAG,IAAI,CAAC,KAAK,CAAC,oBAAoB,CAAC,CAAC;oBACzD,MAAM,EAAE,QAAQ,EAAE,KAAK,EAAE,GAAG,eAAe,CAAC;oBAC5C,MAAM,GAAG,GAAG,IAAI,GAAG,CAAC,EAAE,UAAU,EAAE,IAAI,CAAC,GAAG,CAAC,UAAU,EAAE,CAAC,CAAC;oBACzD,MAAM,GAAG,GAAG,GAAG,CAAC,aAAa,CAAC,SAAS,EAAE,CAAC;oBAC1C,oBAAoB,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;oBACjC,KAAK,MAAM,MAAM,IAAI,GAAG,CAAC,IAAI,EAAE,EAAE,CAAC;wBAChC,MAAM,GAAG,CAAC,aAAa,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;oBAC9C,CAAC;oBACD,MAAM,IAAI,CAAC,qBAAqB,CAAC,QAAQ,CAAC,CAAC;oBAC3C,OAAO;gBACT,CAAC;gBACD,wCAAwC;gBACxC,MAAM,kBAAkB,GAAG,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC;gBACvD,IAAI,kBAAkB,KAAK,SAAS;oBAAE,OAAO;gBAC7C,MAAM,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,kBAAkB,CAAC,CAAC;gBAChD,MAAM,aAAa,GAAG,QAAQ,EAAE,QAAyB,CAAC;gBAC1D,MAAM,IAAI,CAAC,uBAAuB,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;YAC5D,CAAC;YAAC,OAAO,CAAC,EAAE,CAAC;gBACX,wBAAwB;gBACxB,MAAM,IAAI,CAAC,uBAAuB,CAAC,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC,CAAC;YACjE,CAAC;QACH,CAAC,CAAC;QAoCA,6CAA6C;QAC7C,IAAI,CAAC,aAAa,CAAC,aAAa,EAAE,IAAI,CAAC,gBAAgB,CAAC,CAAC;QACzD,IAAI,CAAC,aAAa,CAAC,sBAAsB,EAAE,IAAI,CAAC,wBAAwB,CAAC,CAAC;QAC1E,IAAI,CAAC,aAAa,CAAC,cAAc,EAAE,IAAI,CAAC,iBAAiB,CAAC,CAAC;QAC3D,IAAI,CAAC,aAAa,CAAC,cAAc,EAAE,IAAI,CAAC,iBAAiB,CAAC,CAAC;QAC3D,IAAI,CAAC,aAAa,CAAC,mBAAmB,EAAE,IAAI,CAAC,sBAAsB,CAAC,CAAC;QACrE,IAAI,CAAC,aAAa,CAAC,iBAAiB,EAAE,IAAI,CAAC,oBAAoB,CAAC,CAAC;QACjE,IAAI,CAAC,aAAa,CAAC,qBAAqB,EAAE,IAAI,CAAC,uBAAuB,CAAC,CAAC;QACxE,IAAI,CAAC,aAAa,CAAC,sBAAsB,EAAE,IAAI,CAAC,wBAAwB,CAAC,CAAC;QAC1E,IAAI,CAAC,aAAa,CAAC,oBAAoB,EAAE,IAAI,CAAC,sBAAsB,CAAC,CAAC;QACtE,IAAI,CAAC,aAAa,CAChB,yBAAyB,EACzB,IAAI,CAAC,0BAA0B,CAChC,CAAC;QACF,IAAI,CAAC,aAAa,CAChB,yBAAyB,EACzB,IAAI,CAAC,0BAA0B,CAChC,CAAC;QACF,IAAI,CAAC,aAAa,CAAC,mBAAmB,EAAE,IAAI,CAAC,qBAAqB,CAAC,CAAC;QACpE,IAAI,CAAC,aAAa,CAAC,mBAAmB,EAAE,IAAI,CAAC,qBAAqB,CAAC,CAAC;IACtE,CAAC;IAEO,yBAAyB,CAC/B,IAAgB,EAChB,QAAgB,EAChB,UAAmB;QAEnB,IACE,QAAQ,CAAC,QAAQ,KAAK,QAAQ;YAC9B,kBAAkB,CAAC,IAAI,CAAC,KAAK,UAAU,EACvC,CAAC;YACD,MAAM,IAAI,KAAK,CAAC,oCAAoC,CAAC,CAAC;QACxD,CAAC;IACH,CAAC;IAEO,KAAK,CAAC,sBAAsB,CAAC,UAAyB;QAC5D,MAAM,EAAE,IAAI,EAAE,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE,GAC9D,UAAU,CAAC,KAAK,CAAC;QAEnB,IAAI,CAAC,CAAC,MAAM,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,UAAU,CAAC,QAAQ,CAAC,GAAG,CAAC,QAAkB,CAAC,CAAC,EAAE,CAAC;YACvE,OAAO,IAAI,CAAC;QACd,CAAC;QACD,MAAM,YAAY,GAAG,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAC7C,mBAAmB,EACnB;YACE,IAAI;YACJ,MAAM;YACN,QAAQ;YACR,IAAI;YACJ,IAAI;YACJ,IAAI;YACJ,KAAK;YACL,KAAK;SACN,EACD,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE,CACtB,CAAC;QACF,OAAO,YAAY,CAAC;IACtB,CAAC;IAEO,oBAAoB,CAAC,QAAuB;QAClD,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,EAAE,OAAO,EAAE,WAAW,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE,GAClE,QAAQ,CAAC,KAAK,CAAC;QAEjB,MAAM,UAAU,GAAG,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAC3C,iBAAiB,EACjB;YACE,IAAI;YACJ,KAAK;YACL,GAAG;YACH,OAAO;YACP,WAAW;YACX,IAAI;YACJ,KAAK;YACL,KAAK;SACN,EACD,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE,CACtB,CAAC;QACF,OAAO,UAAU,CAAC;IACpB,CAAC;IAEO,oBAAoB,CAC1B,aAAgC,EAChC,cAAmC,EACnC,OAAuB;QAEvB,IAAI,aAAa,CAAC,IAAI,KAAK,KAAK,EAAE,CAAC;YACjC,MAAM,IAAI,GAAG,IAAI,aAAa,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC;YACvC,MAAM,QAAQ,GAAG,aAAa,CAAC,QAAQ,IAAI,EAAE,CAAC;YAE9C,KAAK,MAAM,CAAC,GAAG,EAAE,KAAK,CAAC,IAAI,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE,CAAC;gBACpD,MAAM,MAAM,GAAG,cAAc,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;gBACvC,YAAY,CACV,MAAM,EACN,oDAAoD,CACrD,CAAC;gBACF,IAAI,CAAC,GAAG,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;YAC1B,CAAC;YACD,aAAa,CAAC,QAAQ,GAAG,IAAI,CAAC;YAC9B,aAAa,CAAC,IAAI,GAAG,OAAO,CAAC;QAC/B,CAAC;aAAM,IAAI,aAAa,CAAC,IAAI,KAAK,OAAO,EAAE,CAAC;YAC1C,MAAM,IAAI,GAAG,IAAI,aAAa,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC;YACvC,MAAM,QAAQ,GAAG,aAAa,CAAC,QAAQ,IAAI,EAAE,CAAC;YAE9C,KAAK,MAAM,CAAC,MAAM,EAAE,QAAQ,CAAC,IAAI,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE,CAAC;gBAC1D,MAAM,MAAM,GAAG,cAAc,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;gBAC1C,MAAM,QAAQ,GAAG;oBACf,GAAG,QAAQ;iBACZ,CAAC;gBACF,YAAY,CACV,MAAM,EACN,sDAAsD,CACvD,CAAC;gBAEF,IAAI,QAAQ,CAAC,MAAM,EAAE,CAAC;oBACpB,MAAM,SAAS,GAAG,cAAc,CAAC,GAAG,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;oBACtD,YAAY,CACV,SAAS,EACT,sDAAsD,CACvD,CAAC;oBACF,QAAQ,CAAC,MAAM,GAAG,SAAS,CAAC;gBAC9B,CAAC;gBAED,IAAI,CAAC,GAAG,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;YAC7B,CAAC;YACD,aAAa,CAAC,QAAQ,GAAG,IAAI,CAAC;QAChC,CAAC;aAAM,IAAI,aAAa,CAAC,IAAI,KAAK,SAAS,EAAE,CAAC;YAC5C,MAAM,MAAM,GAAG,aAAa,CAAC,MAAoB,CAAC;YAClD,MAAM,MAAM,GAAG,aAAa,CAAC,MAAoB,CAAC;YAElD,MAAM,QAAQ,GAAG,KAAK,CAAC,WAAW,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;YACvD,MAAM,QAAQ,GAAG,KAAK,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;YAC5C,MAAM,MAAM,GAAG,GAAG,CAAC,GAAG,CACpB,CAAC,QAAQ,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC,CAAC,EACxB,CAAC,QAAQ,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC,CAAC,CACzB,CAAC;YAEF,IAAI,MAAM,CAAC,EAAE,EAAE,CAAC;gBACd,MAAM,CAAC,EAAE,GAAG,cAAc,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,IAAI,MAAM,CAAC,EAAE,CAAC;YACzD,CAAC;iBAAM,IAAI,MAAM,CAAC,QAAQ,EAAE,CAAC;gBAC3B,MAAM,CAAC,QAAQ,GAAG,GAAG,CAAC,GAAG,CAAC,MAAM,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;YACrD,CAAC;YAED,IAAI,MAAM,CAAC,EAAE,EAAE,CAAC;gBACd,MAAM,CAAC,EAAE,GAAG,cAAc,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,IAAI,MAAM,CAAC,EAAE,CAAC;YACzD,CAAC;iBAAM,IAAI,MAAM,CAAC,QAAQ,EAAE,CAAC;gBAC3B,MAAM,CAAC,QAAQ,GAAG,GAAG,CAAC,GAAG,CAAC,MAAM,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;YACrD,CAAC;QACH,CAAC;aAAM,CAAC;YACN,aAAa,CAAC,IAAI,GAAG,OAAO,CAAC;QAC/B,CAAC;QAED,MAAM,EAAE,GAAG,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,UAAU,CACrC,aAAa,CAAC,IAAyB,EACvC,aAAa,CACd,CAAC;QACF,IAAI,CAAC,GAAG,CAAC,WAAW,CAAC,iBAAiB,CAAC,EAAE,KAAK,CAAC,oBAAoB,EAAE;YACnE,OAAO,EAAE,cAAc;YACvB,IAAI,EAAE,mBAAmB;YACzB,MAAM,EAAE,SAAS;YACjB,OAAO,EAAE,SAAS;YAClB,IAAI,EAAE,aAAa,CAAC,IAAc;SACnC,CAAC,CAAC;QACH,MAAM,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,cAAc,CAC9C,EAAE,CACwB,CAAC;QAC7B,YAAY,CAAC,OAAO,CAAC,CAAC;QACtB,OAAO,OAAO,CAAC;IACjB,CAAC;IAEO,KAAK,CAAC,wBAAwB,CAAC,YAA2B;QAChE,MAAM,KAAK,GAAG,YAAY,CAAC,EAAE,CAAC;QAC9B,OAAO,YAAY,CAAC,KAAK,CAAC,KAAK,CAAC;QAChC,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC;YAC7B,OAAO,CAAC,KAAK,CACX,0BAA0B,KAAK,+BAA+B,CAC/D,CAAC;YACF,OAAO,IAAI,CAAC;QACd,CAAC;QACD,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,oBAAoB,CAC3C,YAAY,EACZ,IAAI,CAAC,GAAG,EACR,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE,CAC/B,CAAC;QACF,IAAI,CAAC,KAAK,EAAE,CAAC;YACX,OAAO,CAAC,KAAK,CAAC,0CAA0C,KAAK,GAAG,CAAC,CAAC;YAClE,OAAO,IAAI,CAAC;QACd,CAAC;QAED,OAAO,KAAK,CAAC;IACf,CAAC;IAEO,sBAAsB,CAAC,UAAyB;QACtD,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,EAAE,OAAO,EAAE,KAAK,EAAE,WAAW,EAAE,GAAG,UAAU,CAAC,KAAK,CAAC;QAE3E,MAAM,YAAY,GAAG,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAC7C,oBAAoB,EACpB;YACE,IAAI;YACJ,KAAK;YACL,GAAG;YACH,OAAO;YACP,KAAK;YACL,WAAW;SACZ,EACD,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE,CACtB,CAAC;QACF,OAAO,YAAY,CAAC;IACtB,CAAC;IAEO,iBAAiB,CACvB,KAAoB,EACpB,aAAkC;QAElC,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,UAAU,EAAE,eAAe,EAAE,GAAG,KAAK,CAAC,KAAK,CAAC;QAEjE,MAAM,kBAAkB,GAA4B,EAAE,CAAC;QAEvD,IAAI,OAAO,eAAe,KAAK,QAAQ,IAAI,eAAe,KAAK,IAAI,EAAE,CAAC;YACpE,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;gBAC3C,MAAM,KAAK,GAAG,aAAa,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;gBACvC,IAAI,KAAK,EAAE,CAAC;oBACV,kBAAkB,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC;gBACnC,CAAC;YACH,CAAC,CAAC,CAAC;QACL,CAAC;QAED,MAAM,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,CACxC,cAAc,EACd;YACE,IAAI;YACJ,UAAU;YACV,KAAK,EAAE,QAAQ,CAAC,KAAK,CAAC;YACtB,eAAe,EAAE,kBAAkB;SACpC,EACD,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE,CACtB,CAAC;QACF,OAAO,OAAO,CAAC;IACjB,CAAC;IAEO,uBAAuB,CAAC,WAA0B;QACxD,MAAM,EACJ,IAAI,EACJ,KAAK,EACL,KAAK,EACL,IAAI,EACJ,UAAU,EACV,QAAQ,EACR,GAAG,EACH,OAAO,EACP,KAAK,EACL,MAAM,EACN,YAAY,EACZ,KAAK,EACL,WAAW,EACX,SAAS,EACT,SAAS,GACV,GAAG,WAAW,CAAC,KAAK,CAAC;QAEtB,MAAM,aAAa,GAAG,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAC9C,qBAAqB,EACrB;YACE,IAAI;YACJ,KAAK;YACL,KAAK;YACL,IAAI;YACJ,UAAU;YACV,QAAQ;YACR,GAAG;YACH,OAAO;YACP,KAAK;YACL,MAAM;YACN,YAAY;YACZ,KAAK;YACL,WAAW;YACX,SAAS;YACT,SAAS;SACV,EACD,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE,CACtB,CAAC;QACF,OAAO,aAAa,CAAC;IACvB,CAAC;IAEO,qBAAqB,CAAC,SAAwB;QACpD,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,OAAO,EAAE,IAAI,EAAE,MAAM,EAAE,GAAG,SAAS,CAAC,KAAK,CAAC;QAE/D,MAAM,WAAW,GAAG,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAC5C,mBAAmB,EACnB;YACE,IAAI;YACJ,KAAK;YACL,OAAO;YACP,IAAI;YACJ,MAAM;SACP,EACD,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE,CACtB,CAAC;QACF,OAAO,WAAW,CAAC;IACrB,CAAC;IAEO,KAAK,CAAC,iBAAiB,CAAC,KAAoB;QAClD,MAAM,EAAE,IAAI,EAAE,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAE,KAAK,EAAE,MAAM,EAAE,OAAO,EAAE,GAC5D,KAAK,CAAC,KAAK,CAAC;QAEd,IAAI,CAAC,CAAC,MAAM,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,UAAU,CAAC,QAAQ,CAAC,GAAG,CAAC,QAAkB,CAAC,CAAC,EAAE,CAAC;YACvE,OAAO,IAAI,CAAC;QACd,CAAC;QACD,OAAO,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAC/B,cAAc,EACd;YACE,OAAO;YACP,QAAQ;YACR,IAAI;YACJ,MAAM;YACN,IAAI;YACJ,KAAK;YACL,MAAM;SACP,EACD,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE,CACtB,CAAC;IACJ,CAAC;IAEO,0BAA0B,CAAC,cAA6B;QAC9D,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,OAAO,EAAE,MAAM,EAAE,GAAG,cAAc,CAAC,KAAK,CAAC;QAE9D,OAAO,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAC/B,yBAAyB,EACzB;YACE,IAAI;YACJ,KAAK;YACL,OAAO;YACP,MAAM;SACP,EACD,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE,CACtB,CAAC;IACJ,CAAC;IAEO,qBAAqB,CAAC,SAAwB;QACpD,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,EAAE,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE,KAAK,EAAE,WAAW,EAAE,GACrE,SAAS,CAAC,KAAK,CAAC;QAElB,MAAM,WAAW,GAAG,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAC5C,mBAAmB,EACnB;YACE,IAAI;YACJ,KAAK;YACL,GAAG;YACH,OAAO;YACP,OAAO;YACP,KAAK;YACL,KAAK;YACL,WAAW;SACZ,EACD,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE,CACtB,CAAC;QACF,OAAO,WAAW,CAAC;IACrB,CAAC;IAEO,KAAK,CAAC,gBAAgB,CAAC,IAAmB;QAChD,MAAM,KAAK,GAAG,IAAI,CAAC,EAAE,CAAC;QAEtB,OAAO,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC;QACxB,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC;YACrB,OAAO,CAAC,KAAK,CAAC,kBAAkB,KAAK,+BAA+B,CAAC,CAAC;YACtE,OAAO,IAAI,CAAC;QACd,CAAC;QAED,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,oBAAoB,CAC3C,IAAI,EACJ,IAAI,CAAC,GAAG,EACR,IAAI,CAAC,GAAG,CAAC,IAAK,CAAC,EAAE,CAClB,CAAC;QACF,IAAI,CAAC,KAAK,EAAE,CAAC;YACX,OAAO,CAAC,KAAK,CAAC,kCAAkC,KAAK,GAAG,CAAC,CAAC;YAC1D,OAAO,IAAI,CAAC;QACd,CAAC;QAED,OAAO,KAAK,CAAC;IACf,CAAC;IAEO,0BAA0B,CAAC,cAA6B;QAC9D,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,OAAO,EAAE,KAAK,EAAE,MAAM,EAAE,GAAG,cAAc,CAAC,KAAK,CAAC;QAErE,OAAO,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAC/B,yBAAyB,EACzB;YACE,IAAI;YACJ,KAAK;YACL,OAAO;YACP,KAAK;YACL,MAAM;SACP,EACD,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE,CACtB,CAAC;IACJ,CAAC;IAEO,wBAAwB,CAAC,YAA2B;QAC1D,MAAM,EACJ,IAAI,EACJ,KAAK,EACL,GAAG,EACH,OAAO,EACP,OAAO,EACP,KAAK,EACL,KAAK,EACL,WAAW,EACX,OAAO,EACP,UAAU,EACV,YAAY,GACb,GAAG,YAAY,CAAC,KAAK,CAAC;QAEvB,MAAM,cAAc,GAAG,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAC/C,sBAAsB,EACtB;YACE,IAAI;YACJ,KAAK;YACL,GAAG;YACH,OAAO;YACP,OAAO;YACP,KAAK;YACL,KAAK;YACL,WAAW;YACX,OAAO;YACP,UAAU;YACV,YAAY;SACb,EACD,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE,CACtB,CAAC;QACF,OAAO,cAAc,CAAC;IACxB,CAAC;IAEO,KAAK,CAAC,iBAAiB,CAC7B,QAAoC,EACpC,KAAa,EACb,KAA2C,EAC3C,iBAA4C,EAAE,EAC9C,EACE,UAAU,EACV,OAAO,GAAG,aAAa,EACvB,GAAG,GAAG,MAAM,CAAC,gBAAgB,IAAI,CAAC,MACX,EAAE;QAE3B,MAAM,IAAI,GAAG,QAAQ,CAAC,IAAI,CAAC;QAC3B,MAAM,SAAS,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC;QAChC,IAAI,CAAC,SAAS;YAAE,OAAO;QAEvB,MAAM,WAAW,GAAG,CAAC,MAAM,MAAM,CAAC,aAAa,CAAC,CAAC,CAAC,OAAO,CAAC;QAC1D,IAAI,CAAC,CAAC,WAAW,YAAY,QAAQ,CAAC;YAAE,OAAO;QAE/C,MAAM,QAAQ,GAAG,QAAQ,CAAC,QAAQ,CAAC;QACnC,MAAM,UAAU,GAAG,kBAAkB,CAAC,IAAI,CAAC,CAAC;QAE5C,MAAM,aAAa,GAAG,mBAAmB,CAAC,IAAI,CAAC,CAAC;QAChD,YAAY,CAAC,aAAa,CAAC,CAAC;QAE5B,MAAM,SAAS,GAAG,aAAa,CAAC,aAAa,CAC3C,kCAAkC,CACnC,CAAC;QACF,IAAI,CAAC,SAAS;YAAE,OAAO;QAEvB,MAAM,MAAM,GAAG,QAAQ,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;QAChD,MAAM,CAAC,KAAK,GAAG,CAAC,KAAK,CAAC,CAAC,GAAG,OAAO,GAAG,CAAC,CAAC,GAAG,GAAG,CAAC;QAC7C,MAAM,CAAC,MAAM,GAAG,CAAC,KAAK,CAAC,CAAC,GAAG,OAAO,GAAG,CAAC,CAAC,GAAG,GAAG,CAAC;QAC9C,MAAM,GAAG,GAAG,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;QACpC,IAAI,CAAC,GAAG;YAAE,OAAO;QACjB,IAAI,UAAU,EAAE,CAAC;YACf,GAAG,CAAC,SAAS,GAAG,UAAU,CAAC;YAC3B,GAAG,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,MAAM,CAAC,KAAK,EAAE,MAAM,CAAC,MAAM,CAAC,CAAC;QAClD,CAAC;QACD,GAAG,CAAC,KAAK,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;QAEpB,MAAM,oBAAoB,GAAG,IAAI,CAAC,cAAc,CAAC,oBAAoB,CAAC;QACtE,MAAM,iCAAiC,GACrC,IAAI,CAAC,8BAA8B,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAEjD,MAAM,UAAU,GAAG,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,OAAO,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;QAChE,MAAM,iBAAiB,GAAG;YACxB,cAAc,EAAE,UAAU,OAAgB;gBACxC,IACE,yBAAyB,CAAC,QAAQ,CAAC,OAAO,CAAC,OAAO,CAAC;oBACnD,OAAO,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,EAChC,CAAC;oBACD,OAAO,IAAI,CAAC;gBACd,CAAC;qBAAM,CAAC;oBACN,OAAO,KAAK,CAAC;gBACf,CAAC;YACH,CAAC;YAED,OAAO,EAAE,KAAK,WAAW,aAAuB,EAAE,OAAoB;gBACpE,8CAA8C;gBAC9C,OAAO,CAAC,KAAK,CAAC,WAAW,CAAC,WAAW,EAAE,MAAM,CAAC,CAAC;gBAC/C,MAAM,KAAK,GAAG,aAAa,CAAC,aAAa,CAAC,wBAAwB,CAAC,CAAC;gBACpE,IAAI,KAAK,IAAI,KAAK,YAAY,WAAW,EAAE,CAAC;oBAC1C,KAAK,CAAC,KAAK,CAAC,WAAW,CAAC,WAAW,EAAE,MAAM,CAAC,CAAC;gBAC/C,CAAC;gBAED,MAAM,iBAAiB,GAAG,aAAa,CAAC,gBAAgB,CACtD,uBAAuB,CACxB,CAAC;gBACF,iBAAiB,CAAC,OAAO,CAAC,UAAU,OAAO;oBACzC,IAAI,OAAO,YAAY,WAAW,EAAE,CAAC;wBACnC,OAAO,CAAC,KAAK,CAAC,WAAW,CAAC,YAAY,EAAE,MAAM,CAAC,CAAC;oBAClD,CAAC;gBACH,CAAC,CAAC,CAAC;gBACH,MAAM,oBAAoB,CAAC,OAAO,CAAC,CAAC;gBACpC,iCAAiC,CAAC,OAAO,CAAC,CAAC;YAC7C,CAAC;YACD,eAAe,EAAE,aAAa;YAC9B,OAAO,EAAE,UAAU,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI;YAClC,KAAK,EAAE,UAAU;SAClB,CAAC;QAEF,MAAM,kBAAkB,GAAG,KAAK,EAC9B,KAAwC,EACxC,SAAS,GAAG,KAAK,EACjB,EAAE;YACF,MAAM,cAAc,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;YACxD,IAAI,CAAC,cAAc,EAAE,CAAC;gBACpB,MAAM,IAAI,eAAe,CACvB,SAAS,CAAC,mBAAmB,EAC7B,0CAA0C,CAC3C,CAAC;YACJ,CAAC;YAED,MAAM,UAAU,GAAG,KAAK,CAAC,WAAW,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;YACjD,MAAM,UAAU,GAAG,MAAM,WAAW,CAClC,cAA6B,EAC7B,iBAAiB,CAClB,CAAC;YACF,GAAG,CAAC,SAAS,CACX,UAAU,EACV,UAAU,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,GAAG,OAAO,EAChC,UAAU,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,GAAG,OAAO,EAChC,UAAU,CAAC,CAAC,EACZ,SAAS;gBACP,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,GAAG,UAAU,CAAC,KAAK,CAAC,GAAG,UAAU,CAAC,MAAM;gBACvD,CAAC,CAAC,UAAU,CAAC,CAAC,CACjB,CAAC;QACJ,CAAC,CAAC;QAEF,MAAM,YAAY,GAChB,KAAK;YACJ,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,kBAAkB,CAAC,KAAK,EAAE;gBAC9C,IAAI,EAAE,OAAO;aACd,CAAyC,CAAC;QAC7C,KAAK,MAAM,WAAW,IAAI,YAAY,EAAE,CAAC;YACvC,MAAM,kBAAkB,CAAC,WAAW,CAAC,CAAC;YAEtC,IAAI,aAAa,CAAC,WAAW,EAAE,CAAC,cAAc,CAAC,CAAC,EAAE,CAAC;gBACjD,MAAM,iBAAiB,GAAwC,EAAE,CAAC;gBAClE,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,KAAK;qBACxB,uBAAuB,CAAC,WAAW,EAAE,KAAK,CAAC;qBAC3C,OAAO,CAAC,GAAG,CAAC,EAAE;oBACb,IAAI,eAAe,CAAC,GAAG,CAAC,EAAE,CAAC;wBACzB,iBAAiB,CAAC,IAAI,CAAC,GAAwC,CAAC,CAAC;oBACnE,CAAC;yBAAM,CAAC;wBACN,cAAc,CAAC,IAAI,CAAC,GAA8B,CAAC,CAAC;oBACtD,CAAC;gBACH,CAAC,CAAC,CAAC;gBAEL,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,iBAAiB,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;oBAClD,MAAM,OAAO,GAAG,iBAAiB,CAAC,CAAC,CAAC,CAAC;oBACrC,MAAM,kBAAkB,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;gBAC1C,CAAC;YACH,CAAC;YAED,IAAI,CAAC,yBAAyB,CAAC,IAAI,EAAE,QAAQ,EAAE,UAAU,CAAC,CAAC;QAC7D,CAAC;QAED,MAAM,aAAa,GAAG,QAAQ,CAAC,OAAO,CAAC,QAAQ,CAAC,gBAAgB,CAC9D,KAAK,EACL,cAAc,CACf,CAAC;QACF,GAAG,CAAC,SAAS,CAAC,aAAa,EAAE,OAAO,EAAE,OAAO,EAAE,KAAK,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC;QAEjE,OAAO,MAAM,CAAC;IAChB,CAAC;IAEO,oBAAoB,CAC1B,IAAiB,EACjB,KAAa,EACb,MAAc;QAEd,MAAM,KAAK,GAAG,4BAA4B,CAAC;QAC3C,MAAM,GAAG,GAAG,QAAQ,CAAC,eAAe,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;QACnD,MAAM,aAAa,GAAG,QAAQ,CAAC,eAAe,CAAC,KAAK,EAAE,eAAe,CAAC,CAAC;QAEvE,GAAG,CAAC,YAAY,CAAC,OAAO,EAAE,GAAG,KAAK,EAAE,CAAC,CAAC;QACtC,GAAG,CAAC,YAAY,CAAC,QAAQ,EAAE,GAAG,MAAM,EAAE,CAAC,CAAC;QACxC,GAAG,CAAC,YAAY,CAAC,SAAS,EAAE,OAAO,KAAK,IAAI,MAAM,EAAE,CAAC,CAAC;QAEtD,aAAa,CAAC,YAAY,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;QAC5C,aAAa,CAAC,YAAY,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;QAC7C,aAAa,CAAC,YAAY,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;QACrC,aAAa,CAAC,YAAY,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;QACrC,aAAa,CAAC,YAAY,CAAC,2BAA2B,EAAE,MAAM,CAAC,CAAC;QAEhE,GAAG,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC;QAC1B,aAAa,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;QAC3B,OAAO,GAAG,CAAC;IACb,CAAC;IAEO,8BAA8B,CACpC,gBAA0B,EAC1B,QAAkB;QAElB,MAAM,WAAW,GAAG;YAClB,GAAG,gBAAgB;YACnB,GAAG,QAAQ,CAAC,MAAM,CAAC,EAAE,CAAC,EAAE;gBACtB,OAAO,eAAe,CAAC,IAAI,CAAC,GAAG,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC,CAAC;YACpD,CAAC,CAAC;SACH,CAAC;QAEF,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC;YACxB,OAAO,EAAE,KAAK;YACd,QAAQ,EAAE,WAAW;SACtB,CAAC,CAAC;IACL,CAAC;IAEO,KAAK,CAAC,qBAAqB,CACjC,eAAsD;QAEtD,MAAM,EAAE,cAAc,EAAE,WAAW,EAAE,GACnC,MAAM,IAAI,CAAC,+BAA+B,CAAC,eAAe,CAAC,CAAC;QAC9D,IAAI,CAAC,8BAA8B,CACjC,cAAc,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EACjC,WAAW,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC,KAAK,CAAC,EAAE,CAAC,CACnC,CAAC;IACJ,CAAC;IAEO,KAAK,CAAC,uBAAuB,CAAC,OAAiC;QACrE,MAAM,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC;QAC3B,MAAM,EAAE,YAAY,EAAE,GAAG,IAAI,CAAC,WAAW,CAAC;QAC1C,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,QAAQ,CAAC,OAAO,CAAC,QAAQ,CAAC,YAAY,CACnD,YAAY,CAAC,CAAC,EACd,YAAY,CAAC,CAAC,CACf,CAAC;QAEF,MAAM,SAAS,GAAG;YAChB,IAAI,EAAE,IAAI,KAAK,CACb,CAAC,EACD,CAAC,EACD,kBAAkB,EAClB,mBAAmB,CACpB,CAAC,SAAS,EAAE;SACd,CAAC;QAEF,MAAM,MAAM,GAAG,QAAQ,CAAC,OAAO,CAAC,QAAQ,CACtC,aAAa,EACb,SAAS,EACT,IAAI,CAAC,GAAG,CAAC,IAAK,CAAC,EAAE,CAClB,CAAC;QAEF,IAAI,CAAC,GAAG,CAAC,WAAW,CAAC,iBAAiB,CAAC,EAAE,KAAK,CAAC,oBAAoB,EAAE;YACnE,OAAO,EAAE,cAAc;YACvB,IAAI,EAAE,mBAAmB;YACzB,MAAM,EAAE,SAAS;YACjB,OAAO,EAAE,SAAS;YAClB,IAAI,EAAE,MAAM;SACb,CAAC,CAAC;QAEH,IAAI,OAAO,OAAO,KAAK,QAAQ,EAAE,CAAC;YAChC,SAAS,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,GAAG,EAAE,EAAE;gBACtD,QAAQ,CAAC,OAAO,CAAC,QAAQ,CACvB,kBAAkB,EAClB,EAAE,IAAI,EAAE,IAAI,aAAa,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,EACxC,MAAM,EACN,GAAG,CACJ,CAAC;YACJ,CAAC,CAAC,CAAC;QACL,CAAC;aAAM,CAAC;YACN,KAAK,IAAI,KAAK,GAAG,CAAC,EAAE,KAAK,GAAG,OAAO,CAAC,MAAM,EAAE,KAAK,EAAE,EAAE,CAAC;gBACpD,MAAM,IAAI,CAAC,oBAAoB,CAC7B,OAAO,CAAC,KAAK,CAAC,EACd,IAAI,CAAC,GAAG,EACR,MAAM,EACN,KAAK,CACN,CAAC;YACJ,CAAC;QACH,CAAC;QAED,QAAQ,CAAC,OAAO,CAAC,SAAS,CAAC,GAAG,CAAC;YAC7B,QAAQ,EAAE,CAAC,MAAM,CAAC;YAClB,OAAO,EAAE,KAAK;SACf,CAAC,CAAC;QACH,QAAQ,CAAC,KAAK,CAAC,eAAe,CAAC,EAAE,IAAI,EAAE,SAAS,EAAE,CAAC,CAAC;IACtD,CAAC;IAEO,8BAA8B,CAAC,OAAoB;QACzD,MAAM,QAAQ,GAAG,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,gBAAgB,CAAC,gBAAgB,CAAC,CAAC,CAAC;QACxE,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;YACtB,MAAM,MAAM,GAAG,IAAI,CAAC,oBAAoB,CACtC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAgB,EACnC,IAAI,CAAC,WAAW,EAChB,IAAI,CAAC,YAAY,GAAG,CAAC,CACtB,CAAC;YACF,IAAI,CAAC,aAAa,EAAE,MAAM,CAAC,MAAM,CAAC,CAAC;YACnC,IAAI,CAAC,MAAM,EAAE,CAAC;QAChB,CAAC,CAAC,CAAC;IACL,CAAC;IAEO,0BAA0B,CAChC,QAAoC,EACpC,eAAoC;QAEpC,SAAS,OAAO,CAAC,CAA2B,EAAE,CAA2B;YACvE,IAAI,CAAC,YAAY,qBAAqB,IAAI,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,EAAE,CAAC;gBAC7D,OAAO,SAAS,CAAC,MAAM,CAAC;YAC1B,CAAC;iBAAM,IAAI,CAAC,YAAY,qBAAqB,IAAI,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,EAAE,CAAC;gBACpE,OAAO,SAAS,CAAC,KAAK,CAAC;YACzB,CAAC;iBAAM,CAAC;gBACN,MAAM,OAAO,GAAG,CAAC,CAAC,MAA4C,CAAC;gBAC/D,MAAM,OAAO,GAAG,CAAC,CAAC,MAA4C,CAAC;gBAE/D,IAAI,CAAC,GAAG,CAAC,CAAC;gBACV,IAAI,MAAM,GAAyC,OAAO,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;gBACvE,IAAI,MAAM,GAAyC,OAAO,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;gBAEvE,OAAO,MAAM,KAAK,MAAM,IAAI,MAAM,EAAE,CAAC;oBACnC,EAAE,CAAC,CAAC;oBACJ,MAAM,GAAG,OAAO,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;oBAC7B,MAAM,GAAG,OAAO,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;gBAC/B,CAAC;gBAED,MAAM,GAAG,MAAM,IAAI,CAAC,CAAC;gBACrB,MAAM,GAAG,MAAM,IAAI,CAAC,CAAC;gBAErB,OAAO,eAAe,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,KAAK,eAAe,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC;oBACtE,CAAC,CAAC,SAAS,CAAC,IAAI;oBAChB,CAAC,CAAC,eAAe,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAE,GAAG,eAAe,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAE;wBACjE,CAAC,CAAC,SAAS,CAAC,MAAM;wBAClB,CAAC,CAAC,SAAS,CAAC,KAAK,CAAC;YACxB,CAAC;QACH,CAAC;QAED,MAAM,YAAY,GAAG,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,KAAK,CAAC,oBAAoB,CAAC,IAAI,CAAC,CAAC;QAC5E,MAAM,cAAc,GAAG,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QAC9C,cAAc,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE;YAC3B,MAAM,QAAQ,GAAG,YAAY,CAC3B,eAAe,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAC9C,CAAC;YAEF,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,aAAa,CAAC,GAAG,CAAC,EAAE,EAAE;gBAC1C,KAAK,EAAE,QAAQ;aAChB,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC;IAED,IAAI;QACF,QAAQ,CAAC,aAAa,CACpB,IAAI,KAAK,CAAC,MAAM,EAAE;YAChB,OAAO,EAAE,IAAI;YACb,UAAU,EAAE,IAAI;SACjB,CAAC,CACH,CAAC;IACJ,CAAC;IAED,KAAK,CAAC,SAAS,CACb,MAA2C,EAC3C,MAAiC;QAEjC,MAAM,SAAS,GAAG,MAAM,CAAC,MAAM,CAAC;QAChC,MAAM,SAAS,GAAG,MAAM,CAAC,MAAM,CAAC;QAEhC,IAAI,SAAS,GAAG,SAAS,KAAK,CAAC;YAAE,OAAO;QACxC,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;QACnD,YAAY,CAAC,MAAM,CAAC,CAAC;QACrB,aAAa;QACb,IAAI,MAAM,CAAC,IAAI,EAAE,SAAS,EAAE,qBAAqB,EAAE,CAAC;YAClD,aAAa;YACb,MAAM,MAAM,CAAC,IAAI,CAAC,SAAS,EAAE,qBAAqB,CAChD,MAAM,CAAC,SAAS,CAAC,SAAS,CAAC,CAC5B,CAAC;QACJ,CAAC;aAAM,CAAC;YACN,MAAM,IAAI,GAAS,MAAM,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE,CACvD,MAAM,CAAC,MAAM,CACX,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,4BAA4B,CAAC,CAAC,EACrE,SAAS,CACV,CACF,CAAC;YACF,YAAY,CAAC,IAAI,CAAC,CAAC;YAEnB,IAAI,CAAC,GAAG,CAAC,SAAS;iBACf,gBAAgB,CAAC,MAAM,CAAC,EAAE;gBACzB,OAAO;oBACL,GAAG,MAAM;oBACT,CAAC,SAAS,CAAC,EAAE,IAAI;iBAClB,CAAC;YACJ,CAAC,CAAC;iBACD,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QAC1B,CAAC;IACH,CAAC;IAED,KAAK,CAAC,+BAA+B,CACnC,eAAsD,EACtD,WAAkB;QAElB,IAAI,cAAc,EAAE,MAAM,EAAE,MAAM,CAAC;QACnC,CAAC;YACC,MAAM,EAAE,YAAY,EAAE,GAAG,IAAI,CAAC,WAAW,CAAC;YAC1C,WAAW;gBACT,WAAW;oBACX,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,YAAY,CAAC,YAAY,CAAC,CAAC,EAAE,YAAY,CAAC,CAAC,CAAC,CAAC;YAC1E,MAAM,CAAC,MAAM,EAAE,MAAM,CAAC,GAAG,WAAW,CAAC;YACrC,cAAc,GAAG,gCAAgC,CAAC,eAAe,CAAC,CAAC;YAEnE,MAAM,GAAG,MAAM,GAAG,cAAc,CAAC,CAAC,GAAG,CAAC,CAAC;YACvC,MAAM,GAAG,MAAM,GAAG,cAAc,CAAC,CAAC,GAAG,CAAC,CAAC;QACzC,CAAC;QAED,MAAM,UAAU,GAAG,CAAC,OAAuB,EAAE,EAAE;YAC7C,MAAM,QAAQ,GAAG,KAAK,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;YAC5C,OAAO,IAAI,KAAK,CACd,QAAQ,CAAC,CAAC,GAAG,MAAM,GAAG,cAAc,CAAC,CAAC,EACtC,QAAQ,CAAC,CAAC,GAAG,MAAM,GAAG,cAAc,CAAC,CAAC,EACtC,QAAQ,CAAC,CAAC,EACV,QAAQ,CAAC,CAAC,CACX,CAAC,SAAS,EAAE,CAAC;QAChB,CAAC,CAAC;QAEF,oCAAoC;QACpC,MAAM,eAAe,GAAG,IAAI,GAAG,EAAkB,CAAC;QAClD,MAAM,eAAe,GAAG,IAAI,GAAG,EAAkB,CAAC;QAElD,MAAM,WAAW,GAAwC,EAAE,CAAC;QAC5D,MAAM,cAAc,GAA8B,EAAE,CAAC;QACrD,MAAM,WAAW,GAA+B,EAAE,CAAC;QAEnD,KAAK,MAAM,IAAI,IAAI,eAAe,EAAE,CAAC;YACnC,MAAM,EAAE,IAAI,EAAE,aAAa,EAAE,GAAG,mBAAmB,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;YACpE,IAAI,aAAa,EAAE,CAAC;gBAClB,MAAM,KAAK,GAAG,aAAa,CAAC,EAAE,CAAC;gBAE/B,MAAM,MAAM,GAAG,IAAI,CAAC,aAAa,CAAC,IAAI,CACpC,CAAC,EAAE,OAAO,EAAE,EAAE,EAAE,CAAC,OAAO,KAAK,aAAa,CAAC,OAAO,CACnD,CAAC;gBACF,IAAI,CAAC,MAAM;oBAAE,SAAS;gBAEtB,IAAI,OAAO,aAAa,CAAC,KAAK,CAAC,IAAI,KAAK,QAAQ,EAAE,CAAC;oBACjD,OAAO,CAAC,KAAK,CAAC,aAAa,KAAK,+BAA+B,CAAC,CAAC;oBACjE,SAAS;gBACX,CAAC;gBAED,aAAa,CAAC,KAAK,CAAC,IAAI,GAAG,UAAU,CACnC,aAAa,CAAC,KAAK,CAAC,IAAsB,CAC3C,CAAC;gBACF,MAAM,KAAK,GAAG,MAAM,MAAM,CAAC,cAAc,CACvC,aAAa,EACb,eAAe,CAChB,CAAC;gBACF,IAAI,CAAC,KAAK;oBAAE,SAAS;gBAErB,MAAM,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;gBACvC,IAAI,CAAC,KAAK;oBAAE,SAAS;gBAErB,UAAU,CAAoC,KAAK,CAAC,KAAK,CAAC,CAAC;gBAC3D,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;gBAC9B,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;gBAC9B,eAAe,CAAC,GAAG,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;gBAElC,MAAM,KAAK,GAAG,aAAa,CAAC,KAA2B,CAAC;gBACxD,eAAe,CAAC,GAAG,CAAC,aAAa,CAAC,EAAE,EAAE,KAAK,CAAC,KAAK,CAAC,CAAC;YACrD,CAAC;iBAAM,CAAC;gBACN,UAAU,CAAoB,IAAI,CAAC,CAAC;gBACpC,MAAM,KAAK,GAAG,IAAI,CAAC,EAAE,CAAC;gBAEtB,MAAM,OAAO,GAAG,IAAI,CAAC,oBAAoB,CACvC,IAAI,EACJ,eAAe,EACf,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,CACtB,CAAC;gBAEF,cAAc,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;gBAC7B,WAAW,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;gBAE1B,eAAe,CAAC,GAAG,CAAC,KAAK,EAAE,OAAO,CAAC,EAAE,CAAC,CAAC;gBACvC,eAAe,CAAC,GAAG,CAAC,KAAK,EAAE,OAAO,CAAC,KAAK,CAAC,CAAC;YAC5C,CAAC;QACH,CAAC;QAED,eAAe,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,EAAE,EAAE,EAAE;YACpC,MAAM,KAAK,GAAG,eAAe,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;YACtC,IAAI,KAAK,EAAE,CAAC;gBACV,eAAe,CAAC,GAAG,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;YACpC,CAAC;QACH,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,0BAA0B,CAAC,WAAW,EAAE,eAAe,CAAC,CAAC;QAE9D,OAAO;YACL,cAAc,EAAE,cAAc;YAC9B,WAAW,EAAE,WAAW;SACzB,CAAC;IACJ,CAAC;IAEQ,aAAa;QACpB,IAAI,IAAI,CAAC,YAAY,CAAC,QAAQ,EAAE,CAAC;YAC/B,IAAI,CAAC,YAAY,GAAG,IAAI,eAAe,EAAE,CAAC;QAC5C,CAAC;QACD,IAAI,CAAC,KAAK,EAAE,CAAC;QACb,IAAI,CAAC,sBAAsB,EAAE,CAAC;IAChC,CAAC;IAED,aAAa,CAAC,OAAe,EAAE,cAAqC;QAClE,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC;YACtB,OAAO;YACP,cAAc,EAAE,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC;SAC1C,CAAC,CAAC;IACL,CAAC;IAED,KAAK,CAAC,QAAQ,CACZ,MAA2C,EAC3C,MAAiC,EACjC,OAA6B;QAE7B,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;QAC1B,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;QAE1B,MAAM,MAAM,GAAa,EAAE,CAAC;QAC5B,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;YACrB,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC;QAC7C,CAAC,CAAC,CAAC;QACH,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;YACrB,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,qBAAqB,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC,CAAC;QACrE,CAAC,CAAC,CAAC;QACH,MAAM,KAAK,GAAG,cAAc,CAAC,MAAM,CAAC,CAAC;QACrC,YAAY,CAAC,KAAK,EAAE,iBAAiB,CAAC,CAAC;QAEvC,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,iBAAiB,CACzC,IAAI,CAAC,IAAI,EACT,KAAK,EACL,MAAM,EACN,MAAM,EACN,OAAO,CACR,CAAC;QACF,OAAO,MAAM,CAAC;IAChB,CAAC;CACF;AAED,MAAM,CAAC,KAAK,UAAU,oBAAoB,CACxC,WAAuC,EACvC,GAAkB;IAElB,MAAM,GAAG,GAAG,IAAI,GAAG,CAAC;QAClB,UAAU,EAAE,GAAG,CAAC,UAAU;KAC3B,CAAC,CAAC;IACH,MAAM,QAAQ,GAAG,MAAM,OAAO,CAAC,GAAG,CAChC,WAAW,CAAC,GAAG,CAAC,KAAK,EAAC,QAAQ,EAAC,EAAE;QAC/B,MAAM,IAAI,GAAG,MAAM,gBAAgB,CAAC,QAAQ,EAAE,WAAW,EAAE,GAAG,CAAC,CAAC;QAChE,IAAI,CAAC,IAAI,EAAE,CAAC;YACV,OAAO;QACT,CAAC;QACD,IAAI,iBAAiB,CAAC,QAAQ,CAAC,IAAI,YAAY,CAAC,QAAQ,CAAC,EAAE,CAAC;YAC1D,MAAM,GAAG,CAAC,aAAa,CAAC,YAAY,CAAC,IAAI,CAAC,KAAK,CAAC,QAAkB,CAAC,CAAC;QACtE,CAAC;QACD,OAAO,IAAI,CAAC;IACd,CAAC,CAAC,CACH,CAAC;IACF,MAAM,KAAK,GAAG,MAAM,oBAAoB,CAAC,GAAG,CAAC,aAAa,CAAC,SAAS,EAAE,CAAC,CAAC;IACxE,OAAO;QACL,QAAQ,EAAE,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;QACnC,KAAK;KACN,CAAC;AACJ,CAAC;AAED,SAAS,qBAAqB,CAAC,aAA2B;IACxD,MAAM,KAAK,GAAG,aAAa,CAAC,KAAK,CAAC;IAClC,OAAO,CACL,CAAC,KAAK,CAAC,MAAM,KAAK,CAAC,IAAI,KAAK,CAAC,CAAC,CAAC,KAAK,OAAO,CAAC;QAC5C,CAAC,KAAK,CAAC,MAAM,KAAK,CAAC;YACjB,CAAC,KAAK,CAAC,QAAQ,CAAC,YAAY,CAAC,IAAI,KAAK,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC;YAC7D,KAAK,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,CAC3B,CAAC;AACJ,CAAC;AAED,SAAS,sBAAsB,CAAC,aAA2B;IACzD,MAAM,KAAK,GAAG,aAAa,CAAC,KAAK,CAAC;IAElC,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC,IAAI,KAAK,CAAC,CAAC,CAAC,KAAK,YAAY,EAAE,CAAC;QACpD,OAAO,IAAI,CAAC;IACd,CAAC;IAED,MAAM,MAAM,GAAG,IAAI,SAAS,EAAE,CAAC;IAC/B,MAAM,MAAM,GAAG,MAAM,CAAC,eAAe,CACnC,aAAa,CAAC,OAAO,CAAC,YAAY,CAAC,EACnC,eAAe,CAChB,CAAC;IACF,MAAM,GAAG,GAAG,MAAM,CAAC,eAAe,CAAC;IAEnC,IAAI,GAAG,CAAC,OAAO,KAAK,KAAK,IAAI,CAAC,GAAG,CAAC,YAAY,CAAC,OAAO,CAAC,EAAE,CAAC;QACxD,OAAO,IAAI,CAAC;IACd,CAAC;IACD,MAAM,UAAU,GAAG,SAAS,CAAC,QAAQ,CAAC,MAAM,CAAC,eAAe,EAAE;QAC5D,YAAY,EAAE,EAAE,GAAG,EAAE,IAAI,EAAE;KAC5B,CAAC,CAAC;IACH,MAAM,IAAI,GAAG,IAAI,IAAI,CAAC,CAAC,UAAU,CAAC,EAAE,EAAE,IAAI,EAAE,eAAe,EAAE,CAAC,CAAC;IAC/D,MAAM,IAAI,GAAG,IAAI,IAAI,CAAC,CAAC,IAAI,CAAC,EAAE,kBAAkB,EAAE,EAAE,IAAI,EAAE,eAAe,EAAE,CAAC,CAAC;IAC7E,OAAO,IAAI,CAAC;AACd,CAAC","sourcesContent":["import type { Connection, GfxCompatibleProps } from '@lumensuite/affine-model';\nimport type {\n  BlockStdScope,\n  EditorHost,\n  SurfaceSelection,\n  UIEventStateContext,\n} from '@lumensuite/block-std';\nimport type { SerializedElement } from '@lumensuite/block-std/gfx';\nimport type { IBound, IVec, SerializedXYWH } from '@lumensuite/global/utils';\n\nimport {\n  CanvasElementType,\n  CommonUtils,\n  compareLayer,\n  SortOrder,\n  SurfaceGroupLikeModel,\n  TextUtils,\n} from '@lumensuite/affine-block-surface';\nimport { BookmarkStyles } from '@lumensuite/affine-model';\nimport {\n  EmbedOptionProvider,\n  QuickSearchProvider,\n  TelemetryProvider,\n} from '@lumensuite/affine-shared/services';\nimport {\n  isInsidePageEditor,\n  isUrlInClipboard,\n  matchFlavours,\n} from '@lumensuite/affine-shared/utils';\nimport { LumenSuiteError, ErrorCode } from '@lumensuite/global/exceptions';\nimport {\n  assertExists,\n  assertType,\n  Bound,\n  DisposableGroup,\n  getCommonBound,\n  nToLast,\n  Vec,\n} from '@lumensuite/global/utils';\nimport {\n  type BlockSnapshot,\n  BlockSnapshotSchema,\n  DocCollection,\n  fromJSON,\n  Job,\n  type SliceSnapshot,\n} from '@lumensuite/store';\nimport DOMPurify from 'dompurify';\n\nimport type { EdgelessRootBlockComponent } from '../edgeless-root-block.js';\n\nimport {\n  CANVAS_EXPORT_IGNORE_TAGS,\n  EMBED_CARD_HEIGHT,\n  EMBED_CARD_WIDTH,\n} from '../../../_common/consts.js';\nimport { getRootByEditorHost } from '../../../_common/utils/query.js';\nimport { extractSearchParams } from '../../../_common/utils/url.js';\nimport { ClipboardAdapter } from '../../clipboard/adapter.js';\nimport { PageClipboard } from '../../clipboard/index.js';\nimport {\n  decodeClipboardBlobs,\n  encodeClipboardBlobs,\n} from '../../clipboard/utils.js';\nimport { edgelessElementsBoundFromRawData } from '../utils/bound-utils.js';\nimport {\n  getSortedCloneElements,\n  serializeElement,\n} from '../utils/clone-utils.js';\nimport { DEFAULT_NOTE_HEIGHT, DEFAULT_NOTE_WIDTH } from '../utils/consts.js';\nimport { deleteElements } from '../utils/crud.js';\nimport {\n  isAttachmentBlock,\n  isCanvasElementWithText,\n  isImageBlock,\n  isTopLevelBlock,\n} from '../utils/query.js';\n\nconst BLOCKSUITE_SURFACE = 'lumensuite/surface';\nconst IMAGE_PNG = 'image/png';\n\nconst { GROUP, MINDMAP, CONNECTOR } = CanvasElementType;\nconst IMAGE_PADDING = 5; // for rotated shapes some padding is needed\n\ntype BlockCreationFunction = (\n  snapshot: BlockSnapshot,\n  oldToNewIdsMap: Map<string, string>\n) => Promise<string | null> | string | null; // new Id\n\ninterface CanvasExportOptions {\n  dpr?: number;\n  padding?: number;\n  background?: string;\n}\n\ninterface BlockConfig {\n  flavour: string;\n  createFunction: BlockCreationFunction;\n}\n\nexport class EdgelessClipboardController extends PageClipboard {\n  private _blockConfigs: BlockConfig[] = [];\n\n  private _initEdgelessClipboard = () => {\n    this.host.handleEvent(\n      'copy',\n      ctx => {\n        const { surfaceSelections, selectedIds } = this.selectionManager;\n\n        if (selectedIds.length === 0) return false;\n\n        this._onCopy(ctx, surfaceSelections);\n        return;\n      },\n      { global: true }\n    );\n\n    this.host.handleEvent(\n      'paste',\n      ctx => {\n        this._onPaste(ctx).catch(console.error);\n      },\n      { global: true }\n    );\n\n    this.host.handleEvent(\n      'cut',\n      ctx => {\n        this._onCut(ctx);\n      },\n      { global: true }\n    );\n  };\n\n  private _onCopy = (\n    _context: UIEventStateContext,\n    surfaceSelection: SurfaceSelection[]\n  ) => {\n    const event = _context.get('clipboardState').raw;\n    event.preventDefault();\n\n    const elements = getSortedCloneElements(\n      this.selectionManager.selectedElements\n    );\n\n    // when note active, handle copy like page mode\n    if (surfaceSelection[0] && surfaceSelection[0].editing) {\n      // use build-in copy handler in rich-text when copy in surface text element\n      if (isCanvasElementWithText(elements[0])) return;\n      this.onPageCopy(_context);\n      return;\n    }\n\n    this.std.clipboard\n      .writeToClipboard(async _items => {\n        const data = await prepareClipboardData(elements, this.std);\n        return {\n          ..._items,\n          [BLOCKSUITE_SURFACE]: JSON.stringify(data),\n        };\n      })\n      .catch(console.error);\n  };\n\n  private _onCut = (_context: UIEventStateContext) => {\n    const { surfaceSelections, selectedElements } = this.selectionManager;\n\n    if (selectedElements.length === 0) return;\n\n    const event = _context.get('clipboardState').event;\n    event.preventDefault();\n\n    this._onCopy(_context, surfaceSelections);\n\n    if (surfaceSelections[0]?.editing) {\n      // use build-in cut handler in rich-text when cut in surface text element\n      if (isCanvasElementWithText(selectedElements[0])) return;\n      this.onPageCut(_context);\n      return;\n    }\n\n    const elements = getSortedCloneElements(\n      this.selectionManager.selectedElements\n    );\n    this.doc.transact(() => {\n      deleteElements(this.edgeless, elements);\n    });\n\n    this.selectionManager.set({\n      editing: false,\n      elements: [],\n    });\n  };\n\n  private _onPaste = async (_context: UIEventStateContext) => {\n    if (\n      document.activeElement instanceof HTMLInputElement ||\n      document.activeElement instanceof HTMLTextAreaElement\n    ) {\n      return;\n    }\n    const event = _context.get('clipboardState').raw;\n    event.preventDefault();\n\n    const { surfaceSelections, selectedElements } = this.selectionManager;\n\n    if (surfaceSelections[0]?.editing) {\n      // use build-in paste handler in rich-text when paste in surface text element\n      if (isCanvasElementWithText(selectedElements[0])) return;\n      this.onPagePaste(_context);\n      return;\n    }\n\n    const data = event.clipboardData;\n    if (!data) return;\n\n    const { lastMousePos } = this.toolManager;\n    const point: IVec = [lastMousePos.x, lastMousePos.y];\n\n    if (isPureFileInClipboard(data)) {\n      const files = data.files;\n      if (files.length === 0) return;\n\n      const imageFiles: File[] = [],\n        attachmentFiles: File[] = [];\n\n      [...files].forEach(file => {\n        if (file.type.startsWith('image/')) {\n          imageFiles.push(file);\n        } else {\n          attachmentFiles.push(file);\n        }\n      });\n\n      // when only images in clipboard, add image-blocks else add all files as attachments\n      if (attachmentFiles.length === 0) {\n        await this.host.addImages(imageFiles, point);\n      } else {\n        await this.host.addAttachments([...files], point);\n      }\n\n      this.std.getOptional(TelemetryProvider)?.track('CanvasElementAdded', {\n        control: 'canvas:paste',\n        page: 'whiteboard editor',\n        module: 'toolbar',\n        segment: 'toolbar',\n        type: attachmentFiles.length === 0 ? 'image' : 'attachment',\n      });\n\n      return;\n    }\n\n    if (isUrlInClipboard(data)) {\n      const url = data.getData('text/plain');\n      const { lastMousePos } = this.toolManager;\n      const [x, y] = this.host.service.viewport.toModelCoord(\n        lastMousePos.x,\n        lastMousePos.y\n      );\n\n      // try to interpret url as affine doc url\n      const quickSearchService = this.std.getOptional(QuickSearchProvider);\n      const doc = await quickSearchService?.searchDoc({\n        action: 'insert',\n        userInput: url,\n        skipSelection: true,\n      });\n      const pageId = doc && 'docId' in doc ? doc.docId : undefined;\n      const options: Record<string, unknown> = {};\n\n      let flavour = 'affine:bookmark';\n      let style = BookmarkStyles[0];\n      let isLinkToNode = false;\n\n      if (pageId) {\n        options.pageId = pageId;\n        flavour = 'affine:embed-linked-doc';\n        style = 'vertical';\n\n        const extracted = extractSearchParams(url);\n\n        isLinkToNode = Boolean(\n          extracted?.params?.mode &&\n            (extracted.params.blockIds?.length ||\n              extracted.params.elementIds?.length)\n        );\n\n        Object.assign(options, extracted);\n      } else {\n        options.url = url;\n\n        const embedOptions = this.std\n          .get(EmbedOptionProvider)\n          .getEmbedBlockOptions(url);\n        if (embedOptions) {\n          flavour = embedOptions.flavour as LumenSuite.EdgelessModelKeys;\n          style = embedOptions.styles[0];\n        }\n      }\n\n      const width = EMBED_CARD_WIDTH[style];\n      const height = EMBED_CARD_HEIGHT[style];\n\n      options.xywh = Bound.fromCenter(\n        Vec.toVec({\n          x,\n          y,\n        }),\n        width,\n        height\n      ).serialize();\n      options.style = style;\n\n      const id = this.host.service.addBlock(\n        flavour,\n        options,\n        this.surface.model.id\n      );\n\n      this.std.getOptional(TelemetryProvider)?.track('CanvasElementAdded', {\n        control: 'canvas:paste',\n        page: 'whiteboard editor',\n        module: 'toolbar',\n        segment: 'toolbar',\n        type: flavour.split(':')[1],\n      });\n\n      this.std.getOptional(TelemetryProvider)?.track('LinkedDocCreated', {\n        page: 'whiteboard editor',\n        segment: 'whiteboard',\n        category: 'pasted link',\n        other: 'existing doc',\n        type: isLinkToNode ? 'block' : 'doc',\n      });\n\n      this.selectionManager.set({\n        editing: false,\n        elements: [id],\n      });\n\n      return;\n    }\n\n    const svg = tryGetSvgFromClipboard(data);\n    if (svg) {\n      await this.host.addImages([svg], point);\n      return;\n    }\n    try {\n      // check for surface elements in clipboard\n      const json = this.std.clipboard.readFromClipboard(data);\n      const mayBeSurfaceDataJson = json[BLOCKSUITE_SURFACE];\n      if (mayBeSurfaceDataJson !== undefined) {\n        const elementsRawData = JSON.parse(mayBeSurfaceDataJson);\n        const { snapshot, blobs } = elementsRawData;\n        const job = new Job({ collection: this.std.collection });\n        const map = job.assetsManager.getAssets();\n        decodeClipboardBlobs(blobs, map);\n        for (const blobId of map.keys()) {\n          await job.assetsManager.writeToBlob(blobId);\n        }\n        await this._pasteShapesAndBlocks(snapshot);\n        return;\n      }\n      // check for slice snapshot in clipboard\n      const mayBeSliceDataJson = json[ClipboardAdapter.MIME];\n      if (mayBeSliceDataJson === undefined) return;\n      const clipData = JSON.parse(mayBeSliceDataJson);\n      const sliceSnapShot = clipData?.snapshot as SliceSnapshot;\n      await this._pasteTextContentAsNote(sliceSnapShot.content);\n    } catch (_) {\n      // if it is not parsable\n      await this._pasteTextContentAsNote(data.getData('text/plain'));\n    }\n  };\n\n  private get _exportManager() {\n    return this._rootService.exportManager;\n  }\n\n  private get _rootService() {\n    return this.std.getService('affine:page');\n  }\n\n  private get doc() {\n    return this.host.doc;\n  }\n\n  private get edgeless() {\n    return this.host;\n  }\n\n  private get selectionManager() {\n    return this.host.service.selection;\n  }\n\n  private get std() {\n    return this.host.std;\n  }\n\n  private get surface() {\n    return this.host.surface;\n  }\n\n  private get toolManager() {\n    return this.host.tools;\n  }\n\n  constructor(public override host: EdgelessRootBlockComponent) {\n    super(host);\n    // Register existing block creation functions\n    this.registerBlock('affine:note', this._createNoteBlock);\n    this.registerBlock('affine:edgeless-text', this._createEdgelessTextBlock);\n    this.registerBlock('affine:image', this._createImageBlock);\n    this.registerBlock('affine:frame', this._createFrameBlock);\n    this.registerBlock('affine:attachment', this._createAttachmentBlock);\n    this.registerBlock('affine:bookmark', this._createBookmarkBlock);\n    this.registerBlock('affine:embed-github', this._createGithubEmbedBlock);\n    this.registerBlock('affine:embed-youtube', this._createYoutubeEmbedBlock);\n    this.registerBlock('affine:embed-figma', this._createFigmaEmbedBlock);\n    this.registerBlock(\n      'affine:embed-linked-doc',\n      this._createLinkedDocEmbedBlock\n    );\n    this.registerBlock(\n      'affine:embed-synced-doc',\n      this._createSyncedDocEmbedBlock\n    );\n    this.registerBlock('affine:embed-html', this._createHtmlEmbedBlock);\n    this.registerBlock('affine:embed-loom', this._createLoomEmbedBlock);\n  }\n\n  private _checkCanContinueToCanvas(\n    host: EditorHost,\n    pathName: string,\n    editorMode: boolean\n  ) {\n    if (\n      location.pathname !== pathName ||\n      isInsidePageEditor(host) !== editorMode\n    ) {\n      throw new Error('Unable to export content to canvas');\n    }\n  }\n\n  private async _createAttachmentBlock(attachment: BlockSnapshot) {\n    const { xywh, rotate, sourceId, name, size, type, embed, style } =\n      attachment.props;\n\n    if (!(await this.host.std.collection.blobSync.get(sourceId as string))) {\n      return null;\n    }\n    const attachmentId = this.host.service.addBlock(\n      'affine:attachment',\n      {\n        xywh,\n        rotate,\n        sourceId,\n        name,\n        size,\n        type,\n        embed,\n        style,\n      },\n      this.surface.model.id\n    );\n    return attachmentId;\n  }\n\n  private _createBookmarkBlock(bookmark: BlockSnapshot) {\n    const { xywh, style, url, caption, description, icon, image, title } =\n      bookmark.props;\n\n    const bookmarkId = this.host.service.addBlock(\n      'affine:bookmark',\n      {\n        xywh,\n        style,\n        url,\n        caption,\n        description,\n        icon,\n        image,\n        title,\n      },\n      this.surface.model.id\n    );\n    return bookmarkId;\n  }\n\n  private _createCanvasElement(\n    clipboardData: SerializedElement,\n    oldToNewIdsMap: Map<string, string>,\n    newXYWH: SerializedXYWH\n  ) {\n    if (clipboardData.type === GROUP) {\n      const yMap = new DocCollection.Y.Map();\n      const children = clipboardData.children ?? {};\n\n      for (const [key, value] of Object.entries(children)) {\n        const newKey = oldToNewIdsMap.get(key);\n        assertExists(\n          newKey,\n          'Copy failed: cannot find the copied child in group'\n        );\n        yMap.set(newKey, value);\n      }\n      clipboardData.children = yMap;\n      clipboardData.xywh = newXYWH;\n    } else if (clipboardData.type === MINDMAP) {\n      const yMap = new DocCollection.Y.Map();\n      const children = clipboardData.children ?? {};\n\n      for (const [oldKey, oldValue] of Object.entries(children)) {\n        const newKey = oldToNewIdsMap.get(oldKey);\n        const newValue = {\n          ...oldValue,\n        };\n        assertExists(\n          newKey,\n          'Copy failed: cannot find the copied node in mind map'\n        );\n\n        if (oldValue.parent) {\n          const newParent = oldToNewIdsMap.get(oldValue.parent);\n          assertExists(\n            newParent,\n            'Copy failed: cannot find the copied node in mind map'\n          );\n          newValue.parent = newParent;\n        }\n\n        yMap.set(newKey, newValue);\n      }\n      clipboardData.children = yMap;\n    } else if (clipboardData.type === CONNECTOR) {\n      const source = clipboardData.source as Connection;\n      const target = clipboardData.target as Connection;\n\n      const oldBound = Bound.deserialize(clipboardData.xywh);\n      const newBound = Bound.deserialize(newXYWH);\n      const offset = Vec.sub(\n        [newBound.x, newBound.y],\n        [oldBound.x, oldBound.y]\n      );\n\n      if (source.id) {\n        source.id = oldToNewIdsMap.get(source.id) ?? source.id;\n      } else if (source.position) {\n        source.position = Vec.add(source.position, offset);\n      }\n\n      if (target.id) {\n        target.id = oldToNewIdsMap.get(target.id) ?? target.id;\n      } else if (target.position) {\n        target.position = Vec.add(target.position, offset);\n      }\n    } else {\n      clipboardData.xywh = newXYWH;\n    }\n\n    const id = this.host.service.addElement(\n      clipboardData.type as CanvasElementType,\n      clipboardData\n    );\n    this.std.getOptional(TelemetryProvider)?.track('CanvasElementAdded', {\n      control: 'canvas:paste',\n      page: 'whiteboard editor',\n      module: 'toolbar',\n      segment: 'toolbar',\n      type: clipboardData.type as string,\n    });\n    const element = this.host.service.getElementById(\n      id\n    ) as LumenSuite.SurfaceModel;\n    assertExists(element);\n    return element;\n  }\n\n  private async _createEdgelessTextBlock(edgelessText: BlockSnapshot) {\n    const oldId = edgelessText.id;\n    delete edgelessText.props.index;\n    if (!edgelessText.props.xywh) {\n      console.error(\n        `EdgelessText block(id: ${oldId}) does not have xywh property`\n      );\n      return null;\n    }\n    const newId = await this.onBlockSnapshotPaste(\n      edgelessText,\n      this.doc,\n      this.edgeless.surface.model.id\n    );\n    if (!newId) {\n      console.error(`Failed to paste EdgelessText block(id: ${oldId})`);\n      return null;\n    }\n\n    return newId;\n  }\n\n  private _createFigmaEmbedBlock(figmaEmbed: BlockSnapshot) {\n    const { xywh, style, url, caption, title, description } = figmaEmbed.props;\n\n    const embedFigmaId = this.host.service.addBlock(\n      'affine:embed-figma',\n      {\n        xywh,\n        style,\n        url,\n        caption,\n        title,\n        description,\n      },\n      this.surface.model.id\n    );\n    return embedFigmaId;\n  }\n\n  private _createFrameBlock(\n    frame: BlockSnapshot,\n    oldToNewIdMap: Map<string, string>\n  ) {\n    const { xywh, title, background, childElementIds } = frame.props;\n\n    const newChildElementIds: Record<string, boolean> = {};\n\n    if (typeof childElementIds === 'object' && childElementIds !== null) {\n      Object.keys(childElementIds).forEach(oldId => {\n        const newId = oldToNewIdMap.get(oldId);\n        if (newId) {\n          newChildElementIds[newId] = true;\n        }\n      });\n    }\n\n    const frameId = this.host.service.addBlock(\n      'affine:frame',\n      {\n        xywh,\n        background,\n        title: fromJSON(title),\n        childElementIds: newChildElementIds,\n      },\n      this.surface.model.id\n    );\n    return frameId;\n  }\n\n  private _createGithubEmbedBlock(githubEmbed: BlockSnapshot) {\n    const {\n      xywh,\n      style,\n      owner,\n      repo,\n      githubType,\n      githubId,\n      url,\n      caption,\n      image,\n      status,\n      statusReason,\n      title,\n      description,\n      createdAt,\n      assignees,\n    } = githubEmbed.props;\n\n    const embedGithubId = this.host.service.addBlock(\n      'affine:embed-github',\n      {\n        xywh,\n        style,\n        owner,\n        repo,\n        githubType,\n        githubId,\n        url,\n        caption,\n        image,\n        status,\n        statusReason,\n        title,\n        description,\n        createdAt,\n        assignees,\n      },\n      this.surface.model.id\n    );\n    return embedGithubId;\n  }\n\n  private _createHtmlEmbedBlock(htmlEmbed: BlockSnapshot) {\n    const { xywh, style, caption, html, design } = htmlEmbed.props;\n\n    const embedHtmlId = this.host.service.addBlock(\n      'affine:embed-html',\n      {\n        xywh,\n        style,\n        caption,\n        html,\n        design,\n      },\n      this.surface.model.id\n    );\n    return embedHtmlId;\n  }\n\n  private async _createImageBlock(image: BlockSnapshot) {\n    const { xywh, rotate, sourceId, size, width, height, caption } =\n      image.props;\n\n    if (!(await this.host.std.collection.blobSync.get(sourceId as string))) {\n      return null;\n    }\n    return this.host.service.addBlock(\n      'affine:image',\n      {\n        caption,\n        sourceId,\n        xywh,\n        rotate,\n        size,\n        width,\n        height,\n      },\n      this.surface.model.id\n    );\n  }\n\n  private _createLinkedDocEmbedBlock(linkedDocEmbed: BlockSnapshot) {\n    const { xywh, style, caption, pageId } = linkedDocEmbed.props;\n\n    return this.host.service.addBlock(\n      'affine:embed-linked-doc',\n      {\n        xywh,\n        style,\n        caption,\n        pageId,\n      },\n      this.surface.model.id\n    );\n  }\n\n  private _createLoomEmbedBlock(loomEmbed: BlockSnapshot) {\n    const { xywh, style, url, caption, videoId, image, title, description } =\n      loomEmbed.props;\n\n    const embedLoomId = this.host.service.addBlock(\n      'affine:embed-loom',\n      {\n        xywh,\n        style,\n        url,\n        caption,\n        videoId,\n        image,\n        title,\n        description,\n      },\n      this.surface.model.id\n    );\n    return embedLoomId;\n  }\n\n  private async _createNoteBlock(note: BlockSnapshot) {\n    const oldId = note.id;\n\n    delete note.props.index;\n    if (!note.props.xywh) {\n      console.error(`Note block(id: ${oldId}) does not have xywh property`);\n      return null;\n    }\n\n    const newId = await this.onBlockSnapshotPaste(\n      note,\n      this.doc,\n      this.doc.root!.id\n    );\n    if (!newId) {\n      console.error(`Failed to paste note block(id: ${oldId})`);\n      return null;\n    }\n\n    return newId;\n  }\n\n  private _createSyncedDocEmbedBlock(syncedDocEmbed: BlockSnapshot) {\n    const { xywh, style, caption, scale, pageId } = syncedDocEmbed.props;\n\n    return this.host.service.addBlock(\n      'affine:embed-synced-doc',\n      {\n        xywh,\n        style,\n        caption,\n        scale,\n        pageId,\n      },\n      this.surface.model.id\n    );\n  }\n\n  private _createYoutubeEmbedBlock(youtubeEmbed: BlockSnapshot) {\n    const {\n      xywh,\n      style,\n      url,\n      caption,\n      videoId,\n      image,\n      title,\n      description,\n      creator,\n      creatorUrl,\n      creatorImage,\n    } = youtubeEmbed.props;\n\n    const embedYoutubeId = this.host.service.addBlock(\n      'affine:embed-youtube',\n      {\n        xywh,\n        style,\n        url,\n        caption,\n        videoId,\n        image,\n        title,\n        description,\n        creator,\n        creatorUrl,\n        creatorImage,\n      },\n      this.surface.model.id\n    );\n    return embedYoutubeId;\n  }\n\n  private async _edgelessToCanvas(\n    edgeless: EdgelessRootBlockComponent,\n    bound: IBound,\n    nodes?: LumenSuite.EdgelessBlockModelType[],\n    canvasElements: LumenSuite.SurfaceModel[] = [],\n    {\n      background,\n      padding = IMAGE_PADDING,\n      dpr = window.devicePixelRatio || 1,\n    }: CanvasExportOptions = {}\n  ): Promise<HTMLCanvasElement | undefined> {\n    const host = edgeless.host;\n    const rootModel = this.doc.root;\n    if (!rootModel) return;\n\n    const html2canvas = (await import('html2canvas')).default;\n    if (!(html2canvas instanceof Function)) return;\n\n    const pathname = location.pathname;\n    const editorMode = isInsidePageEditor(host);\n\n    const rootComponent = getRootByEditorHost(host);\n    assertExists(rootComponent);\n\n    const container = rootComponent.querySelector(\n      '.affine-block-children-container'\n    );\n    if (!container) return;\n\n    const canvas = document.createElement('canvas');\n    canvas.width = (bound.w + padding * 2) * dpr;\n    canvas.height = (bound.h + padding * 2) * dpr;\n    const ctx = canvas.getContext('2d');\n    if (!ctx) return;\n    if (background) {\n      ctx.fillStyle = background;\n      ctx.fillRect(0, 0, canvas.width, canvas.height);\n    }\n    ctx.scale(dpr, dpr);\n\n    const replaceImgSrcWithSvg = this._exportManager.replaceImgSrcWithSvg;\n    const replaceRichTextWithSvgElementFunc =\n      this._replaceRichTextWithSvgElement.bind(this);\n\n    const imageProxy = host.std.clipboard.configs.get('imageProxy');\n    const html2canvasOption = {\n      ignoreElements: function (element: Element) {\n        if (\n          CANVAS_EXPORT_IGNORE_TAGS.includes(element.tagName) ||\n          element.classList.contains('dg')\n        ) {\n          return true;\n        } else {\n          return false;\n        }\n      },\n\n      onclone: async function (documentClone: Document, element: HTMLElement) {\n        // html2canvas can't support transform feature\n        element.style.setProperty('transform', 'none');\n        const layer = documentClone.querySelector('.affine-edgeless-layer');\n        if (layer && layer instanceof HTMLElement) {\n          layer.style.setProperty('transform', 'none');\n        }\n\n        const boxShadowElements = documentClone.querySelectorAll(\n          \"[style*='box-shadow']\"\n        );\n        boxShadowElements.forEach(function (element) {\n          if (element instanceof HTMLElement) {\n            element.style.setProperty('box-shadow', 'none');\n          }\n        });\n        await replaceImgSrcWithSvg(element);\n        replaceRichTextWithSvgElementFunc(element);\n      },\n      backgroundColor: 'transparent',\n      useCORS: imageProxy ? false : true,\n      proxy: imageProxy,\n    };\n\n    const _drawTopLevelBlock = async (\n      block: LumenSuite.EdgelessBlockModelType,\n      isInFrame = false\n    ) => {\n      const blockComponent = this.std.view.getBlock(block.id);\n      if (!blockComponent) {\n        throw new LumenSuiteError(\n          ErrorCode.EdgelessExportError,\n          'Could not find edgeless block component.'\n        );\n      }\n\n      const blockBound = Bound.deserialize(block.xywh);\n      const canvasData = await html2canvas(\n        blockComponent as HTMLElement,\n        html2canvasOption\n      );\n      ctx.drawImage(\n        canvasData,\n        blockBound.x - bound.x + padding,\n        blockBound.y - bound.y + padding,\n        blockBound.w,\n        isInFrame\n          ? (blockBound.w / canvasData.width) * canvasData.height\n          : blockBound.h\n      );\n    };\n\n    const nodeElements =\n      nodes ??\n      (edgeless.service.gfx.getElementsByBound(bound, {\n        type: 'block',\n      }) as LumenSuite.EdgelessBlockModelType[]);\n    for (const nodeElement of nodeElements) {\n      await _drawTopLevelBlock(nodeElement);\n\n      if (matchFlavours(nodeElement, ['affine:frame'])) {\n        const blocksInsideFrame: LumenSuite.EdgelessBlockModelType[] = [];\n        this.edgeless.service.frame\n          .getElementsInFrameBound(nodeElement, false)\n          .forEach(ele => {\n            if (isTopLevelBlock(ele)) {\n              blocksInsideFrame.push(ele as LumenSuite.EdgelessBlockModelType);\n            } else {\n              canvasElements.push(ele as LumenSuite.SurfaceModel);\n            }\n          });\n\n        for (let i = 0; i < blocksInsideFrame.length; i++) {\n          const element = blocksInsideFrame[i];\n          await _drawTopLevelBlock(element, true);\n        }\n      }\n\n      this._checkCanContinueToCanvas(host, pathname, editorMode);\n    }\n\n    const surfaceCanvas = edgeless.surface.renderer.getCanvasByBound(\n      bound,\n      canvasElements\n    );\n    ctx.drawImage(surfaceCanvas, padding, padding, bound.w, bound.h);\n\n    return canvas;\n  }\n\n  private _elementToSvgElement(\n    node: HTMLElement,\n    width: number,\n    height: number\n  ) {\n    const xmlns = 'http://www.w3.org/2000/svg';\n    const svg = document.createElementNS(xmlns, 'svg');\n    const foreignObject = document.createElementNS(xmlns, 'foreignObject');\n\n    svg.setAttribute('width', `${width}`);\n    svg.setAttribute('height', `${height}`);\n    svg.setAttribute('viewBox', `0 0 ${width} ${height}`);\n\n    foreignObject.setAttribute('width', '100%');\n    foreignObject.setAttribute('height', '100%');\n    foreignObject.setAttribute('x', '0');\n    foreignObject.setAttribute('y', '0');\n    foreignObject.setAttribute('externalResourcesRequired', 'true');\n\n    svg.append(foreignObject);\n    foreignObject.append(node);\n    return svg;\n  }\n\n  private _emitSelectionChangeAfterPaste(\n    canvasElementIds: string[],\n    blockIds: string[]\n  ) {\n    const newSelected = [\n      ...canvasElementIds,\n      ...blockIds.filter(id => {\n        return isTopLevelBlock(this.doc.getBlockById(id));\n      }),\n    ];\n\n    this.selectionManager.set({\n      editing: false,\n      elements: newSelected,\n    });\n  }\n\n  private async _pasteShapesAndBlocks(\n    elementsRawData: (SerializedElement | BlockSnapshot)[]\n  ) {\n    const { canvasElements, blockModels } =\n      await this.createElementsFromClipboardData(elementsRawData);\n    this._emitSelectionChangeAfterPaste(\n      canvasElements.map(ele => ele.id),\n      blockModels.map(block => block.id)\n    );\n  }\n\n  private async _pasteTextContentAsNote(content: BlockSnapshot[] | string) {\n    const edgeless = this.host;\n    const { lastMousePos } = this.toolManager;\n    const [x, y] = edgeless.service.viewport.toModelCoord(\n      lastMousePos.x,\n      lastMousePos.y\n    );\n\n    const noteProps = {\n      xywh: new Bound(\n        x,\n        y,\n        DEFAULT_NOTE_WIDTH,\n        DEFAULT_NOTE_HEIGHT\n      ).serialize(),\n    };\n\n    const noteId = edgeless.service.addBlock(\n      'affine:note',\n      noteProps,\n      this.doc.root!.id\n    );\n\n    this.std.getOptional(TelemetryProvider)?.track('CanvasElementAdded', {\n      control: 'canvas:paste',\n      page: 'whiteboard editor',\n      module: 'toolbar',\n      segment: 'toolbar',\n      type: 'note',\n    });\n\n    if (typeof content === 'string') {\n      TextUtils.splitIntoLines(content).forEach((line, idx) => {\n        edgeless.service.addBlock(\n          'affine:paragraph',\n          { text: new DocCollection.Y.Text(line) },\n          noteId,\n          idx\n        );\n      });\n    } else {\n      for (let index = 0; index < content.length; index++) {\n        await this.onBlockSnapshotPaste(\n          content[index],\n          this.doc,\n          noteId,\n          index\n        );\n      }\n    }\n\n    edgeless.service.selection.set({\n      elements: [noteId],\n      editing: false,\n    });\n    edgeless.tools.setEdgelessTool({ type: 'default' });\n  }\n\n  private _replaceRichTextWithSvgElement(element: HTMLElement) {\n    const richList = Array.from(element.querySelectorAll('.inline-editor'));\n    richList.forEach(rich => {\n      const svgEle = this._elementToSvgElement(\n        rich.cloneNode(true) as HTMLElement,\n        rich.clientWidth,\n        rich.clientHeight + 1\n      );\n      rich.parentElement?.append(svgEle);\n      rich.remove();\n    });\n  }\n\n  private _updatePastedElementsIndex(\n    elements: LumenSuite.EdgelessModel[],\n    originalIndexes: Map<string, string>\n  ) {\n    function compare(a: LumenSuite.EdgelessModel, b: LumenSuite.EdgelessModel) {\n      if (a instanceof SurfaceGroupLikeModel && a.hasDescendant(b)) {\n        return SortOrder.BEFORE;\n      } else if (b instanceof SurfaceGroupLikeModel && b.hasDescendant(a)) {\n        return SortOrder.AFTER;\n      } else {\n        const aGroups = a.groups as LumenSuite.SurfaceGroupLikeModel[];\n        const bGroups = b.groups as LumenSuite.SurfaceGroupLikeModel[];\n\n        let i = 1;\n        let aGroup: LumenSuite.EdgelessModel | undefined = nToLast(aGroups, i);\n        let bGroup: LumenSuite.EdgelessModel | undefined = nToLast(bGroups, i);\n\n        while (aGroup === bGroup && aGroup) {\n          ++i;\n          aGroup = nToLast(aGroups, i);\n          bGroup = nToLast(bGroups, i);\n        }\n\n        aGroup = aGroup ?? a;\n        bGroup = bGroup ?? b;\n\n        return originalIndexes.get(aGroup.id) === originalIndexes.get(bGroup.id)\n          ? SortOrder.SAME\n          : originalIndexes.get(aGroup.id)! < originalIndexes.get(bGroup.id)!\n            ? SortOrder.BEFORE\n            : SortOrder.AFTER;\n      }\n    }\n\n    const idxGenerator = this.edgeless.service.layer.createIndexGenerator(true);\n    const sortedElements = elements.sort(compare);\n    sortedElements.forEach(ele => {\n      const newIndex = idxGenerator(\n        isTopLevelBlock(ele) ? ele.flavour : ele.type\n      );\n\n      this.edgeless.service.updateElement(ele.id, {\n        index: newIndex,\n      });\n    });\n  }\n\n  copy() {\n    document.dispatchEvent(\n      new Event('copy', {\n        bubbles: true,\n        cancelable: true,\n      })\n    );\n  }\n\n  async copyAsPng(\n    blocks: LumenSuite.EdgelessBlockModelType[],\n    shapes: LumenSuite.SurfaceModel[]\n  ) {\n    const blocksLen = blocks.length;\n    const shapesLen = shapes.length;\n\n    if (blocksLen + shapesLen === 0) return;\n    const canvas = await this.toCanvas(blocks, shapes);\n    assertExists(canvas);\n    // @ts-ignore\n    if (window.apis?.clipboard?.copyAsImageFromString) {\n      // @ts-ignore\n      await window.apis.clipboard?.copyAsImageFromString(\n        canvas.toDataURL(IMAGE_PNG)\n      );\n    } else {\n      const blob: Blob = await new Promise((resolve, reject) =>\n        canvas.toBlob(\n          blob => (blob ? resolve(blob) : reject('Canvas can not export blob')),\n          IMAGE_PNG\n        )\n      );\n      assertExists(blob);\n\n      this.std.clipboard\n        .writeToClipboard(_items => {\n          return {\n            ..._items,\n            [IMAGE_PNG]: blob,\n          };\n        })\n        .catch(console.error);\n    }\n  }\n\n  async createElementsFromClipboardData(\n    elementsRawData: (SerializedElement | BlockSnapshot)[],\n    pasteCenter?: IVec\n  ) {\n    let oldCommonBound, pasteX, pasteY;\n    {\n      const { lastMousePos } = this.toolManager;\n      pasteCenter =\n        pasteCenter ??\n        this.host.service.viewport.toModelCoord(lastMousePos.x, lastMousePos.y);\n      const [modelX, modelY] = pasteCenter;\n      oldCommonBound = edgelessElementsBoundFromRawData(elementsRawData);\n\n      pasteX = modelX - oldCommonBound.w / 2;\n      pasteY = modelY - oldCommonBound.h / 2;\n    }\n\n    const getNewXYWH = (oldXYWH: SerializedXYWH) => {\n      const oldBound = Bound.deserialize(oldXYWH);\n      return new Bound(\n        oldBound.x + pasteX - oldCommonBound.x,\n        oldBound.y + pasteY - oldCommonBound.y,\n        oldBound.w,\n        oldBound.h\n      ).serialize();\n    };\n\n    // create blocks and canvas elements\n    const originalIndexes = new Map<string, string>();\n    const oldIdToNewIdMap = new Map<string, string>();\n\n    const blockModels: LumenSuite.EdgelessBlockModelType[] = [];\n    const canvasElements: LumenSuite.SurfaceModel[] = [];\n    const allElements: LumenSuite.EdgelessModel[] = [];\n\n    for (const data of elementsRawData) {\n      const { data: blockSnapshot } = BlockSnapshotSchema.safeParse(data);\n      if (blockSnapshot) {\n        const oldId = blockSnapshot.id;\n\n        const config = this._blockConfigs.find(\n          ({ flavour }) => flavour === blockSnapshot.flavour\n        );\n        if (!config) continue;\n\n        if (typeof blockSnapshot.props.xywh !== 'string') {\n          console.error(`Block(id: ${oldId}) does not have xywh property`);\n          continue;\n        }\n\n        blockSnapshot.props.xywh = getNewXYWH(\n          blockSnapshot.props.xywh as SerializedXYWH\n        );\n        const newId = await config.createFunction(\n          blockSnapshot,\n          oldIdToNewIdMap\n        );\n        if (!newId) continue;\n\n        const block = this.doc.getBlock(newId);\n        if (!block) continue;\n\n        assertType<LumenSuite.EdgelessBlockModelType>(block.model);\n        blockModels.push(block.model);\n        allElements.push(block.model);\n        oldIdToNewIdMap.set(oldId, newId);\n\n        const props = blockSnapshot.props as GfxCompatibleProps;\n        originalIndexes.set(blockSnapshot.id, props.index);\n      } else {\n        assertType<SerializedElement>(data);\n        const oldId = data.id;\n\n        const element = this._createCanvasElement(\n          data,\n          oldIdToNewIdMap,\n          getNewXYWH(data.xywh)\n        );\n\n        canvasElements.push(element);\n        allElements.push(element);\n\n        oldIdToNewIdMap.set(oldId, element.id);\n        originalIndexes.set(oldId, element.index);\n      }\n    }\n\n    originalIndexes.forEach((index, id) => {\n      const newId = oldIdToNewIdMap.get(id);\n      if (newId) {\n        originalIndexes.set(newId, index);\n      }\n    });\n\n    this._updatePastedElementsIndex(allElements, originalIndexes);\n\n    return {\n      canvasElements: canvasElements,\n      blockModels: blockModels,\n    };\n  }\n\n  override hostConnected() {\n    if (this._disposables.disposed) {\n      this._disposables = new DisposableGroup();\n    }\n    this._init();\n    this._initEdgelessClipboard();\n  }\n\n  registerBlock(flavour: string, createFunction: BlockCreationFunction) {\n    this._blockConfigs.push({\n      flavour,\n      createFunction: createFunction.bind(this),\n    });\n  }\n\n  async toCanvas(\n    blocks: LumenSuite.EdgelessBlockModelType[],\n    shapes: LumenSuite.SurfaceModel[],\n    options?: CanvasExportOptions\n  ) {\n    blocks.sort(compareLayer);\n    shapes.sort(compareLayer);\n\n    const bounds: IBound[] = [];\n    blocks.forEach(block => {\n      bounds.push(Bound.deserialize(block.xywh));\n    });\n    shapes.forEach(shape => {\n      bounds.push(CommonUtils.getBoundsWithRotation(shape.elementBound));\n    });\n    const bound = getCommonBound(bounds);\n    assertExists(bound, 'bound not exist');\n\n    const canvas = await this._edgelessToCanvas(\n      this.host,\n      bound,\n      blocks,\n      shapes,\n      options\n    );\n    return canvas;\n  }\n}\n\nexport async function prepareClipboardData(\n  selectedAll: LumenSuite.EdgelessModel[],\n  std: BlockStdScope\n) {\n  const job = new Job({\n    collection: std.collection,\n  });\n  const selected = await Promise.all(\n    selectedAll.map(async selected => {\n      const data = await serializeElement(selected, selectedAll, job);\n      if (!data) {\n        return;\n      }\n      if (isAttachmentBlock(selected) || isImageBlock(selected)) {\n        await job.assetsManager.readFromBlob(data.props.sourceId as string);\n      }\n      return data;\n    })\n  );\n  const blobs = await encodeClipboardBlobs(job.assetsManager.getAssets());\n  return {\n    snapshot: selected.filter(d => !!d),\n    blobs,\n  };\n}\n\nfunction isPureFileInClipboard(clipboardData: DataTransfer) {\n  const types = clipboardData.types;\n  return (\n    (types.length === 1 && types[0] === 'Files') ||\n    (types.length === 2 &&\n      (types.includes('text/plain') || types.includes('text/html')) &&\n      types.includes('Files'))\n  );\n}\n\nfunction tryGetSvgFromClipboard(clipboardData: DataTransfer) {\n  const types = clipboardData.types;\n\n  if (types.length === 1 && types[0] !== 'text/plain') {\n    return null;\n  }\n\n  const parser = new DOMParser();\n  const svgDoc = parser.parseFromString(\n    clipboardData.getData('text/plain'),\n    'image/svg+xml'\n  );\n  const svg = svgDoc.documentElement;\n\n  if (svg.tagName !== 'svg' || !svg.hasAttribute('xmlns')) {\n    return null;\n  }\n  const svgContent = DOMPurify.sanitize(svgDoc.documentElement, {\n    USE_PROFILES: { svg: true },\n  });\n  const blob = new Blob([svgContent], { type: 'image/svg+xml' });\n  const file = new File([blob], 'pasted-image.svg', { type: 'image/svg+xml' });\n  return file;\n}\n"]}