{"version":3,"file":"brush-tool.js","sourceRoot":"","sources":["../../../../src/root-block/edgeless/tools/brush-tool.ts"],"names":[],"mappings":"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","sourcesContent":["import type { BrushElementModel } from '@blocksuite/affine-model';\nimport type { PointerEventState } from '@blocksuite/block-std';\nimport type { IVec } from '@blocksuite/global/utils';\n\nimport { CanvasElementType } from '@blocksuite/affine-block-surface';\nimport { TelemetryProvider } from '@blocksuite/affine-shared/services';\nimport { assertExists, noop } from '@blocksuite/global/utils';\n\nimport { EdgelessToolController } from './edgeless-tool.js';\n\ntype BrushTool = {\n  type: 'brush';\n};\n\nexport class BrushToolController extends EdgelessToolController<BrushTool> {\n  static BRUSH_POP_GAP = 20;\n\n  private _draggingElement: BrushElementModel | null = null;\n\n  private _draggingElementId: string | null = null;\n\n  private _lastPoint: IVec | null = null;\n\n  private _lastPopLength = 0;\n\n  private _pressureSupportedPointerIds = new Set<number>();\n\n  private _straightLineType: 'horizontal' | 'vertical' | null = null;\n\n  protected _draggingPathPoints: number[][] | null = null;\n\n  protected _draggingPathPressures: number[] | null = null;\n\n  readonly tool = {\n    type: 'brush',\n  } as BrushTool;\n\n  private _getStraightLineType(currentPoint: IVec) {\n    const lastPoint = this._lastPoint;\n    if (!lastPoint) return null;\n\n    // check angle to determine if the line is horizontal or vertical\n    const dx = currentPoint[0] - lastPoint[0];\n    const dy = currentPoint[1] - lastPoint[1];\n    const absAngleRadius = Math.abs(Math.atan2(dy, dx));\n    return absAngleRadius < Math.PI / 4 || absAngleRadius > 3 * (Math.PI / 4)\n      ? 'horizontal'\n      : 'vertical';\n  }\n\n  private _tryGetPressurePoints(e: PointerEventState) {\n    assertExists(this._draggingPathPressures);\n    const pressures = [...this._draggingPathPressures, e.pressure];\n    this._draggingPathPressures = pressures;\n\n    // we do not use the `e.raw.pointerType` to detect because it is not reliable,\n    // such as some digital pens do not support pressure even thought the `e.raw.pointerType` is equal to `'pen'`\n    const pointerId = e.raw.pointerId;\n    const pressureChanged = pressures.some(\n      pressure => pressure !== pressures[0]\n    );\n\n    if (pressureChanged) {\n      this._pressureSupportedPointerIds.add(pointerId);\n    }\n\n    assertExists(this._draggingPathPoints);\n    const points = this._draggingPathPoints;\n    if (this._pressureSupportedPointerIds.has(pointerId)) {\n      return points.map(([x, y], i) => [x, y, pressures[i]]);\n    } else {\n      return points;\n    }\n  }\n\n  afterModeSwitch() {\n    noop();\n  }\n\n  beforeModeSwitch() {\n    noop();\n  }\n\n  onContainerClick(): void {\n    noop();\n  }\n\n  onContainerContextMenu(): void {\n    noop();\n  }\n\n  onContainerDblClick(): void {\n    noop();\n  }\n\n  onContainerDragEnd() {\n    if (this._draggingElement) {\n      const { _draggingElement } = this;\n      this._doc.withoutTransact(() => {\n        _draggingElement.pop('points');\n        _draggingElement.pop('xywh');\n      });\n    }\n    this._draggingElement = null;\n    this._draggingElementId = null;\n    this._draggingPathPoints = null;\n    this._draggingPathPressures = null;\n    this._lastPoint = null;\n    this._straightLineType = null;\n    this._doc.captureSync();\n  }\n\n  onContainerDragMove(e: PointerEventState) {\n    if (!this._draggingElementId) return;\n\n    assertExists(this._draggingElementId);\n    assertExists(this._draggingPathPoints);\n\n    let pointX = e.point.x;\n    let pointY = e.point.y;\n    const holdingShiftKey = e.keys.shift || this._edgeless.tools.shiftKey;\n    if (holdingShiftKey) {\n      if (!this._straightLineType) {\n        this._straightLineType = this._getStraightLineType([pointX, pointY]);\n      }\n\n      if (this._straightLineType === 'horizontal') {\n        pointY = this._lastPoint?.[1] ?? pointY;\n      } else if (this._straightLineType === 'vertical') {\n        pointX = this._lastPoint?.[0] ?? pointX;\n      }\n    } else if (this._straightLineType) {\n      this._straightLineType = null;\n    }\n\n    const [modelX, modelY] = this._service.viewport.toModelCoord(\n      pointX,\n      pointY\n    );\n\n    const points = [...this._draggingPathPoints, [modelX, modelY]];\n\n    this._lastPoint = [pointX, pointY];\n    this._draggingPathPoints = points;\n\n    this._edgeless.service.updateElement(this._draggingElementId, {\n      points: this._tryGetPressurePoints(e),\n    });\n\n    if (\n      this._lastPopLength + BrushToolController.BRUSH_POP_GAP <\n      this._draggingElement!.points.length\n    ) {\n      this._lastPopLength = this._draggingElement!.points.length;\n      this._doc.withoutTransact(() => {\n        this._draggingElement!.pop('points');\n        this._draggingElement!.pop('xywh');\n      });\n\n      this._draggingElement!.stash('points');\n      this._draggingElement!.stash('xywh');\n    }\n  }\n\n  onContainerDragStart(e: PointerEventState) {\n    this._doc.captureSync();\n    const { viewport } = this._edgeless.service;\n\n    // create a shape block when drag start\n    const [modelX, modelY] = viewport.toModelCoord(e.point.x, e.point.y);\n    const points = [[modelX, modelY]];\n\n    const id = this._service.addElement(CanvasElementType.BRUSH, {\n      points,\n    });\n\n    this._service.std\n      .getOptional(TelemetryProvider)\n      ?.track('CanvasElementAdded', {\n        control: 'canvas:draw',\n        page: 'whiteboard editor',\n        module: 'toolbar',\n        segment: 'toolbar',\n        type: CanvasElementType.BRUSH,\n      });\n\n    const element = this._service.getElementById(id) as BrushElementModel;\n\n    element.stash('points');\n    element.stash('xywh');\n\n    this._lastPoint = [e.point.x, e.point.y];\n    this._draggingElementId = id;\n    this._draggingElement = element;\n    this._draggingPathPoints = points;\n    this._draggingPathPressures = [e.pressure];\n    this._lastPopLength = 0;\n  }\n\n  onContainerMouseMove() {\n    noop();\n  }\n\n  onContainerMouseOut() {\n    noop();\n  }\n\n  onContainerPointerDown(): void {\n    noop();\n  }\n\n  onContainerTripleClick() {\n    noop();\n  }\n\n  onPressShiftKey(_: boolean) {\n    noop();\n  }\n\n  onPressSpaceBar(_pressed: boolean): void {\n    noop();\n  }\n}\n\ndeclare global {\n  namespace BlockSuite {\n    interface EdgelessToolMap {\n      brush: BrushToolController;\n    }\n  }\n}\n"]}