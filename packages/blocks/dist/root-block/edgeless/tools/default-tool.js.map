{"version":3,"file":"default-tool.js","sourceRoot":"","sources":["../../../../src/root-block/edgeless/tools/default-tool.ts"],"names":[],"mappings":"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","sourcesContent":["import type { MindmapNode } from '@lumensuite/affine-block-surface';\nimport type {\n  EdgelessTextBlockModel,\n  FrameBlockModel,\n  NoteBlockModel,\n} from '@lumensuite/affine-model';\nimport type { PointerEventState } from '@lumensuite/block-std';\nimport type { PointTestOptions } from '@lumensuite/block-std/gfx';\nimport type { IVec } from '@lumensuite/global/utils';\n\nimport {\n  ConnectorUtils,\n  MindmapElementModel,\n  MindmapUtils,\n} from '@lumensuite/affine-block-surface';\nimport { focusTextModel } from '@lumensuite/affine-components/rich-text';\nimport {\n  ConnectorElementModel,\n  GroupElementModel,\n  ShapeElementModel,\n  TextElementModel,\n} from '@lumensuite/affine-model';\nimport { TelemetryProvider } from '@lumensuite/affine-shared/services';\nimport {\n  clamp,\n  handleNativeRangeAtPoint,\n  resetNativeSelection,\n} from '@lumensuite/affine-shared/utils';\nimport {\n  Bound,\n  DisposableGroup,\n  intersects,\n  noop,\n  Vec,\n} from '@lumensuite/global/utils';\n\nimport type { EdgelessTool } from '../types.js';\n\nimport { isSelectSingleMindMap } from '../../../_common/edgeless/mindmap/index.js';\nimport { edgelessElementsBound } from '../utils/bound-utils.js';\nimport { prepareCloneData } from '../utils/clone-utils.js';\nimport { calPanDelta } from '../utils/panning-utils.js';\nimport {\n  isCanvasElement,\n  isEdgelessTextBlock,\n  isFrameBlock,\n  isNoteBlock,\n} from '../utils/query.js';\nimport {\n  addText,\n  mountConnectorLabelEditor,\n  mountFrameTitleEditor,\n  mountGroupTitleEditor,\n  mountShapeTextEditor,\n  mountTextElementEditor,\n} from '../utils/text.js';\nimport { getAllDescendantElements, getTopElements } from '../utils/tree.js';\nimport { EdgelessToolController } from './edgeless-tool.js';\n\nexport enum DefaultModeDragType {\n  /** press alt/option key to clone selected  */\n  AltCloning = 'alt-cloning',\n  /** Moving connector label */\n  ConnectorLabelMoving = 'connector-label-moving',\n  /** Moving selected contents */\n  ContentMoving = 'content-moving',\n  /** Native range dragging inside active note block */\n  NativeEditing = 'native-editing',\n  /** Default void state */\n  None = 'none',\n  /** Dragging preview */\n  PreviewDragging = 'preview-dragging',\n  /** Expanding the dragging area, select the content covered inside */\n  Selecting = 'selecting',\n}\n\ntype DefaultTool = {\n  type: 'default';\n};\n\nexport class DefaultToolController extends EdgelessToolController<DefaultTool> {\n  private _alignBound = new Bound();\n\n  private _autoPanTimer: number | null = null;\n\n  private _clearDisposable = () => {\n    if (this._disposables) {\n      this._disposables.dispose();\n      this._disposables = null;\n    }\n  };\n\n  private _clearLastSelection = () => {\n    if (this.edgelessSelectionManager.empty) {\n      this.edgelessSelectionManager.clearLast();\n    }\n  };\n\n  private _clearMindMapHoverState: (() => void)[] = [];\n\n  private _clearSelectingState = () => {\n    this._stopAutoPanning();\n    this._clearDisposable();\n\n    this._dragging = false;\n    this._wheeling = false;\n    this._dragStartPos = [0, 0];\n    this._dragLastPos = [0, 0];\n    this._dragStartModelCoord = [0, 0];\n    this._dragLastModelCoord = [0, 0];\n    this._edgeless.slots.draggingAreaUpdated.emit();\n\n    // Move Selection with space\n    this._moveSelectionDragStartTemp = [0, 0];\n    this._moveSelectionStartPos = [0, 0];\n  };\n\n  private _disposables: DisposableGroup | null = null;\n\n  private _dragging = false;\n\n  private _draggingSingleMindmap: null | {\n    mindmap: MindmapElementModel;\n    node: MindmapNode;\n    startElementBound: Bound;\n    clear?: () => void;\n    detach?: boolean;\n  } = null;\n\n  private _dragLastModelCoord: IVec = [0, 0];\n\n  private _dragLastPos: IVec = [0, 0];\n\n  private _dragStartModelCoord: IVec = [0, 0];\n\n  private _dragStartPos: IVec = [0, 0];\n\n  private _hoveredFrame: FrameBlockModel | null = null;\n\n  private _hoveredMindMap: null | {\n    mindmap: MindmapElementModel;\n    node: MindmapNode;\n    mergeInfo?: Exclude<\n      ReturnType<typeof MindmapUtils.showMergeIndicator>,\n      undefined\n    >['mergeInfo'];\n  } = null;\n\n  // Do not select the text, when click again after activating the note.\n  private _isDoubleClickedOnMask = false;\n\n  private _lock = false;\n\n  private _moveSelectionDragStartTemp: IVec = [0, 0];\n\n  // For moving selection with space with mouse\n  private _moveSelectionStartPos: IVec = [0, 0];\n\n  private _panViewport = (delta: IVec) => {\n    const { viewport } = this._service;\n    viewport.applyDeltaCenter(delta[0], delta[1]);\n  };\n\n  private _selectedBounds: Bound[] = [];\n\n  // For moving the connector label\n  private _selectedConnector: ConnectorElementModel | null = null;\n\n  private _selectedConnectorLabelBounds: Bound | null = null;\n\n  private _startAutoPanning = (delta: IVec) => {\n    this._panViewport(delta);\n    this._stopAutoPanning();\n\n    this._autoPanTimer = window.setInterval(() => {\n      this._panViewport(delta);\n      this._updateSelectingState();\n    }, 30);\n  };\n\n  private _stopAutoPanning = () => {\n    if (this._autoPanTimer) {\n      clearTimeout(this._autoPanTimer);\n      this._autoPanTimer = null;\n    }\n  };\n\n  private _toBeMoved: LumenSuite.EdgelessModel[] = [];\n\n  private _updateSelectingState = () => {\n    const { tools, service } = this._edgeless;\n    const { selection } = service;\n\n    if (tools.spaceBar) {\n      /* Move the selection if space is pressed */\n      const [moveCurX, moveCurY] = this._dragLastPos;\n      const zoom = service.viewport.zoom;\n\n      const dx = (moveCurX - this._moveSelectionStartPos[0]) / zoom;\n      const dy = (moveCurY - this._moveSelectionStartPos[1]) / zoom;\n\n      const [startX, startY] = service.viewport.toModelCoord(\n        this._moveSelectionDragStartTemp[0],\n        this._moveSelectionDragStartTemp[1]\n      );\n      this._dragStartModelCoord[0] = startX + dx;\n      this._dragStartModelCoord[1] = startY + dy;\n    }\n\n    const startX = this._dragStartModelCoord[0];\n    const startY = this._dragStartModelCoord[1];\n\n    // Should convert the last drag position to model coordinate\n    const [curX, curY] = service.viewport.toModelCoord(\n      this._dragLastPos[0],\n      this._dragLastPos[1]\n    );\n\n    const x = Math.min(startX, curX);\n    const y = Math.min(startY, curY);\n\n    const w = Math.abs(startX - curX);\n    const h = Math.abs(startY - curY);\n    const bound = new Bound(x, y, w, h);\n\n    const elements = getTopElements(service.gfx.getElementsByBound(bound));\n\n    const set = new Set(\n      tools.shiftKey ? [...elements, ...selection.selectedElements] : elements\n    );\n\n    this.edgelessSelectionManager.set({\n      elements: Array.from(set).map(element => element.id),\n      editing: false,\n    });\n\n    // Record the last model coordinate for dragging area updating\n    this._dragLastModelCoord = [curX, curY];\n    this._edgeless.slots.draggingAreaUpdated.emit();\n  };\n\n  private _wheeling = false;\n\n  dragType = DefaultModeDragType.None;\n\n  override enableHover = true;\n\n  readonly tool = {\n    type: 'default',\n  } as DefaultTool;\n\n  override get draggingArea() {\n    if (this.dragType === DefaultModeDragType.Selecting) {\n      const [startX, startY] = this._service.viewport.toViewCoord(\n        this._dragStartModelCoord[0],\n        this._dragStartModelCoord[1]\n      );\n      const [endX, endY] = this._service.viewport.toViewCoord(\n        this._dragLastModelCoord[0],\n        this._dragLastModelCoord[1]\n      );\n      return {\n        start: new DOMPoint(startX, startY),\n        end: new DOMPoint(endX, endY),\n      };\n    }\n    return null;\n  }\n\n  get edgelessSelectionManager() {\n    return this._service.selection;\n  }\n\n  get readonly() {\n    return this._edgeless.doc.readonly;\n  }\n\n  get zoom() {\n    return this._service.viewport.zoom;\n  }\n\n  private _addEmptyParagraphBlock(\n    block: NoteBlockModel | EdgelessTextBlockModel\n  ) {\n    const blockId = this._doc.addBlock(\n      'affine:paragraph',\n      { type: 'text' },\n      block.id\n    );\n    if (blockId) {\n      focusTextModel(this._edgeless.std, blockId);\n    }\n  }\n\n  private async _cloneContent() {\n    this._lock = true;\n    const { _edgeless } = this;\n    const { clipboardController } = _edgeless;\n\n    const snapshot = await prepareCloneData(this._toBeMoved, _edgeless.std);\n\n    const bound = edgelessElementsBound(this._toBeMoved);\n    const { canvasElements, blockModels } =\n      await clipboardController.createElementsFromClipboardData(\n        snapshot,\n        bound.center\n      );\n\n    this._toBeMoved = [...canvasElements, ...blockModels];\n    this.edgelessSelectionManager.set({\n      elements: this._toBeMoved.map(e => e.id),\n      editing: false,\n    });\n  }\n\n  private _determineDragType(e: PointerEventState): DefaultModeDragType {\n    const { x, y } = e;\n    // Is dragging started from current selected rect\n    if (this.edgelessSelectionManager.isInSelectedRect(x, y)) {\n      if (this.edgelessSelectionManager.selectedElements.length === 1) {\n        let selected = this.edgelessSelectionManager.selectedElements[0];\n        // double check\n        const currentSelected = this._pick(x, y);\n        if (\n          !isFrameBlock(selected) &&\n          !(selected instanceof GroupElementModel) &&\n          currentSelected &&\n          currentSelected !== selected\n        ) {\n          selected = currentSelected;\n          this.edgelessSelectionManager.set({\n            elements: [selected.id],\n            editing: false,\n          });\n        }\n\n        if (\n          isCanvasElement(selected) &&\n          ConnectorUtils.isConnectorWithLabel(selected) &&\n          (selected as ConnectorElementModel).labelIncludesPoint(\n            this._service.viewport.toModelCoord(x, y)\n          )\n        ) {\n          this._selectedConnector = selected as ConnectorElementModel;\n          this._selectedConnectorLabelBounds = Bound.fromXYWH(\n            this._selectedConnector.labelXYWH!\n          );\n          return DefaultModeDragType.ConnectorLabelMoving;\n        }\n      }\n\n      return this.edgelessSelectionManager.editing\n        ? DefaultModeDragType.NativeEditing\n        : DefaultModeDragType.ContentMoving;\n    } else {\n      const selected = this._pick(x, y);\n      if (selected) {\n        this.edgelessSelectionManager.set({\n          elements: [selected.id],\n          editing: false,\n        });\n\n        if (\n          isCanvasElement(selected) &&\n          ConnectorUtils.isConnectorWithLabel(selected) &&\n          (selected as ConnectorElementModel).labelIncludesPoint(\n            this._service.viewport.toModelCoord(x, y)\n          )\n        ) {\n          this._selectedConnector = selected as ConnectorElementModel;\n          this._selectedConnectorLabelBounds = Bound.fromXYWH(\n            this._selectedConnector.labelXYWH!\n          );\n          return DefaultModeDragType.ConnectorLabelMoving;\n        }\n\n        return DefaultModeDragType.ContentMoving;\n      } else {\n        return DefaultModeDragType.Selecting;\n      }\n    }\n  }\n\n  private _filterConnectedConnector() {\n    this._toBeMoved = this._toBeMoved.filter(ele => {\n      if (\n        ele instanceof ConnectorElementModel &&\n        ele.source?.id &&\n        ele.target?.id\n      ) {\n        if (\n          this._toBeMoved.some(e => e.id === ele.source.id) &&\n          this._toBeMoved.some(e => e.id === ele.target.id)\n        ) {\n          return false;\n        }\n      }\n      return true;\n    });\n  }\n\n  private _isDraggable(element: LumenSuite.EdgelessModel) {\n    return !(\n      element instanceof ConnectorElementModel &&\n      !ConnectorUtils.isConnectorAndBindingsAllSelected(\n        element,\n        this._toBeMoved\n      )\n    );\n  }\n\n  private _moveContent(\n    [dx, dy]: IVec,\n    alignBound: Bound,\n    shifted?: boolean,\n    shouldClone?: boolean\n  ) {\n    alignBound.x += dx;\n    alignBound.y += dy;\n\n    const alignRst = this._service.snap.align(alignBound);\n    const delta = [dx + alignRst.dx, dy + alignRst.dy];\n\n    if (shifted) {\n      const angle = Math.abs(Math.atan2(delta[1], delta[0]));\n      const direction =\n        angle < Math.PI / 4 || angle > 3 * (Math.PI / 4) ? 'x' : 'y';\n      delta[direction === 'x' ? 1 : 0] = 0;\n    }\n\n    this._toBeMoved.forEach((element, index) => {\n      const isGraphicElement = isCanvasElement(element);\n\n      if (isGraphicElement && !this._isDraggable(element)) return;\n\n      let bound = this._selectedBounds[index];\n      if (shouldClone) bound = bound.clone();\n\n      bound.x += delta[0];\n      bound.y += delta[1];\n\n      if (isGraphicElement) {\n        if (!this._lock) {\n          this._lock = true;\n          this._doc.captureSync();\n        }\n\n        if (element instanceof ConnectorElementModel) {\n          element.moveTo(bound);\n        }\n\n        this._service.updateElement(element.id, {\n          xywh: bound.serialize(),\n        });\n      } else {\n        this._service.updateElement(element.id, {\n          xywh: bound.serialize(),\n        });\n      }\n    });\n\n    if (this._draggingSingleMindmap) {\n      const {\n        node: currentNode,\n        mindmap: currentMindmap,\n        startElementBound,\n      } = this._draggingSingleMindmap;\n      const current = currentNode.element;\n      const subtree = currentMindmap.getNode(current.id)!;\n      const [x, y] = this._service.viewport.toModelCoord(\n        this._dragLastPos[0],\n        this._dragLastPos[1]\n      );\n\n      this._clearMindMapHoverState.forEach(fn => fn());\n      this._clearMindMapHoverState = [];\n\n      const hoveredMindmap = this._service.gfx\n        .getElementByPoint(x, y, {\n          all: true,\n          responsePadding: [25, 60],\n        })\n        .filter(\n          el =>\n            el !== current &&\n            (el.group as LumenSuite.SurfaceElementModel)?.type === 'mindmap'\n        )\n        .map(el => ({\n          element: el as ShapeElementModel,\n          node: (el.group as MindmapElementModel).getNode(el.id)!,\n          mindmap: el.group as MindmapElementModel,\n        }))[0];\n\n      if (hoveredMindmap) {\n        const { node, element, mindmap } = hoveredMindmap;\n        element.opacity = 0.8;\n\n        const { clear, mergeInfo } =\n          MindmapUtils.showMergeIndicator(mindmap, node, subtree, [x, y]) ?? {};\n        clear && this._clearMindMapHoverState.push(clear);\n        const clearHide = MindmapUtils.hideTargetConnector(\n          currentMindmap,\n          subtree\n        );\n        clearHide && this._clearMindMapHoverState.push(clearHide);\n\n        const layoutType = mergeInfo?.layoutType;\n\n        this._clearMindMapHoverState.push(() => {\n          element.opacity = 1;\n        });\n        currentMindmap.layout(subtree, false, layoutType ?? undefined);\n        this._hoveredMindMap = {\n          node,\n          mindmap,\n          mergeInfo,\n        };\n      } else {\n        const bound = new Bound(x, y, 40, 40);\n\n        if (\n          !(\n            intersects(startElementBound, bound) ||\n            startElementBound.contains(bound)\n          ) &&\n          currentMindmap.tree.id !== currentNode.id\n        ) {\n          const clearHide = MindmapUtils.hideTargetConnector(\n            currentMindmap,\n            subtree\n          );\n          clearHide && this._clearMindMapHoverState.push(clearHide);\n          this._draggingSingleMindmap.detach = true;\n        } else {\n          this._draggingSingleMindmap.detach = false;\n        }\n\n        currentMindmap.layout(subtree, false);\n        this._hoveredMindMap = null;\n      }\n    }\n\n    this._hoveredFrame = this._edgeless.service.frame.getFrameFromPoint(\n      this._service.viewport.toModelCoord(\n        this._dragLastPos[0],\n        this._dragLastPos[1]\n      ),\n      this._toBeMoved.filter(ele => isFrameBlock(ele))\n    );\n\n    this._hoveredFrame\n      ? this._service.frameOverlay.highlight(this._hoveredFrame)\n      : this._service.frameOverlay.clear();\n  }\n\n  private _moveLabel(delta: IVec) {\n    const connector = this._selectedConnector;\n    let bounds = this._selectedConnectorLabelBounds;\n    if (!connector || !bounds) return;\n    bounds = bounds.clone();\n    const center = connector.getNearestPoint(\n      Vec.add(bounds.center, delta) as IVec\n    );\n    const distance = connector.getOffsetDistanceByPoint(center as IVec);\n    bounds.center = center;\n    this._service.updateElement(connector.id, {\n      labelXYWH: bounds.toXYWH(),\n      labelOffset: {\n        distance,\n      },\n    });\n  }\n\n  private _pick(x: number, y: number, options?: PointTestOptions) {\n    const service = this._service;\n    const modelPos = service.viewport.toModelCoord(x, y);\n    const group = service.pickElementInGroup(modelPos[0], modelPos[1], options);\n\n    if (group instanceof MindmapElementModel) {\n      const picked = service.gfx.getElementByPoint(modelPos[0], modelPos[1], {\n        ...((options ?? {}) as PointTestOptions),\n        all: true,\n      });\n\n      let pickedIdx = picked.length - 1;\n\n      while (pickedIdx >= 0) {\n        const element = picked[pickedIdx];\n        if (element === group) {\n          pickedIdx -= 1;\n          continue;\n        }\n\n        break;\n      }\n\n      return picked[pickedIdx] ?? null;\n    }\n\n    return group;\n  }\n\n  private initializeDragState(\n    e: PointerEventState,\n    dragType: DefaultModeDragType\n  ) {\n    const { x, y } = e;\n    this.dragType = dragType;\n    this._dragging = true;\n    this._dragStartPos = [x, y];\n    this._dragLastPos = [x, y];\n    const [startX, startY] = this._service.viewport.toModelCoord(x, y);\n    this._dragStartModelCoord = [startX, startY];\n    this._dragLastModelCoord = [startX, startY];\n\n    this._selectedBounds = this._toBeMoved.map(element =>\n      Bound.deserialize(element.xywh)\n    );\n\n    if (\n      this._toBeMoved.every(\n        ele => !(ele.group instanceof MindmapElementModel)\n      ) ||\n      (isSelectSingleMindMap(this._toBeMoved) &&\n        this._toBeMoved[0].id ===\n          (this._toBeMoved[0].group as MindmapElementModel).tree.id)\n    ) {\n      this._alignBound = this._service.snap.setupAlignables(this._toBeMoved);\n    }\n\n    this._clearDisposable();\n    this._disposables = new DisposableGroup();\n\n    // If the drag type is selecting, set up the dragging area disposable group\n    // If the viewport updates when dragging, should update the dragging area and selection\n    if (this.dragType === DefaultModeDragType.Selecting) {\n      this._disposables.add(\n        this._service.viewport.viewportUpdated.on(() => {\n          if (\n            this.dragType === DefaultModeDragType.Selecting &&\n            this._dragging &&\n            !this._autoPanTimer\n          ) {\n            this._updateSelectingState();\n          }\n        })\n      );\n      return;\n    }\n\n    if (this.dragType === DefaultModeDragType.ContentMoving) {\n      this._disposables.add(\n        this._service.viewport.viewportMoved.on(delta => {\n          if (\n            this.dragType === DefaultModeDragType.ContentMoving &&\n            this._dragging &&\n            !this._autoPanTimer\n          ) {\n            if (\n              this._toBeMoved.every(ele => {\n                return !this._isDraggable(ele);\n              })\n            ) {\n              return;\n            }\n\n            if (!this._wheeling) {\n              this._wheeling = true;\n              this._selectedBounds = this._toBeMoved.map(element =>\n                Bound.deserialize(element.xywh)\n              );\n            }\n\n            this._alignBound = this._service.snap.setupAlignables(\n              this._toBeMoved\n            );\n\n            this._moveContent(delta, this._alignBound);\n          }\n        })\n      );\n      return;\n    }\n  }\n\n  afterModeSwitch() {\n    noop();\n  }\n\n  beforeModeSwitch(edgelessTool?: EdgelessTool) {\n    if (edgelessTool?.type === 'pan') {\n      this._clearLastSelection();\n    }\n    this._stopAutoPanning();\n    this._clearDisposable();\n    noop();\n  }\n\n  onContainerClick(e: PointerEventState) {\n    if (this.readonly) return;\n\n    const selected = this._pick(e.x, e.y, {\n      ignoreTransparent: true,\n    });\n    if (selected) {\n      const { selectedIds, surfaceSelections } = this.edgelessSelectionManager;\n      const editing = surfaceSelections[0]?.editing ?? false;\n\n      // click active canvas text, edgeless text block and note block\n      if (\n        selectedIds.length === 1 &&\n        selectedIds[0] === selected.id &&\n        editing\n      ) {\n        // edgeless text block and note block\n        if (\n          (isNoteBlock(selected) || isEdgelessTextBlock(selected)) &&\n          selected.children.length === 0\n        ) {\n          this._addEmptyParagraphBlock(selected);\n        }\n        // canvas text\n        return;\n      }\n\n      // click non-active edgeless text block and note block\n      if (\n        !e.keys.shift &&\n        selectedIds.length === 1 &&\n        (isNoteBlock(selected) || isEdgelessTextBlock(selected)) &&\n        ((selectedIds[0] === selected.id && !editing) ||\n          (editing && selectedIds[0] !== selected.id))\n      ) {\n        // issue #1809\n        // If the previously selected element is a noteBlock and is in an active state,\n        // then the currently clicked noteBlock should also be in an active state when selected.\n        this.edgelessSelectionManager.set({\n          elements: [selected.id],\n          editing: true,\n        });\n        this._edgeless.updateComplete\n          .then(() => {\n            // check if block has children blocks, if not, add a paragraph block and focus on it\n            if (selected.children.length === 0) {\n              this._addEmptyParagraphBlock(selected);\n            } else {\n              const block = this._edgeless.host.view.getBlock(selected.id);\n              if (block) {\n                const rect = block\n                  .querySelector('.affine-block-children-container')!\n                  .getBoundingClientRect();\n\n                const offsetY = 8 * this.zoom;\n                const offsetX = 2 * this.zoom;\n                const x = clamp(\n                  e.raw.clientX,\n                  rect.left + offsetX,\n                  rect.right - offsetX\n                );\n                const y = clamp(\n                  e.raw.clientY,\n                  rect.top + offsetY,\n                  rect.bottom - offsetY\n                );\n                handleNativeRangeAtPoint(x, y);\n              } else {\n                handleNativeRangeAtPoint(e.raw.clientX, e.raw.clientY);\n              }\n            }\n          })\n          .catch(console.error);\n        return;\n      }\n\n      this.edgelessSelectionManager.set({\n        // hold shift key to multi select or de-select element\n        elements: e.keys.shift\n          ? this.edgelessSelectionManager.has(selected.id)\n            ? selectedIds.filter(id => id !== selected.id)\n            : [...selectedIds, selected.id]\n          : [selected.id],\n        editing: false,\n      });\n    } else if (!e.keys.shift) {\n      this.edgelessSelectionManager.clear();\n      resetNativeSelection(null);\n    }\n\n    this._isDoubleClickedOnMask = false;\n  }\n\n  onContainerContextMenu() {\n    // repairContextMenuRange(e);\n    noop();\n  }\n\n  onContainerDblClick(e: PointerEventState) {\n    if (this._doc.readonly) {\n      const viewport = this._service.viewport;\n      if (viewport.zoom === 1) {\n        // Fit to Screen\n        const { centerX, centerY, zoom } = this._service.getFitToScreenData();\n        viewport.setViewport(zoom, [centerX, centerY], true);\n      } else {\n        // Zoom to 100% and Center\n        const [x, y] = viewport.toModelCoord(e.x, e.y);\n        viewport.setViewport(1, [x, y], true);\n      }\n      return;\n    }\n\n    const selected = this._pick(e.x, e.y, {\n      hitThreshold: 10,\n    });\n    if (!selected) {\n      const textFlag = this._edgeless.doc.awarenessStore.getFlag(\n        'enable_edgeless_text'\n      );\n\n      if (textFlag) {\n        const [x, y] = this._service.viewport.toModelCoord(e.x, e.y);\n        this._edgeless.std.command.exec('insertEdgelessText', { x, y });\n      } else {\n        addText(this._edgeless, e);\n      }\n      this._edgeless.std\n        .getOptional(TelemetryProvider)\n        ?.track('CanvasElementAdded', {\n          control: 'canvas:dbclick',\n          page: 'whiteboard editor',\n          module: 'toolbar',\n          segment: 'toolbar',\n          type: 'text',\n        });\n      return;\n    } else {\n      const [x, y] = this._service.viewport.toModelCoord(e.x, e.y);\n      if (selected instanceof TextElementModel) {\n        mountTextElementEditor(selected, this._edgeless, {\n          x,\n          y,\n        });\n        return;\n      }\n      if (selected instanceof ShapeElementModel) {\n        mountShapeTextEditor(selected, this._edgeless);\n        return;\n      }\n      if (selected instanceof ConnectorElementModel) {\n        mountConnectorLabelEditor(selected, this._edgeless, [x, y]);\n        return;\n      }\n      if (isFrameBlock(selected)) {\n        mountFrameTitleEditor(selected, this._edgeless);\n        return;\n      }\n      if (selected instanceof GroupElementModel) {\n        mountGroupTitleEditor(selected, this._edgeless);\n        return;\n      }\n    }\n\n    if (\n      e.raw.target &&\n      e.raw.target instanceof HTMLElement &&\n      e.raw.target.classList.contains('affine-note-mask')\n    ) {\n      this.onContainerClick(e);\n      this._isDoubleClickedOnMask = true;\n      return;\n    }\n  }\n\n  onContainerDragEnd() {\n    // mindmap\n    if (this._draggingSingleMindmap) {\n      if (this._hoveredMindMap && this._hoveredMindMap.mergeInfo) {\n        const { mergeInfo, mindmap } = this._hoveredMindMap;\n        const { node: currentNode, mindmap: currentMindmap } =\n          this._draggingSingleMindmap;\n\n        MindmapUtils.moveMindMapSubtree(\n          currentMindmap,\n          currentNode!,\n          mindmap,\n          mergeInfo.target,\n          mergeInfo.index,\n          mergeInfo.layoutType\n        );\n      } else if (this._draggingSingleMindmap.detach) {\n        const { mindmap } = this._draggingSingleMindmap;\n        const subtree = mindmap.detach(this._draggingSingleMindmap.node);\n\n        if (subtree) {\n          MindmapElementModel.createFromTree(\n            subtree,\n            mindmap.style,\n            mindmap.layoutType,\n            this._surface.model\n          );\n        }\n      } else {\n        this._draggingSingleMindmap.mindmap.layout();\n        this._toBeMoved.forEach(el => el.pop('xywh'));\n      }\n\n      this._draggingSingleMindmap.clear?.();\n    } else {\n      this._toBeMoved.forEach(el => {\n        this._doc.transact(() => {\n          el.pop('xywh');\n        });\n\n        if (el instanceof ConnectorElementModel) {\n          el.pop('labelXYWH');\n        }\n\n        if (el instanceof MindmapElementModel) {\n          el.requestLayout();\n        }\n      });\n    }\n\n    {\n      const frameManager = this._service.frame;\n      const toBeMovedTopElements = getTopElements(this._toBeMoved);\n      if (this._hoveredFrame) {\n        frameManager.addElementsToFrame(\n          this._hoveredFrame,\n          toBeMovedTopElements\n        );\n      } else {\n        // only apply to root nodes of trees\n        toBeMovedTopElements.map(element =>\n          frameManager.removeParentFrame(element)\n        );\n      }\n    }\n\n    if (this._lock) {\n      this._doc.captureSync();\n      this._lock = false;\n    }\n\n    if (this.edgelessSelectionManager.editing) return;\n\n    this._dragStartPos = [0, 0];\n    this._dragLastPos = [0, 0];\n    this._selectedBounds = [];\n    this._service.snap.cleanupAlignables();\n    this._service.frameOverlay.clear();\n    this._toBeMoved = [];\n    this._selectedConnector = null;\n    this._selectedConnectorLabelBounds = null;\n    this._clearSelectingState();\n    this._clearMindMapHoverState.forEach(fn => fn());\n    this._draggingSingleMindmap = null;\n    this.dragType = DefaultModeDragType.None;\n  }\n\n  onContainerDragMove(e: PointerEventState) {\n    const { viewport } = this._service;\n    const zoom = viewport.zoom;\n    switch (this.dragType) {\n      case DefaultModeDragType.Selecting: {\n        // Record the last drag pointer position for auto panning and view port updating\n        this._dragLastPos = [e.x, e.y];\n\n        this._updateSelectingState();\n        const moveDelta = calPanDelta(viewport, e);\n        if (moveDelta) {\n          this._startAutoPanning(moveDelta);\n        } else {\n          this._stopAutoPanning();\n        }\n        break;\n      }\n      case DefaultModeDragType.AltCloning:\n      case DefaultModeDragType.ContentMoving: {\n        if (\n          this._toBeMoved.every(ele => {\n            return !this._isDraggable(ele);\n          })\n        ) {\n          return;\n        }\n\n        if (this._wheeling) {\n          this._wheeling = false;\n          this._dragStartPos = [...this._dragLastPos];\n        } else {\n          this._dragLastPos = [e.x, e.y];\n        }\n\n        const dx = (e.x - this._dragStartPos[0]) / zoom;\n        const dy = (e.y - this._dragStartPos[1]) / zoom;\n        const alignBound = this._alignBound.clone();\n        const shifted = e.keys.shift || this._edgeless.tools.shiftKey;\n\n        this._moveContent([dx, dy], alignBound, shifted, true);\n        break;\n      }\n      case DefaultModeDragType.ConnectorLabelMoving: {\n        const dx = (e.x - this._dragStartPos[0]) / zoom;\n        const dy = (e.y - this._dragStartPos[1]) / zoom;\n        this._moveLabel([dx, dy]);\n        break;\n      }\n      case DefaultModeDragType.NativeEditing: {\n        // TODO reset if drag out of note\n        break;\n      }\n    }\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-misused-promises\n  async onContainerDragStart(e: PointerEventState) {\n    if (this.edgelessSelectionManager.editing) return;\n    // Determine the drag type based on the current state and event\n    let dragType = this._determineDragType(e);\n\n    const elements = this.edgelessSelectionManager.selectedElements;\n    const toBeMoved = new Set(elements);\n    elements.forEach(element => {\n      if (element.group instanceof MindmapElementModel && elements.length > 1) {\n        getAllDescendantElements(element.group).forEach(ele =>\n          toBeMoved.add(ele)\n        );\n      } else {\n        getAllDescendantElements(element).forEach(ele => {\n          if (ele.group instanceof MindmapElementModel) {\n            getAllDescendantElements(ele.group).forEach(_el =>\n              toBeMoved.add(_el)\n            );\n          }\n          toBeMoved.add(ele);\n        });\n      }\n    });\n    this._toBeMoved = Array.from(toBeMoved);\n\n    // If alt key is pressed and content is moving, clone the content\n    if (e.keys.alt && dragType === DefaultModeDragType.ContentMoving) {\n      dragType = DefaultModeDragType.AltCloning;\n      await this._cloneContent();\n    }\n    this._filterConnectedConnector();\n\n    // Connector needs to be updated first\n    this._toBeMoved.sort((a, _) =>\n      a instanceof ConnectorElementModel ? -1 : 1\n    );\n\n    // Set up drag state\n    this.initializeDragState(e, dragType);\n\n    // stash the state\n    if (\n      this._toBeMoved.length === 1 &&\n      this._toBeMoved[0].group instanceof MindmapElementModel\n    ) {\n      const mindmap = this._toBeMoved[0].group as MindmapElementModel;\n      this._draggingSingleMindmap = {\n        mindmap,\n        node: mindmap.getNode(this._toBeMoved[0].id)!,\n        clear: mindmap.stashTree(this._toBeMoved[0].id),\n        startElementBound: mindmap.elementBound,\n      };\n    } else {\n      this._toBeMoved.forEach(ele => {\n        ele.stash('xywh');\n\n        if (ele instanceof ConnectorElementModel) {\n          ele.stash('labelXYWH');\n        }\n      });\n    }\n  }\n\n  onContainerMouseMove(e: PointerEventState) {\n    const hovered = this._pick(e.x, e.y, {\n      hitThreshold: 10,\n    });\n    if (\n      isFrameBlock(hovered) &&\n      hovered.externalBound?.isPointInBound(\n        this._service.viewport.toModelCoord(e.x, e.y)\n      )\n    ) {\n      this._service.frameOverlay.highlight(hovered);\n    } else {\n      this._service.frameOverlay.clear();\n    }\n  }\n\n  onContainerMouseOut(_: PointerEventState) {\n    noop();\n  }\n\n  onContainerPointerDown(): void {\n    noop();\n  }\n\n  onContainerTripleClick() {\n    if (this._isDoubleClickedOnMask) return;\n  }\n\n  onPressShiftKey(_: boolean) {\n    noop();\n  }\n\n  onPressSpaceBar(_pressed: boolean): void {\n    const { service } = this._edgeless;\n\n    if (this._dragging) {\n      if (_pressed) {\n        const [lastX, lastY] = this._dragLastPos;\n        this._moveSelectionStartPos = [lastX, lastY];\n\n        const [startX, startY] = this._dragStartPos;\n        this._moveSelectionDragStartTemp = [startX, startY];\n      } else {\n        // To reuse space with the same selection, update the drag start to the current start position from dragStartModelCoord.\n        const [mX, mY] = this._dragStartModelCoord;\n\n        this._dragStartPos = service.viewport.toViewCoord(mX, mY);\n\n        this._moveSelectionDragStartTemp = [...this._dragStartPos];\n      }\n    }\n  }\n}\n\ndeclare global {\n  namespace LumenSuite {\n    interface EdgelessToolMap {\n      default: DefaultToolController;\n    }\n  }\n}\n"]}