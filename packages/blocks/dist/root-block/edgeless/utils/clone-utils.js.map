{"version":3,"file":"clone-utils.js","sourceRoot":"","sources":["../../../../src/root-block/edgeless/utils/clone-utils.ts"],"names":[],"mappings":"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","sourcesContent":["import type {\n  NodeDetail,\n  SerializedMindmapElement,\n} from '@lumensuite/affine-block-surface';\nimport type {\n  FrameBlockProps,\n  SerializedConnectorElement,\n  SerializedGroupElement,\n} from '@lumensuite/affine-model';\nimport type { BlockStdScope } from '@lumensuite/block-std';\n\nimport { MindmapElementModel } from '@lumensuite/affine-block-surface';\nimport {\n  ConnectorElementModel,\n  GroupElementModel,\n} from '@lumensuite/affine-model';\nimport {\n  isGfxContainerElm,\n  type SerializedElement,\n} from '@lumensuite/block-std/gfx';\nimport { type BlockSnapshot, Job } from '@lumensuite/store';\n\nimport { GfxBlockModel } from '../block-model.js';\nimport { getAllDescendantElements, getTopElements } from './tree.js';\n\n/**\n * return all elements in the tree of the elements\n */\nexport function getSortedCloneElements(elements: LumenSuite.EdgelessModel[]) {\n  const set = new Set<LumenSuite.EdgelessModel>();\n  elements.forEach(element => {\n    // this element subtree has been added\n    if (set.has(element)) return;\n\n    getAllDescendantElements(element, true).map(descendant =>\n      set.add(descendant)\n    );\n  });\n  return sortEdgelessElements([...set]);\n}\n\nexport async function prepareCloneData(\n  elements: LumenSuite.EdgelessModel[],\n  std: BlockStdScope\n) {\n  const job = new Job({\n    collection: std.collection,\n  });\n  const res = await Promise.all(\n    elements.map(async element => {\n      const data = await serializeElement(element, elements, job);\n      return data;\n    })\n  );\n  return res.filter((d): d is SerializedElement | BlockSnapshot => !!d);\n}\n\nexport async function serializeElement(\n  element: LumenSuite.EdgelessModel,\n  elements: LumenSuite.EdgelessModel[],\n  job: Job\n) {\n  if (element instanceof GfxBlockModel) {\n    const snapshot = await job.blockToSnapshot(element);\n    if (!snapshot) {\n      return;\n    }\n    return { ...snapshot };\n  } else if (element instanceof ConnectorElementModel) {\n    return serializeConnector(element, elements);\n  } else {\n    return element.serialize();\n  }\n}\n\nexport function serializeConnector(\n  connector: ConnectorElementModel,\n  elements: LumenSuite.EdgelessModel[]\n) {\n  const sourceId = connector.source?.id;\n  const targetId = connector.target?.id;\n  const serialized = connector.serialize();\n  // if the source or target element not to be cloned\n  // transfer connector position to absolute path\n  if (sourceId && elements.every(s => s.id !== sourceId)) {\n    serialized.source = { position: connector.absolutePath[0] };\n  }\n  if (targetId && elements.every(s => s.id !== targetId)) {\n    serialized.target = {\n      position: connector.absolutePath[connector.absolutePath.length - 1],\n    };\n  }\n  return serialized;\n}\n\n/**\n * There are interdependencies between elements,\n * so they must be added in a certain order\n * @param elements edgeless model list\n * @returns sorted edgeless model list\n */\nexport function sortEdgelessElements(elements: LumenSuite.EdgelessModel[]) {\n  // Since each element has a parent-child relationship, and from-to connector relationship\n  // the child element must be added before the parent element\n  // and the connected elements must be added before the connector element\n  // To achieve this, we do a post-order traversal of the tree\n\n  const result: LumenSuite.EdgelessModel[] = [];\n\n  const topElements = getTopElements(elements);\n\n  // the connector element must be added after the connected elements\n  const moveConnectorToEnd = (elements: LumenSuite.EdgelessModel[]) => {\n    const connectors = elements.filter(\n      element => element instanceof ConnectorElementModel\n    );\n    const rest = elements.filter(\n      element => !(element instanceof ConnectorElementModel)\n    );\n    return [...rest, ...connectors];\n  };\n\n  const traverse = (element: LumenSuite.EdgelessModel) => {\n    if (isGfxContainerElm(element)) {\n      moveConnectorToEnd(element.childElements).forEach(child =>\n        traverse(child)\n      );\n    }\n    result.push(element);\n  };\n\n  moveConnectorToEnd(topElements).forEach(element => traverse(element));\n\n  return result;\n}\n\n/**\n * map connector source & target ids\n * @param props serialized element props\n * @param ids old element id to new element id map\n * @returns updated element props\n */\nexport function mapConnectorIds(\n  props: SerializedConnectorElement,\n  ids: Map<string, string>\n) {\n  if (props.source.id) {\n    props.source.id = ids.get(props.source.id);\n  }\n  if (props.target.id) {\n    props.target.id = ids.get(props.target.id);\n  }\n  return props;\n}\n\n/**\n * map group children ids\n * @param props serialized element props\n * @param ids old element id to new element id map\n * @returns updated element props\n */\nexport function mapGroupIds(\n  props: SerializedGroupElement,\n  ids: Map<string, string>\n) {\n  if (props.children) {\n    const newMap: Record<string, boolean> = {};\n    for (const [key, value] of Object.entries(props.children)) {\n      const newKey = ids.get(key);\n      if (newKey) {\n        newMap[newKey] = value;\n      }\n    }\n    props.children = newMap;\n  }\n  return props;\n}\n\n/**\n * map frame children ids\n * @param props frame block props\n * @param ids old element id to new element id map\n * @returns updated frame block props\n */\nexport function mapFrameIds(props: FrameBlockProps, ids: Map<string, string>) {\n  const oldChildIds = [\n    ...(props.childElementIds ? Object.keys(props.childElementIds) : []),\n  ];\n  const newChildIds: Record<string, boolean> = {};\n  oldChildIds.forEach(oldId => {\n    const newIds = ids.get(oldId);\n    if (newIds) newChildIds[newIds] = true;\n  });\n  props.childElementIds = newChildIds;\n\n  return props;\n}\n\n/**\n * map mindmap children & parent ids\n * @param props serialized element props\n * @param ids old element id to new element id map\n * @returns updated element props\n */\nexport function mapMindmapIds(\n  props: SerializedMindmapElement,\n  ids: Map<string, string>\n) {\n  if (props.children) {\n    const newMap: Record<string, NodeDetail> = {};\n    for (const [key, value] of Object.entries(props.children)) {\n      const newKey = ids.get(key);\n      if (value.parent) {\n        const newParent = ids.get(value.parent);\n        value.parent = newParent;\n      }\n      if (newKey) {\n        newMap[newKey] = value;\n      }\n    }\n    props.children = newMap;\n  }\n  return props;\n}\n\nexport function getElementProps(\n  element: LumenSuite.SurfaceModel,\n  ids: Map<string, string>\n) {\n  if (element instanceof ConnectorElementModel) {\n    const props = element.serialize();\n    return mapConnectorIds(props, ids);\n  }\n  if (element instanceof GroupElementModel) {\n    const props = element.serialize();\n    return mapGroupIds(props, ids);\n  }\n  if (element instanceof MindmapElementModel) {\n    const props = element.serialize();\n    return mapMindmapIds(props, ids);\n  }\n  return element.serialize();\n}\n"]}