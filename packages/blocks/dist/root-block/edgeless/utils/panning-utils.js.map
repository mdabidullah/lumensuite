{"version":3,"file":"panning-utils.js","sourceRoot":"","sources":["../../../../src/root-block/edgeless/utils/panning-utils.ts"],"names":[],"mappings":"AAIA,MAAM,gBAAgB,GAAG,EAAE,CAAC;AAE5B,MAAM,UAAU,WAAW,CACzB,QAAkB,EAClB,CAAoB,EACpB,YAAY,GAAG,EAAE;IAEjB,oBAAoB;IACpB,MAAM,EAAE,IAAI,EAAE,GAAG,EAAE,GAAG,QAAQ,CAAC;IAC/B,MAAM,EAAE,KAAK,EAAE,MAAM,EAAE,GAAG,QAAQ,CAAC;IACnC,uBAAuB;IACvB,IAAI,EAAE,CAAC,EAAE,CAAC,EAAE,GAAG,CAAC,CAAC;IACjB,MAAM,EAAE,eAAe,EAAE,GAAG,CAAC,CAAC;IAC9B,CAAC,IAAI,eAAe,CAAC,CAAC,CAAC;IACvB,CAAC,IAAI,eAAe,CAAC,CAAC,CAAC;IACvB,yCAAyC;IACzC,MAAM,QAAQ,GAAG,CAAC,GAAG,IAAI,GAAG,YAAY,CAAC;IACzC,MAAM,SAAS,GAAG,CAAC,GAAG,IAAI,GAAG,KAAK,GAAG,YAAY,CAAC;IAClD,MAAM,OAAO,GAAG,CAAC,GAAG,GAAG,GAAG,YAAY,CAAC;IACvC,MAAM,UAAU,GAAG,CAAC,GAAG,GAAG,GAAG,MAAM,GAAG,YAAY,CAAC;IACnD,qDAAqD;IACrD,IAAI,CAAC,CAAC,QAAQ,IAAI,SAAS,IAAI,OAAO,IAAI,UAAU,CAAC;QAAE,OAAO,IAAI,CAAC;IAEnE,uBAAuB;IACvB,IAAI,MAAM,GAAG,CAAC,CAAC;IACf,IAAI,MAAM,GAAG,CAAC,CAAC;IAEf,sEAAsE;IACtE,IAAI,QAAQ,EAAE,CAAC;QACb,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,gBAAgB,EAAE,CAAC,GAAG,CAAC,IAAI,GAAG,YAAY,CAAC,CAAC,CAAC;IAClE,CAAC;SAAM,IAAI,SAAS,EAAE,CAAC;QACrB,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,gBAAgB,EAAE,CAAC,GAAG,CAAC,IAAI,GAAG,KAAK,GAAG,YAAY,CAAC,CAAC,CAAC;IACzE,CAAC;IAED,IAAI,OAAO,EAAE,CAAC;QACZ,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,gBAAgB,EAAE,CAAC,GAAG,CAAC,GAAG,GAAG,YAAY,CAAC,CAAC,CAAC;IACjE,CAAC;SAAM,IAAI,UAAU,EAAE,CAAC;QACtB,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,gBAAgB,EAAE,CAAC,GAAG,CAAC,GAAG,GAAG,MAAM,GAAG,YAAY,CAAC,CAAC,CAAC;IACzE,CAAC;IAED,OAAO,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;AAC1B,CAAC","sourcesContent":["import type { PointerEventState } from '@lumensuite/block-std';\nimport type { Viewport } from '@lumensuite/block-std/gfx';\nimport type { IVec } from '@lumensuite/global/utils';\n\nconst PANNING_DISTANCE = 30;\n\nexport function calPanDelta(\n  viewport: Viewport,\n  e: PointerEventState,\n  edgeDistance = 20\n): IVec | null {\n  // Get viewport edge\n  const { left, top } = viewport;\n  const { width, height } = viewport;\n  // Get pointer position\n  let { x, y } = e;\n  const { containerOffset } = e;\n  x += containerOffset.x;\n  y += containerOffset.y;\n  // Check if pointer is near viewport edge\n  const nearLeft = x < left + edgeDistance;\n  const nearRight = x > left + width - edgeDistance;\n  const nearTop = y < top + edgeDistance;\n  const nearBottom = y > top + height - edgeDistance;\n  // If pointer is not near viewport edge, return false\n  if (!(nearLeft || nearRight || nearTop || nearBottom)) return null;\n\n  // Calculate move delta\n  let deltaX = 0;\n  let deltaY = 0;\n\n  // Use PANNING_DISTANCE to limit the max delta, avoid panning too fast\n  if (nearLeft) {\n    deltaX = Math.max(-PANNING_DISTANCE, x - (left + edgeDistance));\n  } else if (nearRight) {\n    deltaX = Math.min(PANNING_DISTANCE, x - (left + width - edgeDistance));\n  }\n\n  if (nearTop) {\n    deltaY = Math.max(-PANNING_DISTANCE, y - (top + edgeDistance));\n  } else if (nearBottom) {\n    deltaY = Math.min(PANNING_DISTANCE, y - (top + height - edgeDistance));\n  }\n\n  return [deltaX, deltaY];\n}\n"]}