{"version":3,"file":"bound-utils.js","sourceRoot":"","sources":["../../../../src/root-block/edgeless/utils/bound-utils.ts"],"names":[],"mappings":"AAEA,OAAO,EAAE,KAAK,EAAE,qBAAqB,EAAE,MAAM,0BAA0B,CAAC;AACxE,OAAO,EAAsB,mBAAmB,EAAE,MAAM,mBAAmB,CAAC;AAE5E,MAAM,UAAU,qBAAqB,CAAC,QAAoC;IACxE,IAAI,QAAQ,CAAC,MAAM,KAAK,CAAC;QAAE,OAAO,IAAI,KAAK,EAAE,CAAC;IAC9C,OAAO,QAAQ,CAAC,MAAM,CAAC,CAAC,IAAI,EAAE,OAAO,EAAE,EAAE;QACvC,OAAO,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC;IAC1C,CAAC,EAAE,QAAQ,CAAC,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC;AAC/B,CAAC;AAED,MAAM,UAAU,6BAA6B,CAAC,OAA0B;IACtE,OAAO,KAAK,CAAC,IAAI,CACf,qBAAqB,CAAC;QACpB,GAAG,KAAK,CAAC,WAAW,CAAC,OAAO,CAAC,IAAI,CAAC;QAClC,MAAM,EAAE,OAAO,OAAO,CAAC,MAAM,KAAK,QAAQ,CAAC,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;KAChE,CAAC,CACH,CAAC;AACJ,CAAC;AAED,MAAM,UAAU,4BAA4B,CAAC,QAAuB;IAClE,IAAI,OAAO,QAAQ,CAAC,KAAK,CAAC,IAAI,KAAK,QAAQ;QAAE,OAAO,IAAI,CAAC;IACzD,OAAO,KAAK,CAAC,WAAW,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;AAChD,CAAC;AAED,MAAM,UAAU,gCAAgC,CAC9C,eAAsD;IAEtD,IAAI,eAAe,CAAC,MAAM,KAAK,CAAC;QAAE,OAAO,IAAI,KAAK,EAAE,CAAC;IAErD,IAAI,IAAI,GAAiB,IAAI,CAAC;IAE9B,KAAK,MAAM,IAAI,IAAI,eAAe,EAAE,CAAC;QACnC,MAAM,EAAE,IAAI,EAAE,aAAa,EAAE,GAAG,mBAAmB,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;QACpE,MAAM,KAAK,GAAG,aAAa;YACzB,CAAC,CAAC,4BAA4B,CAAC,aAAa,CAAC;YAC7C,CAAC,CAAC,6BAA6B,CAAC,IAAyB,CAAC,CAAC;QAE7D,IAAI,CAAC,KAAK;YAAE,SAAS;QACrB,IAAI,CAAC,IAAI;YAAE,IAAI,GAAG,KAAK,CAAC;;YACnB,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;IAChC,CAAC;IAED,OAAO,IAAI,IAAI,IAAI,KAAK,EAAE,CAAC;AAC7B,CAAC","sourcesContent":["import type { SerializedElement } from '@blocksuite/block-std/gfx';\n\nimport { Bound, getBoundsWithRotation } from '@blocksuite/global/utils';\nimport { type BlockSnapshot, BlockSnapshotSchema } from '@blocksuite/store';\n\nexport function edgelessElementsBound(elements: BlockSuite.EdgelessModel[]) {\n  if (elements.length === 0) return new Bound();\n  return elements.reduce((prev, element) => {\n    return prev.unite(element.elementBound);\n  }, elements[0].elementBound);\n}\n\nexport function getBoundFromSerializedElement(element: SerializedElement) {\n  return Bound.from(\n    getBoundsWithRotation({\n      ...Bound.deserialize(element.xywh),\n      rotate: typeof element.rotate === 'number' ? element.rotate : 0,\n    })\n  );\n}\n\nexport function getBoundFromGfxBlockSnapshot(snapshot: BlockSnapshot) {\n  if (typeof snapshot.props.xywh !== 'string') return null;\n  return Bound.deserialize(snapshot.props.xywh);\n}\n\nexport function edgelessElementsBoundFromRawData(\n  elementsRawData: (SerializedElement | BlockSnapshot)[]\n) {\n  if (elementsRawData.length === 0) return new Bound();\n\n  let prev: Bound | null = null;\n\n  for (const data of elementsRawData) {\n    const { data: blockSnapshot } = BlockSnapshotSchema.safeParse(data);\n    const bound = blockSnapshot\n      ? getBoundFromGfxBlockSnapshot(blockSnapshot)\n      : getBoundFromSerializedElement(data as SerializedElement);\n\n    if (!bound) continue;\n    if (!prev) prev = bound;\n    else prev = prev.unite(bound);\n  }\n\n  return prev ?? new Bound();\n}\n"]}