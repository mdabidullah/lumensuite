{"version":3,"file":"tree.js","sourceRoot":"","sources":["../../../../src/root-block/edgeless/utils/tree.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,iBAAiB,EAAE,MAAM,2BAA2B,CAAC;AAE9D;;;;;;;;;;;;;;;;;GAiBG;AACH,MAAM,UAAU,cAAc,CAAC,QAAoC;IACjE,MAAM,WAAW,GAAG,IAAI,GAAG,CAA2B,QAAQ,CAAC,CAAC;IAChE,MAAM,eAAe,GAAG,IAAI,GAAG,EAAqC,CAAC;IACrE,QAAQ,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE;QACzB,eAAe,CAAC,GAAG,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;IACtC,CAAC,CAAC,CAAC;IAEH,MAAM,QAAQ,GAAG,CAAC,OAAiC,EAAE,EAAE;QACrD,0BAA0B;QAC1B,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,OAAO,CAAC;YAAE,OAAO;QAE1C,iEAAiE;QACjE,IAAI,eAAe,CAAC,GAAG,CAAC,OAAO,CAAC;YAAE,OAAO;QAEzC,eAAe,CAAC,GAAG,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;QAEnC,IAAI,iBAAiB,CAAC,OAAO,CAAC,EAAE,CAAC;YAC/B,OAAO,CAAC,aAAa,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;gBACpC,WAAW,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;gBAC1B,QAAQ,CAAC,KAAK,CAAC,CAAC;YAClB,CAAC,CAAC,CAAC;QACL,CAAC;IACH,CAAC,CAAC;IAEF,eAAe,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,OAAO,EAAE,EAAE;QACrC,QAAQ,CAAC,OAAO,CAAC,CAAC;IACpB,CAAC,CAAC,CAAC;IAEH,OAAO,CAAC,GAAG,WAAW,CAAC,CAAC;AAC1B,CAAC;AAED;;GAEG;AACH,MAAM,UAAU,wBAAwB,CACtC,OAAiC,EACjC,WAAW,GAAG,KAAK;IAEnB,MAAM,QAAQ,GAA+B,EAAE,CAAC;IAEhD,MAAM,QAAQ,GAAG,CAAC,OAAiC,EAAE,EAAE;QACrD,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QAEvB,IAAI,iBAAiB,CAAC,OAAO,CAAC,EAAE,CAAC;YAC/B,OAAO,CAAC,aAAa,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;gBACpC,QAAQ,CAAC,KAAK,CAAC,CAAC;YAClB,CAAC,CAAC,CAAC;QACL,CAAC;IACH,CAAC,CAAC;IAEF,IAAI,WAAW,EAAE,CAAC;QAChB,QAAQ,CAAC,OAAO,CAAC,CAAC;IACpB,CAAC;SAAM,CAAC;QACN,IAAI,iBAAiB,CAAC,OAAO,CAAC,EAAE,CAAC;YAC/B,OAAO,CAAC,aAAa,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;gBACpC,QAAQ,CAAC,KAAK,CAAC,CAAC;YAClB,CAAC,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IAED,OAAO,QAAQ,CAAC;AAClB,CAAC","sourcesContent":["import { isGfxContainerElm } from '@blocksuite/block-std/gfx';\n\n/**\n * Get the top elements from the list of elements, which are in some tree structures.\n *\n * For example: a list `[F1, F2, E6, E1, G1, E5, E2, E3, E4]`,\n * and they are in the edgeless container tree structure:\n * ```\n *     F1         F2      E6\n *    /  \\        |\n *  E1   G1       E5\n *       / \\\n *      E2  G2*\n *         / \\\n *        E3 E4\n * ```\n * where the star symbol `*` represent it is not in the list.\n *\n * The result should be `[F1, F2, E6, E3, E4]`.\n */\nexport function getTopElements(elements: BlockSuite.EdgelessModel[]) {\n  const topElements = new Set<BlockSuite.EdgelessModel>(elements);\n  const visitedElements = new Map<BlockSuite.EdgelessModel, boolean>();\n  elements.forEach(element => {\n    visitedElements.set(element, false);\n  });\n\n  const traverse = (element: BlockSuite.EdgelessModel) => {\n    // Skip if not in the list\n    if (!visitedElements.has(element)) return;\n\n    // Skip if already visited, its children also are already visited\n    if (visitedElements.get(element)) return;\n\n    visitedElements.set(element, true);\n\n    if (isGfxContainerElm(element)) {\n      element.childElements.forEach(child => {\n        topElements.delete(child);\n        traverse(child);\n      });\n    }\n  };\n\n  visitedElements.forEach((_, element) => {\n    traverse(element);\n  });\n\n  return [...topElements];\n}\n\n/**\n * Get all descendant elements of the given element.\n */\nexport function getAllDescendantElements(\n  element: BlockSuite.EdgelessModel,\n  includeSelf = false\n) {\n  const elements: BlockSuite.EdgelessModel[] = [];\n\n  const traverse = (element: BlockSuite.EdgelessModel) => {\n    elements.push(element);\n\n    if (isGfxContainerElm(element)) {\n      element.childElements.forEach(child => {\n        traverse(child);\n      });\n    }\n  };\n\n  if (includeSelf) {\n    traverse(element);\n  } else {\n    if (isGfxContainerElm(element)) {\n      element.childElements.forEach(child => {\n        traverse(child);\n      });\n    }\n  }\n\n  return elements;\n}\n"]}