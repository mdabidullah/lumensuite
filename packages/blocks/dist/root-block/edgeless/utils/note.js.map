{"version":3,"file":"note.js","sourceRoot":"","sources":["../../../../src/root-block/edgeless/utils/note.ts"],"names":[],"mappings":"AAGA,OAAO,EAAE,cAAc,EAAE,MAAM,yCAAyC,CAAC;AACzE,OAAO,EAAE,wBAAwB,EAAE,MAAM,iCAAiC,CAAC;AAK3E,OAAO,EACL,mBAAmB,EACnB,kBAAkB,EAClB,eAAe,GAChB,MAAM,aAAa,CAAC;AAQrB,MAAM,UAAU,OAAO,CACrB,QAAoC,EACpC,KAAY,EACZ,OAAoB,EACpB,KAAK,GAAG,kBAAkB,EAC1B,MAAM,GAAG,mBAAmB;IAE5B,MAAM,MAAM,GAAG,QAAQ,CAAC,gBAAgB,CAAC,KAAK,EAAE;QAC9C,KAAK;QACL,MAAM;KACP,CAAC,CAAC;IAEH,MAAM,GAAG,GAAG,QAAQ,CAAC,GAAG,CAAC;IAEzB,MAAM,OAAO,GAAG,GAAG,CAAC,QAAQ,CAC1B,OAAO,CAAC,YAAY,EACpB,EAAE,IAAI,EAAE,OAAO,CAAC,SAAS,EAAE,EAC3B,MAAM,CACP,CAAC;IACF,IAAI,OAAO,CAAC,QAAQ,IAAI,MAAM,GAAG,eAAe,EAAE,CAAC;QACjD,MAAM,IAAI,GAAG,GAAG,CAAC,YAAY,CAAC,MAAM,CAAmB,CAAC;QACxD,GAAG,CAAC,WAAW,CAAC,IAAI,EAAE,GAAG,EAAE;YACzB,IAAI,CAAC,QAAQ,CAAC,QAAQ,GAAG,IAAI,CAAC;YAC9B,IAAI,CAAC,QAAQ,CAAC,eAAe,GAAG,MAAM,CAAC;QACzC,CAAC,CAAC,CAAC;IACL,CAAC;IACD,QAAQ,CAAC,KAAK,CAAC,eAAe,CAAC,EAAE,IAAI,EAAE,SAAS,EAAE,CAAC,CAAC;IAEpD,gCAAgC;IAChC,qBAAqB,CAAC,GAAG,EAAE;QACzB,MAAM,MAAM,GACT,GAAG,CAAC,IAAI,EAAE,QAAQ,CAAC,MAAM,CACxB,KAAK,CAAC,EAAE,CAAC,KAAK,CAAC,OAAO,KAAK,aAAa,CACD,IAAI,EAAE,CAAC;QAClD,MAAM,OAAO,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,KAAK,MAAM,CAAC,CAAC;QAClD,IAAI,OAAO,EAAE,CAAC;YACZ,QAAQ,CAAC,OAAO,CAAC,SAAS,CAAC,GAAG,CAAC;gBAC7B,QAAQ,EAAE,CAAC,OAAO,CAAC,EAAE,CAAC;gBACtB,OAAO,EAAE,IAAI;aACd,CAAC,CAAC;YAEH,8CAA8C;YAC9C,QAAQ,CAAC,cAAc;iBACpB,IAAI,CAAC,GAAG,EAAE;gBACT,IAAI,OAAO,EAAE,CAAC;oBACZ,cAAc,CAAC,QAAQ,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;gBACxC,CAAC;qBAAM,CAAC;oBACN,uDAAuD;oBACvD,0DAA0D;oBAC1D,wBAAwB,CAAC,KAAK,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC;gBAC7C,CAAC;YACH,CAAC,CAAC;iBACD,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QAC1B,CAAC;IACH,CAAC,CAAC,CAAC;AACL,CAAC","sourcesContent":["import type { NoteBlockModel } from '@blocksuite/affine-model';\nimport type { Point } from '@blocksuite/global/utils';\n\nimport { focusTextModel } from '@blocksuite/affine-components/rich-text';\nimport { handleNativeRangeAtPoint } from '@blocksuite/affine-shared/utils';\n\nimport type { NoteChildrenFlavour } from '../../../_common/utils/index.js';\nimport type { EdgelessRootBlockComponent } from '../edgeless-root-block.js';\n\nimport {\n  DEFAULT_NOTE_HEIGHT,\n  DEFAULT_NOTE_WIDTH,\n  NOTE_MIN_HEIGHT,\n} from './consts.js';\n\nexport type NoteOptions = {\n  childFlavour: NoteChildrenFlavour;\n  childType: string | null;\n  collapse: boolean;\n};\n\nexport function addNote(\n  edgeless: EdgelessRootBlockComponent,\n  point: Point,\n  options: NoteOptions,\n  width = DEFAULT_NOTE_WIDTH,\n  height = DEFAULT_NOTE_HEIGHT\n) {\n  const noteId = edgeless.addNoteWithPoint(point, {\n    width,\n    height,\n  });\n\n  const doc = edgeless.doc;\n\n  const blockId = doc.addBlock(\n    options.childFlavour,\n    { type: options.childType },\n    noteId\n  );\n  if (options.collapse && height > NOTE_MIN_HEIGHT) {\n    const note = doc.getBlockById(noteId) as NoteBlockModel;\n    doc.updateBlock(note, () => {\n      note.edgeless.collapse = true;\n      note.edgeless.collapsedHeight = height;\n    });\n  }\n  edgeless.tools.setEdgelessTool({ type: 'default' });\n\n  // Wait for edgelessTool updated\n  requestAnimationFrame(() => {\n    const blocks =\n      (doc.root?.children.filter(\n        child => child.flavour === 'affine:note'\n      ) as BlockSuite.EdgelessBlockModelType[]) ?? [];\n    const element = blocks.find(b => b.id === noteId);\n    if (element) {\n      edgeless.service.selection.set({\n        elements: [element.id],\n        editing: true,\n      });\n\n      // Waiting dom updated, `note mask` is removed\n      edgeless.updateComplete\n        .then(() => {\n          if (blockId) {\n            focusTextModel(edgeless.std, blockId);\n          } else {\n            // Cannot reuse `handleNativeRangeClick` directly here,\n            // since `retargetClick` will re-target to pervious editor\n            handleNativeRangeAtPoint(point.x, point.y);\n          }\n        })\n        .catch(console.error);\n    }\n  });\n}\n"]}