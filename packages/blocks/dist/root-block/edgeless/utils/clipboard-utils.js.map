{"version":3,"file":"clipboard-utils.js","sourceRoot":"","sources":["../../../../src/root-block/edgeless/utils/clipboard-utils.ts"],"names":[],"mappings":"AAQA,OAAO,EAAE,OAAO,EAAE,MAAM,0BAA0B,CAAC;AAInD,OAAO,EAAE,qBAAqB,EAAE,MAAM,kBAAkB,CAAC;AACzD,OAAO,EAAE,sBAAsB,EAAE,gBAAgB,EAAE,MAAM,kBAAkB,CAAC;AAC5E,OAAO,EAAE,uBAAuB,EAAE,MAAM,YAAY,CAAC;AACrD,OAAO,EACL,mBAAmB,EACnB,qBAAqB,EACrB,YAAY,EACZ,YAAY,EACZ,WAAW,GACZ,MAAM,YAAY,CAAC;AAEpB,MAAM,MAAM,GAAG,EAAE,CAAC;AAClB,MAAM,CAAC,KAAK,UAAU,SAAS,CAC7B,QAAoC,EACpC,QAAoC,EACpC,MAAM,GAAG,IAAI;IAEb,MAAM,EAAE,mBAAmB,EAAE,GAAG,QAAQ,CAAC;IACzC,MAAM,YAAY,GAAG,sBAAsB,CAAC,QAAQ,CAAC,CAAC;IACtD,MAAM,UAAU,GAAG,qBAAqB,CAAC,YAAY,CAAC,CAAC;IACvD,UAAU,CAAC,CAAC,IAAI,UAAU,CAAC,CAAC,GAAG,MAAM,CAAC;IAEtC,MAAM,QAAQ,GAAG,MAAM,gBAAgB,CAAC,YAAY,EAAE,QAAQ,CAAC,GAAG,CAAC,CAAC;IACpE,MAAM,EAAE,cAAc,EAAE,WAAW,EAAE,GACnC,MAAM,mBAAmB,CAAC,+BAA+B,CACvD,QAAQ,EACR,UAAU,CAAC,MAAM,CAClB,CAAC;IAEJ,MAAM,WAAW,GAAG,CAAC,GAAG,cAAc,EAAE,GAAG,WAAW,CAAC,CAAC;IAExD,QAAQ,CAAC,OAAO,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;IAE3C,IAAI,MAAM,EAAE,CAAC;QACX,QAAQ,CAAC,OAAO,CAAC,SAAS,CAAC,GAAG,CAAC;YAC7B,QAAQ,EAAE,WAAW,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC;YACpC,OAAO,EAAE,KAAK;SACf,CAAC,CAAC;IACL,CAAC;AACH,CAAC;AACD,MAAM,CAAC,MAAM,aAAa,GAAG,CAAC,QAAoC,EAAE,EAAE;IACpE,MAAM,EAAE,KAAK,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,aAAa,EAAE,eAAe,EAAE,GACrE,OAAO,CAAC,uBAAuB,CAAC,QAAQ,CAAC,EAAE,OAAO,CAAC,EAAE;QACnD,IAAI,WAAW,CAAC,OAAO,CAAC,EAAE,CAAC;YACzB,OAAO,OAAO,CAAC;QACjB,CAAC;aAAM,IAAI,YAAY,CAAC,OAAO,CAAC,EAAE,CAAC;YACjC,OAAO,QAAQ,CAAC;QAClB,CAAC;aAAM,IAAI,YAAY,CAAC,OAAO,CAAC,EAAE,CAAC;YACjC,OAAO,QAAQ,CAAC;QAClB,CAAC;aAAM,IAAI,mBAAmB,CAAC,OAAO,CAAC,EAAE,CAAC;YACxC,OAAO,eAAe,CAAC;QACzB,CAAC;aAAM,IAAI,qBAAqB,CAAC,OAAO,CAAC,EAAE,CAAC;YAC1C,OAAO,iBAAiB,CAAC;QAC3B,CAAC;QACD,OAAO,QAAQ,CAAC;IAClB,CAAC,CAOA,CAAC;IAEJ,OAAO;QACL,KAAK,EAAE,KAAK,IAAI,EAAE;QAClB,MAAM,EAAE,MAAM,IAAI,EAAE;QACpB,MAAM,EAAE,MAAM,IAAI,EAAE;QACpB,MAAM,EAAE,MAAM,IAAI,EAAE;QACpB,aAAa,EAAE,aAAa,IAAI,EAAE;QAClC,eAAe,EAAE,eAAe,IAAI,EAAE;KACvC,CAAC;AACJ,CAAC,CAAC","sourcesContent":["import type {\n  EdgelessTextBlockModel,\n  EmbedSyncedDocModel,\n  FrameBlockModel,\n  ImageBlockModel,\n  NoteBlockModel,\n} from '@blocksuite/affine-model';\n\nimport { groupBy } from '@blocksuite/global/utils';\n\nimport type { EdgelessRootBlockComponent } from '../edgeless-root-block.js';\n\nimport { edgelessElementsBound } from './bound-utils.js';\nimport { getSortedCloneElements, prepareCloneData } from './clone-utils.js';\nimport { getElementsWithoutGroup } from './group.js';\nimport {\n  isEdgelessTextBlock,\n  isEmbedSyncedDocBlock,\n  isFrameBlock,\n  isImageBlock,\n  isNoteBlock,\n} from './query.js';\n\nconst offset = 10;\nexport async function duplicate(\n  edgeless: EdgelessRootBlockComponent,\n  elements: BlockSuite.EdgelessModel[],\n  select = true\n) {\n  const { clipboardController } = edgeless;\n  const copyElements = getSortedCloneElements(elements);\n  const totalBound = edgelessElementsBound(copyElements);\n  totalBound.x += totalBound.w + offset;\n\n  const snapshot = await prepareCloneData(copyElements, edgeless.std);\n  const { canvasElements, blockModels } =\n    await clipboardController.createElementsFromClipboardData(\n      snapshot,\n      totalBound.center\n    );\n\n  const newElements = [...canvasElements, ...blockModels];\n\n  edgeless.surface.fitToViewport(totalBound);\n\n  if (select) {\n    edgeless.service.selection.set({\n      elements: newElements.map(e => e.id),\n      editing: false,\n    });\n  }\n}\nexport const splitElements = (elements: BlockSuite.EdgelessModel[]) => {\n  const { notes, frames, shapes, images, edgelessTexts, embedSyncedDocs } =\n    groupBy(getElementsWithoutGroup(elements), element => {\n      if (isNoteBlock(element)) {\n        return 'notes';\n      } else if (isFrameBlock(element)) {\n        return 'frames';\n      } else if (isImageBlock(element)) {\n        return 'images';\n      } else if (isEdgelessTextBlock(element)) {\n        return 'edgelessTexts';\n      } else if (isEmbedSyncedDocBlock(element)) {\n        return 'embedSyncedDocs';\n      }\n      return 'shapes';\n    }) as {\n      notes: NoteBlockModel[];\n      shapes: BlockSuite.SurfaceModel[];\n      frames: FrameBlockModel[];\n      images: ImageBlockModel[];\n      edgelessTexts: EdgelessTextBlockModel[];\n      embedSyncedDocs: EmbedSyncedDocModel[];\n    };\n\n  return {\n    notes: notes ?? [],\n    shapes: shapes ?? [],\n    frames: frames ?? [],\n    images: images ?? [],\n    edgelessTexts: edgelessTexts ?? [],\n    embedSyncedDocs: embedSyncedDocs ?? [],\n  };\n};\n"]}