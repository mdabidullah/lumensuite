{"version":3,"file":"snap-manager.js","sourceRoot":"","sources":["../../../../src/root-block/edgeless/utils/snap-manager.ts"],"names":[],"mappings":"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","sourcesContent":["import type {\n  SurfaceBlockComponent,\n  SurfaceBlockModel,\n} from '@lumensuite/affine-block-surface';\nimport type { ConnectorElementModel } from '@lumensuite/affine-model';\n\nimport { CommonUtils, Overlay } from '@lumensuite/affine-block-surface';\nimport { Bound, deserializeXYWH, Point } from '@lumensuite/global/utils';\n\nimport type { EdgelessRootService } from '../edgeless-root-service.js';\n\nimport { isConnectable, isTopLevelBlock } from '../utils/query.js';\n\ninterface Distance {\n  absXDistance: number;\n  absYDistance: number;\n  xDistance: number;\n  yDistance: number;\n  indexX: number;\n  indexY: number;\n}\n\nconst ALIGN_THRESHOLD = 5;\n\nexport class EdgelessSnapManager extends Overlay {\n  private _alignableBounds: Bound[] = [];\n\n  /**\n   * This variable contains reference lines that are\n   * generated by the 'Distribute Alignment' function. This alignment is achieved\n   * by evenly distributing elements based on specified alignment rules.\n   * These lines serve as a guide for achieving equal spacing or distribution\n   * among multiple graphics or design elements.\n   */\n  private _distributedAlignLines: [Point, Point][] = [];\n\n  /**\n   * This variable holds reference lines that are calculated\n   * based on the self-alignment of the graphics. This alignment is determined\n   * according to various aspects of the graphic itself, such as the center, edges,\n   * corners, etc. It essentially represents the guidelines for the positioning\n   * and alignment within the individual graphic elements.\n   */\n  private _intraGraphicAlignLines: [Point, Point][] = [];\n\n  cleanupAlignables = () => {\n    this._alignableBounds = [];\n    this._intraGraphicAlignLines = [];\n    this._distributedAlignLines = [];\n    // FIXME: not sure why renderer can be undefined sometimes\n    this._surface.renderer?.removeOverlay(this);\n  };\n\n  private get _surface() {\n    const surfaceModel = this._rootService.doc.getBlockByFlavour(\n      'affine:surface'\n    )[0] as SurfaceBlockModel;\n\n    return this._rootService.std.view.getBlock(\n      surfaceModel.id\n    ) as SurfaceBlockComponent;\n  }\n\n  constructor(private _rootService: EdgelessRootService) {\n    super();\n  }\n\n  private _alignDistributeHorizontally(\n    rst: { dx: number; dy: number },\n    bound: Bound,\n    threshold: number,\n    viewport: { zoom: number }\n  ) {\n    const wBoxes: Bound[] = [];\n    this._alignableBounds.forEach(box => {\n      if (box.isHorizontalCross(bound)) {\n        wBoxes.push(box);\n      }\n    });\n    let dif = Infinity;\n    let min = Infinity;\n    for (let i = 0; i < wBoxes.length; i++) {\n      for (let j = i + 1; j < wBoxes.length; j++) {\n        let lb = wBoxes[i],\n          rb = wBoxes[j];\n        // it means these bound need to be horizontally across\n        if (!lb.isHorizontalCross(rb)) continue;\n        if (lb.isIntersectWithBound(rb)) continue;\n        if (rb.maxX < lb.minX) {\n          const temp = rb;\n          rb = lb;\n          lb = temp;\n        }\n        /** align middle */\n        let _centerX = 0;\n        const updateDif = () => {\n          dif = Math.abs(bound.center[0] - _centerX);\n          if (dif <= threshold && dif < min) {\n            min = dif;\n            rst.dx = _centerX - bound.center[0];\n            /**\n             * calculate points to draw\n             */\n            const ys = [lb.minY, lb.maxY, rb.minY, rb.maxY].sort(\n              (a, b) => a - b\n            );\n            const y = (ys[1] + ys[2]) / 2;\n            const offset = 2 / viewport.zoom;\n            const xs = [\n              _centerX - bound.w / 2 - offset,\n              _centerX + bound.w / 2 + offset,\n              rb.minX,\n              rb.maxX,\n              lb.minX,\n              lb.maxX,\n            ].sort((a, b) => a - b);\n            this._distributedAlignLines[0] = [\n              new Point(xs[1], y),\n              new Point(xs[2], y),\n            ];\n            this._distributedAlignLines[1] = [\n              new Point(xs[3], y),\n              new Point(xs[4], y),\n            ];\n          }\n        };\n        if (lb.horizontalDistance(rb) > bound.w) {\n          _centerX = (lb.maxX + rb.minX) / 2;\n          updateDif();\n        }\n        /** align left */\n        _centerX = lb.minX - (rb.minX - lb.maxX) - bound.w / 2;\n        updateDif();\n        /** align right */\n        _centerX = rb.minX - lb.maxX + rb.maxX + bound.w / 2;\n        updateDif();\n      }\n    }\n  }\n\n  private _alignDistributeVertically(\n    rst: { dx: number; dy: number },\n    bound: Bound,\n    threshold: number,\n    viewport: { zoom: number }\n  ) {\n    const hBoxes: Bound[] = [];\n    this._alignableBounds.forEach(box => {\n      if (box.isVerticalCross(bound)) {\n        hBoxes.push(box);\n      }\n    });\n    let dif = Infinity;\n    let min = Infinity;\n    for (let i = 0; i < hBoxes.length; i++) {\n      for (let j = i + 1; j < hBoxes.length; j++) {\n        let ub = hBoxes[i],\n          db = hBoxes[j];\n        if (!ub.isVerticalCross(db)) continue;\n        if (ub.isIntersectWithBound(db)) continue;\n        if (db.maxY < ub.minX) {\n          const temp = ub;\n          ub = db;\n          db = temp;\n        }\n        /** align middle */\n        let _centerY = 0;\n        const updateDiff = () => {\n          dif = Math.abs(bound.center[1] - _centerY);\n          if (dif <= threshold && dif < min) {\n            min = dif;\n            rst.dy = _centerY - bound.center[1];\n            /**\n             * calculate points to draw\n             */\n            const xs = [ub.minX, ub.maxX, db.minX, db.maxX].sort(\n              (a, b) => a - b\n            );\n            const x = (xs[1] + xs[2]) / 2;\n            const offset = 2 / viewport.zoom;\n            const ys = [\n              _centerY - bound.h / 2 - offset,\n              _centerY + bound.h / 2 + offset,\n              db.minY,\n              db.maxY,\n              ub.minY,\n              ub.maxY,\n            ].sort((a, b) => a - b);\n            this._distributedAlignLines[3] = [\n              new Point(x, ys[1]),\n              new Point(x, ys[2]),\n            ];\n            this._distributedAlignLines[4] = [\n              new Point(x, ys[3]),\n              new Point(x, ys[4]),\n            ];\n          }\n        };\n        if (ub.verticalDistance(db) > bound.h) {\n          _centerY = (ub.maxY + db.minY) / 2;\n          updateDiff();\n        }\n        /** align upper */\n        _centerY = ub.minY - (db.minY - ub.maxY) - bound.h / 2;\n        updateDiff();\n        /** align lower */\n        _centerY = db.minY - ub.maxY + db.maxY + bound.h / 2;\n        updateDiff();\n      }\n    }\n  }\n\n  private _calculateClosestDistances(bound: Bound, other: Bound): Distance {\n    // Calculate center-to-center and center-to-side distances\n    const centerXDistance = other.center[0] - bound.center[0];\n    const centerYDistance = other.center[1] - bound.center[1];\n\n    // Calculate center-to-side distances\n    const leftDistance = other.minX - bound.center[0];\n    const rightDistance = other.maxX - bound.center[0];\n    const topDistance = other.minY - bound.center[1];\n    const bottomDistance = other.maxY - bound.center[1];\n\n    // Calculate side-to-side distances\n    const leftToLeft = other.minX - bound.minX;\n    const leftToRight = other.maxX - bound.minX;\n    const rightToLeft = other.minX - bound.maxX;\n    const rightToRight = other.maxX - bound.maxX;\n\n    const topToTop = other.minY - bound.minY;\n    const topToBottom = other.maxY - bound.minY;\n    const bottomToTop = other.minY - bound.maxY;\n    const bottomToBottom = other.maxY - bound.maxY;\n\n    const xDistances = [\n      centerXDistance,\n      leftDistance,\n      rightDistance,\n      leftToLeft,\n      leftToRight,\n      rightToLeft,\n      rightToRight,\n    ];\n\n    const yDistances = [\n      centerYDistance,\n      topDistance,\n      bottomDistance,\n      topToTop,\n      topToBottom,\n      bottomToTop,\n      bottomToBottom,\n    ];\n\n    // Get absolute distances\n    const xDistancesAbs = xDistances.map(Math.abs);\n    const yDistancesAbs = yDistances.map(Math.abs);\n\n    // Get closest distances\n    const closestX = Math.min(...xDistancesAbs);\n    const closestY = Math.min(...yDistancesAbs);\n\n    const indexX = xDistancesAbs.indexOf(closestX);\n    const indexY = yDistancesAbs.indexOf(closestY);\n\n    // the x and y distances will be useful for locating the align point\n    return {\n      absXDistance: closestX,\n      absYDistance: closestY,\n      xDistance: xDistances[indexX],\n      yDistance: yDistances[indexY],\n      indexX,\n      indexY,\n    };\n  }\n\n  private _draw() {\n    this._surface.refresh();\n  }\n\n  private _getBoundsWithRotationByAlignable(\n    alignable: LumenSuite.EdgelessModel\n  ) {\n    const rotate = isTopLevelBlock(alignable) ? 0 : alignable.rotate;\n    const [x, y, w, h] = deserializeXYWH(alignable.xywh);\n    return Bound.from(\n      CommonUtils.getBoundsWithRotation({ x, y, w, h, rotate })\n    );\n  }\n\n  // Update X align point\n  private _updateXAlignPoint(\n    rst: { dx: number; dy: number },\n    bound: Bound,\n    other: Bound,\n    distance: Distance\n  ) {\n    const index = distance.indexX;\n    rst.dx = distance.xDistance;\n    const alignPointX = [\n      other.center[0],\n      other.minX,\n      other.maxX,\n      bound.minX + rst.dx,\n      bound.minX + rst.dx,\n      bound.maxX + rst.dx,\n      bound.maxX + rst.dx,\n    ][index];\n    this._intraGraphicAlignLines[0] = [\n      new Point(alignPointX, bound.center[1]),\n      new Point(alignPointX, other.center[1]),\n    ];\n  }\n\n  // Update Y align point\n  private _updateYAlignPoint(\n    rst: { dx: number; dy: number },\n    bound: Bound,\n    other: Bound,\n    distance: Distance\n  ) {\n    const index = distance.indexY;\n    rst.dy = distance.yDistance;\n    const alignPointY = [\n      other.center[1],\n      other.minY,\n      other.maxY,\n      bound.minY + rst.dy,\n      bound.minY + rst.dy,\n      bound.maxY + rst.dy,\n      bound.maxY + rst.dy,\n    ][index];\n    this._intraGraphicAlignLines[1] = [\n      new Point(bound.center[0], alignPointY),\n      new Point(other.center[0], alignPointY),\n    ];\n  }\n\n  align(bound: Bound): { dx: number; dy: number } {\n    const rst = { dx: 0, dy: 0 };\n    const threshold = ALIGN_THRESHOLD;\n\n    const { viewport } = this._rootService;\n\n    this._intraGraphicAlignLines = [];\n    this._distributedAlignLines = [];\n\n    for (const other of this._alignableBounds) {\n      const closestDistances = this._calculateClosestDistances(bound, other);\n\n      if (closestDistances.absXDistance < threshold) {\n        this._updateXAlignPoint(rst, bound, other, closestDistances);\n      }\n\n      if (closestDistances.absYDistance < threshold) {\n        this._updateYAlignPoint(rst, bound, other, closestDistances);\n      }\n    }\n\n    // point align prority is higher than distribute align\n    if (rst.dx === 0) {\n      this._alignDistributeHorizontally(rst, bound, threshold, viewport);\n    }\n\n    if (rst.dy === 0) {\n      this._alignDistributeVertically(rst, bound, threshold, viewport);\n    }\n    this._draw();\n    return rst;\n  }\n\n  override render(ctx: CanvasRenderingContext2D) {\n    if (\n      this._intraGraphicAlignLines.length === 0 &&\n      this._distributedAlignLines.length === 0\n    )\n      return;\n    const { viewport } = this._rootService;\n    const strokeWidth = 1 / viewport.zoom;\n    const offset = 5 / viewport.zoom;\n    ctx.strokeStyle = '#1672F3';\n    ctx.lineWidth = strokeWidth;\n    ctx.beginPath();\n\n    this._intraGraphicAlignLines.forEach(line => {\n      let d = '';\n      if (line[0].x === line[1].x) {\n        const x = line[0].x;\n        const minY = Math.min(line[0].y, line[1].y);\n        const maxY = Math.max(line[0].y, line[1].y);\n        d = `M${x},${minY - offset}L${x},${maxY}`;\n      } else {\n        const y = line[0].y;\n        const minX = Math.min(line[0].x, line[1].x);\n        const maxX = Math.max(line[0].x, line[1].x);\n        d = `M${minX - offset},${y}L${maxX + offset},${y}`;\n      }\n      ctx.stroke(new Path2D(d));\n    });\n\n    this._distributedAlignLines.forEach(line => {\n      const bar = 10 / viewport.zoom;\n      let d = '';\n      if (line[0].x === line[1].x) {\n        const x = line[0].x;\n        const minY = Math.min(line[0].y, line[1].y) + offset;\n        const maxY = Math.max(line[0].y, line[1].y) - offset;\n        d = `M${x},${minY}L${x},${maxY}\n        M${x - bar},${minY}L${x + bar},${minY}\n        M${x - bar},${maxY}L${x + bar},${maxY} `;\n      } else {\n        const y = line[0].y;\n        const minX = Math.min(line[0].x, line[1].x) + offset;\n        const maxX = Math.max(line[0].x, line[1].x) - offset;\n        d = `M${minX},${y}L${maxX},${y}\n        M${minX},${y - bar}L${minX},${y + bar}\n        M${maxX},${y - bar}L${maxX},${y + bar}`;\n      }\n      ctx.stroke(new Path2D(d));\n    });\n  }\n\n  setupAlignables(alignables: LumenSuite.EdgelessModel[]): Bound {\n    if (alignables.length === 0) return new Bound();\n\n    const connectors = alignables.filter(isConnectable).reduce((prev, el) => {\n      const connectors = this._rootService.getConnectors(el);\n\n      if (connectors.length > 0) {\n        prev = prev.concat(connectors);\n      }\n\n      return prev;\n    }, [] as ConnectorElementModel[]);\n\n    const { viewport } = this._rootService;\n    const viewportBounds = Bound.from(viewport.viewportBounds);\n    this._surface.renderer.addOverlay(this);\n    const canvasElements = this._rootService.elements;\n    const excludes = [...alignables, ...connectors];\n    this._alignableBounds = [];\n    (\n      [\n        ...this._rootService.blocks,\n        ...canvasElements,\n      ] as LumenSuite.EdgelessModel[]\n    ).forEach(alignable => {\n      const bounds = this._getBoundsWithRotationByAlignable(alignable);\n      if (\n        viewportBounds.isOverlapWithBound(bounds) &&\n        !excludes.includes(alignable)\n      ) {\n        this._alignableBounds.push(bounds);\n      }\n    });\n\n    return alignables.reduce((prev, element) => {\n      const bounds = this._getBoundsWithRotationByAlignable(element);\n      return prev.unite(bounds);\n    }, Bound.deserialize(alignables[0].xywh));\n  }\n}\n"]}