{"version":3,"file":"resize-manager.js","sourceRoot":"","sources":["../../../../../src/root-block/edgeless/components/resize/resize-manager.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,WAAW,EAAE,MAAM,kCAAkC,CAAC;AAC/D,OAAO,EACL,YAAY,GAIb,MAAM,0BAA0B,CAAC;AAClC,OAAO,EAAE,KAAK,EAAE,MAAM,0BAA0B,CAAC;AAIjD,OAAO,EAAE,cAAc,EAAE,MAAM,uBAAuB,CAAC;AACvD,OAAO,EAAE,eAAe,EAAmB,MAAM,qBAAqB,CAAC;AAEvE,MAAM,EAAE,YAAY,EAAE,yBAAyB,EAAE,GAAG,WAAW,CAAC;AAEhE,QAAQ;AACR,MAAM,mBAAmB,GAAG,IAAI,CAAC,EAAE,GAAG,EAAE,CAAC;AAmBzC,MAAM,OAAO,mBAAmB;IAmI9B,IAAI,MAAM;QACR,OAAO,IAAI,CAAC,OAAO,CAAC;IACtB,CAAC;IAED,IAAI,WAAW;QACb,OAAO,IAAI,CAAC,YAAY,CAAC;IAC3B,CAAC;IAED,IAAI,aAAa;QACf,OAAO,IAAI,CAAC,cAAc,CAAC;IAC7B,CAAC;IAED,IAAI,QAAQ;QACV,OAAO,IAAI,CAAC,SAAS,CAAC;IACxB,CAAC;IAED,IAAI,YAAY;QACd,OAAO,IAAI,CAAC,aAAa,CAAC;IAC5B,CAAC;IAED,IAAI,QAAQ;QACV,OAAO,IAAI,CAAC,SAAS,CAAC;IACxB,CAAC;IAED,YACE,WAA6B,EAC7B,YAA+B,EAC/B,YAA+B,EAC/B,SAAyB;QA9JnB,iBAAY,GAAG,CAAC,CAAC;QAEjB,YAAO,GAAG,IAAI,GAAG,EAMtB,CAAC;QAEJ;;WAEG;QACK,iBAAY,GAAG,IAAI,OAAO,EAAE,CAAC;QAE7B,mBAAc,GAAoB,eAAe,CAAC,IAAI,CAAC;QAEvD,cAAS,GAAG,KAAK,CAAC;QAElB,aAAQ,GAGZ;YACF,KAAK,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE;YACrB,GAAG,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE;SACpB,CAAC;QAEM,YAAO,GAAG,KAAK,CAAC;QAUhB,YAAO,GAA6B,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;QAE3D;;WAEG;QACK,kBAAa,GAAG,IAAI,OAAO,EAAE,CAAC;QAE9B,gBAAW,GAAG,KAAK,CAAC;QAEpB,kBAAa,GAAG,KAAK,CAAC;QAEtB,gBAAW,GAAe,MAAM,CAAC;QAEjC,YAAO,GAAG,CAAC,CAAC;QAEZ,cAAS,GAAG,KAAK,CAAC;QAElB,cAAS,GAAG,KAAK,CAAC;QAElB,YAAO,GAAuB,IAAI,CAAC;QAEnC,UAAK,GAAG,CAAC,CAAC;QAElB,kBAAa,GAAG,CACd,CAAe,EACf,SAA0B,EAC1B,YAAY,GAAG,KAAK,EACpB,EAAE;YACF,gDAAgD;YAChD,CAAC,CAAC,eAAe,EAAE,CAAC;YAEpB,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;YACrB,IAAI,CAAC,OAAO,GAAG,CAAC,CAAC,MAAqB,CAAC;YACvC,IAAI,CAAC,cAAc,GAAG,SAAS,CAAC;YAChC,IAAI,CAAC,QAAQ,CAAC,KAAK,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC;YACzC,IAAI,CAAC,QAAQ,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC;YACvC,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;YAC3D,IAAI,CAAC,aAAa,GAAG,YAAY,CAAC;YAElC,IAAI,IAAI,CAAC,SAAS,EAAE,CAAC;gBACnB,MAAM,IAAI,GAAG,IAAI,CAAC,OAAO;qBACtB,OAAO,CAAC,gCAAgC,CAAC;oBAC1C,EAAE,qBAAqB,EAAE,CAAC;gBAC5B,YAAY,CAAC,IAAI,CAAC,CAAC;gBACnB,MAAM,EAAE,IAAI,EAAE,GAAG,EAAE,KAAK,EAAE,MAAM,EAAE,GAAG,IAAI,CAAC;gBAC1C,MAAM,CAAC,GAAG,CAAC,IAAI,GAAG,KAAK,CAAC,GAAG,CAAC,CAAC;gBAC7B,MAAM,CAAC,GAAG,CAAC,GAAG,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC;gBAC7B,wCAAwC;gBACxC,IAAI,CAAC,OAAO,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;YAC1B,CAAC;YAED,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;YACtB,IAAI,CAAC,YAAY,EAAE,CAAC;YAEpB,MAAM,cAAc,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,QAAQ,EAAgB,EAAE,EAAE;gBAC1D,IAAI,IAAI,CAAC,WAAW,KAAK,MAAM;oBAAE,OAAO;gBAExC,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;gBAC1B,IAAI,CAAC,QAAQ,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;gBAE7B,MAAM,YAAY,GAAG,IAAI,CAAC,aAAa,IAAI,IAAI,CAAC,SAAS,CAAC;gBAE1D,IAAI,IAAI,CAAC,SAAS,EAAE,CAAC;oBACnB,IAAI,CAAC,SAAS,CAAC,YAAY,CAAC,CAAC;oBAC7B,OAAO;gBACT,CAAC;gBAED,IAAI,CAAC,SAAS,CAAC,YAAY,CAAC,CAAC;YAC/B,CAAC,CAAC;YAEF,MAAM,YAAY,GAAG,CAAC,CAAe,EAAE,EAAE;gBACvC,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;gBACvB,IAAI,CAAC,UAAU,EAAE,CAAC;gBAElB,MAAM,EAAE,CAAC,EAAE,CAAC,EAAE,KAAK,EAAE,MAAM,EAAE,GAAG,IAAI,CAAC,YAAY,CAAC;gBAClD,IAAI,CAAC,aAAa,GAAG,IAAI,OAAO,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,EAAE,MAAM,CAAC,CAAC;gBAEtD,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;gBACpB,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;gBACvB,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;gBACvB,IAAI,CAAC,QAAQ,GAAG;oBACd,KAAK,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE;oBACrB,GAAG,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE;iBACpB,CAAC;gBAEF,QAAQ,CAAC,mBAAmB,CAAC,aAAa,EAAE,cAAc,CAAC,CAAC;gBAC5D,QAAQ,CAAC,mBAAmB,CAAC,WAAW,EAAE,YAAY,CAAC,CAAC;YAC1D,CAAC,CAAC;YAEF,QAAQ,CAAC,gBAAgB,CAAC,aAAa,EAAE,cAAc,CAAC,CAAC;YACzD,QAAQ,CAAC,gBAAgB,CAAC,WAAW,EAAE,YAAY,CAAC,CAAC;QACvD,CAAC,CAAC;QAgCA,IAAI,CAAC,YAAY,GAAG,WAAW,CAAC;QAChC,IAAI,CAAC,aAAa,GAAG,YAAY,CAAC;QAClC,IAAI,CAAC,aAAa,GAAG,YAAY,CAAC;QAClC,IAAI,CAAC,UAAU,GAAG,SAAS,CAAC;IAC9B,CAAC;IAEO,SAAS,CAAC,UAAmB;QACnC,MAAM,EACJ,YAAY,EACZ,cAAc,EACd,QAAQ,EACR,OAAO,EACP,WAAW,EACX,KAAK,EACL,OAAO,EACP,aAAa,EACb,YAAY,GACb,GAAG,IAAI,CAAC;QACT,UAAU,KAAK,IAAI,CAAC,WAAW,CAAC;QAChC,YAAY,CAAC,OAAO,CAAC,CAAC;QAEtB,MAAM,KAAK,GAAG,WAAW,KAAK,KAAK,CAAC;QACpC,MAAM,QAAQ,GAAG,WAAW,KAAK,QAAQ,CAAC;QAC1C,MAAM,eAAe,GAAG,WAAW,KAAK,eAAe,CAAC;QAExD,MAAM,EACJ,KAAK,EAAE,EAAE,CAAC,EAAE,MAAM,EAAE,CAAC,EAAE,MAAM,EAAE,EAC/B,GAAG,EAAE,EAAE,CAAC,EAAE,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE,GAC1B,GAAG,QAAQ,CAAC;QAEb,MAAM,EAAE,IAAI,EAAE,IAAI,EAAE,GAAG,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,GAAG,aAAa,CAAC;QAC3E,MAAM,QAAQ,GAAG;YACf,CAAC,EAAE,IAAI,GAAG,IAAI;YACd,CAAC,EAAE,IAAI,GAAG,IAAI;YACd,EAAE,EAAE,CAAC,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC;YACrB,EAAE,EAAE,CAAC,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC;SACtB,CAAC;QACF,MAAM,IAAI,GAAG,EAAE,GAAG,QAAQ,EAAE,CAAC;QAC7B,MAAM,KAAK,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;QAC7B,MAAM,IAAI,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;QAC5B,MAAM,SAAS,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;QACjC,MAAM,UAAU,GAAG,IAAI,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QACtC,MAAM,aAAa,GAAG,IAAI,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QAEzC,MAAM,MAAM,GAAG,CAAC,IAAI,GAAG,MAAM,CAAC,GAAG,KAAK,CAAC;QACvC,MAAM,MAAM,GAAG,CAAC,IAAI,GAAG,MAAM,CAAC,GAAG,KAAK,CAAC;QAEvC,MAAM,EAAE,GAAG,IAAI,SAAS,EAAE;aACvB,aAAa,CAAC,QAAQ,CAAC,EAAE,EAAE,QAAQ,CAAC,EAAE,CAAC;aACvC,UAAU,CAAC,OAAO,CAAC;aACnB,aAAa,CAAC,CAAC,QAAQ,CAAC,EAAE,EAAE,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;QAE7C,IAAI,QAAQ,IAAI,KAAK,IAAI,eAAe,EAAE,CAAC;YACzC,QAAQ,cAAc,EAAE,CAAC;gBACvB,KAAK,eAAe,CAAC,OAAO,CAAC,CAAC,CAAC;oBAC7B,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;oBACjB,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;oBACjB,UAAU,CAAC,CAAC,GAAG,IAAI,CAAC;oBACpB,UAAU,CAAC,CAAC,GAAG,IAAI,CAAC;oBACpB,aAAa,CAAC,CAAC,GAAG,IAAI,CAAC;oBACvB,aAAa,CAAC,CAAC,GAAG,IAAI,CAAC;oBACvB,MAAM;gBACR,CAAC;gBACD,KAAK,eAAe,CAAC,QAAQ,CAAC,CAAC,CAAC;oBAC9B,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC;oBAChB,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;oBACjB,UAAU,CAAC,CAAC,GAAG,IAAI,CAAC;oBACpB,UAAU,CAAC,CAAC,GAAG,IAAI,CAAC;oBACpB,aAAa,CAAC,CAAC,GAAG,IAAI,CAAC;oBACvB,aAAa,CAAC,CAAC,GAAG,IAAI,CAAC;oBACvB,MAAM;gBACR,CAAC;gBACD,KAAK,eAAe,CAAC,WAAW,CAAC,CAAC,CAAC;oBACjC,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC;oBAChB,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC;oBAChB,UAAU,CAAC,CAAC,GAAG,IAAI,CAAC;oBACpB,UAAU,CAAC,CAAC,GAAG,IAAI,CAAC;oBACpB,aAAa,CAAC,CAAC,GAAG,IAAI,CAAC;oBACvB,aAAa,CAAC,CAAC,GAAG,IAAI,CAAC;oBACvB,MAAM;gBACR,CAAC;gBACD,KAAK,eAAe,CAAC,UAAU,CAAC,CAAC,CAAC;oBAChC,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;oBACjB,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC;oBAChB,UAAU,CAAC,CAAC,GAAG,IAAI,CAAC;oBACpB,UAAU,CAAC,CAAC,GAAG,IAAI,CAAC;oBACpB,aAAa,CAAC,CAAC,GAAG,IAAI,CAAC;oBACvB,aAAa,CAAC,CAAC,GAAG,IAAI,CAAC;oBACvB,MAAM;gBACR,CAAC;gBACD,KAAK,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC;oBAC1B,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;oBACjB,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC;oBAChB,UAAU,CAAC,CAAC,GAAG,IAAI,CAAC;oBACpB,UAAU,CAAC,CAAC,GAAG,QAAQ,CAAC,EAAE,CAAC;oBAC3B,aAAa,CAAC,CAAC,GAAG,IAAI,CAAC;oBACvB,aAAa,CAAC,CAAC,GAAG,QAAQ,CAAC,EAAE,CAAC;oBAC9B,MAAM;gBACR,CAAC;gBACD,KAAK,eAAe,CAAC,KAAK,CAAC,CAAC,CAAC;oBAC3B,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC;oBAChB,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC;oBAChB,UAAU,CAAC,CAAC,GAAG,IAAI,CAAC;oBACpB,UAAU,CAAC,CAAC,GAAG,QAAQ,CAAC,EAAE,CAAC;oBAC3B,aAAa,CAAC,CAAC,GAAG,IAAI,CAAC;oBACvB,aAAa,CAAC,CAAC,GAAG,QAAQ,CAAC,EAAE,CAAC;oBAC9B,MAAM;gBACR,CAAC;gBACD,KAAK,eAAe,CAAC,GAAG,CAAC,CAAC,CAAC;oBACzB,MAAM,EAAE,GAAG,CAAC,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC;oBAC7B,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC;oBAChB,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;oBACjB,UAAU,CAAC,CAAC,GAAG,EAAE,CAAC;oBAClB,UAAU,CAAC,CAAC,GAAG,IAAI,CAAC;oBACpB,aAAa,CAAC,CAAC,GAAG,EAAE,CAAC;oBACrB,aAAa,CAAC,CAAC,GAAG,IAAI,CAAC;oBACvB,MAAM;gBACR,CAAC;gBACD,KAAK,eAAe,CAAC,MAAM,CAAC,CAAC,CAAC;oBAC5B,MAAM,EAAE,GAAG,CAAC,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC;oBAC7B,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC;oBAChB,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC;oBAChB,UAAU,CAAC,CAAC,GAAG,EAAE,CAAC;oBAClB,UAAU,CAAC,CAAC,GAAG,IAAI,CAAC;oBACpB,aAAa,CAAC,CAAC,GAAG,EAAE,CAAC;oBACrB,aAAa,CAAC,CAAC,GAAG,IAAI,CAAC;oBACvB,MAAM;gBACR,CAAC;YACH,CAAC;YAED,mCAAmC;YACnC,UAAU,KAAK,IAAI,CAAC,OAAO,CAAC,IAAI,GAAG,CAAC,CAAC;YAErC,MAAM,EAAE,GAAG,UAAU,CAAC,eAAe,CAAC,EAAE,CAAC,CAAC;YAC1C,IAAI,EAAE,GAAG,aAAa,CAAC,eAAe,CAAC,EAAE,CAAC,CAAC;YAE3C,EAAE,CAAC,CAAC,IAAI,MAAM,CAAC;YACf,EAAE,CAAC,CAAC,IAAI,MAAM,CAAC;YAEf,IACE,cAAc,KAAK,eAAe,CAAC,IAAI;gBACvC,cAAc,KAAK,eAAe,CAAC,KAAK;gBACxC,cAAc,KAAK,eAAe,CAAC,GAAG;gBACtC,cAAc,KAAK,eAAe,CAAC,MAAM,EACzC,CAAC;gBACD,MAAM,GAAG,GAAG,aAAa,CAAC,eAAe,CAAC,EAAE,CAAC,CAAC;gBAC9C,MAAM,SAAS,GAAS,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;gBAC/B,MAAM,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,GAAG,YAAY,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,SAAS,EAAE,CAAC,OAAO,CAAC,CAAC;gBACvE,MAAM,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,GAAG,YAAY,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,SAAS,EAAE,CAAC,OAAO,CAAC,CAAC;gBACrE,MAAM,KAAK,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;gBAC7B,IACE,cAAc,KAAK,eAAe,CAAC,IAAI;oBACvC,cAAc,KAAK,eAAe,CAAC,KAAK,EACxC,CAAC;oBACD,KAAK,CAAC,CAAC,GAAG,EAAE,CAAC;oBACb,KAAK,CAAC,CAAC,GAAG,EAAE,CAAC;gBACf,CAAC;qBAAM,CAAC;oBACN,KAAK,CAAC,CAAC,GAAG,EAAE,CAAC;oBACb,KAAK,CAAC,CAAC,GAAG,EAAE,CAAC;gBACf,CAAC;gBAED,MAAM,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,GAAG,YAAY,CAC7B,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC,EACpB,SAAS,EACT,OAAO,CACR,CAAC;gBAEF,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC;gBACV,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC;YACZ,CAAC;YAED,MAAM,EAAE,GAAG,CAAC,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;YAC7B,MAAM,EAAE,GAAG,CAAC,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;YAE7B,MAAM,EAAE,GAAG,IAAI,SAAS,EAAE;iBACvB,aAAa,CAAC,EAAE,EAAE,EAAE,CAAC;iBACrB,UAAU,CAAC,CAAC,OAAO,CAAC;iBACpB,aAAa,CAAC,CAAC,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC;YAE3B,MAAM,CAAC,GAAG,EAAE,CAAC,eAAe,CAAC,EAAE,CAAC,CAAC;YACjC,MAAM,CAAC,GAAG,EAAE,CAAC,eAAe,CAAC,EAAE,CAAC,CAAC;YAEjC,QAAQ,cAAc,EAAE,CAAC;gBACvB,KAAK,eAAe,CAAC,OAAO,CAAC,CAAC,CAAC;oBAC7B,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;oBACnB,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;oBACnB,MAAM;gBACR,CAAC;gBACD,KAAK,eAAe,CAAC,QAAQ,CAAC,CAAC,CAAC;oBAC9B,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;oBACnB,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;oBACnB,MAAM;gBACR,CAAC;gBACD,KAAK,eAAe,CAAC,WAAW,CAAC,CAAC,CAAC;oBACjC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;oBACnB,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;oBACnB,MAAM;gBACR,CAAC;gBACD,KAAK,eAAe,CAAC,UAAU,CAAC,CAAC,CAAC;oBAChC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;oBACnB,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;oBACnB,MAAM;gBACR,CAAC;gBACD,KAAK,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC;oBAC1B,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;oBACnB,MAAM;gBACR,CAAC;gBACD,KAAK,eAAe,CAAC,KAAK,CAAC,CAAC,CAAC;oBAC3B,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;oBACnB,MAAM;gBACR,CAAC;gBACD,KAAK,eAAe,CAAC,GAAG,CAAC,CAAC,CAAC;oBACzB,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;oBACnB,MAAM;gBACR,CAAC;gBACD,KAAK,eAAe,CAAC,MAAM,CAAC,CAAC,CAAC;oBAC5B,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;oBACnB,MAAM;gBACR,CAAC;YACH,CAAC;YAED,IAAI,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;YAC1B,IAAI,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;YAC1B,KAAK,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,GAAG,QAAQ,CAAC,CAAC,CAAC;YAC9B,KAAK,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,GAAG,QAAQ,CAAC,CAAC,CAAC;YAC9B,IAAI,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YAC9B,IAAI,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YAE9B,MAAM,gBAAgB,GACpB,cAAc,KAAK,eAAe,CAAC,OAAO;gBAC1C,cAAc,KAAK,eAAe,CAAC,QAAQ;gBAC3C,cAAc,KAAK,eAAe,CAAC,WAAW;gBAC9C,cAAc,KAAK,eAAe,CAAC,UAAU,CAAC;YAEhD,oBAAoB;YACpB,IAAI,UAAU,IAAI,gBAAgB,EAAE,CAAC;gBACnC,MAAM,cAAc,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;gBACjD,IAAI,YAAY,GAAG,cAAc,EAAE,CAAC;oBAClC,KAAK,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC;oBACrC,IAAI,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,GAAG,QAAQ,CAAC,CAAC,CAAC;gBAChC,CAAC;qBAAM,CAAC;oBACN,KAAK,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC;oBACrC,IAAI,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,GAAG,QAAQ,CAAC,CAAC,CAAC;gBAChC,CAAC;gBACD,aAAa,CAAC,CAAC,GAAG,UAAU,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,GAAG,SAAS,CAAC,CAAC,CAAC;gBACtD,aAAa,CAAC,CAAC,GAAG,UAAU,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,GAAG,SAAS,CAAC,CAAC,CAAC;gBAEtD,EAAE,GAAG,aAAa,CAAC,eAAe,CAAC,EAAE,CAAC,CAAC;gBAEvC,IAAI,CAAC,EAAE,GAAG,CAAC,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;gBAC5B,IAAI,CAAC,EAAE,GAAG,CAAC,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;YAC9B,CAAC;QACH,CAAC;aAAM,CAAC;YACN,eAAe;YACf,QAAQ,cAAc,EAAE,CAAC;gBACvB,KAAK,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC;oBAC1B,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;oBACjB,UAAU,CAAC,CAAC,GAAG,IAAI,CAAC;oBACpB,aAAa,CAAC,CAAC,GAAG,IAAI,GAAG,MAAM,CAAC;oBAChC,IAAI,CAAC,CAAC,GAAG,UAAU,CAAC,CAAC,GAAG,aAAa,CAAC,CAAC,CAAC;oBACxC,MAAM;gBACR,CAAC;gBACD,KAAK,eAAe,CAAC,KAAK,CAAC,CAAC,CAAC;oBAC3B,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC;oBAChB,UAAU,CAAC,CAAC,GAAG,IAAI,CAAC;oBACpB,aAAa,CAAC,CAAC,GAAG,IAAI,GAAG,MAAM,CAAC;oBAChC,IAAI,CAAC,CAAC,GAAG,aAAa,CAAC,CAAC,GAAG,UAAU,CAAC,CAAC,CAAC;oBACxC,MAAM;gBACR,CAAC;YACH,CAAC;YAED,KAAK,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,GAAG,QAAQ,CAAC,CAAC,CAAC;YAC9B,IAAI,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YAE9B,IAAI,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,cAAc,EAAE,CAAC;gBACtC,IAAI,CAAC,CAAC,GAAG,cAAc,GAAG,IAAI,CAAC,CAAC,CAAC;gBACjC,KAAK,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,GAAG,QAAQ,CAAC,CAAC,CAAC;gBAC9B,aAAa,CAAC,CAAC,GAAG,UAAU,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,GAAG,SAAS,CAAC,CAAC,CAAC;YACxD,CAAC;YAED,IAAI,CAAC,EAAE,GAAG,CAAC,aAAa,CAAC,CAAC,GAAG,UAAU,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;QACjD,CAAC;QAED,MAAM,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QAC/B,MAAM,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QAChC,MAAM,CAAC,GAAG,IAAI,CAAC,EAAE,GAAG,KAAK,GAAG,CAAC,CAAC;QAC9B,MAAM,CAAC,GAAG,IAAI,CAAC,EAAE,GAAG,MAAM,GAAG,CAAC,CAAC;QAE/B,YAAY,CAAC,CAAC,GAAG,CAAC,CAAC;QACnB,YAAY,CAAC,CAAC,GAAG,CAAC,CAAC;QACnB,YAAY,CAAC,KAAK,GAAG,KAAK,CAAC;QAC3B,YAAY,CAAC,MAAM,GAAG,MAAM,CAAC;QAE7B,MAAM,SAAS,GAAG,IAAI,GAAG,EAOtB,CAAC;QAEJ,IAAI,OAAsD,CAAC;QAE3D,IAAI,QAAQ,IAAI,KAAK,IAAI,eAAe,EAAE,CAAC;YACzC,IAAI,IAAI,CAAC,OAAO,CAAC,IAAI,KAAK,CAAC,EAAE,CAAC;gBAC5B,OAAO,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE;oBAClB,SAAS,CAAC,GAAG,CAAC,EAAE,EAAE;wBAChB,KAAK,EAAE,IAAI,KAAK,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,EAAE,MAAM,CAAC;qBACtC,CAAC,CAAC;gBACL,CAAC,CAAC;YACJ,CAAC;iBAAM,CAAC;gBACN,MAAM,EAAE,GAAG,UAAU,CAAC,eAAe,CAAC,EAAE,CAAC,CAAC;gBAC1C,MAAM,EAAE,GAAG,IAAI,SAAS,EAAE;qBACvB,aAAa,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;qBACzB,UAAU,CAAC,OAAO,CAAC;qBACnB,aAAa,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;qBAC3B,SAAS,CAAC,KAAK,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;qBAC7C,aAAa,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;qBACzB,UAAU,CAAC,CAAC,OAAO,CAAC;qBACpB,aAAa,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;gBAE/B,uBAAuB;gBACvB,OAAO,GAAG,CAAC,EAAE,KAAK,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE;oBAChD,MAAM,EAAE,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;oBACrB,MAAM,EAAE,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;oBACrB,MAAM,MAAM,GAAG,IAAI,QAAQ,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,eAAe,CAAC,EAAE,CAAC,CAAC;oBACxD,MAAM,QAAQ,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;oBACvC,MAAM,SAAS,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;oBAExC,SAAS,CAAC,GAAG,CAAC,EAAE,EAAE;wBAChB,KAAK,EAAE,IAAI,KAAK,CACd,MAAM,CAAC,CAAC,GAAG,QAAQ,GAAG,CAAC,EACvB,MAAM,CAAC,CAAC,GAAG,SAAS,GAAG,CAAC,EACxB,QAAQ,EACR,SAAS,CACV;wBACD,MAAM,EAAE,EAAE;wBACV,IAAI;qBACL,CAAC,CAAC;gBACL,CAAC,CAAC;YACJ,CAAC;QACH,CAAC;aAAM,CAAC;YACN,wBAAwB;YACxB,MAAM,EAAE,GAAG,IAAI,SAAS,EAAE,CAAC,SAAS,CAClC,KAAK,CAAC,CAAC,EACP,KAAK,CAAC,CAAC,EACP,CAAC,EACD,UAAU,CAAC,CAAC,EACZ,UAAU,CAAC,CAAC,EACZ,CAAC,CACF,CAAC;YACF,OAAO,GAAG,CAAC,EAAE,KAAK,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,MAAM,GAAG,CAAC,EAAE,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE;gBAC5D,MAAM,EAAE,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;gBACrB,MAAM,EAAE,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;gBAErB,MAAM,MAAM,GAAG,IAAI,QAAQ,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,eAAe,CAAC,EAAE,CAAC,CAAC;gBAExD,IAAI,QAAgB,CAAC;gBACrB,IAAI,SAAiB,CAAC;gBAEtB,kCAAkC;gBAClC,IAAI,MAAM,EAAE,CAAC;oBACX,MAAM,EAAE,KAAK,EAAE,GAAG,yBAAyB,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,MAAM,EAAE,CAAC,CAAC;oBACpE,MAAM,GAAG,GAAG,KAAK,GAAG,CAAC,CAAC;oBAEtB,MAAM,CAAC,CAAC,GAAG,EAAE,CAAC;oBAEd,IAAI,YAAY,CAAC,KAAK,IAAI,KAAK,EAAE,CAAC;wBAChC,QAAQ,GAAG,CAAC,GAAG,CAAC,YAAY,CAAC,KAAK,GAAG,KAAK,CAAC,CAAC;wBAC5C,SAAS,GAAG,QAAQ,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;wBAC/B,MAAM,CAAC,CAAC,GAAG,YAAY,CAAC,IAAI,GAAG,YAAY,CAAC,KAAK,GAAG,CAAC,CAAC;oBACxD,CAAC;yBAAM,CAAC;wBACN,MAAM,CAAC,GAAG,CAAC,EAAE,GAAG,GAAG,GAAG,aAAa,CAAC,IAAI,CAAC,GAAG,aAAa,CAAC,KAAK,CAAC;wBAChE,MAAM,EAAE,GAAG,YAAY,CAAC,IAAI,GAAG,CAAC,GAAG,YAAY,CAAC,KAAK,GAAG,GAAG,CAAC;wBAC5D,MAAM,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CACjB,YAAY,CAAC,IAAI,GAAG,GAAG,EACvB,IAAI,CAAC,GAAG,CAAC,EAAE,EAAE,YAAY,CAAC,IAAI,GAAG,YAAY,CAAC,KAAK,GAAG,GAAG,CAAC,CAC3D,CAAC;wBACF,QAAQ,GAAG,CAAC,CAAC;wBACb,SAAS,GAAG,CAAC,CAAC;oBAChB,CAAC;gBACH,CAAC;qBAAM,CAAC;oBACN,QAAQ,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;oBACjC,SAAS,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;gBACpC,CAAC;gBAED,SAAS,CAAC,GAAG,CAAC,EAAE,EAAE;oBAChB,KAAK,EAAE,IAAI,KAAK,CACd,MAAM,CAAC,CAAC,GAAG,QAAQ,GAAG,CAAC,EACvB,MAAM,CAAC,CAAC,GAAG,SAAS,GAAG,CAAC,EACxB,QAAQ,EACR,SAAS,CACV;oBACD,MAAM,EAAE,EAAE;oBACV,IAAI;iBACL,CAAC,CAAC;YACL,CAAC,CAAC;QACJ,CAAC;QAED,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;QAC9B,IAAI,CAAC,aAAa,CAAC,SAAS,EAAE,IAAI,CAAC,cAAc,CAAC,CAAC;IACrD,CAAC;IAEO,SAAS,CAAC,QAAQ,GAAG,KAAK;QAChC,MAAM,EACJ,aAAa,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,GAAG,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,EACnE,QAAQ,EAAE,EACR,KAAK,EAAE,EAAE,CAAC,EAAE,MAAM,EAAE,CAAC,EAAE,MAAM,EAAE,EAC/B,GAAG,EAAE,EAAE,CAAC,EAAE,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE,GAC1B,EACD,OAAO,EAAE,EAAE,CAAC,EAAE,OAAO,EAAE,CAAC,EAAE,OAAO,EAAE,EACnC,OAAO,GACR,GAAG,IAAI,CAAC;QAET,MAAM,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,OAAO,EAAE,MAAM,GAAG,OAAO,CAAC,CAAC;QAChE,MAAM,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,GAAG,OAAO,EAAE,IAAI,GAAG,OAAO,CAAC,CAAC;QAC1D,IAAI,QAAQ,GAAG,MAAM,GAAG,QAAQ,CAAC;QAEjC,aAAa;QACb,qCAAqC;QACrC,IAAI,QAAQ,EAAE,CAAC;YACb,MAAM,OAAO,GAAG,CAAC,OAAO,GAAG,IAAI,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC;YAC1C,IAAI,KAAK,GAAG,OAAO,GAAG,QAAQ,CAAC;YAC/B,KAAK,IAAI,mBAAmB,GAAG,CAAC,CAAC;YACjC,KAAK,IAAI,KAAK,GAAG,mBAAmB,CAAC;YACrC,QAAQ,GAAG,KAAK,GAAG,OAAO,CAAC;QAC7B,CAAC;QAED,MAAM,KAAK,GAAG,CAAC,QAAQ,GAAG,GAAG,CAAC,GAAG,IAAI,CAAC,EAAE,CAAC;QAEzC,IAAI,CAAC,GAAG,IAAI,CAAC;QACb,IAAI,CAAC,GAAG,IAAI,CAAC;QACb,IAAI,QAAQ,EAAE,CAAC;YACb,MAAM,KAAK,GAAG,IAAI,QAAQ,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC,eAAe,CACxD,IAAI,SAAS,EAAE;iBACZ,aAAa,CAAC,OAAO,EAAE,OAAO,CAAC;iBAC/B,UAAU,CAAC,KAAK,CAAC;iBACjB,aAAa,CAAC,CAAC,OAAO,EAAE,CAAC,OAAO,CAAC,CACrC,CAAC;YACF,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC;YACZ,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC;QACd,CAAC;QAED,IAAI,CAAC,aAAa;QAChB,8BAA8B;QAC9B,EAAE,CAAC,EAAE,CAAC,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,EAAE,EAC9C,KAAK,CACN,CAAC;QAEF,IAAI,CAAC,QAAQ,CAAC,KAAK,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;QAC/B,IAAI,CAAC,OAAO,IAAI,KAAK,CAAC;IACxB,CAAC;IAED,eAAe,CAAC,OAAgB;QAC9B,IAAI,CAAC,IAAI,CAAC,OAAO;YAAE,OAAO;QAC1B,IAAI,IAAI,CAAC,OAAO;YAAE,OAAO;QAEzB,IAAI,IAAI,CAAC,SAAS,KAAK,OAAO;YAAE,OAAO;QACvC,IAAI,CAAC,SAAS,GAAG,OAAO,CAAC;QAEzB,MAAM,YAAY,GAAG,IAAI,CAAC,aAAa,IAAI,IAAI,CAAC,SAAS,CAAC;QAE1D,IAAI,IAAI,CAAC,SAAS,EAAE,CAAC;YACnB,IAAI,CAAC,SAAS,CAAC,YAAY,CAAC,CAAC;YAC7B,OAAO;QACT,CAAC;QAED,IAAI,CAAC,SAAS,CAAC,YAAY,CAAC,CAAC;IAC/B,CAAC;IAED,YAAY,CAAC,MAAoC;QAC/C,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;IACxB,CAAC;IAED,kBAAkB,CAAC,KAA+B;QAChD,IAAI,CAAC,YAAY,CAAC,CAAC,IAAI,KAAK,CAAC,CAAC,CAAC;QAC/B,IAAI,CAAC,YAAY,CAAC,CAAC,IAAI,KAAK,CAAC,CAAC,CAAC;QAC/B,IAAI,CAAC,aAAa,CAAC,CAAC,GAAG,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC;QAC3C,IAAI,CAAC,aAAa,CAAC,CAAC,GAAG,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC;QAE3C,OAAO,IAAI,CAAC,aAAa,CAAC;IAC5B,CAAC;IAED,WAAW,CACT,UAAsB,EACtB,MAAc,EACd,IAAY,EACZ,QAAmC,EACnC,YAAsB,EACtB,UAAU,GAAG,KAAK;QAElB,IAAI,CAAC,WAAW,GAAG,UAAU,CAAC;QAC9B,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;QACtB,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;QAClB,IAAI,CAAC,WAAW,GAAG,UAAU,CAAC;QAE9B,IAAI,QAAQ,EAAE,CAAC;YACb,IAAI,CAAC,YAAY,CAAC,CAAC,GAAG,QAAQ,CAAC,CAAC,CAAC;YACjC,IAAI,CAAC,YAAY,CAAC,CAAC,GAAG,QAAQ,CAAC,CAAC,CAAC;YACjC,IAAI,CAAC,aAAa,CAAC,CAAC,GAAG,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC;YAC3C,IAAI,CAAC,aAAa,CAAC,CAAC,GAAG,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC;QAC7C,CAAC;QAED,IAAI,YAAY,EAAE,CAAC;YACjB,IAAI,CAAC,aAAa,GAAG,YAAY,CAAC;YAClC,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC,KAAK,GAAG,YAAY,CAAC,MAAM,CAAC;YAC7D,IAAI,CAAC,YAAY,GAAG,OAAO,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC;QACrD,CAAC;IACH,CAAC;CACF","sourcesContent":["import { CommonUtils } from '@blocksuite/affine-block-surface';\nimport {\n  assertExists,\n  type IPoint,\n  type IVec,\n  type PointLocation,\n} from '@blocksuite/global/utils';\nimport { Bound } from '@blocksuite/global/utils';\n\nimport type { SelectableProps } from '../../utils/query.js';\n\nimport { NOTE_MIN_WIDTH } from '../../utils/consts.js';\nimport { HandleDirection, type ResizeMode } from './resize-handles.js';\n\nconst { rotatePoints, getQuadBoundsWithRotation } = CommonUtils;\n\n// 15deg\nconst SHIFT_LOCKING_ANGLE = Math.PI / 12;\n\ntype DragStartHandler = () => void;\ntype DragEndHandler = () => void;\n\ntype ResizeMoveHandler = (\n  bounds: Map<\n    string,\n    {\n      bound: Bound;\n      path?: PointLocation[];\n      matrix?: DOMMatrix;\n    }\n  >,\n  direction: HandleDirection\n) => void;\n\ntype RotateMoveHandler = (point: IPoint, rotate: number) => void;\n\nexport class HandleResizeManager {\n  private _aspectRatio = 1;\n\n  private _bounds = new Map<\n    string,\n    {\n      bound: Bound;\n      rotate: number;\n    }\n  >();\n\n  /**\n   * Current rect of selected elements, it may change during resizing or moving\n   */\n  private _currentRect = new DOMRect();\n\n  private _dragDirection: HandleDirection = HandleDirection.Left;\n\n  private _dragging = false;\n\n  private _dragPos: {\n    start: { x: number; y: number };\n    end: { x: number; y: number };\n  } = {\n    start: { x: 0, y: 0 },\n    end: { x: 0, y: 0 },\n  };\n\n  private _locked = false;\n\n  private _onDragEnd: DragEndHandler;\n\n  private _onDragStart: DragStartHandler;\n\n  private _onResizeMove: ResizeMoveHandler;\n\n  private _onRotateMove: RotateMoveHandler;\n\n  private _origin: { x: number; y: number } = { x: 0, y: 0 };\n\n  /**\n   * Record inital rect of selected elements\n   */\n  private _originalRect = new DOMRect();\n\n  private _proportion = false;\n\n  private _proportional = false;\n\n  private _resizeMode: ResizeMode = 'none';\n\n  private _rotate = 0;\n\n  private _rotation = false;\n\n  private _shiftKey = false;\n\n  private _target: HTMLElement | null = null;\n\n  private _zoom = 1;\n\n  onPointerDown = (\n    e: PointerEvent,\n    direction: HandleDirection,\n    proportional = false\n  ) => {\n    // Prevent selection action from being triggered\n    e.stopPropagation();\n\n    this._locked = false;\n    this._target = e.target as HTMLElement;\n    this._dragDirection = direction;\n    this._dragPos.start = { x: e.x, y: e.y };\n    this._dragPos.end = { x: e.x, y: e.y };\n    this._rotation = this._target.classList.contains('rotate');\n    this._proportional = proportional;\n\n    if (this._rotation) {\n      const rect = this._target\n        .closest('.affine-edgeless-selected-rect')\n        ?.getBoundingClientRect();\n      assertExists(rect);\n      const { left, top, right, bottom } = rect;\n      const x = (left + right) / 2;\n      const y = (top + bottom) / 2;\n      // center of `selected-rect` in viewport\n      this._origin = { x, y };\n    }\n\n    this._dragging = true;\n    this._onDragStart();\n\n    const _onPointerMove = ({ x, y, shiftKey }: PointerEvent) => {\n      if (this._resizeMode === 'none') return;\n\n      this._shiftKey = shiftKey;\n      this._dragPos.end = { x, y };\n\n      const proportional = this._proportional || this._shiftKey;\n\n      if (this._rotation) {\n        this._onRotate(proportional);\n        return;\n      }\n\n      this._onResize(proportional);\n    };\n\n    const _onPointerUp = (_: PointerEvent) => {\n      this._dragging = false;\n      this._onDragEnd();\n\n      const { x, y, width, height } = this._currentRect;\n      this._originalRect = new DOMRect(x, y, width, height);\n\n      this._locked = true;\n      this._shiftKey = false;\n      this._rotation = false;\n      this._dragPos = {\n        start: { x: 0, y: 0 },\n        end: { x: 0, y: 0 },\n      };\n\n      document.removeEventListener('pointermove', _onPointerMove);\n      document.removeEventListener('pointerup', _onPointerUp);\n    };\n\n    document.addEventListener('pointermove', _onPointerMove);\n    document.addEventListener('pointerup', _onPointerUp);\n  };\n\n  get bounds() {\n    return this._bounds;\n  }\n\n  get currentRect() {\n    return this._currentRect;\n  }\n\n  get dragDirection() {\n    return this._dragDirection;\n  }\n\n  get dragging() {\n    return this._dragging;\n  }\n\n  get originalRect() {\n    return this._originalRect;\n  }\n\n  get rotation() {\n    return this._rotation;\n  }\n\n  constructor(\n    onDragStart: DragStartHandler,\n    onResizeMove: ResizeMoveHandler,\n    onRotateMove: RotateMoveHandler,\n    onDragEnd: DragEndHandler\n  ) {\n    this._onDragStart = onDragStart;\n    this._onResizeMove = onResizeMove;\n    this._onRotateMove = onRotateMove;\n    this._onDragEnd = onDragEnd;\n  }\n\n  private _onResize(proportion: boolean) {\n    const {\n      _aspectRatio,\n      _dragDirection,\n      _dragPos,\n      _rotate,\n      _resizeMode,\n      _zoom,\n      _target,\n      _originalRect,\n      _currentRect,\n    } = this;\n    proportion ||= this._proportion;\n    assertExists(_target);\n\n    const isAll = _resizeMode === 'all';\n    const isCorner = _resizeMode === 'corner';\n    const isEdgeAndCorner = _resizeMode === 'edgeAndCorner';\n\n    const {\n      start: { x: startX, y: startY },\n      end: { x: endX, y: endY },\n    } = _dragPos;\n\n    const { left: minX, top: minY, right: maxX, bottom: maxY } = _originalRect;\n    const original = {\n      w: maxX - minX,\n      h: maxY - minY,\n      cx: (minX + maxX) / 2,\n      cy: (minY + maxY) / 2,\n    };\n    const rect = { ...original };\n    const scale = { x: 1, y: 1 };\n    const flip = { x: 1, y: 1 };\n    const direction = { x: 1, y: 1 };\n    const fixedPoint = new DOMPoint(0, 0);\n    const draggingPoint = new DOMPoint(0, 0);\n\n    const deltaX = (endX - startX) / _zoom;\n    const deltaY = (endY - startY) / _zoom;\n\n    const m0 = new DOMMatrix()\n      .translateSelf(original.cx, original.cy)\n      .rotateSelf(_rotate)\n      .translateSelf(-original.cx, -original.cy);\n\n    if (isCorner || isAll || isEdgeAndCorner) {\n      switch (_dragDirection) {\n        case HandleDirection.TopLeft: {\n          direction.x = -1;\n          direction.y = -1;\n          fixedPoint.x = maxX;\n          fixedPoint.y = maxY;\n          draggingPoint.x = minX;\n          draggingPoint.y = minY;\n          break;\n        }\n        case HandleDirection.TopRight: {\n          direction.x = 1;\n          direction.y = -1;\n          fixedPoint.x = minX;\n          fixedPoint.y = maxY;\n          draggingPoint.x = maxX;\n          draggingPoint.y = minY;\n          break;\n        }\n        case HandleDirection.BottomRight: {\n          direction.x = 1;\n          direction.y = 1;\n          fixedPoint.x = minX;\n          fixedPoint.y = minY;\n          draggingPoint.x = maxX;\n          draggingPoint.y = maxY;\n          break;\n        }\n        case HandleDirection.BottomLeft: {\n          direction.x = -1;\n          direction.y = 1;\n          fixedPoint.x = maxX;\n          fixedPoint.y = minY;\n          draggingPoint.x = minX;\n          draggingPoint.y = maxY;\n          break;\n        }\n        case HandleDirection.Left: {\n          direction.x = -1;\n          direction.y = 1;\n          fixedPoint.x = maxX;\n          fixedPoint.y = original.cy;\n          draggingPoint.x = minX;\n          draggingPoint.y = original.cy;\n          break;\n        }\n        case HandleDirection.Right: {\n          direction.x = 1;\n          direction.y = 1;\n          fixedPoint.x = minX;\n          fixedPoint.y = original.cy;\n          draggingPoint.x = maxX;\n          draggingPoint.y = original.cy;\n          break;\n        }\n        case HandleDirection.Top: {\n          const cx = (minX + maxX) / 2;\n          direction.x = 1;\n          direction.y = -1;\n          fixedPoint.x = cx;\n          fixedPoint.y = maxY;\n          draggingPoint.x = cx;\n          draggingPoint.y = minY;\n          break;\n        }\n        case HandleDirection.Bottom: {\n          const cx = (minX + maxX) / 2;\n          direction.x = 1;\n          direction.y = 1;\n          fixedPoint.x = cx;\n          fixedPoint.y = minY;\n          draggingPoint.x = cx;\n          draggingPoint.y = maxY;\n          break;\n        }\n      }\n\n      // force adjustment by aspect ratio\n      proportion ||= this._bounds.size > 1;\n\n      const fp = fixedPoint.matrixTransform(m0);\n      let dp = draggingPoint.matrixTransform(m0);\n\n      dp.x += deltaX;\n      dp.y += deltaY;\n\n      if (\n        _dragDirection === HandleDirection.Left ||\n        _dragDirection === HandleDirection.Right ||\n        _dragDirection === HandleDirection.Top ||\n        _dragDirection === HandleDirection.Bottom\n      ) {\n        const dpo = draggingPoint.matrixTransform(m0);\n        const coorPoint: IVec = [0, 0];\n        const [[x1, y1]] = rotatePoints([[dpo.x, dpo.y]], coorPoint, -_rotate);\n        const [[x2, y2]] = rotatePoints([[dp.x, dp.y]], coorPoint, -_rotate);\n        const point = { x: 0, y: 0 };\n        if (\n          _dragDirection === HandleDirection.Left ||\n          _dragDirection === HandleDirection.Right\n        ) {\n          point.x = x2;\n          point.y = y1;\n        } else {\n          point.x = x1;\n          point.y = y2;\n        }\n\n        const [[x3, y3]] = rotatePoints(\n          [[point.x, point.y]],\n          coorPoint,\n          _rotate\n        );\n\n        dp.x = x3;\n        dp.y = y3;\n      }\n\n      const cx = (fp.x + dp.x) / 2;\n      const cy = (fp.y + dp.y) / 2;\n\n      const m1 = new DOMMatrix()\n        .translateSelf(cx, cy)\n        .rotateSelf(-_rotate)\n        .translateSelf(-cx, -cy);\n\n      const f = fp.matrixTransform(m1);\n      const d = dp.matrixTransform(m1);\n\n      switch (_dragDirection) {\n        case HandleDirection.TopLeft: {\n          rect.w = f.x - d.x;\n          rect.h = f.y - d.y;\n          break;\n        }\n        case HandleDirection.TopRight: {\n          rect.w = d.x - f.x;\n          rect.h = f.y - d.y;\n          break;\n        }\n        case HandleDirection.BottomRight: {\n          rect.w = d.x - f.x;\n          rect.h = d.y - f.y;\n          break;\n        }\n        case HandleDirection.BottomLeft: {\n          rect.w = f.x - d.x;\n          rect.h = d.y - f.y;\n          break;\n        }\n        case HandleDirection.Left: {\n          rect.w = f.x - d.x;\n          break;\n        }\n        case HandleDirection.Right: {\n          rect.w = d.x - f.x;\n          break;\n        }\n        case HandleDirection.Top: {\n          rect.h = f.y - d.y;\n          break;\n        }\n        case HandleDirection.Bottom: {\n          rect.h = d.y - f.y;\n          break;\n        }\n      }\n\n      rect.cx = (d.x + f.x) / 2;\n      rect.cy = (d.y + f.y) / 2;\n      scale.x = rect.w / original.w;\n      scale.y = rect.h / original.h;\n      flip.x = scale.x < 0 ? -1 : 1;\n      flip.y = scale.y < 0 ? -1 : 1;\n\n      const isDraggingCorner =\n        _dragDirection === HandleDirection.TopLeft ||\n        _dragDirection === HandleDirection.TopRight ||\n        _dragDirection === HandleDirection.BottomRight ||\n        _dragDirection === HandleDirection.BottomLeft;\n\n      // lock aspect ratio\n      if (proportion && isDraggingCorner) {\n        const newAspectRatio = Math.abs(rect.w / rect.h);\n        if (_aspectRatio < newAspectRatio) {\n          scale.y = Math.abs(scale.x) * flip.y;\n          rect.h = scale.y * original.h;\n        } else {\n          scale.x = Math.abs(scale.y) * flip.x;\n          rect.w = scale.x * original.w;\n        }\n        draggingPoint.x = fixedPoint.x + rect.w * direction.x;\n        draggingPoint.y = fixedPoint.y + rect.h * direction.y;\n\n        dp = draggingPoint.matrixTransform(m0);\n\n        rect.cx = (fp.x + dp.x) / 2;\n        rect.cy = (fp.y + dp.y) / 2;\n      }\n    } else {\n      // handle notes\n      switch (_dragDirection) {\n        case HandleDirection.Left: {\n          direction.x = -1;\n          fixedPoint.x = maxX;\n          draggingPoint.x = minX + deltaX;\n          rect.w = fixedPoint.x - draggingPoint.x;\n          break;\n        }\n        case HandleDirection.Right: {\n          direction.x = 1;\n          fixedPoint.x = minX;\n          draggingPoint.x = maxX + deltaX;\n          rect.w = draggingPoint.x - fixedPoint.x;\n          break;\n        }\n      }\n\n      scale.x = rect.w / original.w;\n      flip.x = scale.x < 0 ? -1 : 1;\n\n      if (Math.abs(rect.w) < NOTE_MIN_WIDTH) {\n        rect.w = NOTE_MIN_WIDTH * flip.x;\n        scale.x = rect.w / original.w;\n        draggingPoint.x = fixedPoint.x + rect.w * direction.x;\n      }\n\n      rect.cx = (draggingPoint.x + fixedPoint.x) / 2;\n    }\n\n    const width = Math.abs(rect.w);\n    const height = Math.abs(rect.h);\n    const x = rect.cx - width / 2;\n    const y = rect.cy - height / 2;\n\n    _currentRect.x = x;\n    _currentRect.y = y;\n    _currentRect.width = width;\n    _currentRect.height = height;\n\n    const newBounds = new Map<\n      string,\n      {\n        bound: Bound;\n        path?: PointLocation[];\n        matrix?: DOMMatrix;\n      }\n    >();\n\n    let process: (value: SelectableProps, key: string) => void;\n\n    if (isCorner || isAll || isEdgeAndCorner) {\n      if (this._bounds.size === 1) {\n        process = (_, id) => {\n          newBounds.set(id, {\n            bound: new Bound(x, y, width, height),\n          });\n        };\n      } else {\n        const fp = fixedPoint.matrixTransform(m0);\n        const m2 = new DOMMatrix()\n          .translateSelf(fp.x, fp.y)\n          .rotateSelf(_rotate)\n          .translateSelf(-fp.x, -fp.y)\n          .scaleSelf(scale.x, scale.y, 1, fp.x, fp.y, 0)\n          .translateSelf(fp.x, fp.y)\n          .rotateSelf(-_rotate)\n          .translateSelf(-fp.x, -fp.y);\n\n        // TODO: on same rotate\n        process = ({ bound: { x, y, w, h }, path }, id) => {\n          const cx = x + w / 2;\n          const cy = y + h / 2;\n          const center = new DOMPoint(cx, cy).matrixTransform(m2);\n          const newWidth = Math.abs(w * scale.x);\n          const newHeight = Math.abs(h * scale.y);\n\n          newBounds.set(id, {\n            bound: new Bound(\n              center.x - newWidth / 2,\n              center.y - newHeight / 2,\n              newWidth,\n              newHeight\n            ),\n            matrix: m2,\n            path,\n          });\n        };\n      }\n    } else {\n      // include notes, <---->\n      const m2 = new DOMMatrix().scaleSelf(\n        scale.x,\n        scale.y,\n        1,\n        fixedPoint.x,\n        fixedPoint.y,\n        0\n      );\n      process = ({ bound: { x, y, w, h }, rotate = 0, path }, id) => {\n        const cx = x + w / 2;\n        const cy = y + h / 2;\n\n        const center = new DOMPoint(cx, cy).matrixTransform(m2);\n\n        let newWidth: number;\n        let newHeight: number;\n\n        // TODO: determine if it is a note\n        if (rotate) {\n          const { width } = getQuadBoundsWithRotation({ x, y, w, h, rotate });\n          const hrw = width / 2;\n\n          center.y = cy;\n\n          if (_currentRect.width <= width) {\n            newWidth = w * (_currentRect.width / width);\n            newHeight = newWidth / (w / h);\n            center.x = _currentRect.left + _currentRect.width / 2;\n          } else {\n            const p = (cx - hrw - _originalRect.left) / _originalRect.width;\n            const lx = _currentRect.left + p * _currentRect.width + hrw;\n            center.x = Math.max(\n              _currentRect.left + hrw,\n              Math.min(lx, _currentRect.left + _currentRect.width - hrw)\n            );\n            newWidth = w;\n            newHeight = h;\n          }\n        } else {\n          newWidth = Math.abs(w * scale.x);\n          newHeight = Math.abs(h * scale.y);\n        }\n\n        newBounds.set(id, {\n          bound: new Bound(\n            center.x - newWidth / 2,\n            center.y - newHeight / 2,\n            newWidth,\n            newHeight\n          ),\n          matrix: m2,\n          path,\n        });\n      };\n    }\n\n    this._bounds.forEach(process);\n    this._onResizeMove(newBounds, this._dragDirection);\n  }\n\n  private _onRotate(shiftKey = false) {\n    const {\n      _originalRect: { left: minX, top: minY, right: maxX, bottom: maxY },\n      _dragPos: {\n        start: { x: startX, y: startY },\n        end: { x: endX, y: endY },\n      },\n      _origin: { x: centerX, y: centerY },\n      _rotate,\n    } = this;\n\n    const startRad = Math.atan2(startY - centerY, startX - centerX);\n    const endRad = Math.atan2(endY - centerY, endX - centerX);\n    let deltaRad = endRad - startRad;\n\n    // snap angle\n    // 15deg * n = 0, 15, 30, 45, ... 360\n    if (shiftKey) {\n      const prevRad = (_rotate * Math.PI) / 180;\n      let angle = prevRad + deltaRad;\n      angle += SHIFT_LOCKING_ANGLE / 2;\n      angle -= angle % SHIFT_LOCKING_ANGLE;\n      deltaRad = angle - prevRad;\n    }\n\n    const delta = (deltaRad * 180) / Math.PI;\n\n    let x = endX;\n    let y = endY;\n    if (shiftKey) {\n      const point = new DOMPoint(startX, startY).matrixTransform(\n        new DOMMatrix()\n          .translateSelf(centerX, centerY)\n          .rotateSelf(delta)\n          .translateSelf(-centerX, -centerY)\n      );\n      x = point.x;\n      y = point.y;\n    }\n\n    this._onRotateMove(\n      // center of element in suface\n      { x: (minX + maxX) / 2, y: (minY + maxY) / 2 },\n      delta\n    );\n\n    this._dragPos.start = { x, y };\n    this._rotate += delta;\n  }\n\n  onPressShiftKey(pressed: boolean) {\n    if (!this._target) return;\n    if (this._locked) return;\n\n    if (this._shiftKey === pressed) return;\n    this._shiftKey = pressed;\n\n    const proportional = this._proportional || this._shiftKey;\n\n    if (this._rotation) {\n      this._onRotate(proportional);\n      return;\n    }\n\n    this._onResize(proportional);\n  }\n\n  updateBounds(bounds: Map<string, SelectableProps>) {\n    this._bounds = bounds;\n  }\n\n  updateRectPosition(delta: { x: number; y: number }) {\n    this._currentRect.x += delta.x;\n    this._currentRect.y += delta.y;\n    this._originalRect.x = this._currentRect.x;\n    this._originalRect.y = this._currentRect.y;\n\n    return this._originalRect;\n  }\n\n  updateState(\n    resizeMode: ResizeMode,\n    rotate: number,\n    zoom: number,\n    position?: { x: number; y: number },\n    originalRect?: DOMRect,\n    proportion = false\n  ) {\n    this._resizeMode = resizeMode;\n    this._rotate = rotate;\n    this._zoom = zoom;\n    this._proportion = proportion;\n\n    if (position) {\n      this._currentRect.x = position.x;\n      this._currentRect.y = position.y;\n      this._originalRect.x = this._currentRect.x;\n      this._originalRect.y = this._currentRect.y;\n    }\n\n    if (originalRect) {\n      this._originalRect = originalRect;\n      this._aspectRatio = originalRect.width / originalRect.height;\n      this._currentRect = DOMRect.fromRect(originalRect);\n    }\n  }\n}\n"]}