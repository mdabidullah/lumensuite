{"version":3,"file":"resize-handles.js","sourceRoot":"","sources":["../../../../../src/root-block/edgeless/components/resize/resize-handles.ts"],"names":[],"mappings":"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","sourcesContent":["import type { IVec } from '@lumensuite/global/utils';\n\nimport { html, nothing } from 'lit';\n\nexport enum HandleDirection {\n  Bottom = 'bottom',\n  BottomLeft = 'bottom-left',\n  BottomRight = 'bottom-right',\n  Left = 'left',\n  Right = 'right',\n  Top = 'top',\n  TopLeft = 'top-left',\n  TopRight = 'top-right',\n}\n\nfunction ResizeHandle(\n  handleDirection: HandleDirection,\n  onPointerDown?: (e: PointerEvent, direction: HandleDirection) => void,\n  updateCursor?: (\n    dragging: boolean,\n    options?: {\n      type: 'resize' | 'rotate';\n      target?: HTMLElement;\n      point?: IVec;\n    }\n  ) => void,\n  hideEdgeHandle?: boolean\n) {\n  const handlerPointerDown = (e: PointerEvent) => {\n    e.stopPropagation();\n    onPointerDown && onPointerDown(e, handleDirection);\n  };\n\n  const pointerEnter = (type: 'resize' | 'rotate') => (e: PointerEvent) => {\n    e.stopPropagation();\n    if (e.buttons === 1 || !updateCursor) return;\n\n    const { clientX, clientY } = e;\n    const target = e.target as HTMLElement;\n    const point: IVec = [clientX, clientY];\n\n    updateCursor(true, { type, point, target });\n  };\n\n  const pointerLeave = (e: PointerEvent) => {\n    e.stopPropagation();\n    if (e.buttons === 1 || !updateCursor) return;\n\n    updateCursor(false);\n  };\n\n  const rotationTpl =\n    handleDirection === HandleDirection.Top ||\n    handleDirection === HandleDirection.Bottom ||\n    handleDirection === HandleDirection.Left ||\n    handleDirection === HandleDirection.Right\n      ? nothing\n      : html`<div\n          class=\"rotate\"\n          @pointerover=${pointerEnter('rotate')}\n          @pointerout=${pointerLeave}\n        ></div>`;\n\n  return html`<div\n    class=\"handle\"\n    aria-label=${handleDirection}\n    @pointerdown=${handlerPointerDown}\n  >\n    ${rotationTpl}\n    <div\n      class=\"resize${hideEdgeHandle && ' transparent-handle'}\"\n      @pointerover=${pointerEnter('resize')}\n      @pointerout=${pointerLeave}\n    ></div>\n  </div>`;\n}\n\n/**\n * Indicate how selected elements can be resized.\n *\n * - edge: The selected elements can only be resized dragging edge, usually when note element is selected\n * - all: The selected elements can be resize both dragging edge or corner, usually when all elements are `shape`\n * - none: The selected elements can't be resized, usually when all elements are `connector`\n * - corner: The selected elements can only be resize dragging corner, this is by default mode\n * - edgeAndCorner: The selected elements can be resize both dragging left right edge or corner, usually when all elements are 'text'\n */\nexport type ResizeMode = 'edge' | 'all' | 'none' | 'corner' | 'edgeAndCorner';\n\nexport function ResizeHandles(\n  resizeMode: ResizeMode,\n  onPointerDown: (e: PointerEvent, direction: HandleDirection) => void,\n  updateCursor?: (\n    dragging: boolean,\n    options?: {\n      type: 'resize' | 'rotate';\n      target?: HTMLElement;\n      point?: IVec;\n    }\n  ) => void\n) {\n  const getCornerHandles = () => {\n    const handleTopLeft = ResizeHandle(\n      HandleDirection.TopLeft,\n      onPointerDown,\n      updateCursor\n    );\n    const handleTopRight = ResizeHandle(\n      HandleDirection.TopRight,\n      onPointerDown,\n      updateCursor\n    );\n    const handleBottomLeft = ResizeHandle(\n      HandleDirection.BottomLeft,\n      onPointerDown,\n      updateCursor\n    );\n    const handleBottomRight = ResizeHandle(\n      HandleDirection.BottomRight,\n      onPointerDown,\n      updateCursor\n    );\n    return {\n      handleTopLeft,\n      handleTopRight,\n      handleBottomLeft,\n      handleBottomRight,\n    };\n  };\n  const getEdgeHandles = (hideEdgeHandle?: boolean) => {\n    const handleLeft = ResizeHandle(\n      HandleDirection.Left,\n      onPointerDown,\n      updateCursor,\n      hideEdgeHandle\n    );\n    const handleRight = ResizeHandle(\n      HandleDirection.Right,\n      onPointerDown,\n      updateCursor,\n      hideEdgeHandle\n    );\n    return { handleLeft, handleRight };\n  };\n  const getEdgeVerticalHandles = (hideEdgeHandle?: boolean) => {\n    const handleTop = ResizeHandle(\n      HandleDirection.Top,\n      onPointerDown,\n      updateCursor,\n      hideEdgeHandle\n    );\n    const handleBottom = ResizeHandle(\n      HandleDirection.Bottom,\n      onPointerDown,\n      updateCursor,\n      hideEdgeHandle\n    );\n    return { handleTop, handleBottom };\n  };\n  switch (resizeMode) {\n    case 'corner': {\n      const {\n        handleTopLeft,\n        handleTopRight,\n        handleBottomLeft,\n        handleBottomRight,\n      } = getCornerHandles();\n\n      // prettier-ignore\n      return html`\n        ${handleTopLeft}\n        ${handleTopRight}\n        ${handleBottomLeft}\n        ${handleBottomRight}\n      `;\n    }\n    case 'edge': {\n      const { handleLeft, handleRight } = getEdgeHandles();\n      return html`${handleLeft} ${handleRight}`;\n    }\n    case 'all': {\n      const {\n        handleTopLeft,\n        handleTopRight,\n        handleBottomLeft,\n        handleBottomRight,\n      } = getCornerHandles();\n      const { handleLeft, handleRight } = getEdgeHandles(true);\n      const { handleTop, handleBottom } = getEdgeVerticalHandles(true);\n\n      // prettier-ignore\n      return html`\n        ${handleTopLeft}\n        ${handleTop}\n        ${handleTopRight}\n        ${handleRight}\n        ${handleBottomRight}\n        ${handleBottom}\n        ${handleBottomLeft}\n        ${handleLeft}\n      `;\n    }\n    case 'edgeAndCorner': {\n      const {\n        handleTopLeft,\n        handleTopRight,\n        handleBottomLeft,\n        handleBottomRight,\n      } = getCornerHandles();\n      const { handleLeft, handleRight } = getEdgeHandles(true);\n\n      return html`\n        ${handleTopLeft} ${handleTopRight} ${handleRight} ${handleBottomRight}\n        ${handleBottomLeft} ${handleLeft}\n      `;\n    }\n    case 'none': {\n      return nothing;\n    }\n  }\n}\n"]}