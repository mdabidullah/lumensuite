{"version":3,"file":"frame-tool-button.js","sourceRoot":"","sources":["../../../../../../src/root-block/edgeless/components/toolbar/frame/frame-tool-button.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,EACL,WAAW,EACX,cAAc,GACf,MAAM,qCAAqC,CAAC;AAC7C,OAAO,EAAE,GAAG,EAAE,IAAI,EAAE,UAAU,EAAE,MAAM,KAAK,CAAC;AAC5C,OAAO,EAAE,aAAa,EAAE,MAAM,mBAAmB,CAAC;AAClD,OAAO,EAAE,QAAQ,EAAE,MAAM,6BAA6B,CAAC;AAIvD,OAAO,EAAE,sBAAsB,EAAE,MAAM,8BAA8B,CAAC;AACtE,OAAO,mCAAmC,CAAC;AAC3C,OAAO,EAAE,cAAc,EAAE,MAAM,+BAA+B,CAAC;AAC/D,OAAO,iBAAiB,CAAC;IAGZ,uBAAuB;4BADnC,aAAa,CAAC,4BAA4B,CAAC;;;;sBACC,cAAc,CAAC,UAAU,CAAC;uCAAlC,SAAQ,WAA0B;;;;YAc5D,SAAI,GAAyB,OAAO,CAAC;QAiChD,CAAC;;;YA/CD,6KA+CC;;;;iBA9CiB,WAAM,GAAG,GAAG,CAAA;;;;;;;;;;;GAW3B,AAXqB,CAWpB;QAIM,gBAAgB;YACtB,IAAI,IAAI,CAAC,gBAAgB,EAAE;gBAAE,OAAO;YAEpC,MAAM,IAAI,GAAG,IAAI,CAAC,YAAY,CAAC,qBAAqB,EAAE,IAAI,CAAC,CAAC;YAC5D,IAAI,CAAC,OAAO,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;QACxC,CAAC;QAEQ,MAAM;YACb,MAAM,IAAI,GAAG,IAAI,CAAC,YAAY,EAAE,IAAI,CAAC;YACrC,MAAM,UAAU,GACd,IAAI,KAAK,OAAO,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC,8BAA8B,CAAC;YACrE,OAAO,IAAI,CAAA;;;mBAGI,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,sBAAsB,CAAC,OAAO,EAAE,GAAG,CAAC;yBACjD,EAAE;kBACT,IAAI,KAAK,OAAO;gCACF,CAAC;iBAChB,GAAG,EAAE;gBACZ,yCAAyC;gBACzC,IAAI,CAAC,gBAAgB,EAAE,CAAC;gBACxB,IAAI,CAAC,eAAe,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC,CAAC;YAC1C,CAAC;;UAEC,cAAc;4CACoB,QAAQ,CAAC,EAAE,KAAK,EAAE,UAAU,EAAE,CAAC;YAC/D,WAAW;;;KAGlB,CAAC;QACJ,CAAC;;YA9CU,uDAAuB;;;;;SAAvB,uBAAuB","sourcesContent":["import {\n  ArrowUpIcon,\n  LargeFrameIcon,\n} from '@blocksuite/affine-components/icons';\nimport { css, html, LitElement } from 'lit';\nimport { customElement } from 'lit/decorators.js';\nimport { styleMap } from 'lit/directives/style-map.js';\n\nimport type { EdgelessTool } from '../../../types.js';\n\nimport { getTooltipWithShortcut } from '../../../components/utils.js';\nimport '../../buttons/tool-icon-button.js';\nimport { QuickToolMixin } from '../mixins/quick-tool.mixin.js';\nimport './frame-menu.js';\n\n@customElement('edgeless-frame-tool-button')\nexport class EdgelessFrameToolButton extends QuickToolMixin(LitElement) {\n  static override styles = css`\n    :host {\n      display: flex;\n    }\n\n    .arrow-up-icon {\n      position: absolute;\n      top: 4px;\n      right: 2px;\n      font-size: 0;\n    }\n  `;\n\n  override type: EdgelessTool['type'] = 'frame';\n\n  private _toggleFrameMenu() {\n    if (this.tryDisposePopper()) return;\n\n    const menu = this.createPopper('edgeless-frame-menu', this);\n    menu.element.edgeless = this.edgeless;\n  }\n\n  override render() {\n    const type = this.edgelessTool?.type;\n    const arrowColor =\n      type === 'frame' ? 'currentColor' : 'var(--affine-icon-secondary)';\n    return html`\n      <edgeless-tool-icon-button\n        class=\"edgeless-frame-button\"\n        .tooltip=${this.popper ? '' : getTooltipWithShortcut('Frame', 'F')}\n        .tooltipOffset=${17}\n        .active=${type === 'frame'}\n        .iconContainerPadding=${6}\n        @click=${() => {\n          // don't update tool before toggling menu\n          this._toggleFrameMenu();\n          this.setEdgelessTool({ type: 'frame' });\n        }}\n      >\n        ${LargeFrameIcon}\n        <span class=\"arrow-up-icon\" style=${styleMap({ color: arrowColor })}>\n          ${ArrowUpIcon}\n        </span>\n      </edgeless-tool-icon-button>\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'edgeless-frame-tool-button': EdgelessFrameToolButton;\n  }\n}\n"]}