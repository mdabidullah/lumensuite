{"version":3,"file":"shape-menu.js","sourceRoot":"","sources":["../../../../../../src/root-block/edgeless/components/toolbar/shape/shape-menu.ts"],"names":[],"mappings":"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","sourcesContent":["import type { Signal } from '@lit-labs/preact-signals';\n\nimport {\n  GeneralStyleIcon,\n  ScribbledStyleIcon,\n} from '@blocksuite/affine-components/icons';\nimport {\n  DEFAULT_SHAPE_FILL_COLOR,\n  LineColor,\n  SHAPE_FILL_COLORS,\n  type ShapeFillColor,\n  type ShapeName,\n  ShapeStyle,\n  ShapeType,\n} from '@blocksuite/affine-model';\nimport { ThemeObserver } from '@blocksuite/affine-shared/theme';\nimport { SignalWatcher } from '@blocksuite/block-std';\nimport { computed, signal } from '@lit-labs/preact-signals';\nimport { css, html, LitElement } from 'lit';\nimport { customElement, property } from 'lit/decorators.js';\n\nimport type { EdgelessRootBlockComponent } from '../../../edgeless-root-block.js';\n\nimport '../../buttons/tool-icon-button.js';\nimport { type ColorEvent, isTransparent } from '../../panel/color-panel.js';\nimport '../../panel/one-row-color-panel.js';\nimport {\n  LINE_COLOR_PREFIX,\n  SHAPE_COLOR_PREFIX,\n  ShapeComponentConfig,\n} from './shape-menu-config.js';\n\n@customElement('edgeless-shape-menu')\nexport class EdgelessShapeMenu extends SignalWatcher(LitElement) {\n  static override styles = css`\n    :host {\n      display: flex;\n      z-index: -1;\n    }\n    .menu-content {\n      display: flex;\n      align-items: center;\n    }\n    .shape-type-container,\n    .shape-style-container {\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      gap: 14px;\n    }\n    .shape-type-container svg,\n    .shape-style-container svg {\n      fill: var(--affine-icon-color);\n      stroke: none;\n    }\n    menu-divider {\n      height: 24px;\n      margin: 0 9px;\n    }\n  `;\n\n  private _props$ = computed(() => {\n    const shapeName: ShapeName = this._shapeName$.value;\n    const { shapeStyle, fillColor, strokeColor, radius } =\n      this.edgeless.service.editPropsStore.lastProps$.value[\n        `shape:${shapeName}`\n      ];\n    return {\n      shapeStyle,\n      shapeName,\n      fillColor,\n      strokeColor,\n      radius,\n    };\n  });\n\n  private _setFillColor = (fillColor: ShapeFillColor) => {\n    const filled = !isTransparent(fillColor);\n    let strokeColor = fillColor.replace(\n      SHAPE_COLOR_PREFIX,\n      LINE_COLOR_PREFIX\n    ) as LineColor;\n\n    if (strokeColor.endsWith('transparent')) {\n      strokeColor = LineColor.Grey;\n    }\n\n    const { shapeName } = this._props$.value;\n    this.edgeless.service.editPropsStore.recordLastProps(`shape:${shapeName}`, {\n      filled,\n      fillColor,\n      strokeColor,\n    });\n  };\n\n  private _setShapeStyle = (shapeStyle: ShapeStyle) => {\n    const { shapeName } = this._props$.value;\n    this.edgeless.service.editPropsStore.recordLastProps(`shape:${shapeName}`, {\n      shapeStyle,\n    });\n  };\n\n  private _shapeName$: Signal<ShapeName> = signal(ShapeType.Rect);\n\n  override connectedCallback(): void {\n    super.connectedCallback();\n    this.edgeless.service.slots.edgelessToolUpdated.on(tool => {\n      if (tool.type === 'shape') {\n        this._shapeName$.value = tool.shapeName;\n      }\n    });\n  }\n\n  override render() {\n    const { fillColor, shapeStyle, shapeName } = this._props$.value;\n    const color = ThemeObserver.getColorValue(\n      fillColor,\n      DEFAULT_SHAPE_FILL_COLOR\n    );\n\n    return html`\n      <edgeless-slide-menu>\n        <div class=\"menu-content\">\n          <div class=\"shape-style-container\">\n            <edgeless-tool-icon-button\n              .tooltip=${'General'}\n              .active=${shapeStyle === ShapeStyle.General}\n              .activeMode=${'background'}\n              @click=${() => {\n                this._setShapeStyle(ShapeStyle.General);\n              }}\n            >\n              ${GeneralStyleIcon}\n            </edgeless-tool-icon-button>\n            <edgeless-tool-icon-button\n              .tooltip=${'Scribbled'}\n              .active=${shapeStyle === ShapeStyle.Scribbled}\n              .activeMode=${'background'}\n              @click=${() => {\n                this._setShapeStyle(ShapeStyle.Scribbled);\n              }}\n            >\n              ${ScribbledStyleIcon}\n            </edgeless-tool-icon-button>\n          </div>\n          <menu-divider .vertical=${true}></menu-divider>\n          <div class=\"shape-type-container\">\n            ${ShapeComponentConfig.map(\n              ({ name, generalIcon, scribbledIcon, tooltip }) => {\n                return html`\n                  <edgeless-tool-icon-button\n                    .tooltip=${tooltip}\n                    .active=${shapeName === name}\n                    .activeMode=${'background'}\n                    @click=${() => this.onChange(name)}\n                  >\n                    ${shapeStyle === ShapeStyle.General\n                      ? generalIcon\n                      : scribbledIcon}\n                  </edgeless-tool-icon-button>\n                `;\n              }\n            )}\n          </div>\n          <menu-divider .vertical=${true}></menu-divider>\n          <edgeless-one-row-color-panel\n            .value=${color}\n            .options=${SHAPE_FILL_COLORS}\n            .hasTransparent=${!this.edgeless.doc.awarenessStore.getFlag(\n              'enable_color_picker'\n            )}\n            @select=${(e: ColorEvent) =>\n              this._setFillColor(e.detail as ShapeFillColor)}\n          ></edgeless-one-row-color-panel>\n        </div>\n      </edgeless-slide-menu>\n    `;\n  }\n\n  @property({ attribute: false })\n  accessor edgeless!: EdgelessRootBlockComponent;\n\n  @property({ attribute: false })\n  accessor onChange!: (name: ShapeName) => void;\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'edgeless-shape-menu': EdgelessShapeMenu;\n  }\n}\n"]}