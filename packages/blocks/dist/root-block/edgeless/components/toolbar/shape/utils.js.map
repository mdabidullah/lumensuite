{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../../../../../src/root-block/edgeless/components/toolbar/shape/utils.ts"],"names":[],"mappings":"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","sourcesContent":["import { render, type TemplateResult } from 'lit';\n\nimport type { ShapeTool } from '../../../tools/shape-tool.js';\n\ntype TransformState = {\n  /** horizental offset base on center */\n  x?: number | string;\n  /** vertical offset base on center */\n  y?: number | string;\n  /** scale */\n  s?: number;\n  /** z-index */\n  z?: number;\n};\n\nexport type DraggableShape = {\n  name: ShapeTool['shapeName'];\n  svg: TemplateResult;\n  style: {\n    default?: TransformState;\n    hover?: TransformState;\n    /**\n     * The next shape when previous shape is dragged outside toolbar\n     */\n    next?: TransformState;\n  };\n};\n\n/**\n * Helper function to build the CSS variables object for the shape\n * @returns\n */\nexport const buildVariablesObject = (style: DraggableShape['style']) => {\n  const states: Array<keyof DraggableShape['style']> = [\n    'default',\n    'hover',\n    'next',\n  ];\n  const variables: Array<keyof TransformState> = ['x', 'y', 's', 'z'];\n\n  const resolveValue = (\n    variable: keyof TransformState,\n    value: string | number\n  ) => {\n    if (['x', 'y'].includes(variable)) {\n      return typeof value === 'number' ? `${value}px` : value;\n    }\n    return value;\n  };\n\n  return states.reduce((acc, state) => {\n    return {\n      ...acc,\n      ...variables.reduce((acc, variable) => {\n        const defaultValue = style.default?.[variable];\n        const value = style[state]?.[variable] ?? defaultValue;\n        if (value === undefined) return acc;\n        return {\n          ...acc,\n          [`--${state}-${variable}`]: resolveValue(variable, value),\n        };\n      }, {}),\n    };\n  }, {});\n};\n\n// drag helper\nexport type ShapeDragEvent = {\n  inputType: 'mouse' | 'touch';\n  x: number;\n  y: number;\n  el: HTMLElement;\n  originalEvent: MouseEvent | TouchEvent;\n};\n\nexport const touchResolver = (event: TouchEvent) =>\n  ({\n    inputType: 'touch',\n    x: event.touches[0].clientX,\n    y: event.touches[0].clientY,\n    el: event.currentTarget as HTMLElement,\n    originalEvent: event,\n  }) satisfies ShapeDragEvent;\n\nexport const mouseResolver = (event: MouseEvent) =>\n  ({\n    inputType: 'mouse',\n    x: event.clientX,\n    y: event.clientY,\n    el: event.currentTarget as HTMLElement,\n    originalEvent: event,\n  }) satisfies ShapeDragEvent;\n\n// overlay helper\nexport const defaultDraggingInfo = {\n  startPos: { x: 0, y: 0 },\n  toolbarRect: {} as DOMRect,\n  edgelessRect: {} as DOMRect,\n  shapeRectOriginal: {} as DOMRect,\n  shapeEl: null as unknown as HTMLElement,\n  parentToMount: null as unknown as HTMLElement,\n  moved: false,\n  shape: null as unknown as DraggableShape,\n  style: {} as CSSStyleDeclaration,\n};\nexport type DraggingInfo = typeof defaultDraggingInfo;\n\nexport const createShapeDraggingOverlay = (info: DraggingInfo) => {\n  const { edgelessRect, parentToMount } = info;\n  const overlay = document.createElement('div');\n  Object.assign(overlay.style, {\n    position: 'absolute',\n    top: '0',\n    left: '0',\n    width: edgelessRect.width + 'px',\n    // always clip\n    // height: toolbarRect.bottom - edgelessRect.top + 'px',\n    height: edgelessRect.height + 'px',\n    overflow: 'hidden',\n    zIndex: '9999',\n\n    // for debug purpose\n    // background: 'rgba(255, 0, 0, 0.1)',\n  });\n\n  const shape = document.createElement('div');\n  const shapeScaleWrapper = document.createElement('div');\n  Object.assign(shapeScaleWrapper.style, {\n    transform: 'scale(var(--s, 1))',\n    transition: 'transform 0.1s',\n    transformOrigin: 'var(--o, center)',\n  });\n  render(info.shape.svg, shapeScaleWrapper);\n  Object.assign(shape.style, {\n    position: 'absolute',\n    color: info.style.color,\n    stroke: info.style.stroke,\n    filter: `var(--shape-filter, ${info.style.filter})`,\n    transform: 'translate(var(--x, 0), var(--y, 0))',\n    left: 'var(--left, 0)',\n    top: 'var(--top, 0)',\n    cursor: 'grabbing',\n    transition: 'inherit',\n  });\n\n  shape.append(shapeScaleWrapper);\n  overlay.append(shape);\n  parentToMount.append(overlay);\n\n  return overlay;\n};\n"]}