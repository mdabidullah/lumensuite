{"version":3,"file":"overlay-scrollbar.js","sourceRoot":"","sources":["../../../../../../src/root-block/edgeless/components/toolbar/template/overlay-scrollbar.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  on,\n  once,\n  requestConnectedFrame,\n} from '@blocksuite/affine-shared/utils';\nimport { DisposableGroup } from '@blocksuite/global/utils';\nimport { css, html, LitElement } from 'lit';\nimport { customElement, query } from 'lit/decorators.js';\n\n/**\n * A scrollbar that is only visible when the user is interacting with it.\n * Append this element to the a container that has a scrollable element. Which means\n * the scrollable element should lay on the same level as the overlay-scrollbar.\n *\n * And the scrollable element should have a `data-scrollable` attribute.\n *\n * Example:\n * ```\n * <div class=\"container\">\n *    <div class=\"scrollable-element-with-fixed-height\" data-scrollable>\n *       <!--.... very long content ....-->\n *    </div>\n *    <overlay-scrollbar></overlay-scrollbar>\n * </div>\n * ```\n *\n * Note:\n * - It only works with vertical scrollbars.\n */\n@customElement('overlay-scrollbar')\nexport class OverlayScrollbar extends LitElement {\n  static override styles = css`\n    :host {\n      position: fixed;\n      top: 0;\n      right: 0;\n      bottom: 0;\n      width: 10px;\n      opacity: 0;\n      transition: opacity 0.3s;\n    }\n\n    .overlay-handle {\n      position: absolute;\n      top: 0;\n      left: 2px;\n      background-color: rgba(0, 0, 0, 0.44);\n      border-radius: 3px;\n      width: 6px;\n    }\n  `;\n\n  private _disposable = new DisposableGroup();\n\n  private _handleVisible = false;\n\n  private _scrollable: HTMLElement | null = null;\n\n  private _dragHandle(event: PointerEvent) {\n    let startY = event.clientY;\n\n    this._handleVisible = true;\n\n    const dispose = on(document, 'pointermove', evt => {\n      this._scroll(evt.clientY - startY);\n      startY = evt.clientY;\n    });\n\n    once(document, 'pointerup', e => {\n      this._handleVisible = false;\n\n      e.stopPropagation();\n\n      setTimeout(() => {\n        this._toggleScrollbarVisible(false);\n      }, 800);\n\n      dispose();\n    });\n  }\n\n  private _initWheelHandler() {\n    const container = this.parentElement as HTMLElement;\n\n    container.style.contain = 'layout';\n    container.style.overflow = 'hidden';\n\n    let hideScrollbarTimeId: null | ReturnType<typeof setTimeout> = null;\n    const delayHideScrollbar = () => {\n      if (hideScrollbarTimeId) clearTimeout(hideScrollbarTimeId);\n      hideScrollbarTimeId = setTimeout(() => {\n        this._toggleScrollbarVisible(false);\n        hideScrollbarTimeId = null;\n      }, 800);\n    };\n\n    let scrollable: HTMLElement | null = null;\n    this._disposable.addFromEvent(container, 'wheel', event => {\n      scrollable = scrollable?.isConnected\n        ? scrollable\n        : (container.querySelector('[data-scrollable]') as HTMLElement);\n\n      this._scrollable = scrollable;\n\n      if (!scrollable) return;\n\n      // firefox may report a wheel event with deltaMode of value other than 0\n      // we just simply multiply it by 16 which is common default line height to get the correct value\n      const scrollDistance =\n        event.deltaMode === 0 ? event.deltaY : event.deltaY * 16;\n\n      this._scroll(scrollDistance ?? 0);\n\n      delayHideScrollbar();\n    });\n  }\n\n  private _scroll(scrollDistance: number) {\n    const scrollable = this._scrollable!;\n\n    if (!scrollable) return;\n\n    scrollable.scrollBy({\n      left: 0,\n      top: scrollDistance,\n      behavior: 'instant',\n    });\n\n    requestConnectedFrame(() => {\n      this._updateScrollbarRect(scrollable);\n      this._toggleScrollbarVisible(true);\n    }, this);\n  }\n\n  private _toggleScrollbarVisible(visible: boolean) {\n    const vis = visible || this._handleVisible ? '1' : '0';\n\n    if (this.style.opacity !== vis) {\n      this.style.opacity = vis;\n    }\n  }\n\n  private _updateScrollbarRect(rect: {\n    scrollTop?: number;\n    clientHeight?: number;\n    scrollHeight?: number;\n  }) {\n    if (rect.scrollHeight !== undefined && rect.clientHeight !== undefined) {\n      this._handle.style.height = `${(rect.clientHeight / rect.scrollHeight) * 100}%`;\n    }\n\n    if (rect.scrollTop !== undefined && rect.scrollHeight !== undefined) {\n      this._handle.style.top = `${(rect.scrollTop / rect.scrollHeight) * 100}%`;\n    }\n  }\n\n  override connectedCallback(): void {\n    super.connectedCallback();\n    this._disposable.dispose();\n  }\n\n  override firstUpdated(): void {\n    this._initWheelHandler();\n  }\n\n  override render() {\n    return html`<div\n      class=\"overlay-handle\"\n      @pointerdown=${this._dragHandle}\n    ></div>`;\n  }\n\n  @query('.overlay-handle')\n  private accessor _handle!: HTMLDivElement;\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'overlay-scrollbar': OverlayScrollbar;\n  }\n}\n"]}