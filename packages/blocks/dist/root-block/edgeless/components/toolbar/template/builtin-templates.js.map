{"version":3,"file":"builtin-templates.js","sourceRoot":"","sources":["../../../../../../src/root-block/edgeless/components/toolbar/template/builtin-templates.ts"],"names":[],"mappings":"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","sourcesContent":["import { keys } from '@lumensuite/global/utils';\n\nimport type {\n  Template,\n  TemplateCategory,\n  TemplateManager,\n} from './template-type.js';\n\nexport const templates: TemplateCategory[] = [];\n\nfunction lcs(text1: string, text2: string) {\n  const dp: number[][] = Array.from(\n    {\n      length: text1.length + 1,\n    },\n    () => Array.from({ length: text2.length + 1 }, () => 0)\n  );\n\n  for (let i = 1; i <= text1.length; i++) {\n    for (let j = 1; j <= text2.length; j++) {\n      if (text1[i - 1] === text2[j - 1]) {\n        dp[i][j] = dp[i - 1][j - 1] + 1;\n      } else {\n        dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]);\n      }\n    }\n  }\n\n  return dp[text1.length][text2.length];\n}\nconst extendTemplate: TemplateManager[] = [];\n\nconst flat = <T>(arr: T[][]) =>\n  arr.reduce((pre, current) => {\n    if (current) {\n      return pre.concat(current);\n    }\n\n    return pre;\n  }, []);\n\nexport const builtInTemplates = {\n  list: async (category: string) => {\n    const extendTemplates = flat(\n      await Promise.all(extendTemplate.map(manager => manager.list(category)))\n    );\n\n    const cate = templates.find(cate => cate.name === category);\n    if (!cate) return extendTemplates;\n\n    const result: Template[] =\n      cate.templates instanceof Function\n        ? await cate.templates()\n        : await Promise.all(\n            // @ts-ignore\n            keys(cate.templates).map(key => cate.templates[key]())\n          );\n\n    return result.concat(extendTemplates);\n  },\n\n  categories: async () => {\n    const extendCates = flat(\n      await Promise.all(extendTemplate.map(manager => manager.categories()))\n    );\n\n    return templates.map(cate => cate.name).concat(extendCates);\n  },\n\n  search: async (keyword: string, cateName?: string) => {\n    const candidates: Template[] = flat(\n      await Promise.all(\n        extendTemplate.map(manager => manager.search(keyword, cateName))\n      )\n    );\n\n    keyword = keyword.trim().toLocaleLowerCase();\n\n    await Promise.all(\n      templates.map(async categroy => {\n        if (cateName && cateName !== categroy.name) {\n          return;\n        }\n\n        if (categroy.templates instanceof Function) {\n          return;\n        }\n\n        return Promise.all(\n          keys(categroy.templates).map(async name => {\n            if (\n              lcs(keyword, (name as string).toLocaleLowerCase()) ===\n              keyword.length\n            ) {\n              // @ts-ignore\n              const template = await categroy.templates[name]();\n\n              candidates.push(template);\n            }\n          })\n        );\n      })\n    );\n\n    return candidates;\n  },\n\n  extend(manager: TemplateManager) {\n    if (extendTemplate.includes(manager)) return;\n\n    extendTemplate.push(manager);\n  },\n} satisfies TemplateManager;\n"]}