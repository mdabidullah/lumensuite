{"version":3,"file":"text-menu.js","sourceRoot":"","sources":["../../../../../../src/root-block/edgeless/components/toolbar/text/text-menu.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,EAAE,GAAG,EAAE,IAAI,EAAE,UAAU,EAAE,OAAO,EAAE,MAAM,KAAK,CAAC;AACrD,OAAO,EAAE,aAAa,EAAE,QAAQ,EAAE,MAAM,mBAAmB,CAAC;AAK5D,OAAO,mCAAmC,CAAC;AAC3C,OAAO,oCAAoC,CAAC;AAC5C,OAAO,yBAAyB,CAAC;AACjC,OAAO,EAAE,wBAAwB,EAAE,MAAM,yBAAyB,CAAC;IAGtD,gBAAgB;4BAD5B,aAAa,CAAC,oBAAoB,CAAC;;;;sBACE,wBAAwB,CAAC,UAAU,CAAC;;;;;;;gCAA5C,SAAQ,WAAoC;;;;iCA0BvE,QAAQ,CAAC,EAAE,SAAS,EAAE,KAAK,EAAE,CAAC;oCAG9B,QAAQ,CAAC,EAAE,SAAS,EAAE,KAAK,EAAE,CAAC;YAF/B,oKAAS,KAAK,6BAAL,KAAK,qFAAU;YAGxB,6KAAS,QAAQ,6BAAR,QAAQ,2FAA4C;YA9B/D,6KA+BC;;;;iBA9BiB,WAAM,GAAG,GAAG,CAAA;;;;;;GAM3B,AANqB,CAMpB;QAIO,MAAM;YACb,IAAI,IAAI,CAAC,YAAY,CAAC,IAAI,KAAK,MAAM;gBAAE,OAAO,OAAO,CAAC;YAEtD,OAAO,IAAI,CAAA;;;;qBAIM,IAAI,CAAC,KAAK;sBACT,CAAC,CAAa,EAAE,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE,KAAK,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC;;;;KAItE,CAAC;QACJ,CAAC;QAGD,wBAAwB;QAAxB,IAAS,KAAK,2CAAU;QAAxB,IAAS,KAAK,iDAAU;QAGxB,2BAA6D;QAA7D,IAAS,QAAQ,8CAA4C;QAA7D,IAAS,QAAQ,oDAA4C;;;YArBpD,SAAI,GAAyB,MAAM,CAAC;YAkBpC,oFAAe;YAGf,+IAAoD;;;;YA9BlD,uDAAgB;;;;;SAAhB,gBAAgB","sourcesContent":["import { css, html, LitElement, nothing } from 'lit';\nimport { customElement, property } from 'lit/decorators.js';\n\nimport type { EdgelessTool } from '../../../types.js';\nimport type { ColorEvent } from '../../panel/color-panel.js';\n\nimport '../../buttons/tool-icon-button.js';\nimport '../../panel/one-row-color-panel.js';\nimport '../common/slide-menu.js';\nimport { EdgelessToolbarToolMixin } from '../mixins/tool.mixin.js';\n\n@customElement('edgeless-text-menu')\nexport class EdgelessTextMenu extends EdgelessToolbarToolMixin(LitElement) {\n  static override styles = css`\n    :host {\n      display: flex;\n      position: absolute;\n      z-index: -1;\n    }\n  `;\n\n  override type: EdgelessTool['type'] = 'text';\n\n  override render() {\n    if (this.edgelessTool.type !== 'text') return nothing;\n\n    return html`\n      <edgeless-slide-menu>\n        <div class=\"menu-content\">\n          <edgeless-one-row-color-panel\n            .value=${this.color}\n            @select=${(e: ColorEvent) => this.onChange({ color: e.detail })}\n          ></edgeless-one-row-color-panel>\n        </div>\n      </edgeless-slide-menu>\n    `;\n  }\n\n  @property({ attribute: false })\n  accessor color!: string;\n\n  @property({ attribute: false })\n  accessor onChange!: (props: Record<string, unknown>) => void;\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'edgeless-text-menu': EdgelessTextMenu;\n  }\n}\n"]}