{"version":3,"file":"import-mindmap.js","sourceRoot":"","sources":["../../../../../../../src/root-block/edgeless/components/toolbar/mindmap/utils/import-mindmap.ts"],"names":[],"mappings":"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","sourcesContent":["import type { Bound } from '@blocksuite/global/utils';\n\nimport { openFileOrFiles } from '@blocksuite/affine-shared/utils';\nimport { BlockSuiteError, ErrorCode } from '@blocksuite/global/exceptions';\nimport converter from 'xml-js';\n\ntype MindMapNode = {\n  children: MindMapNode[];\n  text: string;\n  xywh?: string;\n  title?: string;\n  layoutType?: 'left' | 'right';\n};\n\nexport async function importMindmap(bound: Bound): Promise<MindMapNode> {\n  const file = await openFileOrFiles({\n    acceptType: 'MindMap',\n  });\n\n  if (!file) {\n    throw new BlockSuiteError(ErrorCode.UserAbortError, 'Aborted by user');\n  }\n\n  let result;\n\n  if (file.name.endsWith('.mm')) {\n    result = await parseMmFile(file);\n  } else if (file.name.endsWith('.opml') || file.name.endsWith('.xml')) {\n    result = await parseOPMLFile(file);\n  } else {\n    throw new BlockSuiteError(ErrorCode.ParsingError, 'Unsupported file type');\n  }\n\n  if (result) {\n    result.xywh = bound.serialize();\n  }\n\n  return result;\n}\n\nfunction readAsText(file: File) {\n  return file.text();\n}\n\ntype RawMmNode = {\n  node: RawMmNode[];\n  _attributes: {\n    POSITION: 'left' | 'right';\n    TEXT: string;\n  };\n};\n\nasync function parseMmFile(file: File): Promise<MindMapNode> {\n  const content = await readAsText(file);\n\n  try {\n    const { map } = JSON.parse(converter.xml2json(content, { compact: true }));\n    const traverse = (node: RawMmNode): MindMapNode | null => {\n      if (!node?._attributes?.TEXT && !node.node) {\n        return null;\n      }\n\n      return node._attributes.POSITION\n        ? {\n            layoutType: node._attributes.POSITION,\n            text: node._attributes?.TEXT ?? 'MINDMAP',\n            children:\n              (node.node\n                ?.map(traverse)\n                .filter(node => node) as MindMapNode[]) ?? [],\n          }\n        : {\n            text: node._attributes?.TEXT ?? 'MINDMAP',\n            children:\n              (node.node\n                ?.map(traverse)\n                .filter(node => node) as MindMapNode[]) ?? [],\n          };\n    };\n\n    const result = traverse(map.node);\n\n    if (!result) {\n      throw new BlockSuiteError(\n        ErrorCode.ParsingError,\n        'Failed to parse mm file'\n      );\n    }\n\n    return result;\n  } catch (e) {\n    console.error(e);\n    throw new BlockSuiteError(\n      ErrorCode.ParsingError,\n      'Failed to parse mm file'\n    );\n  }\n}\n\ntype RawOPMLNode = {\n  _attributes: {\n    text: string;\n  };\n  outline: RawOPMLNode[];\n};\n\nasync function parseOPMLFile(file: File): Promise<MindMapNode> {\n  const content = await readAsText(file);\n\n  try {\n    const parsed = JSON.parse(converter.xml2json(content, { compact: true }));\n    const opml = parsed.opml;\n\n    const traverse = (node: RawOPMLNode): MindMapNode | null => {\n      if (!node?._attributes?.text && !node.outline) {\n        return null;\n      }\n\n      return {\n        text: node._attributes?.text ?? 'MINDMAP',\n        children: node.outline\n          ? (Array.isArray(node.outline)\n              ? (node.outline.map(traverse) as MindMapNode[])\n              : ([traverse(node.outline)] as MindMapNode[])\n            ).filter(node => node)\n          : [],\n      };\n    };\n\n    const result = traverse(opml.body.outline);\n\n    if (!result) {\n      throw new BlockSuiteError(\n        ErrorCode.ParsingError,\n        'Failed to parse OPML file'\n      );\n    }\n\n    return result;\n  } catch (e) {\n    console.error(e);\n    throw new BlockSuiteError(\n      ErrorCode.ParsingError,\n      'Failed to parse OPML file'\n    );\n  }\n}\n"]}