{"version":3,"file":"mindmap-menu.js","sourceRoot":"","sources":["../../../../../../src/root-block/edgeless/components/toolbar/mindmap/mindmap-menu.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAKA,OAAO,EAAE,KAAK,EAAE,MAAM,qCAAqC,CAAC;AAC5D,OAAO,EAAE,IAAI,EAAE,MAAM,iCAAiC,CAAC;AACvD,OAAO,EAAE,YAAY,EAAE,UAAU,EAAE,MAAM,uBAAuB,CAAC;AACjE,OAAO,EAAE,SAAS,EAAE,MAAM,+BAA+B,CAAC;AAC1D,OAAO,EAAE,OAAO,EAAE,MAAM,cAAc,CAAC;AACvC,OAAO,EAAE,QAAQ,EAAE,aAAa,EAAE,MAAM,0BAA0B,CAAC;AACnE,OAAO,EAAE,GAAG,EAAE,IAAI,EAAE,UAAU,EAAE,OAAO,EAAuB,MAAM,KAAK,CAAC;AAC1E,OAAO,EAAE,aAAa,EAAE,QAAQ,EAAE,MAAM,mBAAmB,CAAC;AAC5D,OAAO,EAAE,MAAM,EAAE,MAAM,0BAA0B,CAAC;AAIlD,OAAO,EAAE,sBAAsB,EAAE,MAAM,gBAAgB,CAAC;AACxD,OAAO,EAAE,kCAAkC,EAAE,MAAM,qDAAqD,CAAC;AACzG,OAAO,EAAE,wBAAwB,EAAE,MAAM,yBAAyB,CAAC;AACnE,OAAO,EAAE,WAAW,EAA2B,MAAM,aAAa,CAAC;AACnE,OAAO,EAAE,UAAU,EAAE,MAAM,sBAAsB,CAAC;AAClD,OAAO,EAAE,iBAAiB,EAAE,QAAQ,EAAE,MAAM,YAAY,CAAC;AACzD,OAAO,EAAE,kBAAkB,EAAE,MAAM,oCAAoC,CAAC;AAaxE,MAAM,QAAQ,GAAa,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,QAAQ,EAAE,MAAM,EAAE,UAAU,EAAE,CAAC;IAGnE,mBAAmB;4BAD/B,aAAa,CAAC,uBAAuB,CAAC;;;;sBACE,wBAAwB,CAC/D,aAAa,CAAC,UAAU,CAAC,CAC1B;;;;;;;;;;;;;mCAFgC,SAAQ,WAExC;;;;iCA8RE,OAAO,CAAC,EAAE,OAAO,EAAE,YAAY,EAAE,CAAC;+CAGlC,QAAQ,CAAC,EAAE,SAAS,EAAE,KAAK,EAAE,CAAC;2CAG9B,QAAQ,CAAC,EAAE,SAAS,EAAE,KAAK,EAAE,CAAC;+BAG9B,OAAO,CAAC,EAAE,OAAO,EAAE,UAAU,EAAE,CAAC;YARjC,oKAAS,KAAK,6BAAL,KAAK,qFAAc;YAG5B,8MAAS,mBAAmB,6BAAnB,mBAAmB,iHAAiC;YAG7D,kMAAS,eAAe,6BAAf,eAAe,yGAAmC;YAG3D,8JAAS,GAAG,6BAAH,GAAG,iFAAiB;YA1S/B,6KA2SC;;;;iBAxSiB,WAAM,GAAG,GAAG,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAoD3B,AApDqB,CAoDpB;QAcF,IAAY,UAAU;YACpB,OAAO,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,CAA+B,CAAC;QAC7E,CAAC;QAED,IAAI,QAAQ;YACV,OAAO,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACjC,CAAC;QAEO,mBAAmB;YACzB,MAAM,EAAE,eAAe,EAAE,GAAG,IAAI,CAAC,mBAAmB,EAAE,MAAM,IAAI,EAAE,CAAC;YAEnE,MAAM,cAAc,GAAG,eAAe,EAAE,IAAI,CAAC,IAAI,KAAK,QAAQ,CAAC;YAE/D,IAAI,OAAO,GAAG,KAAK,CAAC;YAEpB,OAAO,IAAI,CAAA;;0BAEW,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;;qBAE3B,CAAC,CAAa,EAAE,EAAE;gBAC7B,IAAI,aAAa,GAAG,KAAK,CAAC;gBAC1B,IAAI,CAAC,QAAQ,EAAE,SAAS,EAAE,GAAG,EAAE;oBAC7B,aAAa,GAAG,IAAI,CAAC;gBACvB,CAAC,CAAC,CAAC;gBACH,cAAc,CAAC,GAAG,EAAE;oBAClB,IAAI,OAAO,IAAI,aAAa;wBAAE,OAAO;oBACrC,IAAI,CAAC,mBAAmB,CAAC,WAAW,CAAC,CAAC,EAAE;wBACtC,OAAO,EAAE,iBAAiB;wBAC1B,IAAI,EAAE;4BACJ,IAAI,EAAE,QAAQ;4BACd,IAAI,EAAE,iBAAiB;yBACxB;wBACD,aAAa,EAAE,GAAG;qBACnB,CAAC,CAAC;gBACL,CAAC,CAAC,CAAC;YACL,CAAC;sBACa,CAAC,CAAa,EAAE,EAAE;gBAC9B,IAAI,CAAC,mBAAmB,CAAC,YAAY,CAAC,CAAC,EAAE;oBACvC,OAAO,EAAE,iBAAiB;oBAC1B,IAAI,EAAE;wBACJ,IAAI,EAAE,QAAQ;wBACd,IAAI,EAAE,iBAAiB;qBACxB;oBACD,aAAa,EAAE,GAAG;iBACnB,CAAC,CAAC;YACL,CAAC;iBACQ,GAAG,EAAE;gBACZ,OAAO,GAAG,IAAI,CAAC;gBACf,MAAM,aAAa,GAAG,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,QAAQ,CAAC,cAAc,CAAC;gBAEtE,aAAa,CAAC,CAAC,IAAI,aAAa,CAAC,CAAC,GAAG,CAAC,CAAC;gBACvC,aAAa,CAAC,CAAC,IAAI,aAAa,CAAC,CAAC,GAAG,CAAC,CAAC;gBAEvC,IAAI,CAAC,gBAAgB,CAAC,aAAa,CAAC,CAAC;YACvC,CAAC;;UAEC,iBAAiB;;mDAEwB,EAAE;UAC3C,sBAAsB,CAAC,kCAAkC,CAAC;;WAEzD,CAAC;QACV,CAAC;QAEO,gBAAgB,CAAC,KAAY;YACnC,MAAM,aAAa,GAAG,IAAI,CAAC,UAAU,CAAC;YACtC,IAAI,CAAC,aAAa;gBAAE,OAAO;YAE3B,MAAM,WAAW,GAAG,IAAI,kBAAkB,EAAE,CAAC;YAE7C,WAAW,CAAC,KAAK,CAAC,QAAQ,GAAG,UAAU,CAAC;YACxC,WAAW,CAAC,KAAK,CAAC,IAAI,GAAG,GAAG,KAAK,CAAC,CAAC,IAAI,CAAC;YACxC,WAAW,CAAC,KAAK,CAAC,GAAG,GAAG,GAAG,KAAK,CAAC,CAAC,IAAI,CAAC;YAEvC,aAAa,CAAC,cAAc,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;YAEjD,IAAI,CAAC,eAAe,EAAE,CAAC,KAAK,CAAC;iBAC1B,KAAK,CAAC,CAAC,CAAC,EAAE;gBACT,IAAI,CAAC,CAAC,IAAI,KAAK,SAAS,CAAC,cAAc;oBAAE,OAAO;gBAChD,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,iCAAiC,CAAC,CAAC;gBAC7D,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YACnB,CAAC,CAAC;iBACD,OAAO,CAAC,GAAG,EAAE;gBACZ,WAAW,CAAC,MAAM,EAAE,CAAC;YACvB,CAAC,CAAC,CAAC;QACP,CAAC;QAED,kBAAkB;YAChB,IAAI,IAAI,CAAC,mBAAmB,IAAI,CAAC,IAAI,CAAC,QAAQ;gBAAE,OAAO;YACvD,IAAI,CAAC,mBAAmB,GAAG,IAAI,kCAAkC,CAAC,IAAI,EAAE;gBACtE,OAAO,EAAE,IAAI,CAAC,QAAQ,CAAC,OAAO;gBAC9B,QAAQ,EAAE,IAAI,CAAC,QAAQ;gBACvB,YAAY,EAAE,IAAI;gBAClB,WAAW,EAAE,IAAI;gBACjB,gBAAgB,EAAE,CAAC,MAAM,EAAE,OAAO,EAAE,EAAE;oBACpC,IAAI,OAAO,CAAC,IAAI,CAAC,IAAI,KAAK,SAAS,EAAE,CAAC;wBACpC,IAAI,CAAC,mBAAmB,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;oBACjD,CAAC;oBACD,4EAA4E;oBAC5E,IAAI,CAAC,eAAe,CAAC,EAAE,IAAI,EAAE,SAAS,EAAE,CAAC,CAAC;gBAC5C,CAAC;gBACD,MAAM,EAAE,CAAC,OAAO,EAAE,KAAK,EAAE,EAAE;oBACzB,IAAI,QAAQ,IAAI,OAAO,CAAC,IAAI,EAAE,CAAC;wBAC7B,MAAM,EAAE,GAAG,OAAO,CAAC,IAAI,CAAC,MAAM,CAC5B,KAAK,EACL,IAAI,CAAC,QAAQ,CAAC,OAAO,EACrB,IAAI,CAAC,QAAQ,CACd,CAAC;wBACF,IAAI,OAAO,CAAC,IAAI,CAAC,IAAI,KAAK,SAAS,EAAE,CAAC;4BACpC,IAAI,CAAC,mBAAmB,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;4BAC/C,IAAI,CAAC,eAAe,CAClB,EAAE,IAAI,EAAE,SAAS,EAAE,EACnB,EAAE,QAAQ,EAAE,CAAC,EAAE,CAAC,EAAE,OAAO,EAAE,KAAK,EAAE,CACnC,CAAC;wBACJ,CAAC;6BAAM,IAAI,OAAO,CAAC,IAAI,CAAC,IAAI,KAAK,MAAM,EAAE,CAAC;4BACxC,IAAI,CAAC,eAAe,CAAC,EAAE,IAAI,EAAE,SAAS,EAAE,CAAC,CAAC;wBAC5C,CAAC;oBACH,CAAC;oBAED,IAAI,OAAO,CAAC,IAAI,CAAC,IAAI,KAAK,QAAQ,EAAE,CAAC;wBACnC,IAAI,CAAC,gBAAgB,EAAE,CAAC,KAAK,CAAC,CAAC;oBACjC,CAAC;gBACH,CAAC;aACF,CAAC,CAAC;QACL,CAAC;QAEQ,MAAM;YACb,MAAM,EAAE,SAAS,EAAE,eAAe,EAAE,OAAO,EAAE,GAC3C,IAAI,CAAC,mBAAmB,EAAE,MAAM,IAAI,EAAE,CAAC;YAEzC,MAAM,cAAc,GAAG,eAAe,EAAE,IAAI,EAAE,IAAI,KAAK,MAAM,CAAC;YAC9D,MAAM,YAAY,GAAG,OAAO,IAAI,CAAC,SAAS,CAAC;YAC3C,OAAO,IAAI,CAAA,gCAAgC,MAAM;;;YAGzC,cAAc;gBACd,CAAC,CAAC,IAAI,CAAA;;+CAE6B,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;;kBAElD,QAAQ,CAAC,IAAI;wBACP;gBACZ,CAAC,CAAC,OAAO;;8BAES,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;yBAC3B,CAAC,CAAa,EAAE,EAAE,CAC7B,IAAI,CAAC,mBAAmB,CAAC,WAAW,CAAC,CAAC,EAAE;gBACtC,OAAO,EAAE,QAAQ,CAAC,IAAI;gBACtB,IAAI,EAAE,QAAQ;aACf,CAAC;0BACU,CAAC,CAAa,EAAE,EAAE,CAC9B,IAAI,CAAC,mBAAmB,CAAC,YAAY,CAAC,CAAC,EAAE;gBACvC,OAAO,EAAE,QAAQ,CAAC,IAAI;gBACtB,IAAI,EAAE,QAAQ;aACf,CAAC;;cAEF,QAAQ,CAAC,IAAI;;uDAE4B,EAAE;cAC3C,sBAAsB,CAAC,eAAe,EAAE,GAAG,CAAC;;;;;UAKhD,MAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,OAAO,CAAC,EAAE;gBAChC,MAAM,iBAAiB,GAAG,eAAe,EAAE,IAAI,EAAE,IAAI,KAAK,MAAM,CAAC;gBACjE,MAAM,WAAW,GAAG,eAAe,EAAE,IAA0B,CAAC;gBAChE,MAAM,cAAc,GAClB,iBAAiB,IAAI,WAAW,EAAE,KAAK,KAAK,OAAO,CAAC,KAAK,CAAC;gBAC5D,MAAM,QAAQ,GAAG,OAAO,IAAI,CAAC,SAAS,CAAC;gBACvC,MAAM,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAC,KAAK,KAAK,OAAO,CAAC,KAAK,CAAC;gBACtD,OAAO,IAAI,CAAA;uDACkC,QAAQ;gBAC/C,cAAc;oBACd,CAAC,CAAC,IAAI,CAAA;mDAC6B,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;;;sBAG9C,OAAO,CAAC,IAAI;4BACN;oBACZ,CAAC,CAAC,OAAO;;kCAES,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;6BAC3B,CAAC,CAAa,EAAE,EAAE;oBAC7B,IAAI,CAAC,mBAAmB,CAAC,WAAW,CAAC,CAAC,EAAE;wBACtC,OAAO,EAAE,OAAO,CAAC,IAAI;wBACrB,IAAI,EAAE,OAAO;wBACb,aAAa,EAAE,GAAG;qBACnB,CAAC,CAAC;gBACL,CAAC;8BACa,CAAC,CAAa,EAAE,EAAE;oBAC9B,IAAI,CAAC,mBAAmB,CAAC,YAAY,CAAC,CAAC,EAAE;wBACvC,OAAO,EAAE,OAAO,CAAC,IAAI;wBACrB,IAAI,EAAE,OAAO;wBACb,aAAa,EAAE,GAAG;qBACnB,CAAC,CAAC;gBACL,CAAC;yBACQ,GAAG,EAAE,CAAC,IAAI,CAAC,mBAAmB,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC;;kBAEtD,OAAO,CAAC,IAAI;;2DAE6B,EAAE;kBAC3C,sBAAsB,CAAC,UAAU,EAAE,GAAG,CAAC;;;WAG9C,CAAC;YACJ,CAAC,CAAC;UACA,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,cAAc,CAAC,OAAO,CAAC,wBAAwB,CAAC;gBAC7D,CAAC,CAAC,IAAI,CAAC,mBAAmB,EAAE;gBAC5B,CAAC,CAAC,OAAO;;2BAEQ,CAAC;QAC1B,CAAC;QAEQ,OAAO,CAAC,iBAA4C;YAC3D,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,UAAU,CAAC;gBAAE,OAAO;YAC/C,IAAI,CAAC,kBAAkB,EAAE,CAAC;QAC5B,CAAC;QAGD,wBAA4B;QAA5B,IAAS,KAAK,2CAAc;QAA5B,IAAS,KAAK,iDAAc;QAG5B,sCAA6D;QAA7D,IAAS,mBAAmB,yDAAiC;QAA7D,IAAS,mBAAmB,+DAAiC;QAG7D,kCAA2D;QAA3D,IAAS,eAAe,qDAAmC;QAA3D,IAAS,eAAe,2DAAmC;QAG3D,sBAA6B;QAA7B,IAAS,GAAG,yCAAiB;QAA7B,IAAS,GAAG,+CAAiB;;;YAjPrB,YAAO,GAAG,QAAQ,CAAC,GAAG,EAAE;gBAC9B,MAAM,EAAE,KAAK,EAAE,GACb,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,cAAc,CAAC,UAAU,CAAC,KAAK,CAAC,OAAO,CAAC;gBAChE,OAAO,KAAK,CAAC;YACf,CAAC,CAAC,CAAC;YAMM,SAAI,GAAG,SAAkB,CAAC;YA8N1B,oFAAmB;YAGnB,qKAAoD;YAGpD,2KAAkD;YAGlD,+IAAoB;;;;YA1SlB,uDAAmB;;;;;SAAnB,mBAAmB","sourcesContent":["import type { MindmapStyle } from '@blocksuite/affine-model';\nimport type { BlockStdScope } from '@blocksuite/block-std';\nimport type { Bound } from '@blocksuite/global/utils';\nimport type { BlockModel } from '@blocksuite/store';\n\nimport { toast } from '@blocksuite/affine-components/toast';\nimport { once } from '@blocksuite/affine-shared/utils';\nimport { modelContext, stdContext } from '@blocksuite/block-std';\nimport { ErrorCode } from '@blocksuite/global/exceptions';\nimport { consume } from '@lit/context';\nimport { computed, SignalWatcher } from '@lit-labs/preact-signals';\nimport { css, html, LitElement, nothing, type TemplateResult } from 'lit';\nimport { customElement, property } from 'lit/decorators.js';\nimport { repeat } from 'lit/directives/repeat.js';\n\nimport type { EdgelessRootBlockComponent } from '../../../index.js';\n\nimport { getTooltipWithShortcut } from '../../utils.js';\nimport { EdgelessDraggableElementController } from '../common/draggable/draggable-element.controller.js';\nimport { EdgelessToolbarToolMixin } from '../mixins/tool.mixin.js';\nimport { getMindMaps, type ToolbarMindmapItem } from './assets.js';\nimport { textRender } from './basket-elements.js';\nimport { importMindMapIcon, textIcon } from './icons.js';\nimport { MindMapPlaceholder } from './mindmap-importing-placeholder.js';\n\ntype TextItem = {\n  type: 'text';\n  icon: TemplateResult;\n  render: typeof textRender;\n};\n\ntype ImportItem = {\n  type: 'import';\n  icon: TemplateResult;\n};\n\nconst textItem: TextItem = { type: 'text', icon: textIcon, render: textRender };\n\n@customElement('edgeless-mindmap-menu')\nexport class EdgelessMindmapMenu extends EdgelessToolbarToolMixin(\n  SignalWatcher(LitElement)\n) {\n  static override styles = css`\n    :host {\n      display: flex;\n      z-index: -1;\n      justify-content: flex-end;\n    }\n    .text-and-mindmap {\n      display: flex;\n      gap: 10px;\n      padding: 8px 0px;\n      box-sizing: border-box;\n    }\n    .thin-divider {\n      width: 1px;\n      transform: scaleX(0.5);\n      height: 48px;\n      background: var(--affine-border-color);\n    }\n    .text-item {\n      width: 60px;\n    }\n    .mindmap-item {\n      width: 64px;\n    }\n\n    .text-item,\n    .mindmap-item {\n      border-radius: 4px;\n      height: 48px;\n      position: relative;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n    }\n    .text-item > button,\n    .mindmap-item > button {\n      position: absolute;\n      border-radius: inherit;\n      border: none;\n      background: none;\n      cursor: grab;\n      padding: 0;\n    }\n    .text-item:hover,\n    .mindmap-item[data-is-active='true'],\n    .mindmap-item:hover {\n      background: var(--affine-hover-color);\n    }\n    .text-item > button.next,\n    .mindmap-item > button.next {\n      transition: transform 0.3s ease-in-out;\n    }\n  `;\n\n  private _style$ = computed(() => {\n    const { style } =\n      this.edgeless.service.editPropsStore.lastProps$.value.mindmap;\n    return style;\n  });\n\n  draggableController!: EdgelessDraggableElementController<\n    ToolbarMindmapItem | TextItem | ImportItem\n  >;\n\n  override type = 'mindmap' as const;\n\n  private get _rootBlock(): EdgelessRootBlockComponent {\n    return this.std.view.getBlock(this.model.id) as EdgelessRootBlockComponent;\n  }\n\n  get mindMaps() {\n    return getMindMaps(this.theme);\n  }\n\n  private _importMindMapEntry() {\n    const { draggingElement } = this.draggableController?.states || {};\n\n    const isBeingDragged = draggingElement?.data.type === 'import';\n\n    let clicked = false;\n\n    return html`<div class=\"mindmap-item\">\n      <button\n        style=\"opacity: ${isBeingDragged ? 0 : 1}\"\n        class=\"next\"\n        @mousedown=${(e: MouseEvent) => {\n          let mouseReleased = false;\n          once(document, 'mouseup', () => {\n            mouseReleased = true;\n          });\n          queueMicrotask(() => {\n            if (clicked || mouseReleased) return;\n            this.draggableController.onMouseDown(e, {\n              preview: importMindMapIcon,\n              data: {\n                type: 'import',\n                icon: importMindMapIcon,\n              },\n              standardWidth: 350,\n            });\n          });\n        }}\n        @touchstart=${(e: TouchEvent) => {\n          this.draggableController.onTouchStart(e, {\n            preview: importMindMapIcon,\n            data: {\n              type: 'import',\n              icon: importMindMapIcon,\n            },\n            standardWidth: 350,\n          });\n        }}\n        @click=${() => {\n          clicked = true;\n          const viewportBound = this._rootBlock.service.viewport.viewportBounds;\n\n          viewportBound.x += viewportBound.w / 2;\n          viewportBound.y += viewportBound.h / 2;\n\n          this._onImportMindMap(viewportBound);\n        }}\n      >\n        ${importMindMapIcon}\n      </button>\n      <affine-tooltip tip-position=\"top\" .offset=${12}>\n        ${getTooltipWithShortcut('Support import of FreeMind,OPML.')}\n      </affine-tooltip>\n    </div>`;\n  }\n\n  private _onImportMindMap(bound: Bound) {\n    const edgelessBlock = this._rootBlock;\n    if (!edgelessBlock) return;\n\n    const placeholder = new MindMapPlaceholder();\n\n    placeholder.style.position = 'absolute';\n    placeholder.style.left = `${bound.x}px`;\n    placeholder.style.top = `${bound.y}px`;\n\n    edgelessBlock.gfxViewportElm.append(placeholder);\n\n    this.onImportMindMap?.(bound)\n      .catch(e => {\n        if (e.code === ErrorCode.UserAbortError) return;\n        toast(this.edgeless.host, 'Import failed, please try again');\n        console.error(e);\n      })\n      .finally(() => {\n        placeholder.remove();\n      });\n  }\n\n  initDragController() {\n    if (this.draggableController || !this.edgeless) return;\n    this.draggableController = new EdgelessDraggableElementController(this, {\n      service: this.edgeless.service,\n      edgeless: this.edgeless,\n      scopeElement: this,\n      clickToDrag: true,\n      onOverlayCreated: (_layer, element) => {\n        if (element.data.type === 'mindmap') {\n          this.onActiveStyleChange?.(element.data.style);\n        }\n        // a workaround to active mindmap, so that menu cannot be closed by `Escape`\n        this.setEdgelessTool({ type: 'mindmap' });\n      },\n      onDrop: (element, bound) => {\n        if ('render' in element.data) {\n          const id = element.data.render(\n            bound,\n            this.edgeless.service,\n            this.edgeless\n          );\n          if (element.data.type === 'mindmap') {\n            this.onActiveStyleChange?.(element.data.style);\n            this.setEdgelessTool(\n              { type: 'default' },\n              { elements: [id], editing: false }\n            );\n          } else if (element.data.type === 'text') {\n            this.setEdgelessTool({ type: 'default' });\n          }\n        }\n\n        if (element.data.type === 'import') {\n          this._onImportMindMap?.(bound);\n        }\n      },\n    });\n  }\n\n  override render() {\n    const { cancelled, draggingElement, dragOut } =\n      this.draggableController?.states || {};\n\n    const isDraggingText = draggingElement?.data?.type === 'text';\n    const showNextText = dragOut && !cancelled;\n    return html`<edgeless-slide-menu .height=${'64px'}>\n      <div class=\"text-and-mindmap\">\n        <div class=\"text-item\">\n          ${isDraggingText\n            ? html`<button\n                class=\"next\"\n                style=\"transform: translateY(${showNextText ? 0 : 64}px)\"\n              >\n                ${textItem.icon}\n              </button>`\n            : nothing}\n          <button\n            style=\"opacity: ${isDraggingText ? 0 : 1}\"\n            @mousedown=${(e: MouseEvent) =>\n              this.draggableController.onMouseDown(e, {\n                preview: textItem.icon,\n                data: textItem,\n              })}\n            @touchstart=${(e: TouchEvent) =>\n              this.draggableController.onTouchStart(e, {\n                preview: textItem.icon,\n                data: textItem,\n              })}\n          >\n            ${textItem.icon}\n          </button>\n          <affine-tooltip tip-position=\"top\" .offset=${12}>\n            ${getTooltipWithShortcut('Edgeless Text', 'T')}\n          </affine-tooltip>\n        </div>\n        <div class=\"thin-divider\"></div>\n        <!-- mind map -->\n        ${repeat(this.mindMaps, mindMap => {\n          const isDraggingMindMap = draggingElement?.data?.type !== 'text';\n          const draggingEle = draggingElement?.data as ToolbarMindmapItem;\n          const isBeingDragged =\n            isDraggingMindMap && draggingEle?.style === mindMap.style;\n          const showNext = dragOut && !cancelled;\n          const isActive = this._style$.value === mindMap.style;\n          return html`\n            <div class=\"mindmap-item\" data-is-active=${isActive}>\n              ${isBeingDragged\n                ? html`<button\n                    style=\"transform: translateY(${showNext ? 0 : 64}px)\"\n                    class=\"next\"\n                  >\n                    ${mindMap.icon}\n                  </button>`\n                : nothing}\n              <button\n                style=\"opacity: ${isBeingDragged ? 0 : 1}\"\n                @mousedown=${(e: MouseEvent) => {\n                  this.draggableController.onMouseDown(e, {\n                    preview: mindMap.icon,\n                    data: mindMap,\n                    standardWidth: 350,\n                  });\n                }}\n                @touchstart=${(e: TouchEvent) => {\n                  this.draggableController.onTouchStart(e, {\n                    preview: mindMap.icon,\n                    data: mindMap,\n                    standardWidth: 350,\n                  });\n                }}\n                @click=${() => this.onActiveStyleChange?.(mindMap.style)}\n              >\n                ${mindMap.icon}\n              </button>\n              <affine-tooltip tip-position=\"top\" .offset=${12}>\n                ${getTooltipWithShortcut('Mind Map', 'M')}\n              </affine-tooltip>\n            </div>\n          `;\n        })}\n        ${this.std.doc.awarenessStore.getFlag('enable_mind_map_import')\n          ? this._importMindMapEntry()\n          : nothing}\n      </div>\n    </edgeless-slide-menu>`;\n  }\n\n  override updated(changedProperties: Map<PropertyKey, unknown>) {\n    if (!changedProperties.has('edgeless')) return;\n    this.initDragController();\n  }\n\n  @consume({ context: modelContext })\n  accessor model!: BlockModel;\n\n  @property({ attribute: false })\n  accessor onActiveStyleChange!: (style: MindmapStyle) => void;\n\n  @property({ attribute: false })\n  accessor onImportMindMap!: (bound: Bound) => Promise<void>;\n\n  @consume({ context: stdContext })\n  accessor std!: BlockStdScope;\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'edgeless-mindmap-menu': EdgelessMindmapMenu;\n  }\n}\n"]}