{"version":3,"file":"types.js","sourceRoot":"","sources":["../../../../../../../src/root-block/edgeless/components/toolbar/common/draggable/types.ts"],"names":[],"mappings":"AAiGA,MAAM,CAAC,MAAM,kBAAkB,GAAG,CAAC,MAAgC,EAAE,EAAE;IACrE,OAAO,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,EAAE,IAAI,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC;AAC5D,CAAC,CAAC","sourcesContent":["import type { DisposableClass } from '@lumensuite/block-std';\nimport type { Bound } from '@lumensuite/global/utils';\nimport type { TemplateResult } from 'lit';\n\nimport type { EdgelessRootBlockComponent } from '../../../../edgeless-root-block.js';\nimport type { EdgelessRootService } from '../../../../edgeless-root-service.js';\n\nexport interface EdgelessDraggableElementHost extends DisposableClass {}\n\nexport interface OverlayLayer {\n  /**\n   * The root element of the overlay,\n   * used to handle clip & prevent pointer events\n   */\n  mask: HTMLElement;\n  /**\n   * The real preview element\n   */\n  element: HTMLElement;\n  /**\n   * The wrapper that contains the preview element,\n   * different from the element, this element has transition effect\n   */\n  transitionWrapper: HTMLElement;\n}\n\nexport interface EdgelessDraggableElementOptions<T> {\n  edgeless: EdgelessRootBlockComponent;\n  service: EdgelessRootService;\n  /**\n   * In which element that the target should be dragged out\n   * If not provided, recognized as the drag-out whenever dragging\n   */\n  scopeElement?: HTMLElement;\n  /**\n   * The width of the element when placed to canvas\n   * @default 100\n   */\n  standardWidth?: number;\n\n  /**\n   * the threshold of mousedown and mouseup duration in ms\n   * if the duration is less than this value, it will be treated as a click\n   * @default 1500\n   */\n  clickThreshold?: number;\n\n  /**\n   * if enabled, when clicked, will trigger drag, press ESC or reclick to cancel\n   */\n  clickToDrag?: boolean;\n  /**\n   * the scale of the element inside {@link EdgelessDraggableElementController.scopeElement}\n   * when {@link EdgelessDraggableElementOptions.clickToDrag} is enabled\n   * @default 1.2\n   */\n  clickToDragScale?: number;\n\n  /**\n   * To verify if the move is valid\n   */\n  isValidMove?: (offset: { x: number; y: number }) => boolean;\n\n  /**\n   * when element is clicked - mouse down and up without moving\n   */\n  onElementClick?: (element: ElementInfo<T>) => void;\n  /**\n   *  when mouse down and moved, create overlay, customize overlay here\n   */\n  onOverlayCreated?: (overlay: OverlayLayer, element: ElementInfo<T>) => void;\n  /**\n   * trigger when enter/leave the scope element\n   */\n  onEnterOrLeaveScope?: (overlay: OverlayLayer, isOutside?: boolean) => void;\n  /**\n   * Drop the element on edgeless canvas\n   */\n  onDrop?: (element: ElementInfo<T>, bound: Bound) => void;\n\n  /**\n   * - ESC pressed\n   * - or not dragged out and released\n   */\n  onCanceled?: (overlay: OverlayLayer, element: ElementInfo<T>) => void;\n}\n\nexport type ElementInfo<T> = {\n  // TODO: maybe make it optional, if not provided, clone event target\n  preview: TemplateResult;\n  data: T;\n  /**\n   * Override the value in {@link EdgelessDraggableElementOptions.standardWidth}\n   */\n  standardWidth?: number;\n};\n\nexport const defaultIsValidMove = (offset: { x: number; y: number }) => {\n  return Math.abs(offset.x) > 50 || Math.abs(offset.y) > 50;\n};\n"]}