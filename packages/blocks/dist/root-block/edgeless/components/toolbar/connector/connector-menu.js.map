{"version":3,"file":"connector-menu.js","sourceRoot":"","sources":["../../../../../../src/root-block/edgeless/components/toolbar/connector/connector-menu.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  ConnectorCWithArrowIcon,\n  ConnectorLWithArrowIcon,\n  ConnectorXWithArrowIcon,\n} from '@blocksuite/affine-components/icons';\nimport {\n  ConnectorMode,\n  DEFAULT_CONNECTOR_COLOR,\n} from '@blocksuite/affine-model';\nimport { ThemeObserver } from '@blocksuite/affine-shared/theme';\nimport { SignalWatcher } from '@blocksuite/block-std';\nimport { computed } from '@lit-labs/preact-signals';\nimport { css, html, LitElement } from 'lit';\nimport { customElement, property } from 'lit/decorators.js';\n\nimport type { EdgelessTool } from '../../../types.js';\nimport type { ColorEvent } from '../../panel/color-panel.js';\nimport type { LineWidthEvent } from '../../panel/line-width-panel.js';\n\nimport '../../panel/one-row-color-panel.js';\nimport '../common/slide-menu.js';\nimport { EdgelessToolbarToolMixin } from '../mixins/tool.mixin.js';\n\nfunction ConnectorModeButtonGroup(\n  mode: ConnectorMode,\n  setConnectorMode: (props: Record<string, unknown>) => void\n) {\n  /**\n   * There is little hacky on rendering tooltip.\n   * We don't want either tooltip overlap the top button or tooltip on left.\n   * So we put the lower button's tooltip as the first element of the button group container\n   */\n  return html`\n    <div class=\"connector-mode-button-group\">\n      <edgeless-tool-icon-button\n        .active=${mode === ConnectorMode.Curve}\n        .activeMode=${'background'}\n        .tooltip=${'Curve'}\n        @click=${() => setConnectorMode({ mode: ConnectorMode.Curve })}\n      >\n        ${ConnectorCWithArrowIcon}\n      </edgeless-tool-icon-button>\n      <edgeless-tool-icon-button\n        .active=${mode === ConnectorMode.Orthogonal}\n        .activeMode=${'background'}\n        .tooltip=${'Elbowed'}\n        @click=${() => setConnectorMode({ mode: ConnectorMode.Orthogonal })}\n      >\n        ${ConnectorXWithArrowIcon}\n      </edgeless-tool-icon-button>\n      <edgeless-tool-icon-button\n        .active=${mode === ConnectorMode.Straight}\n        .activeMode=${'background'}\n        .tooltip=${'Straight'}\n        @click=${() => setConnectorMode({ mode: ConnectorMode.Straight })}\n      >\n        ${ConnectorLWithArrowIcon}\n      </edgeless-tool-icon-button>\n    </div>\n  `;\n}\n\n@customElement('edgeless-connector-menu')\nexport class EdgelessConnectorMenu extends EdgelessToolbarToolMixin(\n  SignalWatcher(LitElement)\n) {\n  static override styles = css`\n    :host {\n      position: absolute;\n      display: flex;\n      z-index: -1;\n    }\n\n    .connector-submenu-content {\n      display: flex;\n      height: 24px;\n      align-items: center;\n      justify-content: center;\n    }\n\n    .connector-mode-button-group {\n      display: flex;\n      justify-content: center;\n      align-items: center;\n      gap: 14px;\n    }\n\n    .connector-mode-button-group > edgeless-tool-icon-button svg {\n      fill: var(--affine-icon-color);\n    }\n\n    .submenu-divider {\n      width: 1px;\n      height: 24px;\n      margin: 0 16px;\n      background-color: var(--affine-border-color);\n      display: inline-block;\n    }\n  `;\n\n  private _props$ = computed(() => {\n    const { mode, stroke, strokeWidth } =\n      this.edgeless.service.editPropsStore.lastProps$.value.connector;\n    return { mode, stroke, strokeWidth };\n  });\n\n  override type: EdgelessTool['type'] = 'connector';\n\n  override render() {\n    const { stroke, strokeWidth, mode } = this._props$.value;\n    const connectorModeButtonGroup = ConnectorModeButtonGroup(\n      mode,\n      this.onChange\n    );\n    const color = ThemeObserver.getColorValue(stroke, DEFAULT_CONNECTOR_COLOR);\n\n    return html`\n      <edgeless-slide-menu>\n        <div class=\"connector-submenu-content\">\n          ${connectorModeButtonGroup}\n          <div class=\"submenu-divider\"></div>\n          <edgeless-line-width-panel\n            .selectedSize=${strokeWidth}\n            @select=${(e: LineWidthEvent) =>\n              this.onChange({ strokeWidth: e.detail })}\n          >\n          </edgeless-line-width-panel>\n          <div class=\"submenu-divider\"></div>\n          <edgeless-one-row-color-panel\n            .value=${color}\n            .hasTransparent=${!this.edgeless.doc.awarenessStore.getFlag(\n              'enable_color_picker'\n            )}\n            @select=${(e: ColorEvent) => this.onChange({ stroke: e.detail })}\n          ></edgeless-one-row-color-panel>\n        </div>\n      </edgeless-slide-menu>\n    `;\n  }\n\n  @property({ attribute: false })\n  accessor onChange!: (props: Record<string, unknown>) => void;\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'edgeless-connector-menu': EdgelessConnectorMenu;\n  }\n}\n"]}