{"version":3,"file":"lasso-dense-menu.js","sourceRoot":"","sources":["../../../../../../src/root-block/edgeless/components/toolbar/lasso/lasso-dense-menu.ts"],"names":[],"mappings":"AAAA,OAAO,EACL,iBAAiB,EACjB,kBAAkB,GACnB,MAAM,qCAAqC,CAAC;AAI7C,OAAO,EAAE,SAAS,EAAE,MAAM,iCAAiC,CAAC;AAE5D,MAAM,CAAC,MAAM,mBAAmB,GAAqB,QAAQ,CAAC,EAAE;IAC9D,qBAAqB;IACrB,mBAAmB;IACnB,kEAAkE;IAClE,wBAAwB;IAExB,MAAM,QAAQ,GAAG,QAAQ,CAAC,KAAK,CAAC,YAAY,CAAC,IAAI,KAAK,OAAO,CAAC;IAE9D,MAAM,YAAY,GAAG,CAAC,IAAe,EAAE,EAAE,CAAC,GAAG,EAAE;QAC7C,QAAQ,CAAC,KAAK,CAAC,eAAe,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC,CAAC;IAC1D,CAAC,CAAC;IAEF,OAAO;QACL,IAAI,EAAE,OAAO;QACb,IAAI,EAAE,UAAU;QAChB,IAAI,EAAE,iBAAiB;QACvB,MAAM,EAAE,YAAY,CAAC,SAAS,CAAC,QAAQ,CAAC;QACxC,UAAU,EAAE,QAAQ;QACpB,OAAO,EAAE;YACP,KAAK,EAAE;gBACL;oBACE,IAAI,EAAE,QAAQ;oBACd,IAAI,EAAE,iBAAiB;oBACvB,IAAI,EAAE,MAAM;oBACZ,MAAM,EAAE,YAAY,CAAC,SAAS,CAAC,QAAQ,CAAC;oBACxC,2DAA2D;iBAC5D;gBACD;oBACE,IAAI,EAAE,QAAQ;oBACd,IAAI,EAAE,kBAAkB;oBACxB,IAAI,EAAE,WAAW;oBACjB,MAAM,EAAE,YAAY,CAAC,SAAS,CAAC,SAAS,CAAC;oBACzC,4DAA4D;iBAC7D;aACF;SACF;KACF,CAAC;AACJ,CAAC,CAAC","sourcesContent":["import {\n  LassoFreeHandIcon,\n  LassoPolygonalIcon,\n} from '@lumensuite/affine-components/icons';\n\nimport type { DenseMenuBuilder } from '../common/type.js';\n\nimport { LassoMode } from '../../../../../_common/types.js';\n\nexport const buildLassoDenseMenu: DenseMenuBuilder = edgeless => {\n  // TODO: active state\n  // const prevMode =\n  //   edgeless.service.editPropsStore.getLastProps('lasso').mode ??\n  //   LassoMode.FreeHand;\n\n  const isActive = edgeless.tools.edgelessTool.type === 'lasso';\n\n  const createSelect = (mode: LassoMode) => () => {\n    edgeless.tools.setEdgelessTool({ type: 'lasso', mode });\n  };\n\n  return {\n    name: 'Lasso',\n    type: 'sub-menu',\n    icon: LassoFreeHandIcon,\n    select: createSelect(LassoMode.FreeHand),\n    isSelected: isActive,\n    options: {\n      items: [\n        {\n          type: 'action',\n          icon: LassoFreeHandIcon,\n          name: 'Free',\n          select: createSelect(LassoMode.FreeHand),\n          // isSelected: isActive && prevMode === LassoMode.FreeHand,\n        },\n        {\n          type: 'action',\n          icon: LassoPolygonalIcon,\n          name: 'Polygonal',\n          select: createSelect(LassoMode.Polygonal),\n          // isSelected: isActive && prevMode === LassoMode.Polygonal,\n        },\n      ],\n    },\n  };\n};\n"]}