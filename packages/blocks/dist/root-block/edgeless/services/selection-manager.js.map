{"version":3,"file":"selection-manager.js","sourceRoot":"","sources":["../../../../src/root-block/edgeless/services/selection-manager.ts"],"names":[],"mappings":"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","sourcesContent":["import type { SurfaceBlockModel } from '@blocksuite/affine-block-surface';\nimport type { CursorSelection, SurfaceSelection } from '@blocksuite/block-std';\n\nimport { MindmapElementModel } from '@blocksuite/affine-block-surface';\nimport { GroupElementModel } from '@blocksuite/affine-model';\nimport {\n  assertType,\n  DisposableGroup,\n  groupBy,\n  Slot,\n} from '@blocksuite/global/utils';\n\nimport type { EdgelessRootService } from '../edgeless-root-service.js';\n\nimport { edgelessElementsBound } from '../utils/bound-utils.js';\n\nexport interface EdgelessSelectionState {\n  /**\n   * The selected elements. Could be blocks or canvas elements\n   */\n  elements: string[];\n\n  /**\n   * Indicate whether the selected element is in editing mode\n   */\n  editing: boolean;\n\n  /**\n   *  Cannot be operated, only box is displayed\n   */\n  inoperable?: boolean;\n}\n\nexport interface CursorSelectionState {\n  x: number;\n  y: number;\n}\n\nexport class EdgelessSelectionManager {\n  private _activeGroup: GroupElementModel | MindmapElementModel | null = null;\n\n  private _cursorSelection: CursorSelection | null = null;\n\n  private _lastSurfaceSelections: SurfaceSelection[] = [];\n\n  private _remoteCursorSelectionMap = new Map<number, CursorSelection>();\n\n  private _remoteSelectedSet = new Set<string>();\n\n  private _remoteSurfaceSelectionsMap = new Map<number, SurfaceSelection[]>();\n\n  private _selectedSet = new Set<string>();\n\n  private _surfaceSelections: SurfaceSelection[] = [];\n\n  disposable: DisposableGroup = new DisposableGroup();\n\n  service!: EdgelessRootService;\n\n  readonly slots = {\n    updated: new Slot<SurfaceSelection[]>(),\n    remoteUpdated: new Slot(),\n\n    cursorUpdated: new Slot<CursorSelection>(),\n    remoteCursorUpdated: new Slot(),\n  };\n\n  surfaceModel!: SurfaceBlockModel;\n\n  get activeGroup() {\n    return this._activeGroup;\n  }\n\n  get cursorSelection() {\n    return this._cursorSelection;\n  }\n\n  get editing() {\n    return this.surfaceSelections.some(sel => sel.editing);\n  }\n\n  get empty() {\n    return this.surfaceSelections.every(sel => sel.elements.length === 0);\n  }\n\n  get firstElement() {\n    return this.selectedElements[0];\n  }\n\n  get inoperable() {\n    return this.surfaceSelections.some(sel => sel.inoperable);\n  }\n\n  get lastSurfaceSelections() {\n    return this._lastSurfaceSelections;\n  }\n\n  get remoteCursorSelectionMap() {\n    return this._remoteCursorSelectionMap;\n  }\n\n  get remoteSelectedSet() {\n    return this._remoteSelectedSet;\n  }\n\n  get remoteSurfaceSelectionsMap() {\n    return this._remoteSurfaceSelectionsMap;\n  }\n\n  get selectedBound() {\n    return edgelessElementsBound(this.selectedElements);\n  }\n\n  get selectedElements() {\n    const elements: BlockSuite.EdgelessModel[] = [];\n\n    this.selectedIds.forEach(id => {\n      const el = this.service.getElementById(id);\n      el && elements.push(el);\n    });\n\n    return elements;\n  }\n\n  get selectedIds() {\n    return [...this._selectedSet];\n  }\n\n  get selectedSet() {\n    return this._selectedSet;\n  }\n\n  get stdSelectionManager() {\n    return this.service.std.selection;\n  }\n\n  get surfaceSelections() {\n    return this._surfaceSelections;\n  }\n\n  constructor(service: EdgelessRootService) {\n    this.service = service;\n    this.surfaceModel = service.surface;\n    this.mount();\n  }\n\n  clear() {\n    this.stdSelectionManager.clear();\n\n    this.set({\n      elements: [],\n      editing: false,\n    });\n  }\n\n  clearLast() {\n    this._lastSurfaceSelections = [];\n  }\n\n  dispose() {\n    this.disposable.dispose();\n  }\n\n  equals(selection: SurfaceSelection[]) {\n    let count = 0;\n    let editing = false;\n    const exist = selection.every(sel => {\n      const exist = sel.elements.every(id => this._selectedSet.has(id));\n\n      if (exist) {\n        count += sel.elements.length;\n      }\n\n      if (sel.editing) editing = true;\n\n      return exist;\n    });\n\n    return (\n      exist && count === this._selectedSet.size && editing === this.editing\n    );\n  }\n\n  /**\n   * check if the element is selected in local\n   * @param element\n   */\n  has(element: string) {\n    return this._selectedSet.has(element);\n  }\n\n  /**\n   * check if element is selected by remote peers\n   * @param element\n   */\n  hasRemote(element: string) {\n    return this._remoteSelectedSet.has(element);\n  }\n\n  isEmpty(selections: SurfaceSelection[]) {\n    return selections.every(sel => sel.elements.length === 0);\n  }\n\n  isInSelectedRect(viewX: number, viewY: number) {\n    const selected = this.selectedElements;\n    if (!selected.length) return false;\n\n    const commonBound = edgelessElementsBound(selected);\n\n    const [modelX, modelY] = this.service.viewport.toModelCoord(viewX, viewY);\n    if (commonBound && commonBound.isPointInBound([modelX, modelY])) {\n      return true;\n    }\n    return false;\n  }\n\n  mount() {\n    this.disposable.add(\n      this.stdSelectionManager.slots.changed.on(selections => {\n        const { cursor = [], surface = [] } = groupBy(selections, sel => {\n          if (sel.is('surface')) {\n            return 'surface';\n          } else if (sel.is('cursor')) {\n            return 'cursor';\n          }\n\n          return 'none';\n        });\n\n        assertType<CursorSelection[]>(cursor);\n        assertType<SurfaceSelection[]>(surface);\n\n        if (cursor[0] && !this.cursorSelection?.equals(cursor[0])) {\n          this._cursorSelection = cursor[0];\n          this.slots.cursorUpdated.emit(cursor[0]);\n        }\n\n        if ((surface.length === 0 && this.empty) || this.equals(surface)) {\n          return;\n        }\n\n        this._lastSurfaceSelections = this.surfaceSelections;\n        this._surfaceSelections = surface;\n        this._selectedSet = new Set<string>();\n\n        surface.forEach(sel =>\n          sel.elements.forEach(id => {\n            this._selectedSet.add(id);\n          })\n        );\n\n        this.slots.updated.emit(this.surfaceSelections);\n      })\n    );\n\n    this.disposable.add(\n      this.stdSelectionManager.slots.remoteChanged.on(states => {\n        const surfaceMap = new Map<number, SurfaceSelection[]>();\n        const cursorMap = new Map<number, CursorSelection>();\n        const selectedSet = new Set<string>();\n\n        states.forEach((selections, id) => {\n          let hasTextSelection = false;\n          let hasBlockSelection = false;\n\n          selections.forEach(selection => {\n            if (selection.is('text')) {\n              hasTextSelection = true;\n            }\n\n            if (selection.is('block')) {\n              hasBlockSelection = true;\n            }\n\n            if (selection.is('surface')) {\n              const surfaceSelections = surfaceMap.get(id) ?? [];\n              surfaceSelections.push(selection);\n              surfaceMap.set(id, surfaceSelections);\n\n              selection.elements.forEach(id => selectedSet.add(id));\n            }\n\n            if (selection.is('cursor')) {\n              cursorMap.set(id, selection);\n            }\n          });\n\n          if (hasBlockSelection || hasTextSelection) {\n            surfaceMap.delete(id);\n          }\n\n          if (hasTextSelection) {\n            cursorMap.delete(id);\n          }\n        });\n\n        this._remoteCursorSelectionMap = cursorMap;\n        this._remoteSurfaceSelectionsMap = surfaceMap;\n        this._remoteSelectedSet = selectedSet;\n\n        this.slots.remoteUpdated.emit();\n        this.slots.remoteCursorUpdated.emit();\n      })\n    );\n  }\n\n  set(selection: EdgelessSelectionState | SurfaceSelection[]) {\n    if (Array.isArray(selection)) {\n      this.stdSelectionManager.setGroup(\n        'gfx',\n        this.cursorSelection ? [...selection, this.cursorSelection] : selection\n      );\n      return;\n    }\n\n    const { blocks = [], elements = [] } = groupBy(selection.elements, id => {\n      return this.service.doc.getBlockById(id) ? 'blocks' : 'elements';\n    });\n    let instances: (SurfaceSelection | CursorSelection)[] = [];\n\n    if (elements.length > 0) {\n      instances.push(\n        this.stdSelectionManager.create(\n          'surface',\n          this.surfaceModel.id,\n          elements,\n          selection.editing,\n          selection.inoperable\n        )\n      );\n    }\n\n    if (blocks.length > 0) {\n      instances = instances.concat(\n        blocks.map(blockId =>\n          this.stdSelectionManager.create(\n            'surface',\n            blockId,\n            [blockId],\n            selection.editing,\n            selection.inoperable\n          )\n        )\n      );\n    }\n\n    this.stdSelectionManager.setGroup(\n      'gfx',\n      this.cursorSelection\n        ? instances.concat([this.cursorSelection])\n        : instances\n    );\n\n    if (instances.length > 0) {\n      this.stdSelectionManager.setGroup('note', []);\n    }\n\n    if (\n      selection.elements.length === 1 &&\n      (this.firstElement instanceof GroupElementModel ||\n        this.firstElement instanceof MindmapElementModel)\n    ) {\n      this._activeGroup = this.firstElement;\n    } else {\n      if (\n        this.selectedElements.some(ele => ele.group !== this._activeGroup) ||\n        this.selectedElements.length === 0\n      ) {\n        this._activeGroup = null;\n      }\n    }\n  }\n\n  setCursor(cursor: CursorSelection | CursorSelectionState) {\n    const instance = this.stdSelectionManager.create(\n      'cursor',\n      cursor.x,\n      cursor.y\n    );\n\n    this.stdSelectionManager.setGroup('gfx', [\n      ...this.surfaceSelections,\n      instance,\n    ]);\n  }\n}\n"]}