{"version":3,"file":"template.js","sourceRoot":"","sources":["../../../../src/root-block/edgeless/services/template.ts"],"names":[],"mappings":"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","sourcesContent":["import type {\n  SurfaceBlockModel,\n  SurfaceBlockTransformer,\n} from '@blocksuite/affine-block-surface';\nimport type { ConnectorElementModel } from '@blocksuite/affine-model';\n\nimport {\n  assertExists,\n  assertType,\n  Bound,\n  getCommonBound,\n  Slot,\n} from '@blocksuite/global/utils';\nimport {\n  type BlockModel,\n  type BlockSnapshot,\n  type DocSnapshot,\n  DocSnapshotSchema,\n  Job,\n  type SnapshotReturn,\n  type Y,\n} from '@blocksuite/store';\n\n/**\n * Those block contains other block's id\n * should defer the loading\n */\nconst DEFERED_BLOCK = ['affine:surface', 'affine:surface-ref'] as const;\n\n/**\n * Those block should not be inserted directly\n * it should be merged with current existing block\n */\nconst MERGE_BLOCK = ['affine:surface', 'affine:page'] as const;\n\ntype MergeBlockFlavour = (typeof MERGE_BLOCK)[number];\n\n/**\n * Template type will affect the inserting behaviour\n */\nconst TEMPLATE_TYPES = ['template', 'sticker'] as const;\n\ntype TemplateType = (typeof TEMPLATE_TYPES)[number];\n\nexport type SlotBlockPayload = {\n  type: 'block';\n  data: {\n    blockJson: BlockSnapshot;\n    parent?: string;\n    index?: number;\n  };\n};\n\nexport type SlotPayload =\n  | SlotBlockPayload\n  | {\n      type: 'template';\n      template: DocSnapshot;\n      bound: Bound | null;\n    };\n\nexport type TemplateJobConfig = {\n  model: SurfaceBlockModel;\n  type: string;\n  middlewares: ((job: TemplateJob) => void)[];\n};\n\nexport class TemplateJob {\n  static middlewares: ((job: TemplateJob) => void)[] = [];\n\n  private _template: DocSnapshot | null = null;\n\n  job: Job;\n\n  model: SurfaceBlockModel;\n\n  slots = {\n    beforeInsert: new Slot<\n      | SlotBlockPayload\n      | {\n          type: 'template';\n          template: DocSnapshot;\n          bound: Bound | null;\n        }\n    >(),\n  };\n\n  type: TemplateType;\n\n  constructor({ model, type, middlewares }: TemplateJobConfig) {\n    this.job = new Job({ collection: model.doc.collection, middlewares: [] });\n    this.model = model;\n    this.type = TEMPLATE_TYPES.includes(type as TemplateType)\n      ? (type as TemplateType)\n      : 'template';\n\n    middlewares.forEach(middleware => middleware(this));\n    TemplateJob.middlewares.forEach(middleware => middleware(this));\n  }\n\n  static create(options: {\n    model: SurfaceBlockModel;\n    type: string;\n    middlewares: ((job: TemplateJob) => void)[];\n  }) {\n    return new TemplateJob(options);\n  }\n\n  private _getMergeBlockId(modelData: BlockSnapshot) {\n    switch (modelData.flavour as MergeBlockFlavour) {\n      case 'affine:page':\n        return this.model.doc.root!.id;\n      case 'affine:surface':\n        return this.model.id;\n    }\n  }\n\n  private _getTemplateBound() {\n    const bounds: Bound[] = [];\n\n    this.walk(block => {\n      if (block.props.xywh) {\n        bounds.push(Bound.deserialize(block.props['xywh'] as string));\n      }\n\n      if (block.flavour === 'affine:surface') {\n        const ignoreType = ['connector', 'group'];\n\n        Object.entries(\n          block.props.elements as Record<string, Record<string, unknown>>\n        ).forEach(([_, val]) => {\n          const type = val['type'] as string;\n\n          if (val['xywh'] && !ignoreType.includes(type)) {\n            bounds.push(Bound.deserialize(val['xywh'] as string));\n          }\n\n          if (type === 'connector') {\n            (['target', 'source'] as const).forEach(prop => {\n              const propVal = val[prop];\n              assertType<ConnectorElementModel['source']>(propVal);\n\n              if (propVal['id'] || !propVal['position']) return;\n\n              const pos = propVal['position'];\n\n              if (pos) {\n                bounds.push(new Bound(pos[0], pos[1], 0, 0));\n              }\n            });\n          }\n        });\n      }\n    });\n\n    return getCommonBound(bounds);\n  }\n\n  private _insertToDoc(\n    modelDataList: {\n      flavour: string;\n      json: BlockSnapshot;\n      modelData: SnapshotReturn<object> | null;\n      parent?: string;\n      index?: number;\n    }[]\n  ) {\n    const doc = this.model.doc;\n    const mergeIdMapping = new Map<string, string>();\n    const deferInserting: typeof modelDataList = [];\n\n    const insert = (\n      data: (typeof modelDataList)[number],\n      defered: boolean = true\n    ) => {\n      const { flavour, json, modelData, parent, index } = data;\n      const isMergeBlock = MERGE_BLOCK.includes(flavour as MergeBlockFlavour);\n\n      if (isMergeBlock) {\n        mergeIdMapping.set(json.id, this._getMergeBlockId(json));\n      }\n\n      if (\n        defered &&\n        DEFERED_BLOCK.includes(flavour as (typeof DEFERED_BLOCK)[number])\n      ) {\n        deferInserting.push(data);\n        return;\n      } else {\n        if (isMergeBlock) {\n          this._mergeProps(\n            json,\n            this.model.doc.getBlockById(\n              this._getMergeBlockId(json)\n            ) as BlockModel\n          );\n          return;\n        }\n\n        assertExists(modelData);\n\n        doc.addBlock(\n          modelData.flavour as BlockSuite.Flavour,\n          {\n            ...modelData.props,\n            id: modelData.id,\n          },\n          parent ? (mergeIdMapping.get(parent) ?? parent) : undefined,\n          index\n        );\n      }\n    };\n\n    modelDataList.forEach(data => insert(data));\n    deferInserting.forEach(data => insert(data, false));\n  }\n\n  private async _jsonToModelData(json: BlockSnapshot) {\n    const job = this.job;\n    const defered: {\n      snapshot: BlockSnapshot;\n      parent?: string;\n      index?: number;\n    }[] = [];\n    const modelDataList: {\n      flavour: string;\n      json: BlockSnapshot;\n      modelData: SnapshotReturn<object> | null;\n      parent?: string;\n      index?: number;\n    }[] = [];\n    const toModel = async (\n      snapshot: BlockSnapshot,\n      parent?: string,\n      index?: number,\n      defer: boolean = true\n    ) => {\n      if (\n        defer &&\n        DEFERED_BLOCK.includes(\n          snapshot.flavour as (typeof DEFERED_BLOCK)[number]\n        )\n      ) {\n        defered.push({\n          snapshot,\n          parent,\n          index,\n        });\n        return;\n      }\n\n      const slotData = {\n        blockJson: snapshot,\n        parent,\n        index,\n      };\n\n      this.slots.beforeInsert.emit({ type: 'block', data: slotData });\n\n      /**\n       * merge block should not be converted to model data\n       */\n      const modelData = MERGE_BLOCK.includes(\n        snapshot.flavour as MergeBlockFlavour\n      )\n        ? null\n        : ((await job.snapshotToModelData(snapshot)) ?? null);\n\n      modelDataList.push({\n        flavour: snapshot.flavour,\n        json: snapshot,\n        modelData,\n        parent,\n        index,\n      });\n\n      if (snapshot.children) {\n        let index = 0;\n        for (const child of snapshot.children) {\n          await toModel(child, snapshot.id, index);\n          ++index;\n        }\n      }\n    };\n\n    await toModel(json);\n\n    for (const json of defered) {\n      await toModel(json.snapshot, json.parent, json.index, false);\n    }\n\n    return modelDataList;\n  }\n\n  private _mergeProps(from: BlockSnapshot, to: BlockModel) {\n    switch (from.flavour as MergeBlockFlavour) {\n      case 'affine:page':\n        break;\n      case 'affine:surface':\n        this._mergeSurfaceElements(\n          from.props.elements as Record<string, Record<string, unknown>>,\n          (to as SurfaceBlockModel).elements.getValue()!\n        );\n        break;\n    }\n  }\n\n  private _mergeSurfaceElements(\n    from: Record<string, Record<string, unknown>>,\n    to: Y.Map<Y.Map<unknown>>\n  ) {\n    const schema =\n      this.model.doc.collection.schema.flavourSchemaMap.get('affine:surface');\n    const surfaceTransformer =\n      schema?.transformer?.() as SurfaceBlockTransformer;\n\n    this.model.doc.transact(() => {\n      const defered: [string, Record<string, unknown>][] = [];\n\n      Object.entries(from).forEach(([id, val]) => {\n        if (['connector', 'group'].includes(val.type as string)) {\n          defered.push([id, val]);\n        } else {\n          to.set(id, surfaceTransformer.elementFromJSON(val));\n        }\n      });\n\n      defered.forEach(([key, val]) => {\n        to.set(key, surfaceTransformer.elementFromJSON(val));\n      });\n    });\n  }\n\n  async insertTemplate(template: unknown) {\n    DocSnapshotSchema.parse(template);\n\n    assertType<DocSnapshot>(template);\n\n    this._template = template;\n\n    const templateBound = this._getTemplateBound();\n\n    this.slots.beforeInsert.emit({\n      type: 'template',\n      template: template,\n      bound: templateBound,\n    });\n\n    const modelDataList = await this._jsonToModelData(template.blocks);\n\n    this._insertToDoc(modelDataList);\n\n    return templateBound;\n  }\n\n  walk(callback: (block: BlockSnapshot, template: DocSnapshot) => void) {\n    if (!this._template) {\n      throw new Error('Template not loaded, please call insertTemplate first');\n    }\n\n    const iterate = (block: BlockSnapshot, template: DocSnapshot) => {\n      callback(block, template);\n\n      if (block.children) {\n        block.children.forEach(child => iterate(child, template));\n      }\n    };\n\n    iterate(this._template.blocks, this._template);\n  }\n}\n"]}