{"version":3,"file":"template-middlewares.js","sourceRoot":"","sources":["../../../../src/root-block/edgeless/services/template-middlewares.ts"],"names":[],"mappings":"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","sourcesContent":["import type { ConnectorElementModel } from '@lumensuite/affine-model';\nimport type { BlockSnapshot, SnapshotReturn } from '@lumensuite/store';\n\nimport { CommonUtils, sortIndex } from '@lumensuite/affine-block-surface';\nimport { assertExists, assertType, Bound } from '@lumensuite/global/utils';\n\nimport type { SlotBlockPayload, TemplateJob } from './template.js';\n\nexport const replaceIdMiddleware = (job: TemplateJob) => {\n  const regeneratedIdMap = new Map<string, string>();\n\n  job.slots.beforeInsert.on(payload => {\n    switch (payload.type) {\n      case 'block':\n        regenerateBlockId(payload.data);\n        break;\n    }\n  });\n\n  const regenerateBlockId = (data: SlotBlockPayload['data']) => {\n    const { blockJson } = data;\n    const newId = regeneratedIdMap.has(blockJson.id)\n      ? regeneratedIdMap.get(blockJson.id)!\n      : job.model.doc.collection.idGenerator();\n\n    if (!regeneratedIdMap.has(blockJson.id)) {\n      regeneratedIdMap.set(blockJson.id, newId);\n    }\n\n    blockJson.id = newId;\n\n    data.parent = data.parent\n      ? (regeneratedIdMap.get(data.parent) ?? data.parent)\n      : undefined;\n\n    if (blockJson.flavour === 'affine:surface-ref') {\n      assertType<\n        SnapshotReturn<{\n          reference: string;\n        }>\n      >(blockJson);\n\n      blockJson.props['reference'] =\n        regeneratedIdMap.get(blockJson.props['reference']) ?? '';\n    }\n\n    if (blockJson.flavour === 'affine:surface') {\n      const elements: Record<string, Record<string, unknown>> = {};\n      const defered: string[] = [];\n\n      Object.entries(\n        blockJson.props.elements as Record<string, Record<string, unknown>>\n      ).forEach(([id, val]) => {\n        const newId = CommonUtils.generateElementId();\n\n        regeneratedIdMap.set(id, newId);\n        val.id = newId;\n        elements[newId] = val;\n\n        if (['connector', 'group'].includes(val['type'] as string)) {\n          defered.push(newId);\n        }\n      });\n\n      blockJson.children.forEach(block => {\n        regeneratedIdMap.set(block.id, job.model.doc.collection.idGenerator());\n      });\n\n      defered.forEach(id => {\n        const element = elements[id]!;\n\n        switch (element['type'] as string) {\n          case 'group':\n            {\n              const children = element['children'] as {\n                json: Record<string, boolean>;\n              };\n              const newChildrenJson: Record<string, boolean> = {};\n\n              Object.entries(children.json).forEach(([key, val]) => {\n                newChildrenJson[regeneratedIdMap.get(key) ?? key] = val;\n              });\n\n              children.json = newChildrenJson;\n            }\n\n            break;\n          case 'connector':\n            {\n              const target = element['target'] as { id?: string };\n\n              if (target.id) {\n                element['target'] = {\n                  ...target,\n                  id: regeneratedIdMap.get(target.id),\n                };\n              }\n\n              const source = element['source'] as { id?: string };\n\n              if (source.id) {\n                element['source'] = {\n                  ...source,\n                  id: regeneratedIdMap.get(source.id),\n                };\n              }\n            }\n            break;\n        }\n      });\n\n      blockJson.props.elements = elements;\n    }\n  };\n};\n\nexport const createInsertPlaceMiddleware = (targetPlace: Bound) => {\n  return (job: TemplateJob) => {\n    if (job.type !== 'template') return;\n\n    let templateBound: Bound | null = null;\n    let offset: {\n      x: number;\n      y: number;\n    };\n\n    job.slots.beforeInsert.on(blockData => {\n      if (blockData.type === 'template') {\n        templateBound = blockData.bound;\n\n        if (templateBound) {\n          offset = {\n            x: targetPlace.x - templateBound.x,\n            y: targetPlace.y - templateBound.y,\n          };\n\n          templateBound.x = targetPlace.x;\n          templateBound.y = targetPlace.y;\n        }\n      } else {\n        if (templateBound && offset) changePosition(blockData.data.blockJson);\n      }\n    });\n\n    const ignoreType = ['group', 'connector'];\n    const changePosition = (blockJson: BlockSnapshot) => {\n      assertExists(templateBound);\n\n      if (blockJson.props.xywh) {\n        const bound = Bound.deserialize(blockJson.props['xywh'] as string);\n\n        blockJson.props['xywh'] = new Bound(\n          bound.x + offset.x,\n          bound.y + offset.y,\n          bound.w,\n          bound.h\n        ).serialize();\n      }\n\n      if (blockJson.flavour === 'affine:surface') {\n        Object.entries(\n          blockJson.props.elements as Record<string, Record<string, unknown>>\n        ).forEach(([_, val]) => {\n          const type = val['type'] as string;\n\n          if (ignoreType.includes(type) && val['xywh']) {\n            delete val['xywh'];\n          }\n\n          if (val['xywh']) {\n            const bound = Bound.deserialize(val['xywh'] as string);\n\n            val['xywh'] = new Bound(\n              bound.x + offset.x,\n              bound.y + offset.y,\n              bound.w,\n              bound.h\n            ).serialize();\n          }\n\n          if (type === 'connector') {\n            (['target', 'source'] as const).forEach(prop => {\n              const propVal = val[prop];\n              assertType<ConnectorElementModel['target']>(propVal);\n\n              if (propVal['id'] || !propVal['position']) return;\n              const pos = propVal['position'];\n\n              propVal['position'] = [pos[0] + offset.x, pos[1] + offset.y];\n            });\n          }\n        });\n      }\n    };\n  };\n};\n\nexport const createStickerMiddleware = (\n  center: {\n    x: number;\n    y: number;\n  },\n  getIndex: () => string\n) => {\n  return (job: TemplateJob) => {\n    job.slots.beforeInsert.on(blockData => {\n      if (blockData.type === 'block') {\n        changeInserPosition(blockData.data.blockJson);\n      }\n    });\n\n    const changeInserPosition = (blockJson: BlockSnapshot) => {\n      if (blockJson.flavour === 'affine:image' && blockJson.props.xywh) {\n        const bound = Bound.deserialize(blockJson.props['xywh'] as string);\n\n        blockJson.props['xywh'] = new Bound(\n          center.x - bound.w / 2,\n          center.y - bound.h / 2,\n          bound.w,\n          bound.h\n        ).serialize();\n\n        blockJson.props.index = getIndex();\n      }\n    };\n  };\n};\n\nexport const createRegenerateIndexMiddleware = (\n  generateIndex: (type: string) => string\n) => {\n  return (job: TemplateJob) => {\n    job.slots.beforeInsert.on(blockData => {\n      if (blockData.type === 'template') {\n        generateIndexMap();\n      }\n\n      if (blockData.type === 'block') {\n        resetIndex(blockData.data.blockJson);\n      }\n    });\n\n    const indexMap = new Map<string, string>();\n\n    const generateIndexMap = () => {\n      const indexList: {\n        id: string;\n        index: string;\n        flavour: string;\n        element?: boolean;\n      }[] = [];\n      const frameList: {\n        id: string;\n        index: string;\n      }[] = [];\n      const groupIndexMap = new Map<\n        string,\n        {\n          index: string;\n          id: string;\n        }\n      >();\n\n      job.walk(block => {\n        if (block.props.index) {\n          if (block.flavour === 'affine:frame') {\n            frameList.push({\n              id: block.id,\n              index: block.props.index as string,\n            });\n          } else {\n            indexList.push({\n              id: block.id,\n              index: block.props.index as string,\n              flavour: block.flavour,\n            });\n          }\n        }\n\n        if (block.flavour === 'affine:surface') {\n          Object.entries(\n            block.props.elements as Record<string, Record<string, unknown>>\n          ).forEach(([_, element]) => {\n            indexList.push({\n              index: element['index'] as string,\n              flavour: element['type'] as string,\n              id: element['id'] as string,\n              element: true,\n            });\n\n            if (element['type'] === 'group') {\n              const children = element['children'] as {\n                json: Record<string, boolean>;\n              };\n              const groupIndex = {\n                index: element['index'] as string,\n                id: element['id'] as string,\n              };\n\n              Object.keys(children.json).forEach(key => {\n                groupIndexMap.set(key, groupIndex);\n              });\n            }\n          });\n        }\n      });\n\n      indexList.sort((a, b) => sortIndex(a, b, groupIndexMap));\n      frameList.sort((a, b) => sortIndex(a, b, groupIndexMap));\n\n      frameList.forEach(index => {\n        indexMap.set(index.id, generateIndex('affine:frame'));\n      });\n\n      indexList.forEach(index => {\n        indexMap.set(index.id, generateIndex(index.flavour));\n      });\n    };\n    const resetIndex = (blockJson: BlockSnapshot) => {\n      if (blockJson.props.index) {\n        blockJson.props.index =\n          indexMap.get(blockJson.id) ?? blockJson.props.index;\n      }\n\n      if (blockJson.flavour === 'affine:surface') {\n        Object.entries(\n          blockJson.props.elements as Record<string, Record<string, unknown>>\n        ).forEach(([_, element]) => {\n          if (element['index']) {\n            element['index'] = indexMap.get(element['id'] as string);\n          }\n        });\n      }\n    };\n  };\n};\n"]}