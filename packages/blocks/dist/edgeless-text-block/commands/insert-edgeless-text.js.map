{"version":3,"file":"insert-edgeless-text.js","sourceRoot":"","sources":["../../../src/edgeless-text-block/commands/insert-edgeless-text.ts"],"names":[],"mappings":"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","sourcesContent":["import type { Command } from '@lumensuite/block-std';\n\nimport { focusTextModel } from '@lumensuite/affine-components/rich-text';\nimport { Bound } from '@lumensuite/global/utils';\n\nimport { EdgelessRootService } from '../../root-block/edgeless/edgeless-root-service.js';\nimport { getSurfaceBlock } from '../../surface-ref-block/utils.js';\nimport {\n  EDGELESS_TEXT_BLOCK_MIN_HEIGHT,\n  EDGELESS_TEXT_BLOCK_MIN_WIDTH,\n} from '../edgeless-text-block.js';\n\nexport const insertEdgelessTextCommand: Command<\n  never,\n  'textId',\n  {\n    x: number;\n    y: number;\n  }\n> = (ctx, next) => {\n  const { std, x, y } = ctx;\n  const host = std.host;\n  const doc = host.doc;\n  const edgelessService = std.getService('affine:page');\n  const surface = getSurfaceBlock(doc);\n  if (!(edgelessService instanceof EdgelessRootService) || !surface) {\n    next();\n    return;\n  }\n\n  const zoom = edgelessService.zoom;\n  const textId = edgelessService.addBlock(\n    'affine:edgeless-text',\n    {\n      xywh: new Bound(\n        x - (EDGELESS_TEXT_BLOCK_MIN_WIDTH * zoom) / 2,\n        y - (EDGELESS_TEXT_BLOCK_MIN_HEIGHT * zoom) / 2,\n        EDGELESS_TEXT_BLOCK_MIN_WIDTH * zoom,\n        EDGELESS_TEXT_BLOCK_MIN_HEIGHT * zoom\n      ).serialize(),\n    },\n    surface.id\n  );\n\n  const blockId = doc.addBlock('affine:paragraph', { type: 'text' }, textId);\n  host.updateComplete\n    .then(() => {\n      edgelessService.selection.set({\n        elements: [textId],\n        editing: true,\n      });\n      focusTextModel(std, blockId);\n      host.updateComplete\n        .then(() => {\n          const edgelessText = host.view.getBlock(textId);\n          const paragraph = host.view.getBlock(blockId);\n          if (!edgelessText || !paragraph) return;\n\n          const abortController = new AbortController();\n          edgelessText.addEventListener(\n            'focusout',\n            e => {\n              if (\n                !paragraph.model.text ||\n                (paragraph.model.text.length === 0 && e.relatedTarget !== null)\n              ) {\n                doc.deleteBlock(edgelessText.model);\n              }\n            },\n            {\n              once: true,\n              signal: abortController.signal,\n            }\n          );\n          paragraph.model.deleted.once(() => {\n            abortController.abort();\n          });\n        })\n        .catch(console.error);\n    })\n    .catch(console.error);\n\n  next({ textId });\n};\n\ndeclare global {\n  namespace LumenSuite {\n    interface CommandContext {\n      textId?: string;\n    }\n\n    interface Commands {\n      insertEdgelessText: typeof insertEdgelessTextCommand;\n    }\n  }\n}\n"]}