{"version":3,"file":"embed.js","sourceRoot":"","sources":["../../src/attachment-block/embed.ts"],"names":[],"mappings":"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","sourcesContent":["import type {\n  AttachmentBlockModel,\n  ImageBlockProps,\n} from '@blocksuite/affine-model';\n\nimport { withTempBlobData } from '@blocksuite/affine-shared/utils';\nimport { html, type TemplateResult } from 'lit';\n\nimport { transformModel } from '../root-block/utils/operations/model.js';\n\ntype EmbedConfig = {\n  name: string;\n  /**\n   * Check if the attachment can be turned into embed view.\n   */\n  check: (model: AttachmentBlockModel, maxFileSize: number) => boolean;\n  /**\n   * The action will be executed when the 「Turn into embed view」 button is clicked.\n   */\n  action?: (model: AttachmentBlockModel) => Promise<void> | void;\n  /**\n   * The template will be used to render the embed view.\n   */\n  template?: (\n    model: AttachmentBlockModel,\n    blobUrl: string\n  ) => TemplateResult<1>;\n};\n\n// 10MB\nconst MAX_EMBED_SIZE = 10 * 1024 * 1024;\n\nconst embedConfig: EmbedConfig[] = [\n  {\n    name: 'image',\n    check: model =>\n      model.doc.schema.flavourSchemaMap.has('affine:image') &&\n      model.type.startsWith('image/'),\n    action: model => turnIntoImageBlock(model),\n  },\n  {\n    name: 'pdf',\n    check: (model, maxFileSize) =>\n      model.type === 'application/pdf' && model.size <= maxFileSize,\n    template: (_, blobUrl) => {\n      // More options: https://tinytip.co/tips/html-pdf-params/\n      // https://chromium.googlesource.com/chromium/src/+/refs/tags/121.0.6153.1/chrome/browser/resources/pdf/open_pdf_params_parser.ts\n      const parameters = '#toolbar=0';\n      return html`<iframe\n        style=\"width: 100%; color-scheme: auto;\"\n        height=\"480\"\n        src=${blobUrl + parameters}\n        loading=\"lazy\"\n        scrolling=\"no\"\n        frameborder=\"no\"\n        allowTransparency\n        allowfullscreen\n        type=\"application/pdf\"\n      ></iframe>`;\n    },\n  },\n  {\n    name: 'video',\n    check: (model, maxFileSize) =>\n      model.type.startsWith('video/') && model.size <= maxFileSize,\n    template: (_, blobUrl) =>\n      html`<video width=\"100%;\" height=\"480\" controls src=${blobUrl}></video>`,\n  },\n  {\n    name: 'audio',\n    check: (model, maxFileSize) =>\n      model.type.startsWith('audio/') && model.size <= maxFileSize,\n    template: (_, blobUrl) =>\n      html`<audio controls src=${blobUrl} style=\"margin: 4px;\"></audio>`,\n  },\n];\n\nexport function allowEmbed(\n  model: AttachmentBlockModel,\n  maxFileSize: number = MAX_EMBED_SIZE\n) {\n  return embedConfig.some(config => config.check(model, maxFileSize));\n}\n\nexport function convertToEmbed(\n  model: AttachmentBlockModel,\n  maxFileSize: number = MAX_EMBED_SIZE\n) {\n  const config = embedConfig.find(config => config.check(model, maxFileSize));\n  if (!config || !config.action) {\n    model.doc.updateBlock<Partial<AttachmentBlockModel>>(model, {\n      embed: true,\n    });\n    return;\n  }\n  config.action(model)?.catch(console.error);\n}\n\nexport function renderEmbedView(\n  model: AttachmentBlockModel,\n  blobUrl: string,\n  maxFileSize: number = MAX_EMBED_SIZE\n) {\n  const config = embedConfig.find(config => config.check(model, maxFileSize));\n  if (!config || !config.template) {\n    console.error('No embed view template found!', model, embedConfig);\n    return null;\n  }\n  return config.template(model, blobUrl);\n}\n\n/**\n * Turn the attachment block into an image block.\n */\nexport function turnIntoImageBlock(model: AttachmentBlockModel) {\n  if (!model.doc.schema.flavourSchemaMap.has('affine:image')) {\n    console.error('The image flavour is not supported!');\n    return;\n  }\n\n  const sourceId = model.sourceId;\n  if (!sourceId) return;\n\n  const { saveAttachmentData, getImageData } = withTempBlobData();\n  saveAttachmentData(sourceId, { name: model.name });\n\n  const imageConvertData = model.sourceId\n    ? getImageData(model.sourceId)\n    : undefined;\n\n  const imageProp: Partial<ImageBlockProps> = {\n    sourceId,\n    caption: model.caption,\n    size: model.size,\n    ...imageConvertData,\n  };\n  transformModel(model, 'affine:image', imageProp);\n}\n"]}