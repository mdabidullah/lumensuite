{"version":3,"file":"code-block-service.js","sourceRoot":"","sources":["../../src/code-block/code-block-service.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,yCAAyC,CAAC;AACrE,OAAO,EAAE,eAAe,EAAE,WAAW,EAAE,MAAM,0BAA0B,CAAC;AACxE,OAAO,EAAE,aAAa,EAAE,MAAM,iCAAiC,CAAC;AAChE,OAAO,EAAE,YAAY,EAAE,MAAM,uBAAuB,CAAC;AACrD,OAAO,EAAe,MAAM,EAAE,MAAM,0BAA0B,CAAC;AAC/D,OAAO,EACL,qBAAqB,GAGtB,MAAM,OAAO,CAAC;AACf,OAAO,EAAE,oBAAoB,EAAE,MAAM,OAAO,CAAC;AAC7C,OAAO,OAAO,MAAM,YAAY,CAAC;AAEjC,OAAO,EACL,6BAA6B,EAC7B,8BAA8B,GAC/B,MAAM,sBAAsB,CAAC;AAE9B,MAAM,OAAO,gBAAiB,SAAQ,YAAY;IAAlD;;QAOE,iBAAY,GAAmC,MAAM,CAAC,IAAI,CAAC,CAAC;IAuC9D,CAAC;aA7C0B,YAAO,GAAG,eAAe,CAAC,KAAK,CAAC,OAAO,AAAhC,CAAiC;IAQjE,IAAI,KAAK;QACP,OAAO,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,aAAa,CAAC,EAAE,KAAK,IAAI,oBAAoB,CAAC;IAC1E,CAAC;IAED,IAAI,QAAQ;QACV,OAAO,aAAa,CAAC,QAAQ,CAAC,KAAK,CAAC,KAAK,KAAK,WAAW,CAAC,IAAI;YAC5D,CAAC,CAAC,IAAI,CAAC,aAAa;YACpB,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC;IAC1B,CAAC;IAEQ,OAAO;QACd,KAAK,CAAC,OAAO,EAAE,CAAC;QAEhB,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;QAEtC,qBAAqB,CAAC;YACpB,QAAQ,EAAE,OAAO;SAClB,CAAC;aACC,IAAI,CAAC,KAAK,EAAC,WAAW,EAAC,EAAE;YACxB,MAAM,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,aAAa,CAAC,CAAC;YACjD,MAAM,SAAS,GAAG,MAAM,EAAE,KAAK,EAAE,IAAI,IAAI,6BAA6B,CAAC;YACvE,MAAM,UAAU,GACd,MAAM,EAAE,KAAK,EAAE,KAAK,IAAI,8BAA8B,CAAC;YAEzD,IAAI,CAAC,aAAa,GAAG,CAAC,MAAM,eAAe,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC;YAC7D,IAAI,CAAC,cAAc,GAAG,CAAC,MAAM,eAAe,CAAC,UAAU,CAAC,CAAC,CAAC,IAAI,CAAC;YAE/D,MAAM,WAAW,CAAC,SAAS,CAAC,SAAS,EAAE,UAAU,CAAC,CAAC;YAEnD,IAAI,CAAC,YAAY,CAAC,KAAK,GAAG,WAAW,CAAC;YAEtC,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,GAAG,EAAE;gBACxB,WAAW,CAAC,OAAO,EAAE,CAAC;YACxB,CAAC,CAAC,CAAC;QACL,CAAC,CAAC;aACD,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;IAC1B,CAAC;;AAGH;;GAEG;AACH,MAAM,CAAC,KAAK,UAAU,eAAe,CAAI,CAAiB;IACxD,8DAA8D;IAC9D,OAAO,OAAO,CAAC,OAAO,CAAC,OAAO,CAAC,KAAK,UAAU,CAAC,CAAC,CAAE,CAAS,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CACrE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,OAAO,IAAI,CAAC,CACpB,CAAC;AACJ,CAAC","sourcesContent":["import { textKeymap } from '@lumensuite/affine-components/rich-text';\nimport { CodeBlockSchema, ColorScheme } from '@lumensuite/affine-model';\nimport { ThemeObserver } from '@lumensuite/affine-shared/theme';\nimport { BlockService } from '@lumensuite/block-std';\nimport { type Signal, signal } from '@lit-labs/preact-signals';\nimport {\n  createHighlighterCore,\n  type HighlighterCore,\n  type MaybeGetter,\n} from 'shiki';\nimport { bundledLanguagesInfo } from 'shiki';\nimport getWasm from 'shiki/wasm';\n\nimport {\n  CODE_BLOCK_DEFAULT_DARK_THEME,\n  CODE_BLOCK_DEFAULT_LIGHT_THEME,\n} from './highlight/const.js';\n\nexport class CodeBlockService extends BlockService {\n  static override readonly flavour = CodeBlockSchema.model.flavour;\n\n  private _darkThemeKey: string | undefined;\n\n  private _lightThemeKey: string | undefined;\n\n  highlighter$: Signal<HighlighterCore | null> = signal(null);\n\n  get langs() {\n    return this.std.getConfig('affine:code')?.langs ?? bundledLanguagesInfo;\n  }\n\n  get themeKey() {\n    return ThemeObserver.instance.mode$.value === ColorScheme.Dark\n      ? this._darkThemeKey\n      : this._lightThemeKey;\n  }\n\n  override mounted(): void {\n    super.mounted();\n\n    this.bindHotKey(textKeymap(this.std));\n\n    createHighlighterCore({\n      loadWasm: getWasm,\n    })\n      .then(async highlighter => {\n        const config = this.std.getConfig('affine:code');\n        const darkTheme = config?.theme?.dark ?? CODE_BLOCK_DEFAULT_DARK_THEME;\n        const lightTheme =\n          config?.theme?.light ?? CODE_BLOCK_DEFAULT_LIGHT_THEME;\n\n        this._darkThemeKey = (await normalizeGetter(darkTheme)).name;\n        this._lightThemeKey = (await normalizeGetter(lightTheme)).name;\n\n        await highlighter.loadTheme(darkTheme, lightTheme);\n\n        this.highlighter$.value = highlighter;\n\n        this.disposables.add(() => {\n          highlighter.dispose();\n        });\n      })\n      .catch(console.error);\n  }\n}\n\n/**\n * https://github.com/shikijs/shiki/blob/933415cdc154fe74ccfb6bbb3eb6a7b7bf183e60/packages/core/src/internal.ts#L31\n */\nexport async function normalizeGetter<T>(p: MaybeGetter<T>): Promise<T> {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  return Promise.resolve(typeof p === 'function' ? (p as any)() : p).then(\n    r => r.default || r\n  );\n}\n"]}