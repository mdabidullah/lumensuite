{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/code-block/clipboard/index.ts"],"names":[],"mappings":"AAAA,OAAO,EAEL,SAAS,GAEV,MAAM,uBAAuB,CAAC;AAC/B,OAAO,EAAE,YAAY,EAAE,eAAe,EAAE,MAAM,0BAA0B,CAAC;AAEzE,OAAO,EAAE,WAAW,EAAE,gBAAgB,EAAE,MAAM,iCAAiC,CAAC;AAChF,OAAO,EAAE,eAAe,EAAE,MAAM,iDAAiD,CAAC;AAElF,MAAM,OAAO,uBAAuB;IAgElC,IAAY,IAAI;QACd,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC;IACvB,CAAC;IAED,YAAY,IAAoB;QAjEtB,iBAAY,GAAG,IAAI,eAAe,EAAE,CAAC;QAErC,UAAK,GAAG,GAAG,EAAE;YACrB,IAAI,CAAC,UAAU,CAAC,eAAe,CAAC,YAAY,EAAE,gBAAgB,EAAE,EAAE,CAAC,CAAC;YACpE,IAAI,CAAC,UAAU,CAAC,eAAe,CAAC,WAAW,EAAE,WAAW,EAAE,EAAE,CAAC,CAAC;YAC9D,MAAM,KAAK,GAAG,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACzC,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;YAE3B,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC;gBACpB,OAAO,EAAE,GAAG,EAAE;oBACZ,IAAI,CAAC,UAAU,CAAC,iBAAiB,CAAC,YAAY,CAAC,CAAC;oBAChD,IAAI,CAAC,UAAU,CAAC,iBAAiB,CAAC,WAAW,CAAC,CAAC;oBAC/C,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;gBAC/B,CAAC;aACF,CAAC,CAAC;QACL,CAAC,CAAC;QAIF,gBAAW,GAAmB,GAAG,CAAC,EAAE;YAClC,MAAM,CAAC,GAAG,GAAG,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAC,GAAG,CAAC;YACxC,CAAC,CAAC,cAAc,EAAE,CAAC;YAEnB,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,WAAW,EAAE,CAAC;YAC5B,IAAI,CAAC,IAAI,CAAC,OAAO;iBACd,KAAK,EAAE;iBACP,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC;gBACV,GAAG,CAAC,gBAAgB,EAAE,CAAC,MAAM,CAAyB,CAAC,GAAG,EAAE,IAAI,EAAE,EAAE;oBAClE,MAAM,aAAa,GAAG,GAAG,CAAC,oBAAoB,CAAC;oBAC/C,YAAY,CAAC,aAAa,CAAC,CAAC;oBAC5B,MAAM,GAAG,GAAG,aAAa,CAAC,EAAE,IAAI,aAAa,CAAC,IAAI,CAAC;oBACnD,IAAI,CAAC,EAAE,oBAAoB,EAAE,GAAG,CAAC,OAAO,EAAE,CAAC,CAAC;gBAC9C,CAAC,CAAC;gBACF,GAAG,CAAC,kBAAkB,EAAE,CAAC,MAAM,CAAyB,CAAC,GAAG,EAAE,IAAI,EAAE,EAAE;oBACpE,MAAM,sBAAsB,GAAG,GAAG,CAAC,sBAAsB,CAAC;oBAC1D,YAAY,CAAC,sBAAsB,CAAC,CAAC;oBACrC,MAAM,cAAc,GAAG,sBAAsB,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;oBACrD,IAAI,CAAC,cAAc,EAAE,CAAC;wBACpB,OAAO;oBACT,CAAC;oBACD,IAAI,CAAC,EAAE,oBAAoB,EAAE,cAAc,CAAC,OAAO,EAAE,CAAC,CAAC;gBACzD,CAAC,CAAC;aACH,CAAC;iBACD,aAAa,EAAE;iBACf,MAAM,CAAC,CAAC,GAAG,EAAE,IAAI,EAAE,EAAE;gBACpB,YAAY,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;gBAC9B,IAAI,CAAC,UAAU;qBACZ,KAAK,CACJ,CAAC,EACD,IAAI,CAAC,IAAI,CAAC,GAAG,EACb,GAAG,CAAC,WAAW,CAAC,KAAK,CAAC,EAAE,EACxB,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC,GAAG,CAAC,UAAU,GAAG,CAAC,CAAC,CAAC,CAAC,SAAS,CAChD;qBACA,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;gBAExB,OAAO,IAAI,EAAE,CAAC;YAChB,CAAC,CAAC;iBACD,GAAG,EAAE,CAAC;YACT,OAAO,IAAI,CAAC;QACd,CAAC,CAAC;QAOA,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;IACnB,CAAC;IAED,aAAa;QACX,IAAI,IAAI,CAAC,YAAY,CAAC,QAAQ,EAAE,CAAC;YAC/B,IAAI,CAAC,YAAY,GAAG,IAAI,eAAe,EAAE,CAAC;QAC5C,CAAC;QACD,IAAI,CAAC,UAAU,GAAG,IAAI,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC3C,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;QACjD,IAAI,CAAC,KAAK,EAAE,CAAC;IACf,CAAC;IAED,gBAAgB;QACd,IAAI,CAAC,YAAY,CAAC,OAAO,EAAE,CAAC;IAC9B,CAAC;CACF","sourcesContent":["import {\n  type BlockComponent,\n  Clipboard,\n  type UIEventHandler,\n} from '@blocksuite/block-std';\nimport { assertExists, DisposableGroup } from '@blocksuite/global/utils';\n\nimport { HtmlAdapter, PlainTextAdapter } from '../../_common/adapters/index.js';\nimport { pasteMiddleware } from '../../root-block/clipboard/middlewares/index.js';\n\nexport class CodeClipboardController {\n  private _clipboard!: Clipboard;\n\n  protected _disposables = new DisposableGroup();\n\n  protected _init = () => {\n    this._clipboard.registerAdapter('text/plain', PlainTextAdapter, 90);\n    this._clipboard.registerAdapter('text/html', HtmlAdapter, 80);\n    const paste = pasteMiddleware(this._std);\n    this._clipboard.use(paste);\n\n    this._disposables.add({\n      dispose: () => {\n        this._clipboard.unregisterAdapter('text/plain');\n        this._clipboard.unregisterAdapter('text/html');\n        this._clipboard.unuse(paste);\n      },\n    });\n  };\n\n  host: BlockComponent;\n\n  onPagePaste: UIEventHandler = ctx => {\n    const e = ctx.get('clipboardState').raw;\n    e.preventDefault();\n\n    this._std.doc.captureSync();\n    this._std.command\n      .chain()\n      .try(cmd => [\n        cmd.getTextSelection().inline<'currentSelectionPath'>((ctx, next) => {\n          const textSelection = ctx.currentTextSelection;\n          assertExists(textSelection);\n          const end = textSelection.to ?? textSelection.from;\n          next({ currentSelectionPath: end.blockId });\n        }),\n        cmd.getBlockSelections().inline<'currentSelectionPath'>((ctx, next) => {\n          const currentBlockSelections = ctx.currentBlockSelections;\n          assertExists(currentBlockSelections);\n          const blockSelection = currentBlockSelections.at(-1);\n          if (!blockSelection) {\n            return;\n          }\n          next({ currentSelectionPath: blockSelection.blockId });\n        }),\n      ])\n      .getBlockIndex()\n      .inline((ctx, next) => {\n        assertExists(ctx.parentBlock);\n        this._clipboard\n          .paste(\n            e,\n            this._std.doc,\n            ctx.parentBlock.model.id,\n            ctx.blockIndex ? ctx.blockIndex + 1 : undefined\n          )\n          .catch(console.error);\n\n        return next();\n      })\n      .run();\n    return true;\n  };\n\n  private get _std() {\n    return this.host.std;\n  }\n\n  constructor(host: BlockComponent) {\n    this.host = host;\n  }\n\n  hostConnected() {\n    if (this._disposables.disposed) {\n      this._disposables = new DisposableGroup();\n    }\n    this._clipboard = new Clipboard(this._std);\n    this.host.handleEvent('paste', this.onPagePaste);\n    this._init();\n  }\n\n  hostDisconnected() {\n    this._disposables.dispose();\n  }\n}\n"]}