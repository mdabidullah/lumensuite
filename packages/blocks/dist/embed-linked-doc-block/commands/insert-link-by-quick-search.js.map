{"version":3,"file":"insert-link-by-quick-search.js","sourceRoot":"","sources":["../../../src/embed-linked-doc-block/commands/insert-link-by-quick-search.ts"],"names":[],"mappings":"AAEA,OAAO,EAAE,mBAAmB,EAAE,MAAM,oCAAoC,CAAC;AAEzE,MAAM,CAAC,MAAM,8BAA8B,GAIvC,CAAC,GAAG,EAAE,IAAI,EAAE,EAAE;IAChB,MAAM,EAAE,SAAS,EAAE,aAAa,EAAE,GAAG,EAAE,GAAG,GAAG,CAAC;IAC9C,MAAM,kBAAkB,GAAG,GAAG,CAAC,WAAW,CAAC,mBAAmB,CAAC,CAAC;IAChE,IAAI,CAAC,kBAAkB,EAAE,CAAC;QACxB,IAAI,EAAE,CAAC;QACP,OAAO;IACT,CAAC;IAED,MAAM,gBAAgB,GAAG,kBAAkB;SACxC,SAAS,CAAC;QACT,MAAM,EAAE,QAAQ;QAChB,SAAS;QACT,aAAa;KACd,CAAC;SACD,IAAI,CAAC,MAAM,CAAC,EAAE;QACb,iBAAiB;QACjB,IAAI,MAAM,IAAI,OAAO,IAAI,MAAM,EAAE,CAAC;YAChC,GAAG,CAAC,OAAO,CAAC,IAAI,CAAC,sBAAsB,EAAE,EAAE,KAAK,EAAE,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC;YAClE,OAAO;gBACL,OAAO,EAAE,yBAAyB;gBAClC,QAAQ,EAAE,CAAC,CAAC,MAAM,CAAC,QAAQ;aAC5B,CAAC;QACJ,CAAC;QAED,mBAAmB;QACnB,IAAI,MAAM,IAAI,WAAW,IAAI,MAAM,EAAE,CAAC;YACpC,GAAG,CAAC,OAAO,CAAC,IAAI,CAAC,gBAAgB,EAAE,EAAE,GAAG,EAAE,MAAM,CAAC,SAAS,EAAE,CAAC,CAAC;YAC9D,OAAO;gBACL,OAAO,EAAE,iBAAiB;aAC3B,CAAC;QACJ,CAAC;QAED,OAAO,IAAI,CAAC;IACd,CAAC,CAAC,CAAC;IAEL,IAAI,CAAC,EAAE,gBAAgB,EAAE,CAAC,CAAC;AAC7B,CAAC,CAAC","sourcesContent":["import type { Command } from '@lumensuite/block-std';\n\nimport { QuickSearchProvider } from '@lumensuite/affine-shared/services';\n\nexport const insertLinkByQuickSearchCommand: Command<\n  never,\n  'insertedLinkType',\n  { userInput?: string; skipSelection?: boolean }\n> = (ctx, next) => {\n  const { userInput, skipSelection, std } = ctx;\n  const quickSearchService = std.getOptional(QuickSearchProvider);\n  if (!quickSearchService) {\n    next();\n    return;\n  }\n\n  const insertedLinkType = quickSearchService\n    .searchDoc({\n      action: 'insert',\n      userInput,\n      skipSelection,\n    })\n    .then(result => {\n      // add linked doc\n      if (result && 'docId' in result) {\n        std.command.exec('insertEmbedLinkedDoc', { docId: result.docId });\n        return {\n          flavour: 'affine:embed-linked-doc',\n          isNewDoc: !!result.isNewDoc,\n        };\n      }\n\n      // add normal link;\n      if (result && 'userInput' in result) {\n        std.command.exec('insertBookmark', { url: result.userInput });\n        return {\n          flavour: 'affine:bookmark',\n        };\n      }\n\n      return null;\n    });\n\n  next({ insertedLinkType });\n};\n\ndeclare global {\n  namespace LumenSuite {\n    interface CommandContext {\n      insertedLinkType?: Promise<{\n        flavour?: string;\n        isNewDoc?: boolean;\n      } | null>;\n    }\n\n    interface Commands {\n      insertLinkByQuickSearch: typeof insertLinkByQuickSearchCommand;\n    }\n  }\n}\n"]}