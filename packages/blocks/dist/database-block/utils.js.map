{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../src/database-block/utils.ts"],"names":[],"mappings":"AASA,OAAO,EACL,SAAS,EACT,qBAAqB,GAEtB,MAAM,iCAAiC,CAAC;AACzC,OAAO,EAIL,cAAc,EACd,WAAW,EACX,cAAc,GAEf,MAAM,uBAAuB,CAAC;AAC/B,OAAO,EAAE,aAAa,EAAE,MAAM,sCAAsC,CAAC;AACrE,OAAO,EAAE,kBAAkB,EAAE,MAAM,2CAA2C,CAAC;AAC/E,OAAO,EAAE,eAAe,EAAE,SAAS,EAAE,MAAM,+BAA+B,CAAC;AAC3E,OAAO,EAAE,MAAM,EAAE,MAAM,mBAAmB,CAAC;AAE3C,OAAO,EAAE,yBAAyB,EAAE,MAAM,oBAAoB,CAAC;AAC/D,OAAO,EAAE,qBAAqB,EAAE,MAAM,2BAA2B,CAAC;AAElE,MAAM,OAAO,GAQT;IACF,KAAK,CAAC,cAAc,EAAE,KAAK,EAAE,EAAE,EAAE,IAAI;QACnC,OAAO;YACL,EAAE;YACF,IAAI;YACJ,IAAI,EAAE,OAAO;YACb,OAAO,EAAE,EAAE;YACX,MAAM,EAAE;gBACN,IAAI,EAAE,OAAO;gBACb,EAAE,EAAE,KAAK;gBACT,UAAU,EAAE,EAAE;aACf;YACD,MAAM,EAAE;gBACN,WAAW,EAAE,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,KAAK,OAAO,CAAC,EAAE,EAAE;gBAC5D,UAAU,EAAE,MAAM;aACnB;SACF,CAAC;IACJ,CAAC;IACD,MAAM,CAAC,aAAa,EAAE,KAAK,EAAE,EAAE,EAAE,IAAI;QACnC,MAAM,SAAS,GAAG,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE;YAC9C,MAAM,IAAI,GAAG,aAAa,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;YACjE,OAAO,CAAC,CAAC,cAAc,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,MAAM,CAAC,IAAI,KAAK,OAAO,CAAC;QACjE,CAAC,CAAC,CAAC;QACH,MAAM,SAAS,GAAG,CAAC,MAAc,EAAE,EAAE;YACnC,IACE;gBACE,kBAAkB,CAAC,4BAA4B,CAAC,IAAI;gBACpD,kBAAkB,CAAC,uBAAuB,CAAC,IAAc;aAC1D,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,EACvB,CAAC;gBACD,OAAO,CAAC,CAAC;YACX,CAAC;YACD,IACE;gBACE,kBAAkB,CAAC,uBAAuB,CAAC,IAAc;gBACzD,kBAAkB,CAAC,qBAAqB,CAAC,IAAI;aAC9C,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,EACvB,CAAC;gBACD,OAAO,CAAC,CAAC;YACX,CAAC;YACD,OAAO,CAAC,CAAC;QACX,CAAC,CAAC;QACF,MAAM,MAAM,GAAG,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,SAAS,CAAC,CAAC,CAAC,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACxE,IAAI,CAAC,MAAM,EAAE,CAAC;YACZ,MAAM,IAAI,eAAe,CACvB,SAAS,CAAC,kBAAkB,EAC5B,mBAAmB,CACpB,CAAC;QACJ,CAAC;QACD,OAAO;YACL,EAAE;YACF,IAAI;YACJ,IAAI,EAAE,QAAQ;YACd,OAAO,EAAE,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;gBAC/B,EAAE,EAAE,CAAC,CAAC,EAAE;gBACR,IAAI,EAAE,KAAK;aACZ,CAAC,CAAC;YACH,MAAM,EAAE;gBACN,IAAI,EAAE,OAAO;gBACb,EAAE,EAAE,KAAK;gBACT,UAAU,EAAE,EAAE;aACf;YACD,OAAO,EAAE,cAAc,CACrB,aAAa,CAAC,MAAM,CAAC,IAAI,CAAC,EAC1B,MAAM,CAAC,EAAE,EACT,MAAM,CAAC,IAAI,CACZ;YACD,MAAM,EAAE;gBACN,WAAW,EAAE,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,KAAK,OAAO,CAAC,EAAE,EAAE;gBAC5D,UAAU,EAAE,MAAM;aACnB;YACD,eAAe,EAAE,EAAE;SACpB,CAAC;IACJ,CAAC;CACF,CAAC;AACF,MAAM,CAAC,MAAM,qBAAqB,GAAG,CACnC,KAAyB,EACzB,QAAkB,EAClB,EAAE;IACF,SAAS,CACP,KAAK,EACL,OAAO,EACP,qBAAqB,CAAC,MAAM,CAAC,qBAAqB,CAAC,MAAM,CAAC,IAAI,CAAC,CAChE,CAAC;IACF,mBAAmB,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;AACvC,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,uBAAuB,GAAG,CACrC,KAAyB,EACzB,QAAkB,EAClB,EAAE;IACF,SAAS,CACP,KAAK,EACL,KAAK,EACL,aAAa,CAAC,uBAAuB,CAAC,MAAM,CAAC,KAAK,EAAE,EAAE,OAAO,EAAE,EAAE,EAAE,CAAC,CACrE,CAAC;IACF,qBAAqB,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;AACzC,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,wBAAwB,GAAG,CACtC,KAAyB,EACzB,QAAkB,EAClB,EAAE;IACF,MAAM,GAAG,GAAG,CAAC,MAAM,EAAE,EAAE,MAAM,EAAE,EAAE,MAAM,EAAE,CAAC,CAAC;IAC3C,MAAM,QAAQ,GAAG,SAAS,CACxB,KAAK,EACL,KAAK,EACL,aAAa,CAAC,kBAAkB,CAAC,MAAM,CAAC,QAAQ,EAAE;QAChD,OAAO,EAAE;YACP;gBACE,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC;gBACV,KAAK,EAAE,WAAW,EAAE;gBACpB,KAAK,EAAE,MAAM;aACd;YACD;gBACE,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC;gBACV,KAAK,EAAE,WAAW,EAAE;gBACpB,KAAK,EAAE,aAAa;aACrB;YACD;gBACE,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC;gBACV,KAAK,EAAE,WAAW,EAAE;gBACpB,KAAK,EAAE,MAAM;aACd;SACF;KACF,CAAC,CACH,CAAC;IACF,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC;QAC3B,MAAM,KAAK,GAAG,KAAK,CAAC,GAAG,CAAC,QAAQ,CAC9B,kBAAkB,EAClB;YACE,IAAI,EAAE,IAAI,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE,CAAC;SAC1C,EACD,KAAK,CAAC,EAAE,CACT,CAAC;QACF,UAAU,CAAC,KAAK,EAAE,KAAK,EAAE;YACvB,QAAQ,EAAE,QAAQ;YAClB,KAAK,EAAE,GAAG,CAAC,CAAC,CAAC;SACd,CAAC,CAAC;IACL,CAAC;IACD,qBAAqB,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;AACzC,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,mBAAmB,GAAG,CACjC,KAAyB,EACzB,QAAkB,EAClB,EAAE;IACF,MAAM,EAAE,GAAG,KAAK,CAAC,GAAG,CAAC,eAAe,EAAE,CAAC;IACvC,MAAM,IAAI,GAAG,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,CACjC,yBAAyB,EACzB,KAAK,EACL,EAAE,EACF,QAAQ,CAAC,KAAK,CAAC,WAAW,CAC3B,CAAC;IACF,KAAK,CAAC,GAAG,CAAC,QAAQ,CAAC,GAAG,EAAE;QACtB,KAAK,CAAC,KAAK,GAAG,CAAC,GAAG,KAAK,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;IACvC,CAAC,CAAC,CAAC;IACH,OAAO,IAAI,CAAC;AACd,CAAC,CAAC;AAEF,MAAM,UAAU,SAAS,CACvB,KAAyB,EACzB,QAA0B,EAC1B,MAEC;IAED,MAAM,EAAE,GAAG,MAAM,CAAC,EAAE,IAAI,KAAK,CAAC,GAAG,CAAC,eAAe,EAAE,CAAC;IACpD,IAAI,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,CAAC;QACzC,OAAO,EAAE,CAAC;IACZ,CAAC;IACD,KAAK,CAAC,GAAG,CAAC,QAAQ,CAAC,GAAG,EAAE;QACtB,MAAM,GAAG,GAAW;YAClB,GAAG,MAAM;YACT,EAAE;SACH,CAAC;QACF,KAAK,CAAC,OAAO,CAAC,MAAM,CAClB,qBAAqB,CAAC,QAAQ,EAAE,KAAK,CAAC,OAAO,CAAC,EAC9C,CAAC,EACD,GAAG,CACJ,CAAC;IACJ,CAAC,CAAC,CAAC;IACH,OAAO,EAAE,CAAC;AACZ,CAAC;AAED,MAAM,UAAU,gBAAgB,CAAC,KAAyB;IACxD,KAAK,CAAC,GAAG,CAAC,WAAW,CAAC,KAAK,EAAE;QAC3B,KAAK,EAAE,KAAK,CAAC,KAAK;KACnB,CAAC,CAAC;AACL,CAAC;AAED,MAAM,UAAU,iBAAiB,CAAC,KAAyB;IACzD,KAAK,CAAC,GAAG,CAAC,WAAW,CAAC,KAAK,EAAE;QAC3B,OAAO,EAAE,KAAK,CAAC,OAAO;KACvB,CAAC,CAAC;AACL,CAAC;AAED,MAAM,UAAU,gBAAgB,CAAC,KAAyB;IACxD,KAAK,CAAC,GAAG,CAAC,WAAW,CAAC,KAAK,EAAE;QAC3B,KAAK,EAAE,KAAK,CAAC,KAAK;KACnB,CAAC,CAAC;AACL,CAAC;AAED,MAAM,UAAU,iBAAiB,CAC/B,KAAyB,EACzB,MAAoB,EACpB,IAAkB;IAElB,KAAK,CAAC,GAAG,CAAC,QAAQ,CAAC,GAAG,EAAE;QACtB,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;YACvC,MAAM,IAAI,GAAG,KAAK,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC,CAAC;YACxC,IAAI,IAAI,EAAE,CAAC;gBACT,KAAK,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,GAAG;oBACzB,GAAG,IAAI;oBACP,QAAQ,EAAE,IAAI;iBACf,CAAC;YACJ,CAAC;QACH,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC;AAED,MAAM,UAAU,YAAY,CAC1B,KAAyB,EACzB,QAAsB;IAEtB,MAAM,KAAK,GAAG,eAAe,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;IAC/C,IAAI,KAAK,GAAG,CAAC;QAAE,OAAO;IAEtB,KAAK,CAAC,GAAG,CAAC,QAAQ,CAAC,GAAG,EAAE;QACtB,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;IACjC,CAAC,CAAC,CAAC;AACL,CAAC;AAED,MAAM,UAAU,UAAU,CAAC,KAAyB,EAAE,MAAgB;IACpE,KAAK,CAAC,GAAG,CAAC,QAAQ,CAAC,GAAG,EAAE;QACtB,KAAK,MAAM,KAAK,IAAI,MAAM,EAAE,CAAC;YAC3B,OAAO,KAAK,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;QAC5B,CAAC;IACH,CAAC,CAAC,CAAC;AACL,CAAC;AAED,MAAM,UAAU,UAAU,CAAC,KAAyB,EAAE,EAAU;IAC9D,KAAK,CAAC,GAAG,CAAC,WAAW,EAAE,CAAC;IACxB,KAAK,CAAC,GAAG,CAAC,QAAQ,CAAC,GAAG,EAAE;QACtB,KAAK,CAAC,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,KAAK,EAAE,CAAC,CAAC;IACrD,CAAC,CAAC,CAAC;AACL,CAAC;AAED,MAAM,UAAU,aAAa,CAAC,KAAyB,EAAE,EAAU;IACjE,MAAM,KAAK,GAAG,KAAK,CAAC,GAAG,CAAC,eAAe,EAAE,CAAC;IAC1C,KAAK,CAAC,GAAG,CAAC,QAAQ,CAAC,GAAG,EAAE;QACtB,MAAM,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,KAAK,EAAE,CAAC,CAAC;QACtD,MAAM,IAAI,GAAG,KAAK,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;QAChC,IAAI,IAAI,EAAE,CAAC;YACT,KAAK,CAAC,KAAK,CAAC,MAAM,CAChB,KAAK,GAAG,CAAC,EACT,CAAC,EACD,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE,GAAG,IAAI,EAAE,EAAE,EAAE,KAAK,EAAE,CAAC,CAAC,CACnD,CAAC;QACJ,CAAC;IACH,CAAC,CAAC,CAAC;IACH,OAAO,KAAK,CAAC;AACf,CAAC;AAED,MAAM,UAAU,eAAe,CAAC,KAAyB,EAAE,EAAgB;IACzE,OAAO,KAAK,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,KAAK,EAAE,CAAC,CAAC;AACnD,CAAC;AAED,MAAM,UAAU,OAAO,CACrB,KAAyB,EACzB,KAAuB,EACvB,QAAsB;IAEtB,IAAI,QAAQ,KAAK,OAAO,EAAE,CAAC;QACzB,OAAO;YACL,QAAQ,EAAE,OAAO;YACjB,KAAK,EAAE,KAAK;SACb,CAAC;IACJ,CAAC;IACD,MAAM,IAAI,GAAG,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;IACvC,MAAM,KAAK,GAAG,IAAI,EAAE,CAAC,QAAQ,CAAC,IAAI,IAAI,CAAC;IACvC,IAAI,CAAC,KAAK;QAAE,OAAO,IAAI,CAAC;IAExB,OAAO;QACL,QAAQ,EAAE,KAAK,CAAC,QAAQ;QACxB,KAAK,EAAE,KAAK,CAAC,KAAK;KACnB,CAAC;AACJ,CAAC;AAED,MAAM,UAAU,SAAS,CACvB,KAAyB,EACzB,EAAgB;IAEhB,OAAO,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,KAAK,EAAE,CAAC,CAAC;AAC9C,CAAC;AAED,MAAM,UAAU,UAAU,CACxB,KAAyB,EACzB,EAAU,EACV,QAA0B;IAE1B,KAAK,CAAC,GAAG,CAAC,QAAQ,CAAC,GAAG,EAAE;QACtB,KAAK,CAAC,KAAK,GAAG,SAAS,CACrB,KAAK,CAAC,KAAK,EACX,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,KAAK,EAAE,EAChB,GAAG,CAAC,EAAE,CAAC,qBAAqB,CAAC,QAAQ,EAAE,GAAG,CAAC,CAC5C,CAAC;IACJ,CAAC,CAAC,CAAC;IACH,gBAAgB,CAAC,KAAK,CAAC,CAAC;AAC1B,CAAC;AAED,MAAM,UAAU,UAAU,CACxB,KAAyB,EACzB,KAAa,EACb,IAAU;IAEV,MAAM,MAAM,GAAG,KAAK,IAAI,KAAK,CAAC,KAAK,CAAC;IACpC,IAAI,CAAC,MAAM,EAAE,CAAC;QACZ,KAAK,CAAC,KAAK,CAAC,KAAK,CAAC,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;IAC3C,CAAC;IACD,KAAK,CAAC,GAAG,CAAC,QAAQ,CAAC,GAAG,EAAE;QACtB,KAAK,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG;YAClC,QAAQ,EAAE,IAAI,CAAC,QAAQ;YACvB,KAAK,EAAE,IAAI,CAAC,KAAK;SAClB,CAAC;IACJ,CAAC,CAAC,CAAC;AACL,CAAC;AAED,MAAM,UAAU,WAAW,CACzB,KAAyB,EACzB,QAAgB,EAChB,KAA8B;IAE9B,KAAK,CAAC,GAAG,CAAC,QAAQ,CAAC,GAAG,EAAE;QACtB,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,KAAK,EAAE,KAAK,CAAC,EAAE,EAAE;YAC/C,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE,CAAC;gBACxB,KAAK,CAAC,KAAK,CAAC,KAAK,CAAC,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;YAC3C,CAAC;YACD,KAAK,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,QAAQ,CAAC,GAAG;gBAC7B,QAAQ;gBACR,KAAK;aACN,CAAC;QACJ,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC;AAED,MAAM,UAAU,YAAY,CAC1B,KAAyB,EACzB,EAAU,EACV,OAAsB;IAEtB,MAAM,KAAK,GAAG,KAAK,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,KAAK,EAAE,CAAC,CAAC;IACxD,IAAI,KAAK,IAAI,IAAI,EAAE,CAAC;QAClB,OAAO;IACT,CAAC;IACD,KAAK,CAAC,GAAG,CAAC,QAAQ,CAAC,GAAG,EAAE;QACtB,MAAM,MAAM,GAAG,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QACpC,MAAM,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC;QAC/B,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,EAAE,GAAG,MAAM,EAAE,GAAG,MAAM,EAAE,CAAC;IAClD,CAAC,CAAC,CAAC;IACH,OAAO,EAAE,CAAC;AACZ,CAAC;AAED,MAAM,CAAC,MAAM,UAAU,GAAG,CACxB,KAAyB,EACzB,EAAU,EACV,MAA6C,EAC7C,EAAE;IACF,KAAK,CAAC,GAAG,CAAC,QAAQ,CAAC,GAAG,EAAE;QACtB,KAAK,CAAC,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE;YAChC,IAAI,CAAC,CAAC,EAAE,KAAK,EAAE,EAAE,CAAC;gBAChB,OAAO,CAAC,CAAC;YACX,CAAC;YACD,OAAO,EAAE,GAAG,CAAC,EAAE,GAAG,MAAM,CAAC,CAAa,CAAC,EAAE,CAAC;QAC5C,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IACH,gBAAgB,CAAC,KAAK,CAAC,CAAC;AAC1B,CAAC,CAAC","sourcesContent":["import type {\n  Cell,\n  Column,\n  ColumnUpdater,\n  DatabaseBlockModel,\n  ViewBasicDataType,\n} from '@lumensuite/affine-model';\nimport type { BlockModel } from '@lumensuite/store';\n\nimport {\n  arrayMove,\n  insertPositionToIndex,\n  type InsertToPosition,\n} from '@lumensuite/affine-shared/utils';\nimport {\n  type ColumnMeta,\n  type DataViewDataType,\n  type DataViewTypes,\n  defaultGroupBy,\n  getTagColor,\n  groupByMatcher,\n  type ViewMeta,\n} from '@lumensuite/data-view';\nimport { columnPresets } from '@lumensuite/data-view/column-presets';\nimport { columnModelPresets } from '@lumensuite/data-view/column-pure-presets';\nimport { LumenSuiteError, ErrorCode } from '@lumensuite/global/exceptions';\nimport { nanoid } from '@lumensuite/store';\n\nimport { databaseBlockAllColumnMap } from './columns/index.js';\nimport { titlePureColumnConfig } from './columns/title/define.js';\n\nconst initMap: Record<\n  DataViewTypes,\n  (\n    columnMetaMap: Record<string, ColumnMeta>,\n    model: DatabaseBlockModel,\n    id: string,\n    name: string\n  ) => DataViewDataType\n> = {\n  table(_columnMetaMap, model, id, name) {\n    return {\n      id,\n      name,\n      mode: 'table',\n      columns: [],\n      filter: {\n        type: 'group',\n        op: 'and',\n        conditions: [],\n      },\n      header: {\n        titleColumn: model.columns.find(v => v.type === 'title')?.id,\n        iconColumn: 'type',\n      },\n    };\n  },\n  kanban(columnMetaMap, model, id, name) {\n    const allowList = model.columns.filter(column => {\n      const type = columnMetaMap[column.type].config.type(column.data);\n      return !!groupByMatcher.match(type) && column.type !== 'title';\n    });\n    const getWeight = (column: Column) => {\n      if (\n        [\n          columnModelPresets.multiSelectColumnModelConfig.type,\n          columnModelPresets.selectColumnModelConfig.type as string,\n        ].includes(column.type)\n      ) {\n        return 3;\n      }\n      if (\n        [\n          columnModelPresets.numberColumnModelConfig.type as string,\n          columnModelPresets.textColumnModelConfig.type,\n        ].includes(column.type)\n      ) {\n        return 2;\n      }\n      return 1;\n    };\n    const column = allowList.sort((a, b) => getWeight(b) - getWeight(a))[0];\n    if (!column) {\n      throw new LumenSuiteError(\n        ErrorCode.DatabaseBlockError,\n        'not implement yet'\n      );\n    }\n    return {\n      id,\n      name,\n      mode: 'kanban',\n      columns: model.columns.map(v => ({\n        id: v.id,\n        hide: false,\n      })),\n      filter: {\n        type: 'group',\n        op: 'and',\n        conditions: [],\n      },\n      groupBy: defaultGroupBy(\n        columnMetaMap[column.type],\n        column.id,\n        column.data\n      ),\n      header: {\n        titleColumn: model.columns.find(v => v.type === 'title')?.id,\n        iconColumn: 'type',\n      },\n      groupProperties: [],\n    };\n  },\n};\nexport const databaseViewInitEmpty = (\n  model: DatabaseBlockModel,\n  viewMeta: ViewMeta\n) => {\n  addColumn(\n    model,\n    'start',\n    titlePureColumnConfig.create(titlePureColumnConfig.config.name)\n  );\n  databaseViewAddView(model, viewMeta);\n};\n\nexport const databaseViewInitConvert = (\n  model: DatabaseBlockModel,\n  viewMeta: ViewMeta\n) => {\n  addColumn(\n    model,\n    'end',\n    columnPresets.multiSelectColumnConfig.create('Tag', { options: [] })\n  );\n  databaseViewInitEmpty(model, viewMeta);\n};\n\nexport const databaseViewInitTemplate = (\n  model: DatabaseBlockModel,\n  viewMeta: ViewMeta\n) => {\n  const ids = [nanoid(), nanoid(), nanoid()];\n  const statusId = addColumn(\n    model,\n    'end',\n    columnPresets.selectColumnConfig.create('Status', {\n      options: [\n        {\n          id: ids[0],\n          color: getTagColor(),\n          value: 'TODO',\n        },\n        {\n          id: ids[1],\n          color: getTagColor(),\n          value: 'In Progress',\n        },\n        {\n          id: ids[2],\n          color: getTagColor(),\n          value: 'Done',\n        },\n      ],\n    })\n  );\n  for (let i = 0; i < 4; i++) {\n    const rowId = model.doc.addBlock(\n      'affine:paragraph',\n      {\n        text: new model.doc.Text(`Task ${i + 1}`),\n      },\n      model.id\n    );\n    updateCell(model, rowId, {\n      columnId: statusId,\n      value: ids[i],\n    });\n  }\n  databaseViewInitEmpty(model, viewMeta);\n};\n\nexport const databaseViewAddView = (\n  model: DatabaseBlockModel,\n  viewMeta: ViewMeta\n) => {\n  const id = model.doc.generateBlockId();\n  const view = initMap[viewMeta.type](\n    databaseBlockAllColumnMap,\n    model,\n    id,\n    viewMeta.model.defaultName\n  );\n  model.doc.transact(() => {\n    model.views = [...model.views, view];\n  });\n  return view;\n};\n\nexport function addColumn(\n  model: DatabaseBlockModel,\n  position: InsertToPosition,\n  column: Omit<Column, 'id'> & {\n    id?: string;\n  }\n): string {\n  const id = column.id ?? model.doc.generateBlockId();\n  if (model.columns.some(v => v.id === id)) {\n    return id;\n  }\n  model.doc.transact(() => {\n    const col: Column = {\n      ...column,\n      id,\n    };\n    model.columns.splice(\n      insertPositionToIndex(position, model.columns),\n      0,\n      col\n    );\n  });\n  return id;\n}\n\nexport function applyCellsUpdate(model: DatabaseBlockModel) {\n  model.doc.updateBlock(model, {\n    cells: model.cells,\n  });\n}\n\nexport function applyColumnUpdate(model: DatabaseBlockModel) {\n  model.doc.updateBlock(model, {\n    columns: model.columns,\n  });\n}\n\nexport function applyViewsUpdate(model: DatabaseBlockModel) {\n  model.doc.updateBlock(model, {\n    views: model.views,\n  });\n}\n\nexport function copyCellsByColumn(\n  model: DatabaseBlockModel,\n  fromId: Column['id'],\n  toId: Column['id']\n) {\n  model.doc.transact(() => {\n    Object.keys(model.cells).forEach(rowId => {\n      const cell = model.cells[rowId][fromId];\n      if (cell) {\n        model.cells[rowId][toId] = {\n          ...cell,\n          columnId: toId,\n        };\n      }\n    });\n  });\n}\n\nexport function deleteColumn(\n  model: DatabaseBlockModel,\n  columnId: Column['id']\n) {\n  const index = findColumnIndex(model, columnId);\n  if (index < 0) return;\n\n  model.doc.transact(() => {\n    model.columns.splice(index, 1);\n  });\n}\n\nexport function deleteRows(model: DatabaseBlockModel, rowIds: string[]) {\n  model.doc.transact(() => {\n    for (const rowId of rowIds) {\n      delete model.cells[rowId];\n    }\n  });\n}\n\nexport function deleteView(model: DatabaseBlockModel, id: string) {\n  model.doc.captureSync();\n  model.doc.transact(() => {\n    model.views = model.views.filter(v => v.id !== id);\n  });\n}\n\nexport function duplicateView(model: DatabaseBlockModel, id: string): string {\n  const newId = model.doc.generateBlockId();\n  model.doc.transact(() => {\n    const index = model.views.findIndex(v => v.id === id);\n    const view = model.views[index];\n    if (view) {\n      model.views.splice(\n        index + 1,\n        0,\n        JSON.parse(JSON.stringify({ ...view, id: newId }))\n      );\n    }\n  });\n  return newId;\n}\n\nexport function findColumnIndex(model: DatabaseBlockModel, id: Column['id']) {\n  return model.columns.findIndex(v => v.id === id);\n}\n\nexport function getCell(\n  model: DatabaseBlockModel,\n  rowId: BlockModel['id'],\n  columnId: Column['id']\n): Cell | null {\n  if (columnId === 'title') {\n    return {\n      columnId: 'title',\n      value: rowId,\n    };\n  }\n  const yRow = model.cells$.value[rowId];\n  const yCell = yRow?.[columnId] ?? null;\n  if (!yCell) return null;\n\n  return {\n    columnId: yCell.columnId,\n    value: yCell.value,\n  };\n}\n\nexport function getColumn(\n  model: DatabaseBlockModel,\n  id: Column['id']\n): Column | undefined {\n  return model.columns.find(v => v.id === id);\n}\n\nexport function moveViewTo(\n  model: DatabaseBlockModel,\n  id: string,\n  position: InsertToPosition\n) {\n  model.doc.transact(() => {\n    model.views = arrayMove(\n      model.views,\n      v => v.id === id,\n      arr => insertPositionToIndex(position, arr)\n    );\n  });\n  applyViewsUpdate(model);\n}\n\nexport function updateCell(\n  model: DatabaseBlockModel,\n  rowId: string,\n  cell: Cell\n) {\n  const hasRow = rowId in model.cells;\n  if (!hasRow) {\n    model.cells[rowId] = Object.create(null);\n  }\n  model.doc.transact(() => {\n    model.cells[rowId][cell.columnId] = {\n      columnId: cell.columnId,\n      value: cell.value,\n    };\n  });\n}\n\nexport function updateCells(\n  model: DatabaseBlockModel,\n  columnId: string,\n  cells: Record<string, unknown>\n) {\n  model.doc.transact(() => {\n    Object.entries(cells).forEach(([rowId, value]) => {\n      if (!model.cells[rowId]) {\n        model.cells[rowId] = Object.create(null);\n      }\n      model.cells[rowId][columnId] = {\n        columnId,\n        value,\n      };\n    });\n  });\n}\n\nexport function updateColumn(\n  model: DatabaseBlockModel,\n  id: string,\n  updater: ColumnUpdater\n) {\n  const index = model.columns.findIndex(v => v.id === id);\n  if (index == null) {\n    return;\n  }\n  model.doc.transact(() => {\n    const column = model.columns[index];\n    const result = updater(column);\n    model.columns[index] = { ...column, ...result };\n  });\n  return id;\n}\n\nexport const updateView = <ViewData extends ViewBasicDataType>(\n  model: DatabaseBlockModel,\n  id: string,\n  update: (data: ViewData) => Partial<ViewData>\n) => {\n  model.doc.transact(() => {\n    model.views = model.views.map(v => {\n      if (v.id !== id) {\n        return v;\n      }\n      return { ...v, ...update(v as ViewData) };\n    });\n  });\n  applyViewsUpdate(model);\n};\n"]}