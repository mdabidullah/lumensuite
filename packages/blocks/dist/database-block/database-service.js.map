{"version":3,"file":"database-service.js","sourceRoot":"","sources":["../../src/database-block/database-service.ts"],"names":[],"mappings":"AAEA,OAAO,EAEL,mBAAmB,GACpB,MAAM,0BAA0B,CAAC;AAClC,OAAO,EAAE,YAAY,EAAE,MAAM,uBAAuB,CAAC;AACrD,OAAO,EAAE,iBAAiB,EAAiB,MAAM,uBAAuB,CAAC;AACzE,OAAO,EAAE,WAAW,EAAE,MAAM,oCAAoC,CAAC;AACjE,OAAO,EAAE,YAAY,EAAE,MAAM,0BAA0B,CAAC;AAExD,OAAO,EACL,SAAS,EACT,iBAAiB,EACjB,mBAAmB,EACnB,qBAAqB,EACrB,wBAAwB,EACxB,UAAU,EACV,UAAU,GACX,MAAM,YAAY,CAAC;AAEpB,MAAM,OAAO,oBAAqB,SAAQ,YAAY;IAAtD;;QAGE,cAAS,GAAG,SAAS,CAAC;QAEtB,sBAAiB,GAAG,iBAAiB,CAAC;QAEtC,wBAAmB,GAAG,mBAAmB,CAAC;QAE1C,0BAAqB,GAAG,qBAAqB,CAAC;QAE9C,eAAU,GAAG,UAAU,CAAC;QAExB,eAAU,GAAG,UAAU,CAAC;QAExB,gBAAW,GAAG,WAAW,CAAC;IAyB5B,CAAC;aAvC0B,YAAO,GAAG,mBAAmB,CAAC,KAAK,CAAC,OAAO,AAApC,CAAqC;IAgBrE,iBAAiB,CACf,GAAQ,EACR,KAAiB,EACjB,UAAkB,EAClB,QAAkB,EAClB,cAAc,GAAG,IAAI;QAErB,MAAM,UAAU,GAAG,GAAG,CAAC,YAAY,CAAC,UAAU,CAAuB,CAAC;QACtE,YAAY,CAAC,UAAU,CAAC,CAAC;QACzB,wBAAwB,CAAC,UAAU,EAAE,QAAQ,CAAC,CAAC;QAC/C,IAAI,cAAc,EAAE,CAAC;YACnB,iCAAiC;YACjC,MAAM,MAAM,GAAG,GAAG,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;YACpC,YAAY,CAAC,MAAM,CAAC,CAAC;YACrB,GAAG,CAAC,QAAQ,CAAC,kBAAkB,EAAE,EAAE,EAAE,MAAM,CAAC,EAAE,CAAC,CAAC;QAClD,CAAC;QACD,iBAAiB,CAAC,UAAU,CAAC,CAAC;IAChC,CAAC;IAEQ,OAAO;QACd,KAAK,CAAC,OAAO,EAAE,CAAC;QAChB,IAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC,iBAAiB,CAAC,CAAC;IACpD,CAAC","sourcesContent":["import type { BlockModel, Doc } from '@lumensuite/store';\n\nimport {\n  type DatabaseBlockModel,\n  DatabaseBlockSchema,\n} from '@lumensuite/affine-model';\nimport { BlockService } from '@lumensuite/block-std';\nimport { DatabaseSelection, type ViewMeta } from '@lumensuite/data-view';\nimport { viewPresets } from '@lumensuite/data-view/view-presets';\nimport { assertExists } from '@lumensuite/global/utils';\n\nimport {\n  addColumn,\n  applyColumnUpdate,\n  databaseViewAddView,\n  databaseViewInitEmpty,\n  databaseViewInitTemplate,\n  updateCell,\n  updateView,\n} from './utils.js';\n\nexport class DatabaseBlockService extends BlockService {\n  static override readonly flavour = DatabaseBlockSchema.model.flavour;\n\n  addColumn = addColumn;\n\n  applyColumnUpdate = applyColumnUpdate;\n\n  databaseViewAddView = databaseViewAddView;\n\n  databaseViewInitEmpty = databaseViewInitEmpty;\n\n  updateCell = updateCell;\n\n  updateView = updateView;\n\n  viewPresets = viewPresets;\n\n  initDatabaseBlock(\n    doc: Doc,\n    model: BlockModel,\n    databaseId: string,\n    viewMeta: ViewMeta,\n    isAppendNewRow = true\n  ) {\n    const blockModel = doc.getBlockById(databaseId) as DatabaseBlockModel;\n    assertExists(blockModel);\n    databaseViewInitTemplate(blockModel, viewMeta);\n    if (isAppendNewRow) {\n      // Add a paragraph after database\n      const parent = doc.getParent(model);\n      assertExists(parent);\n      doc.addBlock('affine:paragraph', {}, parent.id);\n    }\n    applyColumnUpdate(blockModel);\n  }\n\n  override mounted(): void {\n    super.mounted();\n    this.selectionManager.register(DatabaseSelection);\n  }\n}\n"]}