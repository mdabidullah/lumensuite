{"version":3,"file":"converts.js","sourceRoot":"","sources":["../../../src/database-block/columns/converts.ts"],"names":[],"mappings":"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","sourcesContent":["import { clamp } from '@lumensuite/affine-shared/utils';\nimport {\n  createColumnConvert,\n  getTagColor,\n  type SelectTag,\n} from '@lumensuite/data-view';\nimport { presetColumnConverts } from '@lumensuite/data-view/column-presets';\nimport { columnModelPresets } from '@lumensuite/data-view/column-pure-presets';\nimport { nanoid, Text } from '@lumensuite/store';\n\nimport { richTextColumnModelConfig } from './rich-text/define.js';\n\nexport const databaseColumnConverts = [\n  ...presetColumnConverts,\n  createColumnConvert(\n    richTextColumnModelConfig,\n    columnModelPresets.selectColumnModelConfig,\n    (_column, cells) => {\n      const options: Record<string, SelectTag> = {};\n      const getTag = (name: string) => {\n        if (options[name]) return options[name];\n        const tag: SelectTag = {\n          id: nanoid(),\n          value: name,\n          color: getTagColor(),\n        };\n        options[name] = tag;\n        return tag;\n      };\n      return {\n        cells: cells.map(v => {\n          const tags = v?.toString().split(',');\n          const value = tags?.[0]?.trim();\n          if (value) {\n            return getTag(value).id;\n          }\n          return undefined;\n        }),\n        column: {\n          options: Object.values(options),\n        },\n      };\n    }\n  ),\n  createColumnConvert(\n    richTextColumnModelConfig,\n    columnModelPresets.multiSelectColumnModelConfig,\n    (_column, cells) => {\n      const options: Record<string, SelectTag> = {};\n      const getTag = (name: string) => {\n        if (options[name]) return options[name];\n        const tag: SelectTag = {\n          id: nanoid(),\n          value: name,\n          color: getTagColor(),\n        };\n        options[name] = tag;\n        return tag;\n      };\n      return {\n        cells: cells.map(v => {\n          const result: string[] = [];\n          const values = v?.toString().split(',');\n          values?.forEach(value => {\n            value = value.trim();\n            if (value) {\n              result.push(getTag(value).id);\n            }\n          });\n          return result;\n        }),\n        column: {\n          options: Object.values(options),\n        },\n      };\n    }\n  ),\n  createColumnConvert(\n    richTextColumnModelConfig,\n    columnModelPresets.numberColumnModelConfig,\n    (_column, cells) => {\n      return {\n        column: {\n          decimal: 0,\n          format: 'number' as const,\n        },\n        cells: cells.map(v => {\n          const num = v ? parseFloat(v.toString()) : NaN;\n          return isNaN(num) ? undefined : num;\n        }),\n      };\n    }\n  ),\n  createColumnConvert(\n    richTextColumnModelConfig,\n    columnModelPresets.progressColumnModelConfig,\n    (_column, cells) => {\n      return {\n        column: {},\n        cells: cells.map(v => {\n          const progress = v ? parseInt(v.toString()) : NaN;\n          return !isNaN(progress) ? clamp(progress, 0, 100) : undefined;\n        }),\n      };\n    }\n  ),\n  createColumnConvert(\n    richTextColumnModelConfig,\n    columnModelPresets.checkboxColumnModelConfig,\n    (_column, cells) => {\n      const truthyValues = ['yes', 'true'];\n      return {\n        column: {},\n        cells: cells.map(v =>\n          v && truthyValues.includes(v.toString().toLowerCase())\n            ? true\n            : undefined\n        ),\n      };\n    }\n  ),\n  createColumnConvert(\n    columnModelPresets.checkboxColumnModelConfig,\n    richTextColumnModelConfig,\n    (_columns, cells) => {\n      return {\n        column: {},\n        cells: cells.map(v => new Text(v ? 'Yes' : 'No').yText),\n      };\n    }\n  ),\n  createColumnConvert(\n    columnModelPresets.multiSelectColumnModelConfig,\n    richTextColumnModelConfig,\n    (column, cells) => {\n      const optionMap = Object.fromEntries(column.options.map(v => [v.id, v]));\n      return {\n        column: {},\n        cells: cells.map(\n          arr =>\n            new Text(arr?.map(v => optionMap[v]?.value ?? '').join(',')).yText\n        ),\n      };\n    }\n  ),\n  createColumnConvert(\n    columnModelPresets.numberColumnModelConfig,\n    richTextColumnModelConfig,\n    (_column, cells) => ({\n      column: {},\n      cells: cells.map(v => new Text(v?.toString()).yText),\n    })\n  ),\n  createColumnConvert(\n    columnModelPresets.progressColumnModelConfig,\n    richTextColumnModelConfig,\n    (_column, cells) => ({\n      column: {},\n      cells: cells.map(v => new Text(v?.toString()).yText),\n    })\n  ),\n  createColumnConvert(\n    columnModelPresets.selectColumnModelConfig,\n    richTextColumnModelConfig,\n    (column, cells) => {\n      const optionMap = Object.fromEntries(column.options.map(v => [v.id, v]));\n      return {\n        column: {},\n        cells: cells.map(v => new Text(v ? optionMap[v]?.value : '').yText),\n      };\n    }\n  ),\n];\n"]}