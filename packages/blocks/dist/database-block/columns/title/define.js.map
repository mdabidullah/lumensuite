{"version":3,"file":"define.js","sourceRoot":"","sources":["../../../../src/database-block/columns/title/define.ts"],"names":[],"mappings":"AAEA,OAAO,EAAE,UAAU,EAAE,SAAS,EAAE,MAAM,uBAAuB,CAAC;AAE9D,MAAM,CAAC,MAAM,eAAe,GAAG,UAAU,CAAC,OAAO,CAAC,CAAC;AAEnD,MAAM,CAAC,MAAM,qBAAqB,GAAG,eAAe,CAAC,WAAW,CAAO;IACrE,IAAI,EAAE,OAAO;IACb,IAAI,EAAE,GAAG,EAAE,CAAC,SAAS,CAAC,MAAM,EAAE;IAC9B,WAAW,EAAE,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC;IACvB,YAAY,EAAE,IAAI,CAAC,EAAE,CAAC,IAAI,EAAE,QAAQ,EAAE,IAAI,EAAE;IAC5C,cAAc,EAAE,IAAI,CAAC,EAAE;QACrB,OAAO;YACL,KAAK,EAAE,IAAI;SACZ,CAAC;IACJ,CAAC;IACD,UAAU,EAAE,IAAI,CAAC,EAAE,CAAC,IAAI,EAAE,QAAQ,EAAE,IAAI,IAAI;IAC5C,QAAQ,EAAE,CAAC,KAAK,EAAE,KAAK,EAAE,QAAQ,EAAE,EAAE;QACnC,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;QAC9B,QAAQ,EAAE,CAAC;QACX,OAAO;YACL,OAAO,EAAE,GAAG,EAAE;gBACZ,KAAK,CAAC,KAAK,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;YAClC,CAAC;SACF,CAAC;IACJ,CAAC;IACD,WAAW,EAAE,CAAC,KAAK,EAAE,KAAK,EAAE,QAAQ,EAAE,EAAE;QACtC,MAAM,CAAC,GAAG,QAAmB,CAAC;QAC9B,IAAI,OAAO,CAAC,KAAK,QAAQ,EAAE,CAAC;YAC1B,KAAK,CAAC,OAAO,CAAC,CAAC,EAAE,KAAK,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;YAClC,OAAO,KAAK,CAAC;QACf,CAAC;QACD,IAAI,CAAC,IAAI,IAAI,EAAE,CAAC;YACd,KAAK,CAAC,OAAO,CAAC,CAAC,EAAE,KAAK,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;YACnC,OAAO,KAAK,CAAC;QACf,CAAC;QACD,OAAO,QAAQ,CAAC;IAClB,CAAC;IACD,OAAO,EAAE,IAAI,CAAC,EAAE,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,CAAC,MAAM,KAAK,CAAC;IAClD,MAAM,EAAE,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,EAAE,QAAQ,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;CAC5D,CAAC,CAAC","sourcesContent":["import type { Text } from '@blocksuite/store';\n\nimport { columnType, tRichText } from '@blocksuite/data-view';\n\nexport const titleColumnType = columnType('title');\n\nexport const titlePureColumnConfig = titleColumnType.modelConfig<Text>({\n  name: 'Title',\n  type: () => tRichText.create(),\n  defaultData: () => ({}),\n  cellToString: data => data?.toString() ?? '',\n  cellFromString: data => {\n    return {\n      value: data,\n    };\n  },\n  cellToJson: data => data?.toString() ?? null,\n  onUpdate: (value, _data, callback) => {\n    value.yText.observe(callback);\n    callback();\n    return {\n      dispose: () => {\n        value.yText.unobserve(callback);\n      },\n    };\n  },\n  valueUpdate: (value, _data, newValue) => {\n    const v = newValue as unknown;\n    if (typeof v === 'string') {\n      value.replace(0, value.length, v);\n      return value;\n    }\n    if (v == null) {\n      value.replace(0, value.length, '');\n      return value;\n    }\n    return newValue;\n  },\n  isEmpty: data => data == null || data.length === 0,\n  values: data => (data?.toString() ? [data.toString()] : []),\n});\n"]}