{"version":3,"file":"data-source.js","sourceRoot":"","sources":["../../src/database-block/data-source.ts"],"names":[],"mappings":"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","sourcesContent":["import type { DatabaseBlockModel } from '@blocksuite/affine-model';\nimport type { EditorHost } from '@blocksuite/block-std';\n\nimport {\n  insertPositionToIndex,\n  type InsertToPosition,\n} from '@blocksuite/affine-shared/utils';\nimport {\n  type ColumnMeta,\n  createUniComponentFromWebComponent,\n  type DatabaseFlags,\n  DataSourceBase,\n  type DataViewDataType,\n  type DataViewTypes,\n  type DetailSlots,\n  uniMap,\n  type ViewManager,\n  ViewManagerBase,\n  type ViewMeta,\n} from '@blocksuite/data-view';\nimport { columnPresets } from '@blocksuite/data-view/column-presets';\nimport { assertExists } from '@blocksuite/global/utils';\nimport { type BlockModel, Text } from '@blocksuite/store';\nimport { computed, type ReadonlySignal } from '@lit-labs/preact-signals';\n\nimport { getIcon } from './block-icons.js';\nimport {\n  databaseBlockAllColumnMap,\n  databaseBlockColumnList,\n  databaseColumnConverts,\n} from './columns/index.js';\nimport { HostContextKey } from './context/host-context.js';\nimport { BlockRenderer } from './detail-panel/block-renderer.js';\nimport { NoteRenderer } from './detail-panel/note-renderer.js';\nimport {\n  addColumn,\n  applyCellsUpdate,\n  applyColumnUpdate,\n  copyCellsByColumn,\n  databaseViewAddView,\n  deleteRows,\n  deleteView,\n  duplicateView,\n  findColumnIndex,\n  getCell,\n  getColumn,\n  moveViewTo,\n  updateCell,\n  updateCells,\n  updateColumn,\n  updateView,\n} from './utils.js';\nimport { databaseBlockViewMap, databaseBlockViews } from './views/models.js';\n\nexport type DatabaseBlockDataSourceConfig = {\n  pageId: string;\n  blockId: string;\n};\n\nexport class DatabaseBlockDataSource extends DataSourceBase {\n  private _batch = 0;\n\n  private readonly _model: DatabaseBlockModel;\n\n  override featureFlags$: ReadonlySignal<DatabaseFlags> = computed(() => {\n    return {\n      enable_number_formatting:\n        this.doc.awarenessStore.getFlag('enable_database_number_formatting') ??\n        false,\n    };\n  });\n\n  properties$: ReadonlySignal<string[]> = computed(() => {\n    return this._model.columns$.value.map(column => column.id);\n  });\n\n  readonly$: ReadonlySignal<boolean> = computed(() => {\n    return this._model.doc.awarenessStore.isReadonly(\n      this._model.doc.blockCollection\n    );\n  });\n\n  rows$: ReadonlySignal<string[]> = computed(() => {\n    return this._model.children.map(v => v.id);\n  });\n\n  viewDataList$: ReadonlySignal<DataViewDataType[]> = computed(() => {\n    return this._model.views$.value as DataViewDataType[];\n  });\n\n  override viewManager: ViewManager = new ViewManagerBase(this);\n\n  viewMetas = databaseBlockViews;\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  get addPropertyConfigList(): ColumnMeta<any, any, any>[] {\n    return databaseBlockColumnList;\n  }\n\n  override get detailSlots(): DetailSlots {\n    return {\n      ...super.detailSlots,\n      header: uniMap(\n        createUniComponentFromWebComponent(BlockRenderer),\n        props => ({\n          ...props,\n          host: this.host,\n        })\n      ),\n      note: uniMap(createUniComponentFromWebComponent(NoteRenderer), props => ({\n        ...props,\n        model: this._model,\n        host: this.host,\n      })),\n    };\n  }\n\n  get doc() {\n    return this._model.doc;\n  }\n\n  constructor(\n    private host: EditorHost,\n    config: DatabaseBlockDataSourceConfig\n  ) {\n    super();\n    this._model = host.doc.collection\n      .getDoc(config.pageId)\n      ?.getBlockById(config.blockId) as DatabaseBlockModel;\n    this.setContext(HostContextKey, host);\n  }\n\n  private _runCapture() {\n    if (this._batch) {\n      return;\n    }\n\n    this._batch = requestAnimationFrame(() => {\n      this.doc.captureSync();\n      this._batch = 0;\n    });\n  }\n\n  private getModelById(rowId: string): BlockModel | undefined {\n    return this._model.children[this._model.childMap.value.get(rowId) ?? -1];\n  }\n\n  private newColumnName() {\n    let i = 1;\n    while (\n      this._model.columns$.value.some(column => column.name === `Column ${i}`)\n    ) {\n      i++;\n    }\n    return `Column ${i}`;\n  }\n\n  cellChangeValue(rowId: string, propertyId: string, value: unknown): void {\n    this._runCapture();\n\n    const type = this.propertyGetType(propertyId);\n    const update = this.getPropertyMeta(type).config.valueUpdate;\n    let newValue = value;\n    if (update) {\n      const old = this.cellGetValue(rowId, propertyId);\n      newValue = update(old, this.propertyGetData(propertyId), value);\n    }\n    if (type === 'title' && newValue instanceof Text) {\n      this._model.doc.transact(() => {\n        this._model.text?.clear();\n        this._model.text?.join(newValue);\n      });\n      return;\n    }\n    if (this._model.columns$.value.some(v => v.id === propertyId)) {\n      updateCell(this._model, rowId, {\n        columnId: propertyId,\n        value: newValue,\n      });\n      applyCellsUpdate(this._model);\n    }\n  }\n\n  cellGetValue(rowId: string, propertyId: string): unknown {\n    if (propertyId === 'type') {\n      const model = this.getModelById(rowId);\n      if (!model) {\n        return;\n      }\n      return getIcon(model);\n    }\n    const type = this.propertyGetType(propertyId);\n    if (type === 'title') {\n      const model = this.getModelById(rowId);\n      return model?.text;\n    }\n    return getCell(this._model, rowId, propertyId)?.value;\n  }\n\n  getPropertyMeta(type: string): ColumnMeta {\n    return databaseBlockAllColumnMap[type];\n  }\n\n  propertyAdd(insertToPosition: InsertToPosition, type?: string): string {\n    this.doc.captureSync();\n    const result = addColumn(\n      this._model,\n      insertToPosition,\n      databaseBlockAllColumnMap[\n        type ?? columnPresets.multiSelectColumnConfig.type\n      ].create(this.newColumnName())\n    );\n    applyColumnUpdate(this._model);\n    return result;\n  }\n\n  propertyChangeData(propertyId: string, data: Record<string, unknown>): void {\n    this._runCapture();\n\n    updateColumn(this._model, propertyId, () => ({ data }));\n    applyColumnUpdate(this._model);\n  }\n\n  propertyChangeName(propertyId: string, name: string): void {\n    this.doc.captureSync();\n    updateColumn(this._model, propertyId, () => ({ name }));\n    applyColumnUpdate(this._model);\n  }\n\n  propertyChangeType(propertyId: string, toType: string): void {\n    const currentType = this.propertyGetType(propertyId);\n    const currentData = this.propertyGetData(propertyId);\n    const rows = this.rows$.value;\n    const currentCells = rows.map(rowId =>\n      this.cellGetValue(rowId, propertyId)\n    );\n    const convertFunction = databaseColumnConverts.find(\n      v => v.from === currentType && v.to === toType\n    )?.convert;\n    const result = convertFunction?.(\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      currentData as any,\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      currentCells as any\n    ) ?? {\n      column: databaseBlockAllColumnMap[toType].config.defaultData(),\n      cells: currentCells.map(() => undefined),\n    };\n    this.doc.captureSync();\n    updateColumn(this._model, propertyId, () => ({\n      type: toType,\n      data: result.column,\n    }));\n    const cells: Record<string, unknown> = {};\n    currentCells.forEach((value, i) => {\n      if (value != null || result.cells[i] != null) {\n        cells[rows[i]] = result.cells[i];\n      }\n    });\n    updateCells(this._model, propertyId, cells);\n    applyColumnUpdate(this._model);\n  }\n\n  propertyDelete(id: string): void {\n    this.doc.captureSync();\n    const index = findColumnIndex(this._model, id);\n    if (index < 0) return;\n\n    this.doc.transact(() => {\n      this._model.columns = this._model.columns.filter((_, i) => i !== index);\n    });\n  }\n\n  propertyDuplicate(columnId: string): string {\n    this.doc.captureSync();\n    const currentSchema = getColumn(this._model, columnId);\n    assertExists(currentSchema);\n    const { id: copyId, ...nonIdProps } = currentSchema;\n    const names = new Set(this._model.columns$.value.map(v => v.name));\n    let index = 1;\n    while (names.has(`${nonIdProps.name}(${index})`)) {\n      index++;\n    }\n    const schema = { ...nonIdProps, name: `${nonIdProps.name}(${index})` };\n    const id = addColumn(\n      this._model,\n      {\n        before: false,\n        id: columnId,\n      },\n      schema\n    );\n    copyCellsByColumn(this._model, copyId, id);\n    applyColumnUpdate(this._model);\n    return id;\n  }\n\n  propertyGetData(propertyId: string): Record<string, unknown> {\n    return (\n      this._model.columns$.value.find(v => v.id === propertyId)?.data ?? {}\n    );\n  }\n\n  override propertyGetDefaultWidth(propertyId: string): number {\n    if (this.propertyGetType(propertyId) === 'title') {\n      return 260;\n    }\n    return super.propertyGetDefaultWidth(propertyId);\n  }\n\n  propertyGetName(propertyId: string): string {\n    if (propertyId === 'type') {\n      return 'Block Type';\n    }\n    return (\n      this._model.columns$.value.find(v => v.id === propertyId)?.name ?? ''\n    );\n  }\n\n  override propertyGetReadonly(propertyId: string): boolean {\n    if (propertyId === 'type') return true;\n    return false;\n  }\n\n  propertyGetType(propertyId: string): string {\n    if (propertyId === 'type') {\n      return 'image';\n    }\n    return (\n      this._model.columns$.value.find(v => v.id === propertyId)?.type ?? ''\n    );\n  }\n\n  rowAdd(insertPosition: InsertToPosition | number): string {\n    this.doc.captureSync();\n    const index =\n      typeof insertPosition === 'number'\n        ? insertPosition\n        : insertPositionToIndex(insertPosition, this._model.children);\n    return this.doc.addBlock('affine:paragraph', {}, this._model.id, index);\n  }\n\n  rowDelete(ids: string[]): void {\n    this.doc.captureSync();\n    this.doc.updateBlock(this._model, {\n      children: this._model.children.filter(v => !ids.includes(v.id)),\n    });\n    deleteRows(this._model, ids);\n  }\n\n  rowMove(rowId: string, position: InsertToPosition): void {\n    const model = this.doc.getBlockById(rowId);\n    if (model) {\n      const index = insertPositionToIndex(position, this._model.children);\n      const target = this._model.children[index];\n      if (target?.id === rowId) {\n        return;\n      }\n      this.doc.moveBlocks([model], this._model, target);\n    }\n  }\n\n  viewDataAdd(viewType: DataViewTypes): string {\n    this._model.doc.captureSync();\n    const view = databaseViewAddView(\n      this._model,\n      databaseBlockViewMap[viewType]\n    );\n    return view.id;\n  }\n\n  viewDataDelete(viewId: string): void {\n    this._model.doc.captureSync();\n    deleteView(this._model, viewId);\n  }\n\n  viewDataDuplicate(id: string): string {\n    return duplicateView(this._model, id);\n  }\n\n  viewDataGet(viewId: string): DataViewDataType {\n    return this.viewDataList$.value.find(data => data.id === viewId)!;\n  }\n\n  viewDataMoveTo(id: string, position: InsertToPosition): void {\n    moveViewTo(this._model, id, position);\n  }\n\n  viewDataUpdate<ViewData extends DataViewDataType>(\n    id: string,\n    updater: (data: ViewData) => Partial<ViewData>\n  ): void {\n    updateView(this._model, id, updater);\n  }\n\n  viewMetaGet(type: string): ViewMeta {\n    return databaseBlockViewMap[type];\n  }\n\n  viewMetaGetById(viewId: string): ViewMeta {\n    const view = this.viewDataGet(viewId);\n    return this.viewMetaGet(view.mode);\n  }\n}\n"]}