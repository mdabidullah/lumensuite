{"version":3,"file":"mindmap-preview.unit.spec.js","sourceRoot":"","sources":["../../../src/__tests__/surface/mindmap-preview.unit.spec.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,aAAa,EAAE,MAAM,EAAE,MAAM,mBAAmB,CAAC;AAC1D,OAAO,EAAE,QAAQ,EAAE,MAAM,EAAE,IAAI,EAAE,MAAM,QAAQ,CAAC;AAEhD,OAAO,EAAE,iBAAiB,EAAE,MAAM,qDAAqD,CAAC;AAExF,QAAQ,CAAC,6DAA6D,EAAE,GAAG,EAAE;IAC3E,IAAI,CAAC,YAAY,EAAE,GAAG,EAAE;QACtB,MAAM,QAAQ,GAAG;;;;;;CAMpB,CAAC;QACE,MAAM,UAAU,GAAG,IAAI,aAAa,CAAC,EAAE,MAAM,EAAE,IAAI,MAAM,EAAE,EAAE,CAAC,CAAC;QAC/D,UAAU,CAAC,IAAI,CAAC,UAAU,EAAE,CAAC;QAC7B,MAAM,GAAG,GAAG,UAAU,CAAC,SAAS,EAAE,CAAC;QACnC,MAAM,KAAK,GAAG,iBAAiB,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC;QAE/C,MAAM,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC;YACpB,IAAI,EAAE,QAAQ;YACd,QAAQ,EAAE;gBACR;oBACE,IAAI,EAAE,QAAQ;oBACd,QAAQ,EAAE;wBACR;4BACE,IAAI,EAAE,QAAQ;4BACd,QAAQ,EAAE,EAAE;yBACb;qBACF;iBACF;gBACD;oBACE,IAAI,EAAE,QAAQ;oBACd,QAAQ,EAAE;wBACR;4BACE,IAAI,EAAE,QAAQ;4BACd,QAAQ,EAAE,EAAE;yBACb;qBACF;iBACF;aACF;SACF,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,IAAI,CAAC,kCAAkC,EAAE,GAAG,EAAE;QAC5C,MAAM,QAAQ,GAAG;;;;;;CAMpB,CAAC;QACE,MAAM,UAAU,GAAG,IAAI,aAAa,CAAC,EAAE,MAAM,EAAE,IAAI,MAAM,EAAE,EAAE,CAAC,CAAC;QAC/D,UAAU,CAAC,IAAI,CAAC,UAAU,EAAE,CAAC;QAC7B,MAAM,GAAG,GAAG,UAAU,CAAC,SAAS,EAAE,CAAC;QACnC,MAAM,KAAK,GAAG,iBAAiB,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC;QAE/C,MAAM,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC;YACpB,IAAI,EAAE,QAAQ;YACd,QAAQ,EAAE;gBACR;oBACE,IAAI,EAAE,QAAQ;oBACd,QAAQ,EAAE;wBACR;4BACE,IAAI,EAAE,QAAQ;4BACd,QAAQ,EAAE,EAAE;yBACb;qBACF;iBACF;gBACD;oBACE,IAAI,EAAE,QAAQ;oBACd,QAAQ,EAAE;wBACR;4BACE,IAAI,EAAE,QAAQ;4BACd,QAAQ,EAAE,EAAE;yBACb;qBACF;iBACF;aACF;SACF,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,IAAI,CAAC,YAAY,EAAE,GAAG,EAAE;QACtB,MAAM,QAAQ,GAAG,EAAE,CAAC;QACpB,MAAM,UAAU,GAAG,IAAI,aAAa,CAAC,EAAE,MAAM,EAAE,IAAI,MAAM,EAAE,EAAE,CAAC,CAAC;QAC/D,UAAU,CAAC,IAAI,CAAC,UAAU,EAAE,CAAC;QAC7B,MAAM,GAAG,GAAG,UAAU,CAAC,SAAS,EAAE,CAAC;QACnC,MAAM,KAAK,GAAG,iBAAiB,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC;QAE/C,MAAM,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;IAC9B,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import { DocCollection, Schema } from '@blocksuite/store';\nimport { describe, expect, test } from 'vitest';\n\nimport { markdownToMindmap } from '../../surface-block/mini-mindmap/mindmap-preview.js';\n\ndescribe('markdownToMindmap: convert markdown list to a mind map tree', () => {\n  test('basic case', () => {\n    const markdown = `\n- Text A\n  - Text B\n    - Text C\n  - Text D\n    - Text E\n`;\n    const collection = new DocCollection({ schema: new Schema() });\n    collection.meta.initialize();\n    const doc = collection.createDoc();\n    const nodes = markdownToMindmap(markdown, doc);\n\n    expect(nodes).toEqual({\n      text: 'Text A',\n      children: [\n        {\n          text: 'Text B',\n          children: [\n            {\n              text: 'Text C',\n              children: [],\n            },\n          ],\n        },\n        {\n          text: 'Text D',\n          children: [\n            {\n              text: 'Text E',\n              children: [],\n            },\n          ],\n        },\n      ],\n    });\n  });\n\n  test('basic case with different indent', () => {\n    const markdown = `\n- Text A\n    - Text B\n        - Text C\n    - Text D\n        - Text E\n`;\n    const collection = new DocCollection({ schema: new Schema() });\n    collection.meta.initialize();\n    const doc = collection.createDoc();\n    const nodes = markdownToMindmap(markdown, doc);\n\n    expect(nodes).toEqual({\n      text: 'Text A',\n      children: [\n        {\n          text: 'Text B',\n          children: [\n            {\n              text: 'Text C',\n              children: [],\n            },\n          ],\n        },\n        {\n          text: 'Text D',\n          children: [\n            {\n              text: 'Text E',\n              children: [],\n            },\n          ],\n        },\n      ],\n    });\n  });\n\n  test('empty case', () => {\n    const markdown = '';\n    const collection = new DocCollection({ schema: new Schema() });\n    collection.meta.initialize();\n    const doc = collection.createDoc();\n    const nodes = markdownToMindmap(markdown, doc);\n\n    expect(nodes).toEqual(null);\n  });\n});\n"]}