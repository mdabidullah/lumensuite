{"version":3,"file":"database.unit.spec.js","sourceRoot":"","sources":["../../../src/__tests__/database/database.unit.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import type { BlockModel, Doc } from '@lumensuite/store';\n\nimport {\n  type Cell,\n  type Column,\n  type DatabaseBlockModel,\n  DatabaseBlockSchema,\n  NoteBlockSchema,\n  ParagraphBlockSchema,\n  RootBlockSchema,\n} from '@lumensuite/affine-model';\nimport { columnModelPresets } from '@lumensuite/data-view/column-pure-presets';\nimport { DocCollection, IdGeneratorType, Schema } from '@lumensuite/store';\nimport { beforeEach, describe, expect, test } from 'vitest';\n\nimport { databaseBlockColumns } from '../../database-block/index.js';\nimport {\n  addColumn,\n  copyCellsByColumn,\n  deleteColumn,\n  getCell,\n  getColumn,\n  updateCell,\n} from '../../database-block/utils.js';\n\nconst AffineSchemas = [\n  RootBlockSchema,\n  NoteBlockSchema,\n  ParagraphBlockSchema,\n  DatabaseBlockSchema,\n];\n\nfunction createTestOptions() {\n  const idGenerator = IdGeneratorType.AutoIncrement;\n  const schema = new Schema();\n  schema.register(AffineSchemas);\n  return { id: 'test-collection', idGenerator, schema };\n}\n\nfunction createTestDoc(docId = 'doc0') {\n  const options = createTestOptions();\n  const collection = new DocCollection(options);\n  collection.meta.initialize();\n  const doc = collection.createDoc({ id: docId });\n  doc.load();\n  return doc;\n}\n\ndescribe('DatabaseManager', () => {\n  let doc: Doc;\n  let db: DatabaseBlockModel;\n\n  let rootId: BlockModel['id'];\n  let noteBlockId: BlockModel['id'];\n  let databaseBlockId: BlockModel['id'];\n  let p1: BlockModel['id'];\n  let p2: BlockModel['id'];\n  let col1: Column['id'];\n  let col2: Column['id'];\n  let col3: Column['id'];\n\n  const selection = [\n    { id: '1', value: 'Done', color: 'var(--affine-tag-white)' },\n    { id: '2', value: 'TODO', color: 'var(--affine-tag-pink)' },\n    { id: '3', value: 'WIP', color: 'var(--affine-tag-blue)' },\n  ];\n\n  beforeEach(() => {\n    doc = createTestDoc();\n\n    rootId = doc.addBlock('affine:page', {\n      title: new doc.Text('database test'),\n    });\n    noteBlockId = doc.addBlock('affine:note', {}, rootId);\n\n    databaseBlockId = doc.addBlock(\n      'affine:database' as LumenSuite.Flavour,\n      {\n        columns: [],\n        titleColumn: 'Title',\n      },\n      noteBlockId\n    );\n\n    const databaseModel = doc.getBlockById(\n      databaseBlockId\n    ) as DatabaseBlockModel;\n    db = databaseModel;\n\n    col1 = addColumn(\n      db,\n      'end',\n      databaseBlockColumns.numberColumnConfig.create('Number')\n    );\n    col2 = addColumn(\n      db,\n      'end',\n      columnModelPresets.selectColumnModelConfig.create('Single Select', {\n        options: selection,\n      })\n    );\n    col3 = addColumn(\n      db,\n      'end',\n      databaseBlockColumns.richTextColumnConfig.create('Rich Text')\n    );\n\n    doc.updateBlock(databaseModel, {\n      columns: [col1, col2, col3],\n    });\n\n    p1 = doc.addBlock(\n      'affine:paragraph',\n      {\n        text: new doc.Text('text1'),\n      },\n      databaseBlockId\n    );\n    p2 = doc.addBlock(\n      'affine:paragraph',\n      {\n        text: new doc.Text('text2'),\n      },\n      databaseBlockId\n    );\n\n    updateCell(db, p1, {\n      columnId: col1,\n      value: 0.1,\n    });\n    updateCell(db, p2, {\n      columnId: col2,\n      value: [selection[1]],\n    });\n  });\n\n  test('getColumn', () => {\n    const column = {\n      ...databaseBlockColumns.numberColumnConfig.create('testColumnId'),\n      id: 'testColumnId',\n    };\n    addColumn(db, 'end', column);\n\n    const result = getColumn(db, column.id);\n    expect(result).toEqual(column);\n  });\n\n  test('addColumn', () => {\n    const column =\n      databaseBlockColumns.numberColumnConfig.create('Test Column');\n    const id = addColumn(db, 'end', column);\n    const result = getColumn(db, id);\n\n    expect(result).toMatchObject(column);\n    expect(result).toHaveProperty('id');\n  });\n\n  test('deleteColumn', () => {\n    const column = {\n      ...databaseBlockColumns.numberColumnConfig.create('Test Column'),\n      id: 'testColumnId',\n    };\n    addColumn(db, 'end', column);\n    expect(getColumn(db, column.id)).toEqual(column);\n\n    deleteColumn(db, column.id);\n    expect(getColumn(db, column.id)).toBeUndefined();\n  });\n\n  test('getCell', () => {\n    const modelId = doc.addBlock(\n      'affine:paragraph',\n      {\n        text: new doc.Text('paragraph'),\n      },\n      noteBlockId\n    );\n    const column = {\n      ...databaseBlockColumns.numberColumnConfig.create('Test Column'),\n      id: 'testColumnId',\n    };\n    const cell: Cell = {\n      columnId: column.id,\n      value: 42,\n    };\n\n    addColumn(db, 'end', column);\n    updateCell(db, modelId, cell);\n\n    const model = doc.getBlockById(modelId);\n\n    expect(model).not.toBeNull();\n\n    const result = getCell(db, model!.id, column.id);\n    expect(result).toEqual(cell);\n  });\n\n  test('updateCell', () => {\n    const newRowId = doc.addBlock(\n      'affine:paragraph',\n      {\n        text: new doc.Text('text3'),\n      },\n      databaseBlockId\n    );\n\n    updateCell(db, newRowId, {\n      columnId: col2,\n      value: [selection[2]],\n    });\n\n    const cell = getCell(db, newRowId, col2);\n    expect(cell).toEqual({\n      columnId: col2,\n      value: [selection[2]],\n    });\n  });\n\n  test('copyCellsByColumn', () => {\n    const newColId = addColumn(\n      db,\n      'end',\n      columnModelPresets.selectColumnModelConfig.create('Copied Select', {\n        options: selection,\n      })\n    );\n\n    copyCellsByColumn(db, col2, newColId);\n\n    const cell = getCell(db, p2, newColId);\n    expect(cell).toEqual({\n      columnId: newColId,\n      value: [selection[1]],\n    });\n  });\n});\n"]}