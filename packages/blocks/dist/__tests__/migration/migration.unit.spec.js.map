{"version":3,"file":"migration.unit.spec.js","sourceRoot":"","sources":["../../../src/__tests__/migration/migration.unit.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { SurfaceBlockSchema } from '@lumensuite/affine-block-surface';\nimport {\n  DatabaseBlockSchema,\n  FrameBlockSchema,\n  ListBlockSchema,\n  NoteBlockSchema,\n  ParagraphBlockSchema,\n  RootBlockSchema,\n} from '@lumensuite/affine-model';\nimport { DocCollection, Schema, type Y } from '@lumensuite/store';\n// normal import\nimport { readFile } from 'node:fs/promises';\nimport { join } from 'node:path';\nimport { fileURLToPath } from 'node:url';\nimport { assert, describe, expect, test } from 'vitest';\n\nasync function loadBinary(name: string) {\n  const originPath = fileURLToPath(import.meta.url);\n  const path = join(originPath, `../ydocs/${name}.ydoc`);\n  const buffer = await readFile(path);\n  const update = new Uint8Array(buffer);\n  const doc = new DocCollection.Y.Doc();\n  DocCollection.Y.applyUpdate(doc, update);\n  return doc;\n}\n\nconst schema = new Schema();\nschema.register([\n  RootBlockSchema,\n  SurfaceBlockSchema,\n  NoteBlockSchema,\n  ParagraphBlockSchema,\n  ListBlockSchema,\n  DatabaseBlockSchema,\n  FrameBlockSchema,\n]);\n\ndescribe('collection migration', () => {\n  test('add pageVersion in collection meta', async () => {\n    const doc = await loadBinary('workspace-v1-v2');\n\n    const meta = doc.getMap('meta');\n    const before = meta.toJSON();\n    assert.equal(before['workspaceVersion'], 1);\n    assert.isUndefined(before['pageVersion']);\n\n    schema.upgradeCollection(doc);\n\n    const after = meta.toJSON();\n    assert.equal(after['workspaceVersion'], 2);\n    assert.equal(after['pageVersion'], 1);\n  });\n});\n\ndescribe('block migration', () => {\n  test('update shape and text element, `isBold` -> `bold`, `isItalic` -> `italic`, surface v3 -> v4', async () => {\n    const doc = await loadBinary('page-surface-v3-v4');\n\n    // @ts-ignore\n    let surfaceElements = doc\n      .getMap('blocks')\n      .get('zUHGq4EHQJ')\n      .get('prop:elements') as Y.Map<unknown>;\n    let text = surfaceElements.get('Cj2MNGM9UK') as Y.Map<unknown>;\n    let shape = surfaceElements.get('Rl2IT9rGoP') as Y.Map<unknown>;\n\n    assert.equal(text.get('isBold'), true);\n    assert.equal(text.get('isItalic'), true);\n    assert.equal((text.get('text') as Y.Text).toJSON(), 'aaa');\n    assert.isUndefined(text.get('bold'));\n    assert.isUndefined(text.get('italic'));\n\n    assert.equal(shape.get('isBold'), true);\n    assert.equal(shape.get('isItalic'), true);\n    assert.isUndefined(shape.get('bold'));\n    assert.isUndefined(shape.get('italic'));\n\n    schema.upgradeDoc(\n      0,\n      {\n        'affine:page': 1,\n        'affine:note': 1,\n        'affine:paragraph': 1,\n        'affine:surface': 3,\n      },\n      doc\n    );\n\n    // @ts-ignore\n    surfaceElements = doc\n      .getMap('blocks')\n      .get('zUHGq4EHQJ')\n      .get('prop:elements')\n      .get('value') as Y.Map<unknown>;\n    text = surfaceElements.get('Cj2MNGM9UK') as Y.Map<unknown>;\n    shape = surfaceElements.get('Rl2IT9rGoP') as Y.Map<unknown>;\n\n    assert.isUndefined(text.get('isBold'));\n    assert.isUndefined(text.get('isItalic'));\n    assert.equal(text.get('bold'), true);\n    assert.equal(text.get('italic'), true);\n\n    assert.equal((text.get('text') as Y.Text).toJSON(), 'aaa');\n\n    assert.isUndefined(shape.get('isBold'));\n    assert.isUndefined(shape.get('isItalic'));\n    assert.equal(shape.get('bold'), true);\n    assert.equal(shape.get('italic'), true);\n  });\n\n  test('fix wrong connector data', async () => {\n    const doc = await loadBinary('connector');\n    // @ts-ignore\n    const surfaceElements = doc\n      .getMap('blocks')\n      .get('BOpLR3siGx')\n      .get('prop:elements') as Y.Map<unknown>;\n\n    let connector = surfaceElements.get('Gt8_2oZB8h') as Y.Map<unknown>;\n\n    assert.exists(connector);\n\n    schema.upgradeDoc(\n      0,\n      {\n        'affine:list': 1,\n        'affine:page': 1,\n        'affine:note': 1,\n        'affine:paragraph': 1,\n        'affine:surface': 3,\n      },\n      doc\n    );\n\n    connector = surfaceElements.get('Gt8_2oZB8h') as Y.Map<unknown>;\n\n    assert.notExists(connector);\n  });\n\n  test('frame element to block', async () => {\n    const doc = await loadBinary('frame-element-to-block');\n\n    const blocks = doc.getMap('blocks');\n\n    const page = blocks.get('H4fVFXmGUu') as Y.Map<unknown>;\n\n    // @ts-ignore\n    const surfaceElements = blocks\n      .get('eligOTIQu-')\n      .get('prop:elements')\n      .get('value') as Y.Map<unknown>;\n    assert.exists(surfaceElements.get('2'));\n\n    schema.upgradeDoc(\n      0,\n      {\n        'affine:surface': 5,\n      },\n      doc\n    );\n\n    assert.notExists(surfaceElements.get('2'));\n    const pageChildren = page.get('sys:children') as Y.Array<string>;\n    const id = pageChildren.get(pageChildren.length - 1);\n    assert.equal(id, '2');\n    assert.exists(blocks.get(id));\n  });\n\n  test('update database block title data', async () => {\n    const doc = await loadBinary('page-database-v2-v3');\n\n    let databaseBlock = (\n      doc.getMap('blocks').get('Y76JkP9XRn') as Y.Map<unknown>\n    ).toJSON();\n    expect(databaseBlock['prop:titleColumnName']).toBe('Title');\n    expect(databaseBlock['prop:titleColumnWidth']).toBe(200);\n    expect(\n      databaseBlock['prop:columns'].find(\n        (v: Record<string, unknown>) => v.type === 'title'\n      )\n    ).toBeUndefined();\n    expect(databaseBlock['prop:views'].length).toBe(2);\n\n    schema.upgradeDoc(\n      0,\n      {\n        'affine:page': 1,\n        'affine:surface': 4,\n        'affine:note': 1,\n        'affine:paragraph': 1,\n        'affine:database': 2,\n      },\n      doc\n    );\n    databaseBlock = (\n      doc.getMap('blocks').get('Y76JkP9XRn') as Y.Map<unknown>\n    ).toJSON();\n    expect(databaseBlock['prop:titleColumnName']).toBeUndefined();\n    expect(databaseBlock['prop:titleColumnWidth']).toBeUndefined();\n    const titleColumn = databaseBlock['prop:columns'].find(\n      (v: Record<string, unknown>) => v.type === 'title'\n    );\n    expect(titleColumn.type).toBe('title');\n    for (const view of databaseBlock['prop:views']) {\n      if (view['mode'] === 'table') {\n        expect(\n          view['columns'].find(\n            (v: Record<string, unknown>) => v.id === titleColumn.id\n          ).width\n        ).toBe(200);\n      }\n    }\n  });\n});\n"]}