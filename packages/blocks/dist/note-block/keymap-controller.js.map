{"version":3,"file":"keymap-controller.js","sourceRoot":"","sources":["../../src/note-block/keymap-controller.ts"],"names":[],"mappings":"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","sourcesContent":["import type {\n  BaseSelection,\n  BlockComponent,\n  BlockSelection,\n  UIEventHandler,\n  UIEventStateContext,\n} from '@lumensuite/block-std';\nimport type { ReactiveController, ReactiveControllerHost } from 'lit';\n\nimport { assertExists } from '@lumensuite/global/utils';\n\nimport { moveBlockConfigs } from '../_common/configs/move-block.js';\nimport { quickActionConfig } from '../_common/configs/quick-action/config.js';\nimport { textConversionConfigs } from '../_common/configs/text-conversion.js';\nimport { matchFlavours } from '../_common/utils/index.js';\nimport { onModelElementUpdated } from '../root-block/utils/callback.js';\nimport { ensureBlockInContainer } from './utils.js';\n\nexport class KeymapController implements ReactiveController {\n  private _anchorSel: BlockSelection | null = null;\n\n  private _bindMoveBlockHotKey = () => {\n    moveBlockConfigs.forEach(config => {\n      config.hotkey.forEach(key => {\n        this.host.bindHotKey({\n          [key]: ctx => {\n            ctx.get('defaultState').event.preventDefault();\n            return config.action(this.host);\n          },\n        });\n      });\n    });\n  };\n\n  private _bindQuickActionHotKey = () => {\n    quickActionConfig.forEach(config => {\n      if (!config.hotkey) return;\n      this.host.bindHotKey({\n        [config.hotkey]: ctx => {\n          if (!config.showWhen(this.host.host)) return;\n\n          ctx.get('defaultState').event.preventDefault();\n          config.action(this.host.host);\n        },\n      });\n    });\n  };\n\n  private _bindTextConversionHotKey = () => {\n    textConversionConfigs.forEach(item => {\n      if (!item.hotkey) return;\n\n      item.hotkey.forEach(key => {\n        this.host.bindHotKey({\n          [key]: ctx => {\n            ctx.get('defaultState').event.preventDefault();\n\n            const [result] = this._std.command\n              .chain()\n              .updateBlockType({\n                flavour: item.flavour,\n                props: {\n                  type: item.type,\n                },\n              })\n              .inline((ctx, next) => {\n                const newModels = ctx.updatedBlocks;\n                const host = ctx.std.host;\n                if (!host || !newModels) {\n                  return;\n                }\n\n                if (item.flavour !== 'affine:code') {\n                  return;\n                }\n\n                const [codeModel] = newModels;\n                onModelElementUpdated(host, codeModel, codeElement => {\n                  this._std.selection.setGroup('note', [\n                    this._std.selection.create('text', {\n                      from: {\n                        blockId: codeElement.blockId,\n                        index: 0,\n                        length: codeModel.text?.length ?? 0,\n                      },\n                      to: null,\n                    }),\n                  ]);\n                }).catch(console.error);\n\n                next();\n              })\n              .run();\n\n            return result;\n          },\n        });\n      });\n    });\n  };\n\n  private _focusBlock: BlockComponent | null = null;\n\n  private _onArrowDown = (ctx: UIEventStateContext) => {\n    const event = ctx.get('defaultState').event;\n\n    const [result] = this._std.command\n      .chain()\n      .inline((_, next) => {\n        this._reset();\n        return next();\n      })\n      .try(cmd => [\n        // text selection - select the next block\n        // 1. is paragraph, list, code block - follow the default behavior\n        // 2. is not - select the next block (use block selection instead of text selection)\n        cmd\n          .getTextSelection()\n          .inline<'currentSelectionPath'>((ctx, next) => {\n            const currentTextSelection = ctx.currentTextSelection;\n            assertExists(currentTextSelection);\n            return next({ currentSelectionPath: currentTextSelection.blockId });\n          })\n          .getNextBlock()\n          .inline((ctx, next) => {\n            const { nextBlock } = ctx;\n\n            if (!nextBlock) {\n              return;\n            }\n\n            if (\n              !matchFlavours(nextBlock.model, [\n                'affine:paragraph',\n                'affine:list',\n                'affine:code',\n              ])\n            ) {\n              this._std.command\n                .chain()\n                .with({\n                  focusBlock: nextBlock,\n                })\n                .selectBlock()\n                .run();\n            }\n\n            return next({});\n          }),\n\n        // block selection - select the next block\n        // 1. is paragraph, list, code block - focus it\n        // 2. is not - select it using block selection\n        cmd\n          .getBlockSelections()\n          .inline<'currentSelectionPath'>((ctx, next) => {\n            const currentBlockSelections = ctx.currentBlockSelections;\n            assertExists(currentBlockSelections);\n            const blockSelection = currentBlockSelections.at(-1);\n            if (!blockSelection) {\n              return;\n            }\n            return next({ currentSelectionPath: blockSelection.blockId });\n          })\n          .getNextBlock()\n          .inline<'focusBlock'>((ctx, next) => {\n            const { nextBlock } = ctx;\n            assertExists(nextBlock);\n\n            event.preventDefault();\n            if (\n              matchFlavours(nextBlock.model, [\n                'affine:paragraph',\n                'affine:list',\n                'affine:code',\n              ])\n            ) {\n              this._std.command\n                .chain()\n                .focusBlockStart({ focusBlock: nextBlock })\n                .run();\n              return next();\n            }\n\n            this._std.command\n              .chain()\n              .with({ focusBlock: nextBlock })\n              .selectBlock()\n              .run();\n            return next();\n          }),\n      ])\n      .run();\n\n    return result;\n  };\n\n  private _onArrowUp = (ctx: UIEventStateContext) => {\n    const event = ctx.get('defaultState').event;\n\n    const [result] = this._std.command\n      .chain()\n      .inline((_, next) => {\n        this._reset();\n        return next();\n      })\n      .try(cmd => [\n        // text selection - select the previous block\n        // 1. is paragraph, list, code block - follow the default behavior\n        // 2. is not - select the previous block (use block selection instead of text selection)\n        cmd\n          .getTextSelection()\n          .inline<'currentSelectionPath'>((ctx, next) => {\n            const currentTextSelection = ctx.currentTextSelection;\n            assertExists(currentTextSelection);\n            return next({ currentSelectionPath: currentTextSelection.blockId });\n          })\n          .getPrevBlock()\n          .inline((ctx, next) => {\n            const { prevBlock } = ctx;\n\n            if (!prevBlock) {\n              return;\n            }\n\n            if (\n              !matchFlavours(prevBlock.model, [\n                'affine:paragraph',\n                'affine:list',\n                'affine:code',\n              ])\n            ) {\n              this._std.command\n                .chain()\n                .with({\n                  focusBlock: prevBlock,\n                })\n                .selectBlock()\n                .run();\n            }\n\n            return next({});\n          }),\n        // block selection - select the previous block\n        // 1. is paragraph, list, code block - focus it\n        // 2. is not - select it using block selection\n        cmd\n          .getBlockSelections()\n          .inline<'currentSelectionPath'>((ctx, next) => {\n            const currentBlockSelections = ctx.currentBlockSelections;\n            assertExists(currentBlockSelections);\n            const blockSelection = currentBlockSelections.at(-1);\n            if (!blockSelection) {\n              return;\n            }\n            return next({ currentSelectionPath: blockSelection.blockId });\n          })\n          .getPrevBlock()\n          .inline<'focusBlock'>((ctx, next) => {\n            const { prevBlock } = ctx;\n            assertExists(prevBlock);\n\n            if (\n              matchFlavours(prevBlock.model, [\n                'affine:paragraph',\n                'affine:list',\n                'affine:code',\n              ])\n            ) {\n              event.preventDefault();\n              this._std.command\n                .chain()\n                .focusBlockEnd({ focusBlock: prevBlock })\n                .run();\n              return next();\n            }\n\n            this._std.command\n              .chain()\n              .with({ focusBlock: prevBlock })\n              .selectBlock()\n              .run();\n            return next();\n          }),\n      ])\n      .run();\n\n    return result;\n  };\n\n  private _onBlockShiftDown = (cmd: LumenSuite.CommandChain) => {\n    return cmd\n      .getBlockSelections()\n      .inline<'currentSelectionPath' | 'anchorBlock'>((ctx, next) => {\n        const blockSelections = ctx.currentBlockSelections;\n        assertExists(blockSelections);\n        if (!this._anchorSel) {\n          this._anchorSel = blockSelections.at(-1) ?? null;\n        }\n        if (!this._anchorSel) {\n          return;\n        }\n\n        const anchorBlock = ctx.std.view.getBlock(this._anchorSel.blockId);\n        if (!anchorBlock) {\n          return;\n        }\n        return next({\n          anchorBlock,\n          currentSelectionPath:\n            this._focusBlock?.blockId ?? anchorBlock?.blockId,\n        });\n      })\n      .getNextBlock({})\n      .inline<'focusBlock'>((ctx, next) => {\n        assertExists(ctx.nextBlock);\n        this._focusBlock = ctx.nextBlock;\n        if (!ensureBlockInContainer(this._focusBlock, this.host)) {\n          return;\n        }\n        return next({\n          focusBlock: this._focusBlock,\n        });\n      })\n      .selectBlocksBetween({ tail: true });\n  };\n\n  private _onBlockShiftUp = (cmd: LumenSuite.CommandChain) => {\n    return cmd\n      .getBlockSelections()\n      .inline<'currentSelectionPath' | 'anchorBlock'>((ctx, next) => {\n        const blockSelections = ctx.currentBlockSelections;\n        assertExists(blockSelections);\n        if (!this._anchorSel) {\n          this._anchorSel = blockSelections.at(0) ?? null;\n        }\n        if (!this._anchorSel) {\n          return;\n        }\n        const anchorBlock = ctx.std.view.getBlock(this._anchorSel.blockId);\n        if (!anchorBlock) {\n          return;\n        }\n        return next({\n          anchorBlock,\n          currentSelectionPath:\n            this._focusBlock?.blockId ?? anchorBlock?.blockId,\n        });\n      })\n      .getPrevBlock({})\n      .inline((ctx, next) => {\n        assertExists(ctx.prevBlock);\n        this._focusBlock = ctx.prevBlock;\n        if (!ensureBlockInContainer(this._focusBlock, this.host)) {\n          return;\n        }\n        return next({\n          focusBlock: this._focusBlock,\n        });\n      })\n      .selectBlocksBetween({ tail: false });\n  };\n\n  private _onEnter = (ctx: UIEventStateContext) => {\n    const event = ctx.get('defaultState').event;\n    const [result] = this._std.command\n      .chain()\n      .getBlockSelections()\n      .inline((ctx, next) => {\n        const blockSelection = ctx.currentBlockSelections?.at(-1);\n        if (!blockSelection) {\n          return;\n        }\n\n        const { view, doc, selection } = ctx.std;\n\n        const element = view.getBlock(blockSelection.blockId);\n        if (!element) {\n          return;\n        }\n\n        const { model } = element;\n        const parent = doc.getParent(model);\n        if (!parent) {\n          return;\n        }\n\n        const index = parent.children.indexOf(model) ?? undefined;\n\n        const blockId = doc.addBlock('affine:paragraph', {}, parent, index + 1);\n\n        const sel = selection.create('text', {\n          from: {\n            blockId,\n            index: 0,\n            length: 0,\n          },\n          to: null,\n        });\n\n        event.preventDefault();\n        selection.setGroup('note', [sel]);\n\n        return next();\n      })\n      .run();\n\n    return result;\n  };\n\n  private _onEsc = () => {\n    const [result] = this._std.command\n      .chain()\n      .getBlockSelections()\n      .inline((ctx, next) => {\n        const blockSelection = ctx.currentBlockSelections?.at(-1);\n        if (!blockSelection) {\n          return;\n        }\n\n        ctx.std.selection.update(selList => {\n          return selList.filter(sel => !sel.is('block'));\n        });\n\n        return next();\n      })\n      .run();\n\n    return result;\n  };\n\n  private _onSelectAll: UIEventHandler = ctx => {\n    const selection = this._std.selection;\n    // eslint-disable-next-line unicorn/prefer-array-some\n    if (!selection.find('block')) {\n      return;\n    }\n    ctx.get('defaultState').event.preventDefault();\n    const children = this.host.model.children;\n    const blocks: BlockSelection[] = children.map(child => {\n      return selection.create('block', {\n        blockId: child.id,\n      });\n    });\n    selection.update(selList => {\n      return selList\n        .filter<BaseSelection>(sel => !sel.is('block'))\n        .concat(blocks);\n    });\n  };\n\n  private _onShiftArrowDown = () => {\n    const [result] = this._std.command\n      .chain()\n      .try(cmd => [\n        // block selection\n        this._onBlockShiftDown(cmd),\n      ])\n      .run();\n\n    return result;\n  };\n\n  private _onShiftArrowUp = () => {\n    const [result] = this._std.command\n      .chain()\n      .try(cmd => [\n        // block selection\n        this._onBlockShiftUp(cmd),\n      ])\n      .run();\n\n    return result;\n  };\n\n  private _reset = () => {\n    this._anchorSel = null;\n    this._focusBlock = null;\n  };\n\n  bind = () => {\n    this.host.handleEvent('keyDown', ctx => {\n      const state = ctx.get('keyboardState');\n      if (['Control', 'Meta', 'Shift'].includes(state.raw.key)) {\n        return;\n      }\n      this._reset();\n    });\n\n    this.host.bindHotKey({\n      ArrowDown: this._onArrowDown,\n      ArrowUp: this._onArrowUp,\n      'Shift-ArrowDown': this._onShiftArrowDown,\n      'Shift-ArrowUp': this._onShiftArrowUp,\n      Escape: this._onEsc,\n      Enter: this._onEnter,\n      'Mod-a': this._onSelectAll,\n    });\n\n    this._bindQuickActionHotKey();\n    this._bindTextConversionHotKey();\n    this._bindMoveBlockHotKey();\n  };\n\n  host: ReactiveControllerHost & BlockComponent;\n\n  private get _std() {\n    return this.host.std;\n  }\n\n  constructor(host: ReactiveControllerHost & BlockComponent) {\n    (this.host = host).addController(this);\n  }\n\n  hostConnected() {\n    this._reset();\n  }\n\n  hostDisconnected() {\n    this._reset();\n  }\n}\n"]}