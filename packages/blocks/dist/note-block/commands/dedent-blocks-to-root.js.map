{"version":3,"file":"dedent-blocks-to-root.js","sourceRoot":"","sources":["../../../src/note-block/commands/dedent-blocks-to-root.ts"],"names":[],"mappings":"AAEA,OAAO,EAAE,aAAa,EAAE,MAAM,iCAAiC,CAAC;AAEhE,MAAM,CAAC,MAAM,kBAAkB,GAO3B,CAAC,GAAG,EAAE,IAAI,EAAE,EAAE;IAChB,IAAI,EAAE,QAAQ,EAAE,GAAG,GAAG,CAAC;IACvB,MAAM,EAAE,GAAG,EAAE,WAAW,GAAG,IAAI,EAAE,GAAG,GAAG,CAAC;IACxC,MAAM,EAAE,GAAG,EAAE,GAAG,GAAG,CAAC;IACpB,IAAI,CAAC,QAAQ,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC;QAClC,MAAM,IAAI,GAAG,GAAG,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QACxC,IAAI,IAAI,EAAE,CAAC;YACT,mFAAmF;YACnF,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,KAAK,CAAC;gBAAE,OAAO;YAElC,QAAQ,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,EAAE,EAAE,OAAO,CAAC,CAAC,MAAM,CACrD,CAAC,CAAC,EAAe,EAAE,CAAC,CAAC,CAAC,CAAC,CACxB,CAAC;QACJ,CAAC;aAAM,CAAC;YACN,QAAQ,GAAG,GAAG,CAAC,SAAS,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;QACpE,CAAC;IACH,CAAC;IAED,IAAI,CAAC,QAAQ,IAAI,CAAC,QAAQ,CAAC,MAAM,IAAI,GAAG,CAAC,QAAQ;QAAE,OAAO;IAE1D,IAAI,WAAW;QAAE,GAAG,CAAC,WAAW,EAAE,CAAC;IACnC,KAAK,IAAI,CAAC,GAAG,QAAQ,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC;QAC9C,MAAM,KAAK,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC;QAC1B,MAAM,MAAM,GAAG,GAAG,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;QACpC,IAAI,MAAM,IAAI,CAAC,aAAa,CAAC,MAAM,EAAE,CAAC,aAAa,CAAC,CAAC,EAAE,CAAC;YACtD,GAAG,CAAC,OAAO,CAAC,IAAI,CAAC,mBAAmB,EAAE;gBACpC,OAAO,EAAE,KAAK;gBACd,WAAW,EAAE,KAAK;aACnB,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IAED,OAAO,IAAI,EAAE,CAAC;AAChB,CAAC,CAAC","sourcesContent":["import type { Command } from '@lumensuite/block-std';\n\nimport { matchFlavours } from '@lumensuite/affine-shared/utils';\n\nexport const dedentBlocksToRoot: Command<\n  never,\n  never,\n  {\n    blockIds?: string[];\n    stopCapture?: boolean;\n  }\n> = (ctx, next) => {\n  let { blockIds } = ctx;\n  const { std, stopCapture = true } = ctx;\n  const { doc } = std;\n  if (!blockIds || !blockIds.length) {\n    const text = std.selection.find('text');\n    if (text) {\n      // If the text selection is not at the beginning of the block, use default behavior\n      if (text.from.index !== 0) return;\n\n      blockIds = [text.from.blockId, text.to?.blockId].filter(\n        (x): x is string => !!x\n      );\n    } else {\n      blockIds = std.selection.getGroup('note').map(sel => sel.blockId);\n    }\n  }\n\n  if (!blockIds || !blockIds.length || doc.readonly) return;\n\n  if (stopCapture) doc.captureSync();\n  for (let i = blockIds.length - 1; i >= 0; i--) {\n    const model = blockIds[i];\n    const parent = doc.getParent(model);\n    if (parent && !matchFlavours(parent, ['affine:note'])) {\n      std.command.exec('dedentBlockToRoot', {\n        blockId: model,\n        stopCapture: false,\n      });\n    }\n  }\n\n  return next();\n};\n\ndeclare global {\n  namespace LumenSuite {\n    interface Commands {\n      dedentBlocksToRoot: typeof dedentBlocksToRoot;\n    }\n  }\n}\n"]}