{"version":3,"file":"block-type.js","sourceRoot":"","sources":["../../../src/note-block/commands/block-type.ts"],"names":[],"mappings":"AAGA,OAAO,EACL,mBAAmB,EACnB,cAAc,GACf,MAAM,yCAAyC,CAAC;AACjD,OAAO,EAAE,aAAa,EAAE,MAAM,iCAAiC,CAAC;AAEhE,OAAO,EAAE,kBAAkB,EAAE,MAAM,oCAAoC,CAAC;AACxE,OAAO,EACL,gBAAgB,EAChB,cAAc,GACf,MAAM,4CAA4C,CAAC;AAOpD,MAAM,CAAC,MAAM,eAAe,GAIxB,CAAC,GAAG,EAAE,IAAI,EAAE,EAAE;IAChB,MAAM,EAAE,GAAG,EAAE,OAAO,EAAE,KAAK,EAAE,GAAG,GAAG,CAAC;IACpC,MAAM,IAAI,GAAG,GAAG,CAAC,IAAI,CAAC;IACtB,MAAM,GAAG,GAAG,GAAG,CAAC,GAAG,CAAC;IAEpB,MAAM,iBAAiB,GAAG,GAAG,EAAE;QAC7B,IAAI,EAAE,cAAc,EAAE,GAAG,GAAG,CAAC;QAE7B,IAAI,cAAc,IAAI,IAAI,EAAE,CAAC;YAC3B,MAAM,CAAC,MAAM,EAAE,GAAG,CAAC,GAAG,GAAG,CAAC,OAAO;iBAC9B,KAAK,EAAE;iBACP,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,gBAAgB,EAAE,EAAE,KAAK,CAAC,kBAAkB,EAAE,CAAC,CAAC;iBACvE,iBAAiB,CAAC,EAAE,KAAK,EAAE,CAAC,MAAM,EAAE,OAAO,CAAC,EAAE,CAAC;iBAC/C,GAAG,EAAE,CAAC;YACT,IAAI,MAAM,EAAE,CAAC;gBACX,cAAc,GAAG,GAAG,CAAC,cAAc,CAAC;YACtC,CAAC;QACH,CAAC;QAED,OAAO,cAAc,CAAC;IACxB,CAAC,CAAC;IAEF,MAAM,cAAc,GAAG,iBAAiB,EAAE,CAAC;IAC3C,IAAI,CAAC,cAAc,IAAI,cAAc,CAAC,MAAM,KAAK,CAAC;QAAE,OAAO,KAAK,CAAC;IAEjE,MAAM,WAAW,GAAG,cAAc,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;IAEzD,MAAM,UAAU,GAAG,cAAc,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE,CAAC,KAAK,CAAC,GAAG,KAAK,GAAG,CAAC,CAAC;IACpE,IAAI,CAAC,UAAU,EAAE,CAAC;QAChB,YAAY;QACZ,OAAO,CAAC,KAAK,CACX,+FAA+F,EAC/F,cAAc,CACf,CAAC;IACJ,CAAC;IAED,MAAM,WAAW,GAAoC,CAAC,CAAC,EAAE,IAAI,EAAE,EAAE;QAC/D,IAAI,OAAO,KAAK,aAAa;YAAE,OAAO;QACtC,MAAM,EAAE,GAAG,gBAAgB,CAAC,WAAW,CAAC,CAAC;QACzC,IAAI,CAAC,EAAE;YAAE,OAAO;QAChB,MAAM,KAAK,GAAG,GAAG,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC;QACnC,IAAI,CAAC,KAAK;YAAE,OAAO;QACnB,mBAAmB,CAAC,IAAI,EAAE,KAAK,EAAE;YAC/B,KAAK,EAAE,KAAK,CAAC,IAAI,EAAE,MAAM,IAAI,CAAC;YAC9B,MAAM,EAAE,CAAC;SACV,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QACxB,OAAO,IAAI,CAAC,EAAE,aAAa,EAAE,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;IAC1C,CAAC,CAAC;IACF,MAAM,aAAa,GAAoC,CAAC,CAAC,EAAE,IAAI,EAAE,EAAE;QACjE,IAAI,OAAO,KAAK,gBAAgB,EAAE,CAAC;YACjC,OAAO,KAAK,CAAC;QACf,CAAC;QACD,MAAM,KAAK,GAAG,WAAW,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;QACjC,IAAI,CAAC,KAAK,EAAE,CAAC;YACX,OAAO,IAAI,CAAC,EAAE,aAAa,EAAE,EAAE,EAAE,CAAC,CAAC;QACrC,CAAC;QACD,MAAM,MAAM,GAAG,GAAG,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;QACpC,IAAI,CAAC,MAAM,EAAE,CAAC;YACZ,OAAO,IAAI,CAAC,EAAE,aAAa,EAAE,EAAE,EAAE,CAAC,CAAC;QACrC,CAAC;QACD,MAAM,KAAK,GAAG,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QAC7C,MAAM,WAAW,GAAG,GAAG,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QACvC,IAAI,aAAa,GAAG,WAAW,EAAE,EAAY,CAAC;QAC9C,MAAM,EAAE,GAAG,GAAG,CAAC,QAAQ,CAAC,gBAAgB,EAAE,EAAE,EAAE,MAAM,EAAE,KAAK,GAAG,CAAC,CAAC,CAAC;QACjE,IAAI,CAAC,WAAW,EAAE,CAAC;YACjB,aAAa,GAAG,GAAG,CAAC,QAAQ,CAAC,kBAAkB,EAAE,EAAE,EAAE,MAAM,CAAC,CAAC;QAC/D,CAAC;QACD,cAAc,CAAC,IAAI,CAAC,GAAG,EAAE,aAAa,CAAC,CAAC;QACxC,MAAM,QAAQ,GAAG,GAAG,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC;QACtC,IAAI,CAAC,QAAQ,EAAE,CAAC;YACd,OAAO,IAAI,CAAC,EAAE,aAAa,EAAE,EAAE,EAAE,CAAC,CAAC;QACrC,CAAC;QACD,OAAO,IAAI,CAAC,EAAE,aAAa,EAAE,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;IAC7C,CAAC,CAAC;IAEF,MAAM,SAAS,GAA6B,CAAC,GAAG,EAAE,IAAI,EAAE,EAAE;QACxD,MAAM,EAAE,aAAa,EAAE,GAAG,GAAG,CAAC;QAC9B,IAAI,CAAC,aAAa,IAAI,aAAa,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;YACjD,OAAO,KAAK,CAAC;QACf,CAAC;QAED,MAAM,aAAa,GAAG,aAAa,CAAC,CAAC,CAAC,CAAC;QACvC,MAAM,YAAY,GAAG,aAAa,CAAC,aAAa,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;QAE7D,MAAM,cAAc,GAAG,aAAa,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,CAC/C,kBAAkB,CAAC,IAAI,EAAE,KAAK,CAAC,CAChC,CAAC;QACF,MAAM,gBAAgB,GAAG,IAAI,CAAC,SAAS,CAAC;QACxC,MAAM,aAAa,GAAG,gBAAgB,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QACpD,IAAI,CAAC,aAAa,EAAE,CAAC;YACnB,OAAO,KAAK,CAAC;QACf,CAAC;QACD,MAAM,gBAAgB,GAAG,gBAAgB,CAAC,MAAM,CAAC,MAAM,EAAE;YACvD,IAAI,EAAE;gBACJ,OAAO,EAAE,aAAa,CAAC,EAAE;gBACzB,KAAK,EAAE,aAAa,CAAC,IAAI,CAAC,KAAK;gBAC/B,MAAM,EAAE,aAAa,CAAC,IAAI,CAAC,MAAM;aAClC;YACD,EAAE,EAAE,aAAa,CAAC,EAAE;gBAClB,CAAC,CAAC;oBACE,OAAO,EAAE,YAAY,CAAC,EAAE;oBACxB,KAAK,EAAE,aAAa,CAAC,EAAE,CAAC,KAAK;oBAC7B,MAAM,EAAE,aAAa,CAAC,EAAE,CAAC,MAAM;iBAChC;gBACH,CAAC,CAAC,IAAI;SACT,CAAC,CAAC;QAEH,OAAO,CAAC,GAAG,CAAC,cAAc,CAAC;aACxB,IAAI,CAAC,GAAG,EAAE;YACT,gBAAgB,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC,gBAAgB,CAAC,CAAC,CAAC;QACxD,CAAC,CAAC;aACD,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QACxB,OAAO,IAAI,EAAE,CAAC;IAChB,CAAC,CAAC;IAEF,MAAM,UAAU,GAA6B,CAAC,GAAG,EAAE,IAAI,EAAE,EAAE;QACzD,MAAM,EAAE,aAAa,EAAE,GAAG,GAAG,CAAC;QAC9B,IAAI,CAAC,aAAa,IAAI,aAAa,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;YACjD,OAAO,KAAK,CAAC;QACf,CAAC;QAED,MAAM,gBAAgB,GAAG,IAAI,CAAC,SAAS,CAAC;QAExC,MAAM,eAAe,GAAG,gBAAgB,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;QACzD,IAAI,eAAe,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;YACjC,OAAO,KAAK,CAAC;QACf,CAAC;QACD,qBAAqB,CAAC,GAAG,EAAE;YACzB,MAAM,UAAU,GAAG,aAAa,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE;gBAC3C,OAAO,gBAAgB,CAAC,MAAM,CAAC,OAAO,EAAE;oBACtC,OAAO,EAAE,KAAK,CAAC,EAAE;iBAClB,CAAC,CAAC;YACL,CAAC,CAAC,CAAC;YAEH,gBAAgB,CAAC,QAAQ,CAAC,MAAM,EAAE,UAAU,CAAC,CAAC;QAChD,CAAC,CAAC,CAAC;QACH,OAAO,IAAI,EAAE,CAAC;IAChB,CAAC,CAAC;IAEF,MAAM,CAAC,MAAM,EAAE,SAAS,CAAC,GAAG,GAAG,CAAC,OAAO;SACpC,KAAK,EAAE;SACP,MAAM,CAAC,CAAC,CAAC,EAAE,IAAI,EAAE,EAAE;QAClB,GAAG,CAAC,WAAW,EAAE,CAAC;QAClB,OAAO,IAAI,EAAE,CAAC;IAChB,CAAC,CAAC;QACF,oBAAoB;SACnB,GAAG,CAAkB,KAAK,CAAC,EAAE,CAAC;QAC7B,KAAK,CAAC,MAAM,CAAkB,WAAW,CAAC;QAC1C,KAAK,CAAC,MAAM,CAAkB,aAAa,CAAC;QAC5C,KAAK,CAAC,MAAM,CAAkB,CAAC,CAAC,EAAE,IAAI,EAAE,EAAE;YACxC,MAAM,SAAS,GAAiB,EAAE,CAAC;YACnC,WAAW,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;gBAC1B,IACE,CAAC,aAAa,CAAC,KAAK,EAAE;oBACpB,kBAAkB;oBAClB,aAAa;oBACb,aAAa;iBACd,CAAC,EACF,CAAC;oBACD,OAAO;gBACT,CAAC;gBACD,IAAI,KAAK,CAAC,OAAO,KAAK,OAAO,EAAE,CAAC;oBAC9B,GAAG,CAAC,WAAW,CAAC,KAAK,EAAE,KAAK,IAAI,EAAE,CAAC,CAAC;oBACpC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;oBACtB,OAAO;gBACT,CAAC;gBACD,MAAM,KAAK,GAAG,cAAc,CAAC,KAAK,EAAE,OAAO,EAAE,KAAK,CAAC,CAAC;gBACpD,MAAM,QAAQ,GAAG,GAAG,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;gBACzC,IAAI,QAAQ,EAAE,CAAC;oBACb,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;gBAC3B,CAAC;YACH,CAAC,CAAC,CAAC;YACH,OAAO,IAAI,CAAC,EAAE,aAAa,EAAE,SAAS,EAAE,CAAC,CAAC;QAC5C,CAAC,CAAC;KACH,CAAC;QACF,QAAQ;SACP,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC;QACZ,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,IAAI,EAAE,EAAE;YACvB,IAAI,CAAC,aAAa,EAAE,gBAAgB,CAAC,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAE,CAAC;gBACxD,OAAO,IAAI,EAAE,CAAC;YAChB,CAAC;YACD,OAAO,KAAK,CAAC;QACf,CAAC,CAAC;QACF,KAAK,CAAC,MAAM,CAAC,SAAS,CAAC;QACvB,KAAK,CAAC,MAAM,CAAC,UAAU,CAAC;QACxB,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,IAAI,EAAE,EAAE,CAAC,IAAI,EAAE,CAAC;KAClC,CAAC;SACD,GAAG,EAAE,CAAC;IAET,IAAI,CAAC,MAAM,EAAE,CAAC;QACZ,OAAO,KAAK,CAAC;IACf,CAAC;IAED,OAAO,IAAI,CAAC,EAAE,aAAa,EAAE,SAAS,CAAC,aAAa,EAAE,CAAC,CAAC;AAC1D,CAAC,CAAC","sourcesContent":["import type { Command } from '@blocksuite/block-std';\nimport type { BlockModel } from '@blocksuite/store';\n\nimport {\n  asyncSetInlineRange,\n  focusTextModel,\n} from '@blocksuite/affine-components/rich-text';\nimport { matchFlavours } from '@blocksuite/affine-shared/utils';\n\nimport { onModelTextUpdated } from '../../root-block/utils/callback.js';\nimport {\n  mergeToCodeModel,\n  transformModel,\n} from '../../root-block/utils/operations/model.js';\n\ntype UpdateBlockConfig = {\n  flavour: BlockSuite.Flavour;\n  props?: Record<string, unknown>;\n};\n\nexport const updateBlockType: Command<\n  'selectedBlocks',\n  'updatedBlocks',\n  UpdateBlockConfig\n> = (ctx, next) => {\n  const { std, flavour, props } = ctx;\n  const host = std.host;\n  const doc = std.doc;\n\n  const getSelectedBlocks = () => {\n    let { selectedBlocks } = ctx;\n\n    if (selectedBlocks == null) {\n      const [result, ctx] = std.command\n        .chain()\n        .tryAll(chain => [chain.getTextSelection(), chain.getBlockSelections()])\n        .getSelectedBlocks({ types: ['text', 'block'] })\n        .run();\n      if (result) {\n        selectedBlocks = ctx.selectedBlocks;\n      }\n    }\n\n    return selectedBlocks;\n  };\n\n  const selectedBlocks = getSelectedBlocks();\n  if (!selectedBlocks || selectedBlocks.length === 0) return false;\n\n  const blockModels = selectedBlocks.map(ele => ele.model);\n\n  const hasSameDoc = selectedBlocks.every(block => block.doc === doc);\n  if (!hasSameDoc) {\n    // doc check\n    console.error(\n      'Not all models have the same doc instance, the result for update text type may not be correct',\n      selectedBlocks\n    );\n  }\n\n  const mergeToCode: Command<never, 'updatedBlocks'> = (_, next) => {\n    if (flavour !== 'affine:code') return;\n    const id = mergeToCodeModel(blockModels);\n    if (!id) return;\n    const model = doc.getBlockById(id);\n    if (!model) return;\n    asyncSetInlineRange(host, model, {\n      index: model.text?.length ?? 0,\n      length: 0,\n    }).catch(console.error);\n    return next({ updatedBlocks: [model] });\n  };\n  const appendDivider: Command<never, 'updatedBlocks'> = (_, next) => {\n    if (flavour !== 'affine:divider') {\n      return false;\n    }\n    const model = blockModels.at(-1);\n    if (!model) {\n      return next({ updatedBlocks: [] });\n    }\n    const parent = doc.getParent(model);\n    if (!parent) {\n      return next({ updatedBlocks: [] });\n    }\n    const index = parent.children.indexOf(model);\n    const nextSibling = doc.getNext(model);\n    let nextSiblingId = nextSibling?.id as string;\n    const id = doc.addBlock('affine:divider', {}, parent, index + 1);\n    if (!nextSibling) {\n      nextSiblingId = doc.addBlock('affine:paragraph', {}, parent);\n    }\n    focusTextModel(host.std, nextSiblingId);\n    const newModel = doc.getBlockById(id);\n    if (!newModel) {\n      return next({ updatedBlocks: [] });\n    }\n    return next({ updatedBlocks: [newModel] });\n  };\n\n  const focusText: Command<'updatedBlocks'> = (ctx, next) => {\n    const { updatedBlocks } = ctx;\n    if (!updatedBlocks || updatedBlocks.length === 0) {\n      return false;\n    }\n\n    const firstNewModel = updatedBlocks[0];\n    const lastNewModel = updatedBlocks[updatedBlocks.length - 1];\n\n    const allTextUpdated = updatedBlocks.map(model =>\n      onModelTextUpdated(host, model)\n    );\n    const selectionManager = host.selection;\n    const textSelection = selectionManager.find('text');\n    if (!textSelection) {\n      return false;\n    }\n    const newTextSelection = selectionManager.create('text', {\n      from: {\n        blockId: firstNewModel.id,\n        index: textSelection.from.index,\n        length: textSelection.from.length,\n      },\n      to: textSelection.to\n        ? {\n            blockId: lastNewModel.id,\n            index: textSelection.to.index,\n            length: textSelection.to.length,\n          }\n        : null,\n    });\n\n    Promise.all(allTextUpdated)\n      .then(() => {\n        selectionManager.setGroup('note', [newTextSelection]);\n      })\n      .catch(console.error);\n    return next();\n  };\n\n  const focusBlock: Command<'updatedBlocks'> = (ctx, next) => {\n    const { updatedBlocks } = ctx;\n    if (!updatedBlocks || updatedBlocks.length === 0) {\n      return false;\n    }\n\n    const selectionManager = host.selection;\n\n    const blockSelections = selectionManager.filter('block');\n    if (blockSelections.length === 0) {\n      return false;\n    }\n    requestAnimationFrame(() => {\n      const selections = updatedBlocks.map(model => {\n        return selectionManager.create('block', {\n          blockId: model.id,\n        });\n      });\n\n      selectionManager.setGroup('note', selections);\n    });\n    return next();\n  };\n\n  const [result, resultCtx] = std.command\n    .chain()\n    .inline((_, next) => {\n      doc.captureSync();\n      return next();\n    })\n    // update block type\n    .try<'updatedBlocks'>(chain => [\n      chain.inline<'updatedBlocks'>(mergeToCode),\n      chain.inline<'updatedBlocks'>(appendDivider),\n      chain.inline<'updatedBlocks'>((_, next) => {\n        const newModels: BlockModel[] = [];\n        blockModels.forEach(model => {\n          if (\n            !matchFlavours(model, [\n              'affine:paragraph',\n              'affine:list',\n              'affine:code',\n            ])\n          ) {\n            return;\n          }\n          if (model.flavour === flavour) {\n            doc.updateBlock(model, props ?? {});\n            newModels.push(model);\n            return;\n          }\n          const newId = transformModel(model, flavour, props);\n          const newModel = doc.getBlockById(newId);\n          if (newModel) {\n            newModels.push(newModel);\n          }\n        });\n        return next({ updatedBlocks: newModels });\n      }),\n    ])\n    // focus\n    .try(chain => [\n      chain.inline((_, next) => {\n        if (['affine:code', 'affine:divider'].includes(flavour)) {\n          return next();\n        }\n        return false;\n      }),\n      chain.inline(focusText),\n      chain.inline(focusBlock),\n      chain.inline((_, next) => next()),\n    ])\n    .run();\n\n  if (!result) {\n    return false;\n  }\n\n  return next({ updatedBlocks: resultCtx.updatedBlocks });\n};\n\ndeclare global {\n  namespace BlockSuite {\n    interface CommandContext {\n      updatedBlocks?: BlockModel[];\n    }\n\n    interface Commands {\n      updateBlockType: typeof updateBlockType;\n    }\n  }\n}\n"]}