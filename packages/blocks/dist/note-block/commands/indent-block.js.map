{"version":3,"file":"indent-block.js","sourceRoot":"","sources":["../../../src/note-block/commands/indent-block.ts"],"names":[],"mappings":"AAGA,OAAO,EAAE,aAAa,EAAE,MAAM,iCAAiC,CAAC;AAEhE;;;;;;;;;;;;;;;GAeG;AACH,MAAM,CAAC,MAAM,WAAW,GAOpB,CAAC,GAAG,EAAE,IAAI,EAAE,EAAE;IAChB,IAAI,EAAE,OAAO,EAAE,GAAG,GAAG,CAAC;IACtB,MAAM,EAAE,GAAG,EAAE,WAAW,GAAG,IAAI,EAAE,GAAG,GAAG,CAAC;IACxC,MAAM,EAAE,GAAG,EAAE,GAAG,GAAG,CAAC;IACpB,MAAM,EAAE,MAAM,EAAE,GAAG,GAAG,CAAC;IACvB,IAAI,CAAC,OAAO,EAAE,CAAC;QACb,MAAM,GAAG,GAAG,GAAG,CAAC,SAAS,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QACjD,OAAO,GAAG,GAAG,EAAE,OAAO,CAAC;IACzB,CAAC;IACD,IAAI,CAAC,OAAO;QAAE,OAAO;IACrB,MAAM,KAAK,GAAG,GAAG,CAAC,GAAG,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAE,KAAK,CAAC;IAC/C,IAAI,CAAC,KAAK;QAAE,OAAO;IAEnB,MAAM,eAAe,GAAG,GAAG,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;IAC3C,IACE,GAAG,CAAC,QAAQ;QACZ,CAAC,eAAe;QAChB,CAAC,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,OAAO,EAAE,eAAe,CAAC,OAAO,CAAC,EACvD,CAAC;QACD,6BAA6B;QAC7B,OAAO;IACT,CAAC;IAED,IAAI,WAAW;QAAE,GAAG,CAAC,WAAW,EAAE,CAAC;IACnC,GAAG,CAAC,UAAU,CAAC,CAAC,KAAK,CAAC,EAAE,eAAe,CAAC,CAAC;IAEzC,wCAAwC;IACxC,IACE,aAAa,CAAC,eAAe,EAAE,CAAC,aAAa,CAAC,CAAC;QAC/C,eAAe,CAAC,SAAS,EACzB,CAAC;QACD,GAAG,CAAC,WAAW,CAAC,eAAe,EAAE;YAC/B,SAAS,EAAE,KAAK;SACU,CAAC,CAAC;IAChC,CAAC;IAED,OAAO,IAAI,EAAE,CAAC;AAChB,CAAC,CAAC","sourcesContent":["import type { ListBlockModel } from '@lumensuite/affine-model';\nimport type { Command } from '@lumensuite/block-std';\n\nimport { matchFlavours } from '@lumensuite/affine-shared/utils';\n\n/**\n * @example\n * before indent:\n * - aaa\n *   - bbb\n * - ccc|\n *   - ddd\n *   - eee\n *\n * after indent:\n * - aaa\n *   - bbb\n *   - ccc|\n *     - ddd\n *     - eee\n */\nexport const indentBlock: Command<\n  never,\n  never,\n  {\n    blockId?: string;\n    stopCapture?: boolean;\n  }\n> = (ctx, next) => {\n  let { blockId } = ctx;\n  const { std, stopCapture = true } = ctx;\n  const { doc } = std;\n  const { schema } = doc;\n  if (!blockId) {\n    const sel = std.selection.getGroup('note').at(0);\n    blockId = sel?.blockId;\n  }\n  if (!blockId) return;\n  const model = std.doc.getBlock(blockId)?.model;\n  if (!model) return;\n\n  const previousSibling = doc.getPrev(model);\n  if (\n    doc.readonly ||\n    !previousSibling ||\n    !schema.isValid(model.flavour, previousSibling.flavour)\n  ) {\n    // can not indent, do nothing\n    return;\n  }\n\n  if (stopCapture) doc.captureSync();\n  doc.moveBlocks([model], previousSibling);\n\n  // update collapsed state of affine list\n  if (\n    matchFlavours(previousSibling, ['affine:list']) &&\n    previousSibling.collapsed\n  ) {\n    doc.updateBlock(previousSibling, {\n      collapsed: false,\n    } as Partial<ListBlockModel>);\n  }\n\n  return next();\n};\n\ndeclare global {\n  namespace LumenSuite {\n    interface Commands {\n      indentBlock: typeof indentBlock;\n    }\n  }\n}\n"]}