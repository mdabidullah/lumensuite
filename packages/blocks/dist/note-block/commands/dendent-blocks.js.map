{"version":3,"file":"dendent-blocks.js","sourceRoot":"","sources":["../../../src/note-block/commands/dendent-blocks.ts"],"names":[],"mappings":"AAGA,OAAO,EAAE,aAAa,EAAE,MAAM,iCAAiC,CAAC;AAEhE,MAAM,CAAC,MAAM,YAAY,GAOrB,CAAC,GAAG,EAAE,IAAI,EAAE,EAAE;IAChB,IAAI,EAAE,QAAQ,EAAE,GAAG,GAAG,CAAC;IACvB,MAAM,EAAE,GAAG,EAAE,WAAW,GAAG,IAAI,EAAE,GAAG,GAAG,CAAC;IACxC,MAAM,EAAE,GAAG,EAAE,GAAG,GAAG,CAAC;IACpB,IAAI,CAAC,QAAQ,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC;QAClC,MAAM,IAAI,GAAG,GAAG,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QACxC,IAAI,IAAI,EAAE,CAAC;YACT,QAAQ,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,EAAE,EAAE,OAAO,CAAC,CAAC,MAAM,CACrD,CAAC,CAAC,EAAe,EAAE,CAAC,CAAC,CAAC,CAAC,CACxB,CAAC;QACJ,CAAC;aAAM,CAAC;YACN,QAAQ,GAAG,GAAG,CAAC,SAAS,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;QACpE,CAAC;IACH,CAAC;IAED,IAAI,CAAC,QAAQ,IAAI,CAAC,QAAQ,CAAC,MAAM,IAAI,GAAG,CAAC,QAAQ;QAAE,OAAO;IAE1D,8CAA8C;IAC9C,IAAI,iBAAiB,GAAG,CAAC,CAAC,CAAC;IAC3B,IAAI,WAA8B,CAAC;IACnC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;QACzC,WAAW,GAAG,GAAG,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;QACzC,IAAI,WAAW,IAAI,CAAC,aAAa,CAAC,WAAW,EAAE,CAAC,aAAa,CAAC,CAAC,EAAE,CAAC;YAChE,iBAAiB,GAAG,CAAC,CAAC;YACtB,MAAM;QACR,CAAC;IACH,CAAC;IAED,IAAI,iBAAiB,KAAK,CAAC,CAAC;QAAE,OAAO;IAErC,IAAI,WAAW;QAAE,GAAG,CAAC,WAAW,EAAE,CAAC;IAEnC,6CAA6C;IAC7C,MAAM,aAAa,GAAG,QAAQ,CAAC,KAAK,CAAC,iBAAiB,CAAC,CAAC;IACxD,qBAAqB;IACrB,mEAAmE;IACnE,sCAAsC;IACtC,8DAA8D;IAC9D,KAAK,IAAI,CAAC,GAAG,aAAa,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC;QACnD,MAAM,KAAK,GAAG,aAAa,CAAC,CAAC,CAAC,CAAC;QAC/B,MAAM,MAAM,GAAG,GAAG,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;QACpC,IAAI,MAAM,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,CAAC,EAAE,CAAC;YACjD,GAAG,CAAC,OAAO,CAAC,IAAI,CAAC,aAAa,EAAE,EAAE,OAAO,EAAE,KAAK,EAAE,WAAW,EAAE,KAAK,EAAE,CAAC,CAAC;QAC1E,CAAC;IACH,CAAC;IAED,OAAO,IAAI,EAAE,CAAC;AAChB,CAAC,CAAC","sourcesContent":["import type { Command } from '@lumensuite/block-std';\nimport type { BlockModel } from '@lumensuite/store';\n\nimport { matchFlavours } from '@lumensuite/affine-shared/utils';\n\nexport const dedentBlocks: Command<\n  never,\n  never,\n  {\n    blockIds?: string[];\n    stopCapture?: boolean;\n  }\n> = (ctx, next) => {\n  let { blockIds } = ctx;\n  const { std, stopCapture = true } = ctx;\n  const { doc } = std;\n  if (!blockIds || !blockIds.length) {\n    const text = std.selection.find('text');\n    if (text) {\n      blockIds = [text.from.blockId, text.to?.blockId].filter(\n        (x): x is string => !!x\n      );\n    } else {\n      blockIds = std.selection.getGroup('note').map(sel => sel.blockId);\n    }\n  }\n\n  if (!blockIds || !blockIds.length || doc.readonly) return;\n\n  // Find the first model that can be unindented\n  let firstOutdentIndex = -1;\n  let firstParent: BlockModel | null;\n  for (let i = 0; i < blockIds.length; i++) {\n    firstParent = doc.getParent(blockIds[i]);\n    if (firstParent && !matchFlavours(firstParent, ['affine:note'])) {\n      firstOutdentIndex = i;\n      break;\n    }\n  }\n\n  if (firstOutdentIndex === -1) return;\n\n  if (stopCapture) doc.captureSync();\n\n  // Find all the models that can be unindented\n  const outdentModels = blockIds.slice(firstOutdentIndex);\n  // Form bottom to top\n  // Only outdent the models which parent is not in the outdentModels\n  // When parent is in the outdentModels\n  // It means that children will be unindented with their parent\n  for (let i = outdentModels.length - 1; i >= 0; i--) {\n    const model = outdentModels[i];\n    const parent = doc.getParent(model);\n    if (parent && !outdentModels.includes(parent.id)) {\n      std.command.exec('dedentBlock', { blockId: model, stopCapture: false });\n    }\n  }\n\n  return next();\n};\n\ndeclare global {\n  namespace LumenSuite {\n    interface Commands {\n      dedentBlocks: typeof dedentBlocks;\n    }\n  }\n}\n"]}