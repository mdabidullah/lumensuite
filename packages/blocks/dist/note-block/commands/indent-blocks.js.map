{"version":3,"file":"indent-blocks.js","sourceRoot":"","sources":["../../../src/note-block/commands/indent-blocks.ts"],"names":[],"mappings":"AAGA,MAAM,CAAC,MAAM,YAAY,GAOrB,CAAC,GAAG,EAAE,IAAI,EAAE,EAAE;IAChB,IAAI,EAAE,QAAQ,EAAE,GAAG,GAAG,CAAC;IACvB,MAAM,EAAE,GAAG,EAAE,WAAW,GAAG,IAAI,EAAE,GAAG,GAAG,CAAC;IACxC,MAAM,EAAE,GAAG,EAAE,GAAG,GAAG,CAAC;IACpB,MAAM,EAAE,MAAM,EAAE,GAAG,GAAG,CAAC;IACvB,IAAI,CAAC,QAAQ,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC;QAClC,MAAM,IAAI,GAAG,GAAG,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QACxC,IAAI,IAAI,EAAE,CAAC;YACT,QAAQ,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,EAAE,EAAE,OAAO,CAAC,CAAC,MAAM,CACrD,CAAC,CAAC,EAAe,EAAE,CAAC,CAAC,CAAC,CAAC,CACxB,CAAC;QACJ,CAAC;aAAM,CAAC;YACN,QAAQ,GAAG,GAAG,CAAC,SAAS,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;QACpE,CAAC;IACH,CAAC;IAED,IAAI,CAAC,QAAQ,IAAI,CAAC,QAAQ,CAAC,MAAM,IAAI,GAAG,CAAC,QAAQ;QAAE,OAAO;IAE1D,4CAA4C;IAC5C,IAAI,gBAAgB,GAAG,CAAC,CAAC,CAAC;IAC1B,IAAI,eAAe,GAAsB,IAAI,CAAC;IAC9C,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;QACzC,eAAe,GAAG,GAAG,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;QAC3C,MAAM,KAAK,GAAG,GAAG,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC;QAC/C,IACE,KAAK;YACL,eAAe;YACf,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,OAAO,EAAE,eAAe,CAAC,OAAO,CAAC,EACtD,CAAC;YACD,gBAAgB,GAAG,CAAC,CAAC;YACrB,MAAM;QACR,CAAC;IACH,CAAC;IAED,2BAA2B;IAC3B,IAAI,gBAAgB,KAAK,CAAC,CAAC;QAAE,OAAO;IAEpC,IAAI,WAAW;QAAE,GAAG,CAAC,WAAW,EAAE,CAAC;IACnC,gCAAgC;IAChC,MAAM,SAAS,GAAG,QAAQ,CAAC,KAAK,CAAC,gBAAgB,CAAC,CAAC;IACnD,SAAS,CAAC,OAAO,CAAC,EAAE,CAAC,EAAE;QACrB,MAAM,MAAM,GAAG,GAAG,CAAC,SAAS,CAAC,EAAE,CAAC,CAAC;QACjC,IAAI,CAAC,MAAM;YAAE,OAAO;QACpB,kEAAkE;QAClE,8EAA8E;QAC9E,mDAAmD;QACnD,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,CAAC,EAAE,CAAC;YACnC,GAAG,CAAC,OAAO,CAAC,IAAI,CAAC,aAAa,EAAE,EAAE,OAAO,EAAE,EAAE,EAAE,WAAW,EAAE,KAAK,EAAE,CAAC,CAAC;QACvE,CAAC;IACH,CAAC,CAAC,CAAC;IAEH,OAAO,IAAI,EAAE,CAAC;AAChB,CAAC,CAAC","sourcesContent":["import type { Command } from '@blocksuite/block-std';\nimport type { BlockModel } from '@blocksuite/store';\n\nexport const indentBlocks: Command<\n  never,\n  never,\n  {\n    blockIds?: string[];\n    stopCapture?: boolean;\n  }\n> = (ctx, next) => {\n  let { blockIds } = ctx;\n  const { std, stopCapture = true } = ctx;\n  const { doc } = std;\n  const { schema } = doc;\n  if (!blockIds || !blockIds.length) {\n    const text = std.selection.find('text');\n    if (text) {\n      blockIds = [text.from.blockId, text.to?.blockId].filter(\n        (x): x is string => !!x\n      );\n    } else {\n      blockIds = std.selection.getGroup('note').map(sel => sel.blockId);\n    }\n  }\n\n  if (!blockIds || !blockIds.length || doc.readonly) return;\n\n  // Find the first model that can be indented\n  let firstIndentIndex = -1;\n  let previousSibling: BlockModel | null = null;\n  for (let i = 0; i < blockIds.length; i++) {\n    previousSibling = doc.getPrev(blockIds[i]);\n    const model = doc.getBlock(blockIds[i])?.model;\n    if (\n      model &&\n      previousSibling &&\n      schema.isValid(model.flavour, previousSibling.flavour)\n    ) {\n      firstIndentIndex = i;\n      break;\n    }\n  }\n\n  // No model can be indented\n  if (firstIndentIndex === -1) return;\n\n  if (stopCapture) doc.captureSync();\n  // Models waiting to be indented\n  const indentIds = blockIds.slice(firstIndentIndex);\n  indentIds.forEach(id => {\n    const parent = doc.getParent(id);\n    if (!parent) return;\n    // Only indent the model which parent is not in the `indentModels`\n    // When parent is in the `indentModels`, it means the parent has been indented\n    // And the model should be indented with its parent\n    if (!indentIds.includes(parent.id)) {\n      std.command.exec('indentBlock', { blockId: id, stopCapture: false });\n    }\n  });\n\n  return next();\n};\n\ndeclare global {\n  namespace BlockSuite {\n    interface Commands {\n      indentBlocks: typeof indentBlocks;\n    }\n  }\n}\n"]}