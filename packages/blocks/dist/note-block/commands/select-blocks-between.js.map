{"version":3,"file":"select-blocks-between.js","sourceRoot":"","sources":["../../../src/note-block/commands/select-blocks-between.ts"],"names":[],"mappings":"AAEA,MAAM,CAAC,MAAM,mBAAmB,GAI5B,CAAC,GAAG,EAAE,IAAI,EAAE,EAAE;IAChB,MAAM,EAAE,UAAU,EAAE,WAAW,EAAE,IAAI,EAAE,GAAG,GAAG,CAAC;IAC9C,IAAI,CAAC,UAAU,IAAI,CAAC,WAAW,EAAE,CAAC;QAChC,OAAO;IACT,CAAC;IACD,MAAM,SAAS,GAAG,GAAG,CAAC,GAAG,CAAC,SAAS,CAAC;IAEpC,gBAAgB;IAChB,IAAI,WAAW,CAAC,OAAO,KAAK,UAAU,CAAC,OAAO,EAAE,CAAC;QAC/C,MAAM,OAAO,GAAG,UAAU,CAAC,OAAO,CAAC;QACnC,SAAS,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC,SAAS,CAAC,MAAM,CAAC,OAAO,EAAE,EAAE,OAAO,EAAE,CAAC,CAAC,CAAC,CAAC;QACrE,OAAO,IAAI,EAAE,CAAC;IAChB,CAAC;IAED,sBAAsB;IACtB,MAAM,UAAU,GAAG,CAAC,GAAG,SAAS,CAAC,KAAK,CAAC,CAAC;IACxC,IAAI,UAAU,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,OAAO,KAAK,UAAU,CAAC,OAAO,CAAC,EAAE,CAAC;QAChE,IAAI,IAAI,EAAE,CAAC;YACT,UAAU,CAAC,IAAI,CACb,SAAS,CAAC,MAAM,CAAC,OAAO,EAAE,EAAE,OAAO,EAAE,UAAU,CAAC,OAAO,EAAE,CAAC,CAC3D,CAAC;QACJ,CAAC;aAAM,CAAC;YACN,UAAU,CAAC,OAAO,CAChB,SAAS,CAAC,MAAM,CAAC,OAAO,EAAE,EAAE,OAAO,EAAE,UAAU,CAAC,OAAO,EAAE,CAAC,CAC3D,CAAC;QACJ,CAAC;IACH,CAAC;IAED,IAAI,KAAK,GAAG,KAAK,CAAC;IAClB,MAAM,GAAG,GAAG,UAAU,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE;QAClC,IACE,GAAG,CAAC,OAAO,KAAK,WAAW,CAAC,OAAO;YACnC,GAAG,CAAC,OAAO,KAAK,UAAU,CAAC,OAAO,EAClC,CAAC;YACD,KAAK,GAAG,CAAC,KAAK,CAAC;YACf,OAAO,IAAI,CAAC;QACd,CAAC;QACD,OAAO,KAAK,CAAC;IACf,CAAC,CAAC,CAAC;IAEH,SAAS,CAAC,QAAQ,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;IAChC,OAAO,IAAI,EAAE,CAAC;AAChB,CAAC,CAAC","sourcesContent":["import type { Command } from '@lumensuite/block-std';\n\nexport const selectBlocksBetween: Command<\n  'focusBlock' | 'anchorBlock',\n  never,\n  { tail: boolean }\n> = (ctx, next) => {\n  const { focusBlock, anchorBlock, tail } = ctx;\n  if (!focusBlock || !anchorBlock) {\n    return;\n  }\n  const selection = ctx.std.selection;\n\n  // In same block\n  if (anchorBlock.blockId === focusBlock.blockId) {\n    const blockId = focusBlock.blockId;\n    selection.setGroup('note', [selection.create('block', { blockId })]);\n    return next();\n  }\n\n  // In different blocks\n  const selections = [...selection.value];\n  if (selections.every(sel => sel.blockId !== focusBlock.blockId)) {\n    if (tail) {\n      selections.push(\n        selection.create('block', { blockId: focusBlock.blockId })\n      );\n    } else {\n      selections.unshift(\n        selection.create('block', { blockId: focusBlock.blockId })\n      );\n    }\n  }\n\n  let start = false;\n  const sel = selections.filter(sel => {\n    if (\n      sel.blockId === anchorBlock.blockId ||\n      sel.blockId === focusBlock.blockId\n    ) {\n      start = !start;\n      return true;\n    }\n    return start;\n  });\n\n  selection.setGroup('note', sel);\n  return next();\n};\n\ndeclare global {\n  namespace LumenSuite {\n    interface Commands {\n      selectBlocksBetween: typeof selectBlocksBetween;\n    }\n  }\n}\n"]}