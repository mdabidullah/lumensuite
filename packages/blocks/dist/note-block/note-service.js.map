{"version":3,"file":"note-service.js","sourceRoot":"","sources":["../../src/note-block/note-service.ts"],"names":[],"mappings":"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","sourcesContent":["import type { NoteBlockModel } from '@blocksuite/affine-model';\n\nimport { NoteBlockSchema } from '@blocksuite/affine-model';\nimport { matchFlavours } from '@blocksuite/affine-shared/utils';\nimport { BlockService } from '@blocksuite/block-std';\nimport { Bound, Point } from '@blocksuite/global/utils';\nimport { render } from 'lit';\n\nimport type { EdgelessRootService } from '../root-block/edgeless/edgeless-root-service.js';\nimport type { DragHandleOption } from '../root-block/widgets/drag-handle/config.js';\nimport type { EdgelessNoteBlockComponent } from './note-edgeless-block.js';\n\nimport {\n  AFFINE_DRAG_HANDLE_WIDGET,\n  AffineDragHandleWidget,\n} from '../root-block/widgets/drag-handle/drag-handle.js';\nimport {\n  captureEventTarget,\n  getDuplicateBlocks,\n} from '../root-block/widgets/drag-handle/utils.js';\n\nexport class NoteBlockService extends BlockService {\n  static override readonly flavour = NoteBlockSchema.model.flavour;\n\n  private _dragHandleOption: DragHandleOption = {\n    flavour: NoteBlockSchema.model.flavour,\n    edgeless: true,\n    onDragStart: ({ state, startDragging, anchorBlockId, editorHost }) => {\n      if (!anchorBlockId) {\n        return false;\n      }\n\n      const element = captureEventTarget(state.raw.target);\n      const insideDragHandle = !!element?.closest(AFFINE_DRAG_HANDLE_WIDGET);\n      if (!insideDragHandle) {\n        return false;\n      }\n\n      const anchorComponent = editorHost.std.view.getBlock(anchorBlockId);\n      if (\n        !anchorComponent ||\n        !matchFlavours(anchorComponent.model, [NoteBlockSchema.model.flavour])\n      ) {\n        return false;\n      }\n      const edgelessService = editorHost.std.getService(\n        'affine:page'\n      ) as EdgelessRootService;\n      const zoom = edgelessService?.viewport.zoom ?? 1;\n      const noteComponent = anchorComponent as EdgelessNoteBlockComponent;\n      const dragPreviewEl = document.createElement('div');\n      const bound = Bound.deserialize(noteComponent.model.xywh);\n      const offset = new Point(bound.x * zoom, bound.y * zoom);\n\n      render(\n        noteComponent.host.dangerouslyRenderModel(noteComponent.model),\n        dragPreviewEl\n      );\n\n      startDragging([noteComponent], state, dragPreviewEl, offset);\n      return true;\n    },\n    onDragEnd: ({\n      draggingElements,\n      dropBlockId,\n      dropType,\n      state,\n      editorHost,\n    }) => {\n      if (\n        draggingElements.length !== 1 ||\n        !matchFlavours(draggingElements[0].model, [\n          NoteBlockSchema.model.flavour,\n        ])\n      ) {\n        return false;\n      }\n\n      if (dropType === 'in') {\n        return true;\n      }\n\n      const noteBlock = draggingElements[0].model as NoteBlockModel;\n      const targetBlock = editorHost.doc.getBlockById(dropBlockId);\n      const parentBlock = editorHost.doc.getParent(dropBlockId);\n      if (!targetBlock || !parentBlock) {\n        return true;\n      }\n\n      const altKey = state.raw.altKey;\n      if (altKey) {\n        const duplicateBlocks = getDuplicateBlocks(noteBlock.children);\n\n        const parentIndex =\n          parentBlock.children.indexOf(targetBlock) +\n          (dropType === 'after' ? 1 : 0);\n\n        editorHost.doc.addBlocks(duplicateBlocks, parentBlock, parentIndex);\n      } else {\n        editorHost.doc.moveBlocks(\n          noteBlock.children,\n          parentBlock,\n          targetBlock,\n          dropType === 'before'\n        );\n\n        editorHost.doc.deleteBlock(noteBlock);\n        editorHost.selection.setGroup('gfx', []);\n      }\n\n      return true;\n    },\n  };\n\n  override mounted() {\n    super.mounted();\n\n    this.disposables.add(\n      AffineDragHandleWidget.registerOption(this._dragHandleOption)\n    );\n\n    this.bindHotKey({\n      Tab: ctx => {\n        const { success } = this.std.command.exec('indentBlocks');\n\n        if (!success) return;\n\n        ctx.get('keyboardState').raw.preventDefault();\n        return true;\n      },\n      'Shift-Tab': ctx => {\n        const { success } = this.std.command.exec('dedentBlocks');\n\n        if (!success) return;\n\n        ctx.get('keyboardState').raw.preventDefault();\n        return true;\n      },\n      'Mod-Backspace': ctx => {\n        const { success } = this.std.command.exec('dedentBlocksToRoot');\n\n        if (!success) return;\n\n        ctx.get('keyboardState').raw.preventDefault();\n        return true;\n      },\n    });\n  }\n}\n\ndeclare global {\n  namespace BlockSuite {\n    interface BlockServices {\n      'affine:note': NoteBlockService;\n    }\n  }\n}\n"]}