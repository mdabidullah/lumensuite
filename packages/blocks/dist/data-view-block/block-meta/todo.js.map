{"version":3,"file":"todo.js","sourceRoot":"","sources":["../../../src/data-view-block/block-meta/todo.ts"],"names":[],"mappings":"AAAA,OAAO,EAAuB,eAAe,EAAE,MAAM,0BAA0B,CAAC;AAChF,OAAO,EAAE,aAAa,EAAE,MAAM,sCAAsC,CAAC;AAErE,OAAO,EAAE,oBAAoB,EAAE,MAAM,yDAAyD,CAAC;AAC/F,OAAO,EAAE,eAAe,EAAE,MAAM,WAAW,CAAC;AAE5C,MAAM,CAAC,MAAM,QAAQ,GAAG,eAAe,CAAiB;IACtD,QAAQ,EAAE,KAAK,CAAC,EAAE;QAChB,IAAI,KAAK,CAAC,OAAO,KAAK,eAAe,CAAC,KAAK,CAAC,OAAO,EAAE,CAAC;YACpD,OAAO,KAAK,CAAC;QACf,CAAC;QAED,OAAQ,KAAK,CAAC,KAAwB,CAAC,IAAI,KAAK,MAAM,CAAC;IACzD,CAAC;CACF,CAAC,CAAC;AACH,QAAQ,CAAC,WAAW,CAAC;IACnB,IAAI,EAAE,SAAS;IACf,GAAG,EAAE,YAAY;IACjB,UAAU,EAAE,oBAAoB;IAChC,GAAG,EAAE,KAAK,CAAC,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK;IAC9B,GAAG,EAAE,CAAC,MAAM,EAAE,MAAM,EAAE,EAAE;QACtB,EAAE;IACJ,CAAC;IACD,OAAO,EAAE,CAAC,KAAK,EAAE,QAAQ,EAAE,EAAE;QAC3B,KAAK,CAAC,IAAI,EAAE,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;QACpC,OAAO;YACL,OAAO,EAAE,GAAG,EAAE;gBACZ,KAAK,CAAC,IAAI,EAAE,KAAK,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;YACxC,CAAC;SACF,CAAC;IACJ,CAAC;CACF,CAAC,CAAC;AACH,QAAQ,CAAC,WAAW,CAAC;IACnB,IAAI,EAAE,SAAS;IACf,GAAG,EAAE,cAAc;IACnB,UAAU,EAAE,aAAa,CAAC,oBAAoB;IAC9C,GAAG,EAAE,KAAK,CAAC,EAAE,CAAC,KAAK,CAAC,OAAO;IAC3B,GAAG,EAAE,CAAC,KAAK,EAAE,KAAK,EAAE,EAAE;QACpB,KAAK,CAAC,OAAO,GAAG,KAAK,CAAC;IACxB,CAAC;IACD,OAAO,EAAE,CAAC,KAAK,EAAE,QAAQ,EAAE,EAAE;QAC3B,OAAO,KAAK,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE;YACvC,IAAI,GAAG,KAAK,SAAS,EAAE,CAAC;gBACtB,QAAQ,EAAE,CAAC;YACb,CAAC;QACH,CAAC,CAAC,CAAC;IACL,CAAC;CACF,CAAC,CAAC;AAEH,QAAQ,CAAC,WAAW,CAAC;IACnB,IAAI,EAAE,QAAQ;IACd,GAAG,EAAE,aAAa;IAClB,UAAU,EAAE,aAAa,CAAC,gBAAgB;IAC1C,GAAG,EAAE,KAAK,CAAC,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,EAAE,KAAK,IAAI,EAAE;IACzC,OAAO,EAAE,CAAC,KAAK,EAAE,QAAQ,EAAE,EAAE;QAC3B,OAAO,KAAK,CAAC,GAAG,CAAC,UAAU,CAAC,IAAI,CAAC,cAAc,CAAC,EAAE,CAAC,GAAG,EAAE;YACtD,QAAQ,EAAE,CAAC;QACb,CAAC,CAAC,CAAC;IACL,CAAC;CACF,CAAC,CAAC","sourcesContent":["import { type ListBlockModel, ListBlockSchema } from '@blocksuite/affine-model';\nimport { columnPresets } from '@blocksuite/data-view/column-presets';\n\nimport { richTextColumnConfig } from '../../database-block/columns/rich-text/cell-renderer.js';\nimport { createBlockMeta } from './base.js';\n\nexport const todoMeta = createBlockMeta<ListBlockModel>({\n  selector: block => {\n    if (block.flavour !== ListBlockSchema.model.flavour) {\n      return false;\n    }\n\n    return (block.model as ListBlockModel).type === 'todo';\n  },\n});\ntodoMeta.addProperty({\n  name: 'Content',\n  key: 'todo-title',\n  columnMeta: richTextColumnConfig,\n  get: block => block.text.yText,\n  set: (_block, _value) => {\n    //\n  },\n  updated: (block, callback) => {\n    block.text?.yText.observe(callback);\n    return {\n      dispose: () => {\n        block.text?.yText.unobserve(callback);\n      },\n    };\n  },\n});\ntodoMeta.addProperty({\n  name: 'Checked',\n  key: 'todo-checked',\n  columnMeta: columnPresets.checkboxColumnConfig,\n  get: block => block.checked,\n  set: (block, value) => {\n    block.checked = value;\n  },\n  updated: (block, callback) => {\n    return block.propsUpdated.on(({ key }) => {\n      if (key === 'checked') {\n        callback();\n      }\n    });\n  },\n});\n\ntodoMeta.addProperty({\n  name: 'Source',\n  key: 'todo-source',\n  columnMeta: columnPresets.textColumnConfig,\n  get: block => block.doc.meta?.title ?? '',\n  updated: (block, callback) => {\n    return block.doc.collection.meta.docMetaUpdated.on(() => {\n      callback();\n    });\n  },\n});\n"]}