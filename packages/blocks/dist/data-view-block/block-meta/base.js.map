{"version":3,"file":"base.js","sourceRoot":"","sources":["../../../src/data-view-block/block-meta/base.ts"],"names":[],"mappings":"AAsBA,MAAM,CAAC,MAAM,eAAe,GAAG,CAC7B,OAAyC,EACzC,EAAE;IACF,MAAM,IAAI,GAAc;QACtB,GAAG,OAAO;QACV,UAAU,EAAE,EAAE;KACf,CAAC;IACF,OAAO;QACL,GAAG,IAAI;QACP,WAAW,EAAE,CAAQ,QAAgC,EAAE,EAAE;YACvD,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,QAAwB,CAAC,CAAC;QACjD,CAAC;KACF,CAAC;AACJ,CAAC,CAAC","sourcesContent":["import type { ColumnMeta } from '@blocksuite/data-view';\nimport type { Disposable } from '@blocksuite/global/utils';\nimport type { Block, BlockModel } from '@blocksuite/store';\n\ntype PropertyMeta<\n  T extends BlockModel = BlockModel,\n  Value = unknown,\n  ColumnData extends NonNullable<unknown> = NonNullable<unknown>,\n> = {\n  name: string;\n  key: string;\n  columnMeta: ColumnMeta<string, ColumnData, Value>;\n  getColumnData?: (block: T) => ColumnData;\n  setColumnData?: (block: T, data: ColumnData) => void;\n  get: (block: T) => Value;\n  set?: (block: T, value: Value) => void;\n  updated: (block: T, callback: () => void) => Disposable;\n};\nexport type BlockMeta<T extends BlockModel = BlockModel> = {\n  selector: (block: Block) => boolean;\n  properties: PropertyMeta<T>[];\n};\nexport const createBlockMeta = <T extends BlockModel>(\n  options: Omit<BlockMeta<T>, 'properties'>\n) => {\n  const meta: BlockMeta = {\n    ...options,\n    properties: [],\n  };\n  return {\n    ...meta,\n    addProperty: <Value>(property: PropertyMeta<T, Value>) => {\n      meta.properties.push(property as PropertyMeta);\n    },\n  };\n};\n"]}