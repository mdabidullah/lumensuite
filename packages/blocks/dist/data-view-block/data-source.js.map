{"version":3,"file":"data-source.js","sourceRoot":"","sources":["../../src/data-view-block/data-source.ts"],"names":[],"mappings":"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","sourcesContent":["import type { Column } from '@blocksuite/affine-model';\nimport type { EditorHost } from '@blocksuite/block-std';\nimport type { Block, Doc } from '@blocksuite/store';\n\nimport {\n  insertPositionToIndex,\n  type InsertToPosition,\n} from '@blocksuite/affine-shared/utils';\nimport {\n  type ColumnMeta,\n  createUniComponentFromWebComponent,\n  DataSourceBase,\n  type DetailSlots,\n} from '@blocksuite/data-view';\nimport { columnPresets } from '@blocksuite/data-view/column-presets';\nimport { assertExists, Slot } from '@blocksuite/global/utils';\n\nimport type { BlockMeta } from './block-meta/base.js';\nimport type { DataViewBlockModel } from './data-view-model.js';\n\nimport {\n  databaseBlockAllColumnMap,\n  databaseColumnConverts,\n} from '../database-block/columns/index.js';\nimport { BlockRenderer } from '../database-block/detail-panel/block-renderer.js';\nimport { blockMetaMap } from './block-meta/index.js';\nimport { queryBlockAllColumnMap, queryBlockColumns } from './columns/index.js';\n\nexport type BlockQueryDataSourceConfig = {\n  type: keyof typeof blockMetaMap;\n};\n\n// @ts-ignore\nexport class BlockQueryDataSource extends DataSourceBase {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private columnMetaMap = new Map<string, ColumnMeta<any, any, any>>();\n\n  private meta: BlockMeta;\n\n  blockMap = new Map<string, Block>();\n\n  docDisposeMap = new Map<string, () => void>();\n\n  slots = {\n    update: new Slot(),\n  };\n\n  get addPropertyConfigList(): ColumnMeta[] {\n    return queryBlockColumns as ColumnMeta[];\n  }\n\n  private get blocks() {\n    return [...this.blockMap.values()];\n  }\n\n  override get detailSlots(): DetailSlots {\n    return {\n      ...super.detailSlots,\n      header: createUniComponentFromWebComponent(BlockRenderer),\n    };\n  }\n\n  get properties(): string[] {\n    return [\n      ...this.meta.properties.map(v => v.key),\n      ...this.block.columns.map(v => v.id),\n    ];\n  }\n\n  get rows(): string[] {\n    return this.blocks.map(v => v.id);\n  }\n\n  get workspace() {\n    return this.host.doc.collection;\n  }\n\n  constructor(\n    private host: EditorHost,\n    private block: DataViewBlockModel,\n    config: BlockQueryDataSourceConfig\n  ) {\n    super();\n    this.meta = blockMetaMap[config.type];\n    for (const property of this.meta.properties) {\n      this.columnMetaMap.set(property.columnMeta.type, property.columnMeta);\n    }\n    for (const collection of this.workspace.docs.values()) {\n      for (const block of Object.values(collection.getDoc().blocks.peek())) {\n        if (this.meta.selector(block)) {\n          this.blockMap.set(block.id, block);\n        }\n      }\n    }\n    this.workspace.docs.forEach(doc => {\n      this.listenToDoc(doc.getDoc());\n    });\n    this.workspace.slots.docAdded.on(id => {\n      const doc = this.workspace.getDoc(id);\n      if (doc) {\n        this.listenToDoc(doc);\n      }\n    });\n    this.workspace.slots.docRemoved.on(id => {\n      this.docDisposeMap.get(id)?.();\n    });\n  }\n\n  private getProperty(propertyId: string) {\n    const property = this.meta.properties.find(v => v.key === propertyId);\n    assertExists(property, `property ${propertyId} not found`);\n    return property;\n  }\n\n  private newColumnName() {\n    let i = 1;\n    while (this.block.columns.some(column => column.name === `Column ${i}`)) {\n      i++;\n    }\n    return `Column ${i}`;\n  }\n\n  cellChangeValue(rowId: string, propertyId: string, value: unknown): void {\n    const viewColumn = this.getViewColumn(propertyId);\n    if (viewColumn) {\n      this.block.cells[rowId] = {\n        ...this.block.cells[rowId],\n        [propertyId]: value,\n      };\n      return;\n    }\n    const block = this.blockMap.get(rowId);\n    if (block) {\n      this.meta.properties\n        .find(v => v.key === propertyId)\n        ?.set?.(block.model, value);\n    }\n  }\n\n  cellGetValue(rowId: string, propertyId: string): unknown {\n    const viewColumn = this.getViewColumn(propertyId);\n    if (viewColumn) {\n      return this.block.cells[rowId]?.[propertyId];\n    }\n    const block = this.blockMap.get(rowId);\n    if (block) {\n      return this.getProperty(propertyId)?.get(block.model);\n    }\n    return;\n  }\n\n  getPropertyMeta(type: string): ColumnMeta {\n    const meta = this.columnMetaMap.get(type);\n    if (meta) {\n      return meta;\n    }\n    return queryBlockAllColumnMap[type];\n  }\n\n  getViewColumn(id: string) {\n    return this.block.columns.find(v => v.id === id);\n  }\n\n  listenToDoc(doc: Doc) {\n    this.docDisposeMap.set(\n      doc.id,\n      doc.slots.blockUpdated.on(v => {\n        if (v.type === 'add') {\n          const blockById = doc.getBlock(v.id);\n          if (blockById && this.meta.selector(blockById)) {\n            this.blockMap.set(v.id, blockById);\n          }\n        } else if (v.type === 'delete') {\n          this.blockMap.delete(v.id);\n        }\n        this.slots.update.emit();\n      }).dispose\n    );\n  }\n\n  propertyAdd(\n    insertToPosition: InsertToPosition,\n    type: string | undefined\n  ): string {\n    const doc = this.block.doc;\n    doc.captureSync();\n    const column = databaseBlockAllColumnMap[\n      type ?? columnPresets.multiSelectColumnConfig.type\n    ].create(this.newColumnName());\n\n    const id = doc.generateBlockId();\n    if (this.block.columns.some(v => v.id === id)) {\n      return id;\n    }\n    doc.transact(() => {\n      const col: Column = {\n        ...column,\n        id,\n      };\n      this.block.columns.splice(\n        insertPositionToIndex(insertToPosition, this.block.columns),\n        0,\n        col\n      );\n    });\n    return id;\n  }\n\n  propertyChangeData(propertyId: string, data: Record<string, unknown>): void {\n    const viewColumn = this.getViewColumn(propertyId);\n    if (viewColumn) {\n      viewColumn.data = data;\n    }\n  }\n\n  propertyChangeName(propertyId: string, name: string): void {\n    const viewColumn = this.getViewColumn(propertyId);\n    if (viewColumn) {\n      viewColumn.name = name;\n    }\n  }\n\n  propertyChangeType(propertyId: string, toType: string): void {\n    const viewColumn = this.getViewColumn(propertyId);\n    if (viewColumn) {\n      const currentType = viewColumn.type;\n      const currentData = viewColumn.data;\n      const rows = this.rows$.value;\n      const currentCells = rows.map(rowId =>\n        this.cellGetValue(rowId, propertyId)\n      );\n      const convertFunction = databaseColumnConverts.find(\n        v => v.from === currentType && v.to === toType\n      )?.convert;\n      const result = convertFunction?.(\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        currentData as any,\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        currentCells as any\n      ) ?? {\n        column: databaseBlockAllColumnMap[toType].config.defaultData(),\n        cells: currentCells.map(() => undefined),\n      };\n      this.block.doc.captureSync();\n      viewColumn.type = toType;\n      viewColumn.data = result.column;\n      currentCells.forEach((value, i) => {\n        if (value != null || result.cells[i] != null) {\n          this.block.cells[rows[i]] = {\n            ...this.block.cells[rows[i]],\n            [propertyId]: result.cells[i],\n          };\n        }\n      });\n    }\n  }\n\n  propertyDelete(_id: string): void {\n    const index = this.block.columns.findIndex(v => v.id === _id);\n    if (index >= 0) {\n      this.block.columns.splice(index, 1);\n    }\n  }\n\n  propertyDuplicate(_columnId: string): string {\n    throw new Error('Method not implemented.');\n  }\n\n  propertyGetData(propertyId: string): Record<string, unknown> {\n    const viewColumn = this.getViewColumn(propertyId);\n    if (viewColumn) {\n      return viewColumn.data;\n    }\n    const property = this.getProperty(propertyId);\n    return (\n      property.getColumnData?.(this.blocks[0].model) ??\n      property.columnMeta.config.defaultData()\n    );\n  }\n\n  override propertyGetDefaultWidth(propertyId: string): number {\n    if (this.propertyGetType(propertyId) === 'title') {\n      return 260;\n    }\n    return super.propertyGetDefaultWidth(propertyId);\n  }\n\n  propertyGetName(propertyId: string): string {\n    const viewColumn = this.getViewColumn(propertyId);\n    if (viewColumn) {\n      return viewColumn.name;\n    }\n    if (propertyId === 'type') {\n      return 'Block Type';\n    }\n    return this.getProperty(propertyId)?.name ?? '';\n  }\n\n  override propertyGetReadonly(propertyId: string): boolean {\n    const viewColumn = this.getViewColumn(propertyId);\n    if (viewColumn) {\n      return false;\n    }\n    if (propertyId === 'type') return true;\n    return this.getProperty(propertyId)?.set == null;\n  }\n\n  propertyGetType(propertyId: string): string {\n    const viewColumn = this.getViewColumn(propertyId);\n    if (viewColumn) {\n      return viewColumn.type;\n    }\n    if (propertyId === 'type') {\n      return 'image';\n    }\n    return this.getProperty(propertyId).columnMeta.type;\n  }\n\n  rowAdd(_insertPosition: InsertToPosition | number): string {\n    throw new Error('Method not implemented.');\n  }\n\n  rowDelete(_ids: string[]): void {\n    throw new Error('Method not implemented.');\n  }\n\n  rowMove(_rowId: string, _position: InsertToPosition): void {}\n}\n"]}