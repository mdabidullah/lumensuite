{"version":3,"file":"data-view-model.js","sourceRoot":"","sources":["../../src/data-view-block/data-view-model.ts"],"names":[],"mappings":"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","sourcesContent":["import type { Column } from '@blocksuite/affine-model';\nimport type { DataViewDataType } from '@blocksuite/data-view';\n\nimport {\n  arrayMove,\n  insertPositionToIndex,\n  type InsertToPosition,\n} from '@blocksuite/affine-shared/utils';\nimport { BlockModel, defineBlockSchema } from '@blocksuite/store';\n\ntype Props = {\n  title: string;\n  views: DataViewDataType[];\n  columns: Column[];\n  cells: Record<string, Record<string, unknown>>;\n};\n\nexport class DataViewBlockModel extends BlockModel<Props> {\n  constructor() {\n    super();\n  }\n\n  applyViewsUpdate() {\n    this.doc.updateBlock(this, {\n      views: this.views,\n    });\n  }\n\n  deleteView(id: string) {\n    this.doc.captureSync();\n    this.doc.transact(() => {\n      this.views = this.views.filter(v => v.id !== id);\n    });\n  }\n\n  duplicateView(id: string): string {\n    const newId = this.doc.generateBlockId();\n    this.doc.transact(() => {\n      const index = this.views.findIndex(v => v.id === id);\n      const view = this.views[index];\n      if (view) {\n        this.views.splice(\n          index + 1,\n          0,\n          JSON.parse(JSON.stringify({ ...view, id: newId }))\n        );\n      }\n    });\n    return newId;\n  }\n\n  moveViewTo(id: string, position: InsertToPosition) {\n    this.doc.transact(() => {\n      this.views = arrayMove(\n        this.views,\n        v => v.id === id,\n        arr => insertPositionToIndex(position, arr)\n      );\n    });\n    this.applyViewsUpdate();\n  }\n\n  updateView(\n    id: string,\n    update: (data: DataViewDataType) => Partial<DataViewDataType>\n  ) {\n    this.doc.transact(() => {\n      this.views = this.views.map(v => {\n        if (v.id !== id) {\n          return v;\n        }\n        return { ...v, ...(update(v) as DataViewDataType) };\n      });\n    });\n    this.applyViewsUpdate();\n  }\n}\n\nexport const DataViewBlockSchema = defineBlockSchema({\n  flavour: 'affine:data-view',\n  props: (): Props => ({\n    views: [],\n    title: '',\n    columns: [],\n    cells: {},\n  }),\n  metadata: {\n    role: 'hub',\n    version: 1,\n    parent: ['affine:note'],\n    children: ['affine:paragraph', 'affine:list'],\n  },\n  toModel: () => {\n    return new DataViewBlockModel();\n  },\n});\n"]}