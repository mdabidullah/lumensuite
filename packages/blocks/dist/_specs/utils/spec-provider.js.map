{"version":3,"file":"spec-provider.js","sourceRoot":"","sources":["../../../src/_specs/utils/spec-provider.ts"],"names":[],"mappings":"AAEA,OAAO,EAAE,YAAY,EAAE,MAAM,0BAA0B,CAAC;AAExD,OAAO,EAAE,WAAW,EAAE,MAAM,mBAAmB,CAAC;AAEhD,MAAM,OAAO,YAAY;IAKvB;QAFQ,YAAO,GAAG,IAAI,GAAG,EAA2B,CAAC;IAE9B,CAAC;IAExB,MAAM,CAAC,WAAW;QAChB,IAAI,CAAC,YAAY,CAAC,QAAQ,EAAE,CAAC;YAC3B,YAAY,CAAC,QAAQ,GAAG,IAAI,YAAY,EAAE,CAAC;QAC7C,CAAC;QACD,OAAO,YAAY,CAAC,QAAQ,CAAC;IAC/B,CAAC;IAED,OAAO,CAAC,EAAU,EAAE,IAAqB;QACvC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC;YAC1B,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,EAAE,IAAI,CAAC,CAAC;QAC7B,CAAC;IACH,CAAC;IAED,SAAS,CAAC,EAAU;QAClB,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;IAC1B,CAAC;IAED,UAAU,CAAC,EAAU,EAAE,OAAwB;QAC7C,MAAM,YAAY,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;QAC1C,IAAI,CAAC,YAAY,EAAE,CAAC;YAClB,OAAO,CAAC,KAAK,CAAC,sBAAsB,EAAE,EAAE,CAAC,CAAC;YAC1C,OAAO;QACT,CAAC;QACD,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,GAAG,YAAY,EAAE,GAAG,OAAO,CAAC,CAAC,CAAC;IACtD,CAAC;IAED,OAAO,CAAC,EAAU;QAChB,MAAM,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;QAClC,YAAY,CAAC,IAAI,EAAE,sBAAsB,EAAE,EAAE,CAAC,CAAC;QAC/C,OAAO,IAAI,WAAW,CAAC,IAAI,CAAC,CAAC;IAC/B,CAAC;IAED,OAAO,CAAC,EAAU;QAChB,OAAO,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;IAC9B,CAAC;CACF","sourcesContent":["import type { ExtensionType } from '@blocksuite/block-std';\n\nimport { assertExists } from '@blocksuite/global/utils';\n\nimport { SpecBuilder } from './spec-builder.js';\n\nexport class SpecProvider {\n  static instance: SpecProvider;\n\n  private specMap = new Map<string, ExtensionType[]>();\n\n  private constructor() {}\n\n  static getInstance() {\n    if (!SpecProvider.instance) {\n      SpecProvider.instance = new SpecProvider();\n    }\n    return SpecProvider.instance;\n  }\n\n  addSpec(id: string, spec: ExtensionType[]) {\n    if (!this.specMap.has(id)) {\n      this.specMap.set(id, spec);\n    }\n  }\n\n  clearSpec(id: string) {\n    this.specMap.delete(id);\n  }\n\n  extendSpec(id: string, newSpec: ExtensionType[]) {\n    const existingSpec = this.specMap.get(id);\n    if (!existingSpec) {\n      console.error(`Spec not found for ${id}`);\n      return;\n    }\n    this.specMap.set(id, [...existingSpec, ...newSpec]);\n  }\n\n  getSpec(id: string) {\n    const spec = this.specMap.get(id);\n    assertExists(spec, `Spec not found for ${id}`);\n    return new SpecBuilder(spec);\n  }\n\n  hasSpec(id: string) {\n    return this.specMap.has(id);\n  }\n}\n"]}