{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../src/embed-youtube-block/utils.ts"],"names":[],"mappings":"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","sourcesContent":["import type {\n  EmbedYoutubeBlockUrlData,\n  EmbedYoutubeModel,\n} from '@lumensuite/affine-model';\n\nimport { isAbortError } from '@lumensuite/affine-shared/utils';\nimport { assertExists } from '@lumensuite/global/utils';\n\nimport type { LinkPreviewer } from '../_common/embed-block-helper/index.js';\nimport type { EmbedYoutubeBlockComponent } from './embed-youtube-block.js';\n\nexport async function queryEmbedYoutubeData(\n  embedYoutubeModel: EmbedYoutubeModel,\n  linkPreviewer: LinkPreviewer,\n  signal?: AbortSignal\n): Promise<Partial<EmbedYoutubeBlockUrlData>> {\n  const url = embedYoutubeModel.url;\n\n  const [videoOpenGraphData, videoOEmbedData] = await Promise.all([\n    linkPreviewer.query(url, signal),\n    queryYoutubeOEmbedData(url, signal),\n  ]);\n\n  const youtubeEmbedData: Partial<EmbedYoutubeBlockUrlData> = {\n    ...videoOpenGraphData,\n    ...videoOEmbedData,\n  };\n\n  if (youtubeEmbedData.creatorUrl) {\n    const creatorOpenGraphData = await linkPreviewer.query(\n      youtubeEmbedData.creatorUrl,\n      signal\n    );\n    youtubeEmbedData.creatorImage = creatorOpenGraphData.image;\n  }\n\n  return youtubeEmbedData;\n}\n\nexport async function queryYoutubeOEmbedData(\n  url: string,\n  signal?: AbortSignal\n): Promise<Partial<EmbedYoutubeBlockUrlData>> {\n  let youtubeOEmbedData: Partial<EmbedYoutubeBlockUrlData> = {};\n\n  const oEmbedUrl = `https://youtube.com/oembed?url=${url}&format=json`;\n\n  const oEmbedResponse = await fetch(oEmbedUrl, { signal }).catch(() => null);\n  if (oEmbedResponse && oEmbedResponse.ok) {\n    const oEmbedJson = await oEmbedResponse.json();\n    const { title, author_name, author_url } = oEmbedJson;\n\n    youtubeOEmbedData = {\n      title,\n      creator: author_name,\n      creatorUrl: author_url,\n    };\n  }\n\n  return youtubeOEmbedData;\n}\n\nexport async function refreshEmbedYoutubeUrlData(\n  embedYoutubeElement: EmbedYoutubeBlockComponent,\n  signal?: AbortSignal\n): Promise<void> {\n  let image = null,\n    title = null,\n    description = null,\n    creator = null,\n    creatorUrl = null,\n    creatorImage = null;\n\n  try {\n    embedYoutubeElement.loading = true;\n\n    const queryUrlData = embedYoutubeElement.service?.queryUrlData;\n    assertExists(queryUrlData);\n\n    const youtubeUrlData = await queryUrlData(\n      embedYoutubeElement.model,\n      signal\n    );\n\n    ({\n      image = null,\n      title = null,\n      description = null,\n      creator = null,\n      creatorUrl = null,\n      creatorImage = null,\n    } = youtubeUrlData);\n\n    if (signal?.aborted) return;\n\n    embedYoutubeElement.doc.updateBlock(embedYoutubeElement.model, {\n      image,\n      title,\n      description,\n      creator,\n      creatorUrl,\n      creatorImage,\n    });\n  } catch (error) {\n    if (signal?.aborted || isAbortError(error)) return;\n    throw error;\n  } finally {\n    embedYoutubeElement.loading = false;\n  }\n}\n"]}