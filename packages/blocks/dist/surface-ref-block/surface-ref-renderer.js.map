{"version":3,"file":"surface-ref-renderer.js","sourceRoot":"","sources":["../../src/surface-ref-block/surface-ref-renderer.ts"],"names":[],"mappings":"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","sourcesContent":["import type {\n  SurfaceBlockModel,\n  SurfaceBlockService,\n} from '@lumensuite/affine-block-surface';\nimport type { Color, NoteBlockModel } from '@lumensuite/affine-model';\nimport type { BlockStdScope } from '@lumensuite/block-std';\nimport type { Doc } from '@lumensuite/store';\n\nimport {\n  CanvasRenderer,\n  elementRenderers,\n} from '@lumensuite/affine-block-surface';\nimport { ThemeObserver } from '@lumensuite/affine-shared/theme';\nimport { GfxControllerIdentifier, Viewport } from '@lumensuite/block-std/gfx';\nimport { DisposableGroup, Slot } from '@lumensuite/global/utils';\n\nimport { getSurfaceBlock } from './utils.js';\n\nexport class SurfaceRefRenderer {\n  private _surfaceModel: SurfaceBlockModel | null = null;\n\n  private readonly _surfaceRenderer: CanvasRenderer;\n\n  private readonly _viewport: Viewport;\n\n  protected _disposables = new DisposableGroup();\n\n  slots = {\n    surfaceRendererInit: new Slot(),\n    surfaceRendererRefresh: new Slot(),\n    surfaceModelChanged: new Slot<SurfaceBlockModel>(),\n    mounted: new Slot(),\n    unmounted: new Slot(),\n  };\n\n  get surfaceModel() {\n    return this._surfaceModel;\n  }\n\n  get surfaceRenderer() {\n    return this._surfaceRenderer;\n  }\n\n  get surfaceService() {\n    return this.std.getService('affine:surface') as SurfaceBlockService;\n  }\n\n  get viewport() {\n    return this._viewport;\n  }\n\n  constructor(\n    readonly id: string,\n    readonly doc: Doc,\n    readonly std: BlockStdScope,\n    options: {\n      enableStackingCanvas?: boolean;\n    } = {\n      enableStackingCanvas: false,\n    }\n  ) {\n    const viewport = new Viewport();\n    const renderer = new CanvasRenderer({\n      viewport,\n      layerManager: std.get(GfxControllerIdentifier).layer,\n      gridManager: std.get(GfxControllerIdentifier).grid,\n      enableStackingCanvas: options.enableStackingCanvas,\n      provider: {\n        generateColorProperty: (color: Color, fallback: string) =>\n          ThemeObserver.generateColorProperty(color, fallback),\n        getColorScheme: () => ThemeObserver.mode,\n        getColorValue: (color: Color, fallback?: string, real?: boolean) =>\n          ThemeObserver.getColorValue(color, fallback, real),\n        getPropertyValue: (property: string) =>\n          ThemeObserver.getPropertyValue(property),\n      },\n      elementRenderers,\n    });\n\n    this._surfaceRenderer = renderer;\n    this._viewport = viewport;\n  }\n\n  private _initSurfaceModel() {\n    const init = () => {\n      const model = getSurfaceBlock(this.doc);\n      this._surfaceModel = model;\n\n      if (!model) return;\n      this.slots.surfaceModelChanged.emit(model);\n    };\n\n    init();\n\n    if (!this._surfaceModel) {\n      this._disposables.add(\n        this.doc.slots.blockUpdated.on(({ type }) => {\n          if (\n            type === 'add' &&\n            !this._surfaceModel &&\n            getSurfaceBlock(this.doc)\n          ) {\n            init();\n          }\n        })\n      );\n    }\n  }\n\n  private _initSurfaceRenderer() {\n    this.slots.surfaceRendererInit.emit();\n  }\n\n  getModel(id: string): LumenSuite.EdgelessModel | null {\n    return (\n      (this.doc.getBlockById(id) as Exclude<\n        LumenSuite.EdgelessBlockModelType,\n        NoteBlockModel\n      >) ??\n      this._surfaceModel?.getElementById(id) ??\n      null\n    );\n  }\n\n  mount() {\n    if (this._disposables.disposed) {\n      this._disposables = new DisposableGroup();\n    }\n\n    this._initSurfaceModel();\n    this._initSurfaceRenderer();\n    this.slots.mounted.emit();\n  }\n\n  unmount() {\n    this._disposables.dispose();\n    this.slots.unmounted.emit();\n  }\n}\n"]}