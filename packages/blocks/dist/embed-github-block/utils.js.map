{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../src/embed-github-block/utils.ts"],"names":[],"mappings":"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","sourcesContent":["import type {\n  EmbedGithubBlockUrlData,\n  EmbedGithubModel,\n} from '@lumensuite/affine-model';\n\nimport { isAbortError } from '@lumensuite/affine-shared/utils';\nimport { assertExists } from '@lumensuite/global/utils';\nimport { nothing } from 'lit';\n\nimport type { LinkPreviewer } from '../_common/embed-block-helper/index.js';\nimport type { EmbedGithubBlockComponent } from './embed-github-block.js';\n\nimport {\n  GithubIssueClosedFailureIcon,\n  GithubIssueClosedSuccessIcon,\n  GithubIssueOpenIcon,\n  GithubPRClosedIcon,\n  GithubPRDraftIcon,\n  GithubPRMergedIcon,\n  GithubPROpenIcon,\n} from './styles.js';\n\nexport async function queryEmbedGithubData(\n  embedGithubModel: EmbedGithubModel,\n  linkPreviewer: LinkPreviewer,\n  signal?: AbortSignal\n): Promise<Partial<EmbedGithubBlockUrlData>> {\n  const [githubApiData, openGraphData] = await Promise.all([\n    queryEmbedGithubApiData(embedGithubModel, signal),\n    linkPreviewer.query(embedGithubModel.url, signal),\n  ]);\n  return { ...githubApiData, ...openGraphData };\n}\n\nexport async function queryEmbedGithubApiData(\n  embedGithubModel: EmbedGithubModel,\n  signal?: AbortSignal\n): Promise<Partial<EmbedGithubBlockUrlData>> {\n  const { owner, repo, githubType, githubId } = embedGithubModel;\n  let githubApiData: Partial<EmbedGithubBlockUrlData> = {};\n\n  // github's public api has a rate limit of 60 requests per hour\n  const apiUrl = `https://api.github.com/repos/${owner}/${repo}/${\n    githubType === 'issue' ? 'issues' : 'pulls'\n  }/${githubId}`;\n\n  const githubApiResponse = await fetch(apiUrl, {\n    cache: 'no-cache',\n    signal,\n  }).catch(() => null);\n\n  if (githubApiResponse && githubApiResponse.ok) {\n    const githubApiJson = await githubApiResponse.json();\n    const { state, state_reason, draft, merged, created_at, assignees } =\n      githubApiJson;\n\n    const assigneeLogins = assignees.map(\n      (assignee: { login: string }) => assignee.login\n    );\n\n    let status = state;\n    if (merged) {\n      status = 'merged';\n    } else if (state === 'open' && draft) {\n      status = 'draft';\n    }\n\n    githubApiData = {\n      status,\n      statusReason: state_reason,\n      createdAt: created_at,\n      assignees: assigneeLogins,\n    };\n  }\n\n  return githubApiData;\n}\n\nexport async function refreshEmbedGithubUrlData(\n  embedGithubElement: EmbedGithubBlockComponent,\n  signal?: AbortSignal\n): Promise<void> {\n  let image = null,\n    status = null,\n    statusReason = null,\n    title = null,\n    description = null,\n    createdAt = null,\n    assignees = null;\n\n  try {\n    embedGithubElement.loading = true;\n\n    const queryUrlData = embedGithubElement.service?.queryUrlData;\n    assertExists(queryUrlData);\n\n    const githubUrlData = await queryUrlData(embedGithubElement.model);\n    ({\n      image = null,\n      status = null,\n      statusReason = null,\n      title = null,\n      description = null,\n      createdAt = null,\n      assignees = null,\n    } = githubUrlData);\n\n    if (signal?.aborted) return;\n\n    embedGithubElement.doc.updateBlock(embedGithubElement.model, {\n      image,\n      status,\n      statusReason,\n      title,\n      description,\n      createdAt,\n      assignees,\n    });\n  } catch (error) {\n    if (signal?.aborted || isAbortError(error)) return;\n    throw Error;\n  } finally {\n    embedGithubElement.loading = false;\n  }\n}\n\nexport async function refreshEmbedGithubStatus(\n  embedGithubElement: EmbedGithubBlockComponent,\n  signal?: AbortSignal\n) {\n  const queryApiData = embedGithubElement.service?.queryApiData;\n  assertExists(queryApiData);\n  const githubApiData = await queryApiData(embedGithubElement.model, signal);\n\n  if (!githubApiData.status || signal?.aborted) return;\n\n  embedGithubElement.doc.updateBlock(embedGithubElement.model, {\n    status: githubApiData.status,\n    statusReason: githubApiData.statusReason,\n    createdAt: githubApiData.createdAt,\n    assignees: githubApiData.assignees,\n  });\n}\n\nexport function getGithubStatusIcon(\n  type: 'issue' | 'pr',\n  status: string,\n  statusReason: string | null\n) {\n  if (type === 'issue') {\n    if (status === 'open') {\n      return GithubIssueOpenIcon;\n    } else if (status === 'closed' && statusReason === 'completed') {\n      return GithubIssueClosedSuccessIcon;\n    } else if (status === 'closed' && statusReason === 'not_planned') {\n      return GithubIssueClosedFailureIcon;\n    } else {\n      return nothing;\n    }\n  } else if (type === 'pr') {\n    if (status === 'open') {\n      return GithubPROpenIcon;\n    } else if (status === 'draft') {\n      return GithubPRDraftIcon;\n    } else if (status === 'merged') {\n      return GithubPRMergedIcon;\n    } else if (status === 'closed') {\n      return GithubPRClosedIcon;\n    }\n  }\n  return nothing;\n}\n"]}