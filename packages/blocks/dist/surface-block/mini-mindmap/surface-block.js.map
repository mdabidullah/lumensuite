{"version":3,"file":"surface-block.js","sourceRoot":"","sources":["../../../src/surface-block/mini-mindmap/surface-block.ts"],"names":[],"mappings":"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","sourcesContent":["import type { SurfaceBlockModel } from '@blocksuite/affine-block-surface';\nimport type { Color, ShapeElementModel } from '@blocksuite/affine-model';\nimport type { Bound } from '@blocksuite/global/utils';\n\nimport {\n  CanvasRenderer,\n  elementRenderers,\n  fitContent,\n} from '@blocksuite/affine-block-surface';\nimport { ThemeObserver } from '@blocksuite/affine-shared/theme';\nimport { BlockComponent } from '@blocksuite/block-std';\nimport { GfxControllerIdentifier } from '@blocksuite/block-std/gfx';\nimport { html } from 'lit';\nimport { customElement, query } from 'lit/decorators.js';\n\nimport type { MindmapService } from './service.js';\n\n@customElement('mini-mindmap-surface-block')\nexport class MindmapSurfaceBlock extends BlockComponent<SurfaceBlockModel> {\n  private _renderer?: CanvasRenderer;\n\n  private get _grid() {\n    return this.std.get(GfxControllerIdentifier).grid;\n  }\n\n  private get _layer() {\n    return this.std.get(GfxControllerIdentifier).layer;\n  }\n\n  get mindmapService() {\n    return this.std.getService('affine:page') as unknown as MindmapService;\n  }\n\n  get viewport() {\n    return this.std.get(GfxControllerIdentifier).viewport;\n  }\n\n  constructor() {\n    super();\n  }\n\n  private _adjustNodeWidth() {\n    this.model.doc.transact(() => {\n      this.model.elementModels.forEach(element => {\n        if (element.type === 'shape') {\n          fitContent(element as ShapeElementModel);\n        }\n      });\n    });\n  }\n\n  private _resizeEffect() {\n    const observer = new ResizeObserver(() => {\n      this.viewport.onResize();\n    });\n\n    observer.observe(this.editorContainer);\n    this._disposables.add(() => {\n      observer.disconnect();\n    });\n  }\n\n  private _setupCenterEffect() {\n    this._disposables.add(\n      this.mindmapService.requestCenter.on(() => {\n        let bound: Bound;\n\n        this.model.elementModels.forEach(el => {\n          if (!bound) {\n            bound = el.elementBound;\n          } else {\n            bound = bound.unite(el.elementBound);\n          }\n        });\n\n        if (bound!) {\n          this.viewport.setViewportByBound(bound, [10, 10, 10, 10]);\n        }\n      })\n    );\n  }\n\n  private _setupRenderer() {\n    this._disposables.add(\n      this.model.elementUpdated.on(() => {\n        this._renderer?.refresh();\n        this.mindmapService.center();\n      })\n    );\n\n    this.viewport.ZOOM_MIN = 0.01;\n  }\n\n  override connectedCallback(): void {\n    super.connectedCallback();\n\n    this._renderer = new CanvasRenderer({\n      viewport: this.viewport,\n      layerManager: this._layer,\n      gridManager: this._grid,\n      enableStackingCanvas: true,\n      provider: {\n        selectedElements: () => [],\n        getColorScheme: () => ThemeObserver.mode,\n        getColorValue: (color: Color, fallback?: string, real?: boolean) =>\n          ThemeObserver.getColorValue(color, fallback, real),\n        generateColorProperty: (color: Color, fallback: string) =>\n          ThemeObserver.generateColorProperty(color, fallback),\n        getPropertyValue: (property: string) =>\n          ThemeObserver.getPropertyValue(property),\n      },\n      elementRenderers,\n    });\n  }\n\n  override firstUpdated(_changedProperties: Map<PropertyKey, unknown>): void {\n    this._renderer?.attach(this.editorContainer);\n\n    this._resizeEffect();\n    this._setupCenterEffect();\n    this._setupRenderer();\n    this._adjustNodeWidth();\n    this.mindmapService.center();\n  }\n\n  override render() {\n    return html`\n      <style>\n        .affine-mini-mindmap-surface {\n          width: 100%;\n          height: 100%;\n        }\n      </style>\n      <div class=\"affine-mini-mindmap-surface\">\n        <!-- attach cavnas later in renderer -->\n      </div>\n    `;\n  }\n\n  @query('.affine-mini-mindmap-surface')\n  accessor editorContainer!: HTMLDivElement;\n}\n"]}