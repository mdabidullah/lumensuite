{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../src/bookmark-block/utils.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,YAAY,EAAE,MAAM,iCAAiC,CAAC;AAC/D,OAAO,EAAE,YAAY,EAAE,MAAM,0BAA0B,CAAC;AAIxD,MAAM,CAAC,KAAK,UAAU,sBAAsB,CAC1C,eAAuC,EACvC,MAAoB;IAEpB,IAAI,KAAK,GAAG,IAAI,EACd,WAAW,GAAG,IAAI,EAClB,IAAI,GAAG,IAAI,EACX,KAAK,GAAG,IAAI,CAAC;IAEf,IAAI,CAAC;QACH,eAAe,CAAC,OAAO,GAAG,IAAI,CAAC;QAE/B,MAAM,YAAY,GAAG,eAAe,CAAC,OAAO,EAAE,YAAY,CAAC;QAC3D,YAAY,CAAC,YAAY,CAAC,CAAC;QAE3B,MAAM,eAAe,GAAG,MAAM,YAAY,CACxC,eAAe,CAAC,KAAK,CAAC,GAAG,EACzB,MAAM,CACP,CAAC;QAEF,KAAK,GAAG,eAAe,CAAC,KAAK,IAAI,IAAI,CAAC;QACtC,WAAW,GAAG,eAAe,CAAC,WAAW,IAAI,IAAI,CAAC;QAClD,IAAI,GAAG,eAAe,CAAC,IAAI,IAAI,IAAI,CAAC;QACpC,KAAK,GAAG,eAAe,CAAC,KAAK,IAAI,IAAI,CAAC;QAEtC,IAAI,CAAC,KAAK,IAAI,CAAC,WAAW,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,EAAE,CAAC;YAC9C,eAAe,CAAC,KAAK,GAAG,IAAI,CAAC;QAC/B,CAAC;QAED,IAAI,MAAM,EAAE,OAAO;YAAE,OAAO;QAE5B,eAAe,CAAC,GAAG,CAAC,WAAW,CAAC,eAAe,CAAC,KAAK,EAAE;YACrD,KAAK;YACL,WAAW;YACX,IAAI;YACJ,KAAK;SACN,CAAC,CAAC;IACL,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,IAAI,MAAM,EAAE,OAAO,IAAI,YAAY,CAAC,KAAK,CAAC;YAAE,OAAO;QACnD,MAAM,KAAK,CAAC;IACd,CAAC;YAAS,CAAC;QACT,eAAe,CAAC,OAAO,GAAG,KAAK,CAAC;IAClC,CAAC;AACH,CAAC","sourcesContent":["import { isAbortError } from '@blocksuite/affine-shared/utils';\nimport { assertExists } from '@blocksuite/global/utils';\n\nimport type { BookmarkBlockComponent } from './bookmark-block.js';\n\nexport async function refreshBookmarkUrlData(\n  bookmarkElement: BookmarkBlockComponent,\n  signal?: AbortSignal\n) {\n  let title = null,\n    description = null,\n    icon = null,\n    image = null;\n\n  try {\n    bookmarkElement.loading = true;\n\n    const queryUrlData = bookmarkElement.service?.queryUrlData;\n    assertExists(queryUrlData);\n\n    const bookmarkUrlData = await queryUrlData(\n      bookmarkElement.model.url,\n      signal\n    );\n\n    title = bookmarkUrlData.title ?? null;\n    description = bookmarkUrlData.description ?? null;\n    icon = bookmarkUrlData.icon ?? null;\n    image = bookmarkUrlData.image ?? null;\n\n    if (!title && !description && !icon && !image) {\n      bookmarkElement.error = true;\n    }\n\n    if (signal?.aborted) return;\n\n    bookmarkElement.doc.updateBlock(bookmarkElement.model, {\n      title,\n      description,\n      icon,\n      image,\n    });\n  } catch (error) {\n    if (signal?.aborted || isAbortError(error)) return;\n    throw error;\n  } finally {\n    bookmarkElement.loading = false;\n  }\n}\n"]}