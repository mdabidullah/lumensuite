{"version":3,"file":"drag-and-drop.js","sourceRoot":"","sources":["../../../src/_common/utils/drag-and-drop.ts"],"names":[],"mappings":"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","sourcesContent":["import type { BlockComponent } from '@blocksuite/block-std';\nimport type { BlockModel } from '@blocksuite/store';\n\nimport {\n  getClosestBlockComponentByElement,\n  matchFlavours,\n} from '@blocksuite/affine-shared/utils';\nimport { type Point, Rect } from '@blocksuite/global/utils';\nimport { assertExists } from '@blocksuite/global/utils';\n\nimport type { EditingState } from '../types.js';\n\nimport {\n  DropFlags,\n  getDropRectByPoint,\n  getRectByBlockComponent,\n} from './query.js';\n\n/**\n * A dropping type.\n */\nexport type DroppingType = 'none' | 'before' | 'after' | 'database';\n\nexport type DropResult = {\n  type: DroppingType;\n  rect: Rect;\n  modelState: EditingState;\n};\n\n/**\n * Calculates the drop target.\n */\nexport function calcDropTarget(\n  point: Point,\n  model: BlockModel,\n  element: Element,\n  draggingElements: BlockComponent[] = [],\n  scale: number = 1,\n  flavour: string | null = null // for block-hub\n): DropResult | null {\n  const schema = model.doc.getSchemaByFlavour('affine:database');\n  assertExists(schema);\n  const children = schema.model.children ?? [];\n\n  let shouldAppendToDatabase = true;\n\n  if (children.length) {\n    if (draggingElements.length) {\n      shouldAppendToDatabase = draggingElements\n        .map(el => el.model)\n        .every(m => children.includes(m.flavour));\n    } else if (flavour) {\n      shouldAppendToDatabase = children.includes(flavour);\n    }\n  }\n\n  if (!shouldAppendToDatabase && !matchFlavours(model, ['affine:database'])) {\n    const databaseBlockComponent = element.closest('affine-database');\n    if (databaseBlockComponent) {\n      element = databaseBlockComponent;\n      model = databaseBlockComponent.model;\n    }\n  }\n\n  let type: DroppingType = 'none';\n  const height = 3 * scale;\n  const { rect: domRect, flag } = getDropRectByPoint(point, model, element);\n\n  if (flag === DropFlags.EmptyDatabase) {\n    // empty database\n    const rect = Rect.fromDOMRect(domRect);\n    rect.top -= height / 2;\n    rect.height = height;\n    type = 'database';\n\n    return {\n      type,\n      rect,\n      modelState: {\n        model,\n        rect: domRect,\n        element: element as BlockComponent,\n      },\n    };\n  } else if (flag === DropFlags.Database) {\n    // not empty database\n    const distanceToTop = Math.abs(domRect.top - point.y);\n    const distanceToBottom = Math.abs(domRect.bottom - point.y);\n    const before = distanceToTop < distanceToBottom;\n    type = before ? 'before' : 'after';\n\n    return {\n      type,\n      rect: Rect.fromLWTH(\n        domRect.left,\n        domRect.width,\n        (before ? domRect.top - 1 : domRect.bottom) - height / 2,\n        height\n      ),\n      modelState: {\n        model,\n        rect: domRect,\n        element: element as BlockComponent,\n      },\n    };\n  }\n\n  const distanceToTop = Math.abs(domRect.top - point.y);\n  const distanceToBottom = Math.abs(domRect.bottom - point.y);\n  const before = distanceToTop < distanceToBottom;\n\n  type = before ? 'before' : 'after';\n  let offsetY = 4;\n\n  if (type === 'before') {\n    // before\n    let prev;\n    let prevRect;\n\n    prev = element.previousElementSibling;\n    if (prev) {\n      if (\n        draggingElements.length &&\n        prev === draggingElements[draggingElements.length - 1]\n      ) {\n        type = 'none';\n      } else {\n        prevRect = getRectByBlockComponent(prev);\n      }\n    } else {\n      prev = element.parentElement?.previousElementSibling;\n      if (prev) {\n        prevRect = prev.getBoundingClientRect();\n      }\n    }\n\n    if (prevRect) {\n      offsetY = (domRect.top - prevRect.bottom) / 2;\n    }\n  } else {\n    // after\n    let next;\n    let nextRect;\n\n    next = element.nextElementSibling;\n    if (next) {\n      if (draggingElements.length && next === draggingElements[0]) {\n        type = 'none';\n        next = null;\n      }\n    } else {\n      next = getClosestBlockComponentByElement(\n        element.parentElement\n      )?.nextElementSibling;\n    }\n\n    if (next) {\n      nextRect = getRectByBlockComponent(next);\n      offsetY = (nextRect.top - domRect.bottom) / 2;\n    }\n  }\n\n  if (type === 'none') return null;\n\n  let top = domRect.top;\n  if (type === 'before') {\n    top -= offsetY;\n  } else {\n    top += domRect.height + offsetY;\n  }\n\n  return {\n    type,\n    rect: Rect.fromLWTH(domRect.left, domRect.width, top - height / 2, height),\n    modelState: {\n      model,\n      rect: domRect,\n      element: element as BlockComponent,\n    },\n  };\n}\n"]}