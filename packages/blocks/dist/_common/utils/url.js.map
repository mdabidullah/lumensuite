{"version":3,"file":"url.js","sourceRoot":"","sources":["../../../src/_common/utils/url.ts"],"names":[],"mappings":"AAGA,OAAO,EACL,eAAe,EACf,uBAAuB,EACvB,qBAAqB,EACrB,2BAA2B,EAC3B,qBAAqB,EACrB,yBAAyB,EACzB,wBAAwB,EACxB,sBAAsB,EACtB,4BAA4B,EAC5B,sBAAsB,EACtB,0BAA0B,EAC1B,gBAAgB,GACjB,MAAM,qCAAqC,CAAC;AAC7C,OAAO,EAAE,QAAQ,EAAE,MAAM,0BAA0B,CAAC;AACpD,OAAO,EAAE,aAAa,EAAE,MAAM,iCAAiC,CAAC;AAWhE,MAAM,UAAU,iBAAiB;IAC/B,MAAM,KAAK,GAAG,aAAa,CAAC,IAAI,CAAC;IACjC,IAAI,KAAK,KAAK,OAAO,EAAE,CAAC;QACtB,OAAO;YACL,WAAW,EAAE,gBAAgB;YAC7B,mBAAmB,EAAE,wBAAwB;YAC7C,uBAAuB,EAAE,4BAA4B;YACrD,iBAAiB,EAAE,sBAAsB;YACzC,qBAAqB,EAAE,0BAA0B;YACjD,iBAAiB,EAAE,sBAAsB;SAC1C,CAAC;IACJ,CAAC;SAAM,CAAC;QACN,OAAO;YACL,WAAW,EAAE,eAAe;YAC5B,mBAAmB,EAAE,uBAAuB;YAC5C,uBAAuB,EAAE,2BAA2B;YACpD,iBAAiB,EAAE,qBAAqB;YACxC,qBAAqB,EAAE,yBAAyB;YAChD,iBAAiB,EAAE,qBAAqB;SACzC,CAAC;IACJ,CAAC;AACH,CAAC;AAED,MAAM,UAAU,mBAAmB,CAAC,IAAY;IAC9C,IAAI,CAAC;QACH,MAAM,GAAG,GAAG,IAAI,GAAG,CAAC,IAAI,CAAC,CAAC;QAC1B,MAAM,IAAI,GAAG,GAAG,CAAC,YAAY,CAAC,GAAG,CAAC,MAAM,CAAwB,CAAC;QAEjE,IAAI,IAAI,IAAI,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC;YACpC,MAAM,MAAM,GAA4B,EAAE,IAAI,EAAE,IAAe,EAAE,CAAC;YAClE,MAAM,QAAQ,GAAG,GAAG,CAAC,YAAY;iBAC9B,GAAG,CAAC,UAAU,CAAC;gBAChB,EAAE,IAAI,EAAE;iBACP,KAAK,CAAC,GAAG,CAAC;iBACV,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,IAAI,EAAE,CAAC;iBACpB,MAAM,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC;YAC3B,MAAM,UAAU,GAAG,GAAG,CAAC,YAAY;iBAChC,GAAG,CAAC,YAAY,CAAC;gBAClB,EAAE,IAAI,EAAE;iBACP,KAAK,CAAC,GAAG,CAAC;iBACV,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,IAAI,EAAE,CAAC;iBACpB,MAAM,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC;YAE3B,IAAI,QAAQ,EAAE,MAAM,EAAE,CAAC;gBACrB,MAAM,CAAC,QAAQ,GAAG,QAAQ,CAAC;YAC7B,CAAC;YAED,IAAI,UAAU,EAAE,MAAM,EAAE,CAAC;gBACvB,MAAM,CAAC,UAAU,GAAG,UAAU,CAAC;YACjC,CAAC;YAED,OAAO,EAAE,MAAM,EAAE,CAAC;QACpB,CAAC;IACH,CAAC;IAAC,OAAO,GAAG,EAAE,CAAC;QACb,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;IACrB,CAAC;IAED,OAAO,IAAI,CAAC;AACd,CAAC","sourcesContent":["import type { DocMode, ReferenceInfo } from '@blocksuite/affine-model';\nimport type { TemplateResult } from 'lit';\n\nimport {\n  DarkLoadingIcon,\n  EmbedCardDarkBannerIcon,\n  EmbedCardDarkCubeIcon,\n  EmbedCardDarkHorizontalIcon,\n  EmbedCardDarkListIcon,\n  EmbedCardDarkVerticalIcon,\n  EmbedCardLightBannerIcon,\n  EmbedCardLightCubeIcon,\n  EmbedCardLightHorizontalIcon,\n  EmbedCardLightListIcon,\n  EmbedCardLightVerticalIcon,\n  LightLoadingIcon,\n} from '@blocksuite/affine-components/icons';\nimport { DocModes } from '@blocksuite/affine-model';\nimport { ThemeObserver } from '@blocksuite/affine-shared/theme';\n\ntype EmbedCardIcons = {\n  LoadingIcon: TemplateResult<1>;\n  EmbedCardBannerIcon: TemplateResult<1>;\n  EmbedCardHorizontalIcon: TemplateResult<1>;\n  EmbedCardListIcon: TemplateResult<1>;\n  EmbedCardVerticalIcon: TemplateResult<1>;\n  EmbedCardCubeIcon: TemplateResult<1>;\n};\n\nexport function getEmbedCardIcons(): EmbedCardIcons {\n  const theme = ThemeObserver.mode;\n  if (theme === 'light') {\n    return {\n      LoadingIcon: LightLoadingIcon,\n      EmbedCardBannerIcon: EmbedCardLightBannerIcon,\n      EmbedCardHorizontalIcon: EmbedCardLightHorizontalIcon,\n      EmbedCardListIcon: EmbedCardLightListIcon,\n      EmbedCardVerticalIcon: EmbedCardLightVerticalIcon,\n      EmbedCardCubeIcon: EmbedCardLightCubeIcon,\n    };\n  } else {\n    return {\n      LoadingIcon: DarkLoadingIcon,\n      EmbedCardBannerIcon: EmbedCardDarkBannerIcon,\n      EmbedCardHorizontalIcon: EmbedCardDarkHorizontalIcon,\n      EmbedCardListIcon: EmbedCardDarkListIcon,\n      EmbedCardVerticalIcon: EmbedCardDarkVerticalIcon,\n      EmbedCardCubeIcon: EmbedCardDarkCubeIcon,\n    };\n  }\n}\n\nexport function extractSearchParams(link: string) {\n  try {\n    const url = new URL(link);\n    const mode = url.searchParams.get('mode') as DocMode | undefined;\n\n    if (mode && DocModes.includes(mode)) {\n      const params: ReferenceInfo['params'] = { mode: mode as DocMode };\n      const blockIds = url.searchParams\n        .get('blockIds')\n        ?.trim()\n        .split(',')\n        .map(id => id.trim())\n        .filter(id => id.length);\n      const elementIds = url.searchParams\n        .get('elementIds')\n        ?.trim()\n        .split(',')\n        .map(id => id.trim())\n        .filter(id => id.length);\n\n      if (blockIds?.length) {\n        params.blockIds = blockIds;\n      }\n\n      if (elementIds?.length) {\n        params.elementIds = elementIds;\n      }\n\n      return { params };\n    }\n  } catch (err) {\n    console.error(err);\n  }\n\n  return null;\n}\n"]}