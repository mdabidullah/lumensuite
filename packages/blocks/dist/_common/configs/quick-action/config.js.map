{"version":3,"file":"config.js","sourceRoot":"","sources":["../../../../src/_common/configs/quick-action/config.ts"],"names":[],"mappings":"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","sourcesContent":["import type { EditorHost } from '@lumensuite/block-std';\n\nimport {\n  CopyIcon,\n  DatabaseTableViewIcon20,\n  LinkedDocIcon,\n} from '@lumensuite/affine-components/icons';\nimport { createSimplePortal } from '@lumensuite/affine-components/portal';\nimport { toast } from '@lumensuite/affine-components/toast';\nimport { matchFlavours } from '@lumensuite/affine-shared/utils';\nimport { assertExists } from '@lumensuite/global/utils';\nimport { html, type TemplateResult } from 'lit';\n\nimport {\n  convertSelectedBlocksToLinkedDoc,\n  getTitleFromSelectedModels,\n  notifyDocCreated,\n  promptDocTitle,\n} from '../../utils/render-linked-doc.js';\nimport { DATABASE_CONVERT_WHITE_LIST } from './database-convert-view.js';\n\nexport interface QuickActionConfig {\n  id: string;\n  name: string;\n  disabledToolTip?: string;\n  icon: TemplateResult<1>;\n  hotkey?: string;\n  showWhen: (host: EditorHost) => boolean;\n  enabledWhen: (host: EditorHost) => boolean;\n  action: (host: EditorHost) => void;\n}\n\nexport const quickActionConfig: QuickActionConfig[] = [\n  {\n    id: 'copy',\n    name: 'Copy',\n    disabledToolTip: undefined,\n    icon: CopyIcon,\n    hotkey: undefined,\n    showWhen: () => true,\n    enabledWhen: () => true,\n    action: host => {\n      host.std.command\n        .chain()\n        .getSelectedModels()\n        .with({\n          onCopy: () => {\n            toast(host, 'Copied to clipboard');\n          },\n        })\n        .draftSelectedModels()\n        .copySelectedModels()\n        .run();\n    },\n  },\n  {\n    id: 'convert-to-database',\n    name: 'Group as Database',\n    disabledToolTip:\n      'Contains Block types that cannot be converted to Database',\n    icon: DatabaseTableViewIcon20,\n    showWhen: host => {\n      const [_, ctx] = host.std.command\n        .chain()\n        .getSelectedModels({\n          types: ['block', 'text'],\n        })\n        .run();\n      const { selectedModels } = ctx;\n      if (!selectedModels || selectedModels.length === 0) return false;\n\n      const firstBlock = selectedModels[0];\n      assertExists(firstBlock);\n      if (matchFlavours(firstBlock, ['affine:database'])) {\n        return false;\n      }\n\n      return true;\n    },\n    enabledWhen: host => {\n      const [_, ctx] = host.std.command\n        .chain()\n        .getSelectedModels({\n          types: ['block', 'text'],\n        })\n        .run();\n      const { selectedModels } = ctx;\n      if (!selectedModels || selectedModels.length === 0) return false;\n\n      return selectedModels.every(block =>\n        DATABASE_CONVERT_WHITE_LIST.includes(block.flavour)\n      );\n    },\n    action: host => {\n      createSimplePortal({\n        template: html`<database-convert-view\n          .host=${host}\n        ></database-convert-view>`,\n      });\n    },\n  },\n  {\n    id: 'convert-to-linked-doc',\n    name: 'Create Linked Doc',\n    icon: LinkedDocIcon,\n    hotkey: `Mod-Shift-l`,\n    showWhen: host => {\n      const [_, ctx] = host.std.command\n        .chain()\n        .getSelectedModels({\n          types: ['block'],\n        })\n        .run();\n      const { selectedModels } = ctx;\n      return !!selectedModels && selectedModels.length > 0;\n    },\n    enabledWhen: host => {\n      const [_, ctx] = host.std.command\n        .chain()\n        .getSelectedModels({\n          types: ['block'],\n        })\n        .run();\n      const { selectedModels } = ctx;\n      return !!selectedModels && selectedModels.length > 0;\n    },\n    action: host => {\n      const [_, ctx] = host.std.command\n        .chain()\n        .getSelectedModels({\n          types: ['block'],\n          mode: 'highest',\n        })\n        .run();\n      const { selectedModels } = ctx;\n      assertExists(selectedModels);\n      if (!selectedModels.length) return;\n\n      host.selection.clear();\n\n      const doc = host.doc;\n      const autofill = getTitleFromSelectedModels(selectedModels);\n      void promptDocTitle(host, autofill).then(title => {\n        if (title === null) return;\n        convertSelectedBlocksToLinkedDoc(doc, selectedModels, title);\n        notifyDocCreated(host, doc);\n      });\n    },\n  },\n];\n"]}