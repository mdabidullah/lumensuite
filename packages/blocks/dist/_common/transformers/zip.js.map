{"version":3,"file":"zip.js","sourceRoot":"","sources":["../../../src/_common/transformers/zip.ts"],"names":[],"mappings":"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","sourcesContent":["import type {\n  CollectionInfoSnapshot,\n  Doc,\n  DocCollection,\n  DocSnapshot,\n  JobMiddleware,\n} from '@lumensuite/store';\n\nimport { sha } from '@lumensuite/global/utils';\nimport { extMimeMap, getAssetName, Job } from '@lumensuite/store';\n\nimport { Unzip, Zip } from '../transformers/utils.js';\nimport { replaceIdMiddleware, titleMiddleware } from './middlewares.js';\n\nasync function exportDocs(collection: DocCollection, docs: Doc[]) {\n  const zip = new Zip();\n  const job = new Job({ collection });\n  const snapshots = await Promise.all(docs.map(job.docToSnapshot));\n\n  const collectionInfo = job.collectionInfoToSnapshot();\n  await zip.file('info.json', JSON.stringify(collectionInfo, null, 2));\n\n  await Promise.all(\n    snapshots\n      .filter((snapshot): snapshot is DocSnapshot => !!snapshot)\n      .map(async snapshot => {\n        const snapshotName = `${snapshot.meta.id}.snapshot.json`;\n        await zip.file(snapshotName, JSON.stringify(snapshot, null, 2));\n      })\n  );\n\n  const assets = zip.folder('assets');\n  const assetsMap = job.assets;\n\n  for (const [id, blob] of assetsMap) {\n    const ext = getAssetName(assetsMap, id).split('.').at(-1);\n    const name = `${id}.${ext}`;\n    await assets.file(name, blob);\n  }\n\n  return zip.generate();\n}\n\nasync function importDocs(collection: DocCollection, imported: Blob) {\n  const unzip = new Unzip();\n  await unzip.load(imported);\n\n  const assetBlobs: [string, Blob][] = [];\n  const snapshotsBlobs: Blob[] = [];\n  let infoBlob: Blob | undefined;\n  let info: CollectionInfoSnapshot | undefined;\n\n  for (const { path, content: blob } of unzip) {\n    if (path.includes('MACOSX') || path.includes('DS_Store')) {\n      continue;\n    }\n\n    if (path.startsWith('assets/')) {\n      assetBlobs.push([path, blob]);\n      continue;\n    }\n\n    if (path === 'info.json') {\n      infoBlob = blob;\n      continue;\n    }\n\n    if (path.endsWith('.snapshot.json')) {\n      snapshotsBlobs.push(blob);\n      continue;\n    }\n  }\n\n  {\n    const json = (await infoBlob?.text()) ?? '';\n    info = JSON.parse(json) as CollectionInfoSnapshot;\n  }\n\n  const migrationMiddleware: JobMiddleware = ({ slots, collection }) => {\n    slots.afterImport.on(payload => {\n      if (payload.type === 'page') {\n        collection.schema.upgradeDoc(\n          info?.pageVersion ?? 0,\n          {},\n          payload.page.spaceDoc\n        );\n      }\n    });\n  };\n  const job = new Job({\n    collection,\n    middlewares: [replaceIdMiddleware, migrationMiddleware, titleMiddleware],\n  });\n  const assetsMap = job.assets;\n\n  await Promise.all(\n    assetBlobs.map(([name, blob]) => {\n      const nameWithExt = name.replace('assets/', '');\n      const assetsId = nameWithExt.replace(/\\.[^/.]+$/, '');\n      const ext = nameWithExt.split('.').at(-1) ?? '';\n      const mime = extMimeMap.get(ext) ?? '';\n      const file = new File([blob], nameWithExt, {\n        type: mime,\n      });\n      assetsMap.set(assetsId, file);\n    })\n  );\n\n  return Promise.all(\n    snapshotsBlobs.map(async blob => {\n      const json = await blob.text();\n      const snapshot = JSON.parse(json) as DocSnapshot;\n      const tasks: Promise<void>[] = [];\n\n      job.walk(snapshot, block => {\n        const sourceId = block.props?.sourceId as string | undefined;\n\n        if (sourceId && sourceId.startsWith('/')) {\n          const removeSlashId = sourceId.replace(/^\\//, '');\n\n          if (assetsMap.has(removeSlashId)) {\n            const blob = assetsMap.get(removeSlashId)!;\n\n            tasks.push(\n              blob\n                .arrayBuffer()\n                .then(buffer => sha(buffer))\n                .then(hash => {\n                  assetsMap.set(hash, blob);\n                  block.props.sourceId = hash;\n                })\n            );\n          }\n        }\n      });\n\n      await Promise.all(tasks);\n\n      return job.snapshotToDoc(snapshot);\n    })\n  );\n}\n\nexport const ZipTransformer = {\n  exportDocs,\n  importDocs,\n};\n"]}