{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../../src/_common/transformers/utils.ts"],"names":[],"mappings":"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","sourcesContent":["import { extMimeMap, getAssetName } from '@blocksuite/store';\nimport * as fflate from 'fflate';\n\nexport class Zip {\n  private compressed = new Uint8Array();\n\n  private finalize?: () => void;\n\n  private finalized = false;\n\n  private zip = new fflate.Zip((err, chunk, final) => {\n    if (!err) {\n      const temp = new Uint8Array(this.compressed.length + chunk.length);\n      temp.set(this.compressed);\n      temp.set(chunk, this.compressed.length);\n      this.compressed = temp;\n    }\n    if (final) {\n      this.finalized = true;\n      this.finalize?.();\n    }\n  });\n\n  async file(path: string, content: Blob | File | string) {\n    const deflate = new fflate.ZipDeflate(path);\n    this.zip.add(deflate);\n    if (typeof content === 'string') {\n      deflate.push(fflate.strToU8(content), true);\n    } else {\n      deflate.push(new Uint8Array(await content.arrayBuffer()), true);\n    }\n  }\n\n  folder(folderPath: string) {\n    return {\n      folder: (folderPath2: string) => {\n        return this.folder(`${folderPath}/${folderPath2}`);\n      },\n      file: async (name: string, blob: Blob) => {\n        await this.file(`${folderPath}/${name}`, blob);\n      },\n      generate: async () => {\n        return this.generate();\n      },\n    };\n  }\n\n  async generate() {\n    this.zip.end();\n    return new Promise<Blob>(resolve => {\n      if (this.finalized) {\n        resolve(new Blob([this.compressed], { type: 'application/zip' }));\n      } else {\n        this.finalize = () =>\n          resolve(new Blob([this.compressed], { type: 'application/zip' }));\n      }\n    });\n  }\n}\n\nexport class Unzip {\n  private unzipped?: ReturnType<typeof fflate.unzipSync>;\n\n  async load(blob: Blob) {\n    this.unzipped = fflate.unzipSync(new Uint8Array(await blob.arrayBuffer()));\n  }\n\n  *[Symbol.iterator]() {\n    const keys = Object.keys(this.unzipped ?? {});\n    let index = 0;\n    while (keys.length) {\n      const path = keys.shift()!;\n      if (path.includes('__MACOSX') || path.includes('DS_Store')) {\n        continue;\n      }\n      const lastSplitIndex = path.lastIndexOf('/');\n      const fileName = path.substring(lastSplitIndex + 1);\n      const fileExt =\n        fileName.lastIndexOf('.') === -1 ? '' : fileName.split('.').at(-1);\n      const mime = extMimeMap.get(fileExt ?? '');\n      const content = new File([this.unzipped![path]], fileName, {\n        type: mime ?? '',\n      }) as Blob;\n      yield { path, content, index };\n      index++;\n    }\n  }\n}\n\nexport async function createAssetsArchive(\n  assetsMap: Map<string, Blob>,\n  assetsIds: string[]\n) {\n  const zip = new Zip();\n\n  for (const [id, blob] of assetsMap) {\n    if (!assetsIds.includes(id)) continue;\n    const name = getAssetName(assetsMap, id);\n    await zip.folder('assets').file(name, blob);\n  }\n\n  return zip;\n}\n\nexport function download(blob: Blob, name: string) {\n  const element = document.createElement('a');\n  element.setAttribute('download', name);\n  const fileURL = URL.createObjectURL(blob);\n  element.setAttribute('href', fileURL);\n  element.style.display = 'none';\n  document.body.append(element);\n  element.click();\n  element.remove();\n  URL.revokeObjectURL(fileURL);\n}\n"]}