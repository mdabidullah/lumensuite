{"version":3,"file":"markdown.js","sourceRoot":"","sources":["../../../src/_common/transformers/markdown.ts"],"names":[],"mappings":"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","sourcesContent":["import type { Doc } from '@lumensuite/store';\n\nimport { LumenSuiteError, ErrorCode } from '@lumensuite/global/exceptions';\nimport { assertExists } from '@lumensuite/global/utils';\nimport { Job } from '@lumensuite/store';\n\nimport { MarkdownAdapter } from '../adapters/index.js';\nimport { defaultImageProxyMiddleware } from './middlewares.js';\nimport { createAssetsArchive, download } from './utils.js';\n\nasync function exportDoc(doc: Doc) {\n  const job = new Job({ collection: doc.collection });\n  const snapshot = await job.docToSnapshot(doc);\n\n  const adapter = new MarkdownAdapter(job);\n  if (!snapshot) {\n    return;\n  }\n\n  const markdownResult = await adapter.fromDocSnapshot({\n    snapshot,\n    assets: job.assetsManager,\n  });\n\n  let downloadBlob: Blob;\n  const docTitle = doc.meta?.title || 'Untitled';\n  let name: string;\n  const contentBlob = new Blob([markdownResult.file], { type: 'plain/text' });\n  if (markdownResult.assetsIds.length > 0) {\n    if (!job.assets) {\n      throw new LumenSuiteError(ErrorCode.ValueNotExists, 'No assets found');\n    }\n    const zip = await createAssetsArchive(job.assets, markdownResult.assetsIds);\n\n    await zip.file('index.md', contentBlob);\n\n    downloadBlob = await zip.generate();\n    name = `${docTitle}.zip`;\n  } else {\n    downloadBlob = contentBlob;\n    name = `${docTitle}.md`;\n  }\n  download(downloadBlob, name);\n}\n\ntype ImportMarkdownOptions = {\n  doc: Doc;\n  markdown: string;\n  noteId: string;\n};\n\nasync function importMarkdown({\n  doc,\n  markdown,\n  noteId,\n}: ImportMarkdownOptions) {\n  const job = new Job({\n    collection: doc.collection,\n    middlewares: [defaultImageProxyMiddleware],\n  });\n  const adapter = new MarkdownAdapter(job);\n  const snapshot = await adapter.toSliceSnapshot({\n    file: markdown,\n    assets: job.assetsManager,\n    pageVersion: doc.collection.meta.pageVersion!,\n    workspaceVersion: doc.collection.meta.workspaceVersion!,\n    workspaceId: doc.collection.id,\n    pageId: doc.id,\n  });\n\n  assertExists(snapshot, 'import markdown failed, expected to get a snapshot');\n\n  const blocks = snapshot.content.flatMap(x => x.children);\n\n  for (const block of blocks) {\n    await job.snapshotToBlock(block, doc, noteId);\n  }\n\n  return;\n}\n\nexport const MarkdownTransformer = {\n  exportDoc,\n  importMarkdown,\n};\n"]}