{"version":3,"file":"middlewares.js","sourceRoot":"","sources":["../../../src/_common/transformers/middlewares.ts"],"names":[],"mappings":"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","sourcesContent":["import type {\n  DatabaseBlockModel,\n  EmbedLinkedDocModel,\n  EmbedSyncedDocModel,\n  ListBlockModel,\n  ParagraphBlockModel,\n  SurfaceRefBlockModel,\n} from '@blocksuite/affine-model';\nimport type { DeltaOperation, JobMiddleware } from '@blocksuite/store';\n\nimport { assertExists } from '@blocksuite/global/utils';\n\nimport { DEFAULT_IMAGE_PROXY_ENDPOINT } from '../consts.js';\n\nexport const replaceIdMiddleware: JobMiddleware = ({ slots, collection }) => {\n  const idMap = new Map<string, string>();\n  slots.afterImport.on(payload => {\n    if (\n      payload.type === 'block' &&\n      payload.snapshot.flavour === 'affine:database'\n    ) {\n      const model = payload.model as DatabaseBlockModel;\n      Object.keys(model.cells).forEach(cellId => {\n        if (idMap.has(cellId)) {\n          model.cells[idMap.get(cellId)!] = model.cells[cellId];\n          delete model.cells[cellId];\n        }\n      });\n    }\n\n    // replace LinkedPage pageId with new id in paragraph blocks\n    if (\n      payload.type === 'block' &&\n      ['affine:list', 'affine:paragraph'].includes(payload.snapshot.flavour)\n    ) {\n      const model = payload.model as ParagraphBlockModel | ListBlockModel;\n      let prev = 0;\n      const delta: DeltaOperation[] = [];\n      for (const d of model.text.toDelta()) {\n        if (d.attributes?.reference?.pageId) {\n          const newId = idMap.get(d.attributes.reference.pageId);\n          if (!newId) {\n            prev += d.insert?.length ?? 0;\n            continue;\n          }\n\n          if (prev > 0) {\n            delta.push({ retain: prev });\n          }\n\n          delta.push({\n            retain: d.insert?.length ?? 0,\n            attributes: {\n              reference: {\n                ...d.attributes.reference,\n                pageId: newId,\n              },\n            },\n          });\n          prev = 0;\n        } else {\n          prev += d.insert?.length ?? 0;\n        }\n      }\n      if (delta.length > 0) {\n        model.text.applyDelta(delta);\n      }\n    }\n\n    if (\n      payload.type === 'block' &&\n      payload.snapshot.flavour === 'affine:surface-ref'\n    ) {\n      const model = payload.model as SurfaceRefBlockModel;\n      const original = model.reference;\n      // If there exists a replacement, replace the reference with the new id.\n      // Otherwise,\n      // 1. If the reference is an affine:frame, generate a new id.\n      // 2. If the reference is graph, keep the original id.\n      if (idMap.has(original)) {\n        model.reference = idMap.get(original)!;\n      } else if (model.refFlavour === 'affine:frame') {\n        const newId = collection.idGenerator();\n        idMap.set(original, newId);\n        model.reference = newId;\n      }\n    }\n\n    // TODO(@fundon): process linked block/element\n    if (\n      payload.type === 'block' &&\n      payload.snapshot.flavour === 'affine:embed-linked-doc'\n    ) {\n      const model = payload.model as EmbedLinkedDocModel;\n      const original = model.pageId;\n      if (idMap.has(original)) {\n        model.pageId = idMap.get(original)!;\n      } else {\n        const newId = collection.idGenerator();\n        idMap.set(original, newId);\n        model.pageId = newId;\n      }\n    }\n\n    if (\n      payload.type === 'block' &&\n      payload.snapshot.flavour === 'affine:embed-synced-doc'\n    ) {\n      const model = payload.model as EmbedSyncedDocModel;\n      const original = model.pageId;\n      if (idMap.has(original)) {\n        model.pageId = idMap.get(original)!;\n      } else {\n        const newId = collection.idGenerator();\n        idMap.set(original, newId);\n        model.pageId = newId;\n      }\n    }\n  });\n  slots.beforeImport.on(payload => {\n    if (payload.type === 'page') {\n      if (idMap.has(payload.snapshot.meta.id)) {\n        payload.snapshot.meta.id = idMap.get(payload.snapshot.meta.id)!;\n        return;\n      }\n      const newId = collection.idGenerator();\n      idMap.set(payload.snapshot.meta.id, newId);\n      payload.snapshot.meta.id = newId;\n      return;\n    }\n\n    if (payload.type === 'block') {\n      const { snapshot } = payload;\n      if (snapshot.flavour === 'affine:page') {\n        const index = snapshot.children.findIndex(\n          c => c.flavour === 'affine:surface'\n        );\n        if (index !== -1) {\n          const [surface] = snapshot.children.splice(index, 1);\n          snapshot.children.push(surface);\n        }\n      }\n\n      const original = snapshot.id;\n      let newId: string;\n      if (idMap.has(original)) {\n        newId = idMap.get(original)!;\n      } else {\n        newId = collection.idGenerator();\n        idMap.set(original, newId);\n      }\n      snapshot.id = newId;\n\n      if (snapshot.flavour === 'affine:surface') {\n        // Generate new IDs for images and frames in advance.\n        snapshot.children.forEach(child => {\n          const original = child.id;\n          if (idMap.has(original)) {\n            newId = idMap.get(original)!;\n          } else {\n            newId = collection.idGenerator();\n            idMap.set(original, newId);\n          }\n        });\n\n        Object.entries(\n          snapshot.props.elements as Record<string, Record<string, unknown>>\n        ).forEach(([_, value]) => {\n          switch (value.type) {\n            case 'connector': {\n              // @ts-ignore\n              let connection = value.source as Record<string, string>;\n              if (idMap.has(connection.id)) {\n                const newId = idMap.get(connection.id);\n                assertExists(newId, 'reference id must exist');\n                connection.id = newId;\n              }\n              connection = value.target as Record<string, string>;\n              if (idMap.has(connection.id)) {\n                const newId = idMap.get(connection.id);\n                assertExists(newId, 'reference id must exist');\n                connection.id = newId;\n              }\n              break;\n            }\n            case 'group': {\n              // @ts-ignore\n              const json = value.children.json as Record<string, unknown>;\n              Object.entries(json).forEach(([key, value]) => {\n                if (idMap.has(key)) {\n                  delete json[key];\n                  const newKey = idMap.get(key);\n                  assertExists(newKey, 'reference id must exist');\n                  json[newKey] = value;\n                }\n              });\n              break;\n            }\n            default:\n              break;\n          }\n        });\n      }\n    }\n  });\n};\n\nexport const customImageProxyMiddleware = (\n  imageProxyURL: string\n): JobMiddleware => {\n  return ({ adapterConfigs }) => {\n    adapterConfigs.set('imageProxy', imageProxyURL);\n  };\n};\n\nexport const titleMiddleware: JobMiddleware = ({\n  slots,\n  collection,\n  adapterConfigs,\n}) => {\n  slots.beforeExport.on(() => {\n    for (const meta of collection.meta.docMetas) {\n      adapterConfigs.set('title:' + meta.id, meta.title);\n    }\n  });\n};\n\nconst imageProxyMiddlewareBuilder = () => {\n  let middleware = customImageProxyMiddleware(DEFAULT_IMAGE_PROXY_ENDPOINT);\n  return {\n    get: () => middleware,\n    set: (url: string) => {\n      middleware = customImageProxyMiddleware(url);\n    },\n  };\n};\n\nconst defaultImageProxyMiddlewarBuilder = imageProxyMiddlewareBuilder();\n\nexport const setImageProxyMiddlewareURL = defaultImageProxyMiddlewarBuilder.set;\n\nexport const defaultImageProxyMiddleware =\n  defaultImageProxyMiddlewarBuilder.get();\n\nexport const embedSyncedDocMiddleware =\n  (type: 'content'): JobMiddleware =>\n  ({ adapterConfigs }) => {\n    adapterConfigs.set('embedSyncedDocExportType', type);\n  };\n"]}