{"version":3,"file":"mix-text.js","sourceRoot":"","sources":["../../../src/_common/adapters/mix-text.ts"],"names":[],"mappings":"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","sourcesContent":["import type { DeltaInsert } from '@lumensuite/inline';\n\nimport {\n  DEFAULT_NOTE_BACKGROUND_COLOR,\n  NoteDisplayMode,\n} from '@lumensuite/affine-model';\nimport {\n  type AssetsManager,\n  ASTWalker,\n  BaseAdapter,\n  type BlockSnapshot,\n  BlockSnapshotSchema,\n  type DocSnapshot,\n  type FromBlockSnapshotPayload,\n  type FromBlockSnapshotResult,\n  type FromDocSnapshotPayload,\n  type FromDocSnapshotResult,\n  type FromSliceSnapshotPayload,\n  type FromSliceSnapshotResult,\n  type Job,\n  nanoid,\n  type SliceSnapshot,\n  type ToBlockSnapshotPayload,\n  type ToDocSnapshotPayload,\n} from '@lumensuite/store';\n\nimport { MarkdownAdapter } from './markdown.js';\n\nexport type MixText = string;\n\ntype MixTextToSliceSnapshotPayload = {\n  file: MixText;\n  assets?: AssetsManager;\n  blockVersions: Record<string, number>;\n  pageVersion: number;\n  workspaceVersion: number;\n  workspaceId: string;\n  pageId: string;\n};\n\nexport class MixTextAdapter extends BaseAdapter<MixText> {\n  private _markdownAdapter: MarkdownAdapter;\n\n  constructor(job: Job) {\n    super(job);\n    this._markdownAdapter = new MarkdownAdapter(job);\n  }\n\n  private async _traverseSnapshot(\n    snapshot: BlockSnapshot\n  ): Promise<{ mixtext: string }> {\n    let buffer = '';\n    const walker = new ASTWalker<BlockSnapshot, never>();\n    walker.setONodeTypeGuard(\n      (node): node is BlockSnapshot =>\n        BlockSnapshotSchema.safeParse(node).success\n    );\n    walker.setEnter(o => {\n      const text = (o.node.props.text ?? { delta: [] }) as {\n        delta: DeltaInsert[];\n      };\n      switch (o.node.flavour) {\n        case 'affine:code': {\n          buffer += text.delta.map(delta => delta.insert).join('');\n          buffer += '\\n';\n          break;\n        }\n        case 'affine:paragraph': {\n          buffer += text.delta.map(delta => delta.insert).join('');\n          buffer += '\\n';\n          break;\n        }\n        case 'affine:list': {\n          buffer += text.delta.map(delta => delta.insert).join('');\n          buffer += '\\n';\n          break;\n        }\n        case 'affine:divider': {\n          buffer += '---\\n';\n          break;\n        }\n      }\n    });\n    await walker.walkONode(snapshot);\n    return {\n      mixtext: buffer,\n    };\n  }\n\n  async fromBlockSnapshot({\n    snapshot,\n  }: FromBlockSnapshotPayload): Promise<FromBlockSnapshotResult<MixText>> {\n    const { mixtext } = await this._traverseSnapshot(snapshot);\n    return {\n      file: mixtext,\n      assetsIds: [],\n    };\n  }\n\n  async fromDocSnapshot({\n    snapshot,\n    assets,\n  }: FromDocSnapshotPayload): Promise<FromDocSnapshotResult<MixText>> {\n    let buffer = '';\n    if (snapshot.meta.title) {\n      buffer += `${snapshot.meta.title}\\n\\n`;\n    }\n    const { file, assetsIds } = await this.fromBlockSnapshot({\n      snapshot: snapshot.blocks,\n      assets,\n    });\n    buffer += file;\n    return {\n      file: buffer,\n      assetsIds,\n    };\n  }\n\n  async fromSliceSnapshot({\n    snapshot,\n  }: FromSliceSnapshotPayload): Promise<FromSliceSnapshotResult<MixText>> {\n    let buffer = '';\n    const sliceAssetsIds: string[] = [];\n    for (const contentSlice of snapshot.content) {\n      const { mixtext } = await this._traverseSnapshot(contentSlice);\n      buffer += mixtext;\n    }\n    const mixtext =\n      buffer.match(/\\n/g)?.length === 1 ? buffer.trimEnd() : buffer;\n    return {\n      file: mixtext,\n      assetsIds: sliceAssetsIds,\n    };\n  }\n\n  toBlockSnapshot(payload: ToBlockSnapshotPayload<MixText>): BlockSnapshot {\n    payload.file = payload.file.replaceAll('\\r', '');\n    return {\n      type: 'block',\n      id: nanoid(),\n      flavour: 'affine:note',\n      props: {\n        xywh: '[0,0,800,95]',\n        background: DEFAULT_NOTE_BACKGROUND_COLOR,\n        index: 'a0',\n        hidden: false,\n        displayMode: NoteDisplayMode.DocAndEdgeless,\n      },\n      children: payload.file.split('\\n').map((line): BlockSnapshot => {\n        return {\n          type: 'block',\n          id: nanoid(),\n          flavour: 'affine:paragraph',\n          props: {\n            type: 'text',\n            text: {\n              '$lumensuite:internal:text$': true,\n              delta: [\n                {\n                  insert: line,\n                },\n              ],\n            },\n          },\n          children: [],\n        };\n      }),\n    };\n  }\n\n  toDocSnapshot(payload: ToDocSnapshotPayload<MixText>): DocSnapshot {\n    payload.file = payload.file.replaceAll('\\r', '');\n    return {\n      type: 'page',\n      meta: {\n        id: nanoid(),\n        title: 'Untitled',\n        createDate: Date.now(),\n        tags: [],\n      },\n      blocks: {\n        type: 'block',\n        id: nanoid(),\n        flavour: 'affine:page',\n        props: {\n          title: {\n            '$lumensuite:internal:text$': true,\n            delta: [\n              {\n                insert: 'Untitled',\n              },\n            ],\n          },\n        },\n        children: [\n          {\n            type: 'block',\n            id: nanoid(),\n            flavour: 'affine:surface',\n            props: {\n              elements: {},\n            },\n            children: [],\n          },\n          {\n            type: 'block',\n            id: nanoid(),\n            flavour: 'affine:note',\n            props: {\n              xywh: '[0,0,800,95]',\n              background: DEFAULT_NOTE_BACKGROUND_COLOR,\n              index: 'a0',\n              hidden: false,\n              displayMode: NoteDisplayMode.DocAndEdgeless,\n            },\n            children: payload.file.split('\\n').map((line): BlockSnapshot => {\n              return {\n                type: 'block',\n                id: nanoid(),\n                flavour: 'affine:paragraph',\n                props: {\n                  type: 'text',\n                  text: {\n                    '$lumensuite:internal:text$': true,\n                    delta: [\n                      {\n                        insert: line,\n                      },\n                    ],\n                  },\n                },\n                children: [],\n              };\n            }),\n          },\n        ],\n      },\n    };\n  }\n\n  async toSliceSnapshot(\n    payload: MixTextToSliceSnapshotPayload\n  ): Promise<SliceSnapshot | null> {\n    if (payload.file.trim().length === 0) {\n      return null;\n    }\n    payload.file = payload.file.replaceAll('\\r', '');\n    const sliceSnapshot = await this._markdownAdapter.toSliceSnapshot({\n      file: payload.file,\n      assets: payload.assets,\n      pageVersion: payload.pageVersion,\n      workspaceVersion: payload.workspaceVersion,\n      workspaceId: payload.workspaceId,\n      pageId: payload.pageId,\n    });\n    return sliceSnapshot;\n  }\n}\n"]}