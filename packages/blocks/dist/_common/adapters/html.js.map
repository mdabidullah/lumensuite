{"version":3,"file":"html.js","sourceRoot":"","sources":["../../../src/_common/adapters/html.ts"],"names":[],"mappings":"AAIA,OAAO,EACL,WAAW,EACX,6BAA6B,EAC7B,eAAe,GAChB,MAAM,0BAA0B,CAAC;AAClC,OAAO,EAAE,aAAa,EAAE,MAAM,iCAAiC,CAAC;AAChE,OAAO,EAAE,iCAAiC,EAAE,MAAM,iCAAiC,CAAC;AACpF,OAAO,EAAE,GAAG,EAAE,MAAM,0BAA0B,CAAC;AAC/C,OAAO,EAGL,mBAAmB,EAQnB,YAAY,EACZ,MAAM,GAIP,MAAM,mBAAmB,CAAC;AAC3B,OAAO,EAAE,SAAS,EAAE,WAAW,EAAE,MAAM,mBAAmB,CAAC;AAC3D,OAAO,EAAE,kBAAkB,EAAE,MAAM,sBAAsB,CAAC;AAC1D,OAAO,WAAW,MAAM,cAAc,CAAC;AACvC,OAAO,eAAe,MAAM,kBAAkB,CAAC;AAC/C,OAAO,EAAE,oBAAoB,EAAE,UAAU,EAAE,MAAM,OAAO,CAAC;AACzD,OAAO,EAAE,OAAO,EAAE,MAAM,SAAS,CAAC;AAElC,OAAO,EACL,aAAa,EACb,sBAAsB,EACtB,mBAAmB,EACnB,0BAA0B,EAC1B,kBAAkB,EAClB,iBAAiB,GAElB,MAAM,WAAW,CAAC;AACnB,OAAO,EAAE,SAAS,EAAE,UAAU,EAAE,WAAW,EAAE,MAAM,YAAY,CAAC;AAchE,MAAM,OAAO,WAAY,SAAQ,WAAiB;IAAlD;;QACU,eAAU,GAAG,CAAC,GAAS,EAAE,EAAE;YACjC,OAAO,OAAO,EAAE,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;QACvD,CAAC,CAAC;QAEM,iBAAY,GAAG,CAAC,MAA2C,EAAE,EAAE;YACrE,OAAO,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE;gBACxB,IAAI,IAAI,GAAY;oBAClB,IAAI,EAAE,MAAM;oBACZ,KAAK,EAAE,KAAK,CAAC,MAAM;iBACpB,CAAC;gBACF,IAAI,KAAK,CAAC,UAAU,EAAE,SAAS,EAAE,CAAC;oBAChC,MAAM,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAC5B,QAAQ,GAAG,KAAK,CAAC,UAAU,CAAC,SAAS,CAAC,MAAM,CAC7C,CAAC;oBACF,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE,CAAC;wBAC9B,IAAI,GAAG;4BACL,IAAI,EAAE,MAAM;4BACZ,KAAK,EAAE,KAAK;yBACb,CAAC;oBACJ,CAAC;gBACH,CAAC;gBACD,IAAI,KAAK,CAAC,UAAU,EAAE,CAAC;oBACrB,IAAI,KAAK,CAAC,UAAU,CAAC,IAAI,EAAE,CAAC;wBAC1B,IAAI,GAAG;4BACL,IAAI,EAAE,SAAS;4BACf,OAAO,EAAE,QAAQ;4BACjB,UAAU,EAAE,EAAE;4BACd,QAAQ,EAAE,CAAC,IAAI,CAAC;yBACjB,CAAC;oBACJ,CAAC;oBACD,IAAI,KAAK,CAAC,UAAU,CAAC,MAAM,EAAE,CAAC;wBAC5B,IAAI,GAAG;4BACL,IAAI,EAAE,SAAS;4BACf,OAAO,EAAE,IAAI;4BACb,UAAU,EAAE,EAAE;4BACd,QAAQ,EAAE,CAAC,IAAI,CAAC;yBACjB,CAAC;oBACJ,CAAC;oBACD,IAAI,KAAK,CAAC,UAAU,CAAC,IAAI,EAAE,CAAC;wBAC1B,IAAI,GAAG;4BACL,IAAI,EAAE,SAAS;4BACf,OAAO,EAAE,MAAM;4BACf,UAAU,EAAE,EAAE;4BACd,QAAQ,EAAE,CAAC,IAAI,CAAC;yBACjB,CAAC;oBACJ,CAAC;oBACD,IAAI,KAAK,CAAC,UAAU,CAAC,MAAM,EAAE,CAAC;wBAC5B,IAAI,GAAG;4BACL,IAAI,EAAE,SAAS;4BACf,OAAO,EAAE,KAAK;4BACd,UAAU,EAAE,EAAE;4BACd,QAAQ,EAAE,CAAC,IAAI,CAAC;yBACjB,CAAC;oBACJ,CAAC;oBACD,IAAI,KAAK,CAAC,UAAU,CAAC,SAAS,EAAE,CAAC;wBAC/B,IAAI,GAAG;4BACL,IAAI,EAAE,SAAS;4BACf,OAAO,EAAE,GAAG;4BACZ,UAAU,EAAE,EAAE;4BACd,QAAQ,EAAE,CAAC,IAAI,CAAC;yBACjB,CAAC;oBACJ,CAAC;oBACD,IAAI,KAAK,CAAC,UAAU,CAAC,IAAI,EAAE,CAAC;wBAC1B,IAAI,GAAG;4BACL,IAAI,EAAE,SAAS;4BACf,OAAO,EAAE,GAAG;4BACZ,UAAU,EAAE;gCACV,IAAI,EAAE,KAAK,CAAC,UAAU,CAAC,IAAI;6BAC5B;4BACD,QAAQ,EAAE,CAAC,IAAI,CAAC;yBACjB,CAAC;oBACJ,CAAC;gBACH,CAAC;gBACD,OAAO,IAAI,CAAC;YACd,CAAC,CAAC,CAAC;QACL,CAAC,CAAC;QAEM,iBAAY,GAAG,CACrB,GAAY,EACZ,SAII,EAAE,IAAI,EAAE,IAAI,EAAE,GAAG,EAAE,KAAK,EAAE,EACP,EAAE;YACzB,OAAO,IAAI,CAAC,oBAAoB,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE;gBAChE,OAAO,WAAW,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;YAC/B,CAAC,EAAE,EAA2B,CAAC,CAAC;QAClC,CAAC,CAAC;QAEM,yBAAoB,GAAG,CAC7B,GAAY,EACZ,SAGI,EAAE,IAAI,EAAE,IAAI,EAAE,GAAG,EAAE,KAAK,EAAE,EACP,EAAE;YACzB,IAAI,MAAM,CAAC,IAAI,KAAK,SAAS,EAAE,CAAC;gBAC9B,MAAM,CAAC,IAAI,GAAG,IAAI,CAAC;YACrB,CAAC;YACD,QAAQ,GAAG,CAAC,IAAI,EAAE,CAAC;gBACjB,KAAK,MAAM,CAAC,CAAC,CAAC;oBACZ,IAAI,MAAM,CAAC,GAAG,EAAE,CAAC;wBACf,OAAO,CAAC,EAAE,MAAM,EAAE,GAAG,CAAC,KAAK,EAAE,CAAC,CAAC;oBACjC,CAAC;oBACD,IAAI,MAAM,CAAC,IAAI,EAAE,CAAC;wBAChB,MAAM,KAAK,GAAG,kBAAkB,CAAC,GAAG,CAAC,KAAK,EAAE,EAAE,IAAI,EAAE,MAAM,CAAC,IAAI,EAAE,CAAC,CAAC;wBACnE,IAAI,KAAK,EAAE,CAAC;4BACV,OAAO,CAAC,EAAE,MAAM,EAAE,KAAK,EAAE,CAAC,CAAC;wBAC7B,CAAC;wBACD,OAAO,EAAE,CAAC;oBACZ,CAAC;oBACD,IAAI,GAAG,CAAC,KAAK,EAAE,CAAC;wBACd,OAAO,CAAC,EAAE,MAAM,EAAE,kBAAkB,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;oBACrD,CAAC;oBACD,OAAO,EAAE,CAAC;gBACZ,CAAC;gBACD,KAAK,SAAS,CAAC,CAAC,CAAC;oBACf,QAAQ,GAAG,CAAC,OAAO,EAAE,CAAC;wBACpB,KAAK,IAAI,CAAC;wBACV,KAAK,IAAI,CAAC,CAAC,CAAC;4BACV,OAAO,EAAE,CAAC;wBACZ,CAAC;wBACD,KAAK,MAAM,CAAC;wBACZ,KAAK,KAAK,CAAC;wBACX,KAAK,KAAK,CAAC;wBACX,KAAK,KAAK,CAAC,CAAC,CAAC;4BACX,OAAO,GAAG,CAAC,QAAQ,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE,CAClC,IAAI,CAAC,oBAAoB,CAAC,KAAK,EAAE,EAAE,IAAI,EAAE,KAAK,EAAE,CAAC,CAClD,CAAC;wBACJ,CAAC;wBACD,KAAK,QAAQ,CAAC;wBACd,KAAK,GAAG,CAAC,CAAC,CAAC;4BACT,OAAO,GAAG,CAAC,QAAQ,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE,CAClC,IAAI,CAAC,oBAAoB,CAAC,KAAK,EAAE,EAAE,IAAI,EAAE,KAAK,EAAE,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE;gCAC5D,KAAK,CAAC,UAAU,GAAG,EAAE,GAAG,KAAK,CAAC,UAAU,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC;gCACvD,OAAO,KAAK,CAAC;4BACf,CAAC,CAAC,CACH,CAAC;wBACJ,CAAC;wBACD,KAAK,GAAG,CAAC;wBACT,KAAK,IAAI,CAAC,CAAC,CAAC;4BACV,OAAO,GAAG,CAAC,QAAQ,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE,CAClC,IAAI,CAAC,oBAAoB,CAAC,KAAK,EAAE,EAAE,IAAI,EAAE,KAAK,EAAE,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE;gCAC5D,KAAK,CAAC,UAAU,GAAG,EAAE,GAAG,KAAK,CAAC,UAAU,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC;gCACzD,OAAO,KAAK,CAAC;4BACf,CAAC,CAAC,CACH,CAAC;wBACJ,CAAC;wBACD,KAAK,MAAM,CAAC,CAAC,CAAC;4BACZ,OAAO,GAAG,CAAC,QAAQ,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE,CAClC,IAAI,CAAC,oBAAoB,CAAC,KAAK,EAAE,EAAE,IAAI,EAAE,KAAK,EAAE,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE;gCAC5D,KAAK,CAAC,UAAU,GAAG,EAAE,GAAG,KAAK,CAAC,UAAU,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC;gCACvD,OAAO,KAAK,CAAC;4BACf,CAAC,CAAC,CACH,CAAC;wBACJ,CAAC;wBACD,KAAK,KAAK,CAAC,CAAC,CAAC;4BACX,OAAO,GAAG,CAAC,QAAQ,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE,CAClC,IAAI,CAAC,oBAAoB,CAAC,KAAK,EAAE,EAAE,IAAI,EAAE,KAAK,EAAE,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE;gCAC5D,KAAK,CAAC,UAAU,GAAG,EAAE,GAAG,KAAK,CAAC,UAAU,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC;gCACzD,OAAO,KAAK,CAAC;4BACf,CAAC,CAAC,CACH,CAAC;wBACJ,CAAC;wBACD,KAAK,GAAG,CAAC,CAAC,CAAC;4BACT,OAAO,GAAG,CAAC,QAAQ,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE,CAClC,IAAI,CAAC,oBAAoB,CAAC,KAAK,EAAE,EAAE,IAAI,EAAE,KAAK,EAAE,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE;gCAC5D,KAAK,CAAC,UAAU,GAAG,EAAE,GAAG,KAAK,CAAC,UAAU,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC;gCAC5D,OAAO,KAAK,CAAC;4BACf,CAAC,CAAC,CACH,CAAC;wBACJ,CAAC;wBACD,KAAK,GAAG,CAAC,CAAC,CAAC;4BACT,MAAM,IAAI,GAAG,GAAG,CAAC,UAAU,EAAE,IAAI,CAAC;4BAClC,IAAI,OAAO,IAAI,KAAK,QAAQ,EAAE,CAAC;gCAC7B,OAAO,EAAE,CAAC;4BACZ,CAAC;4BACD,OAAO,GAAG,CAAC,QAAQ,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE,CAClC,IAAI,CAAC,oBAAoB,CAAC,KAAK,EAAE,EAAE,IAAI,EAAE,KAAK,EAAE,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE;gCAC5D,IAAI,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,EAAE,CAAC;oCAC5B,KAAK,CAAC,UAAU,GAAG;wCACjB,GAAG,KAAK,CAAC,UAAU;wCACnB,IAAI,EAAE,IAAI;qCACX,CAAC;oCACF,OAAO,KAAK,CAAC;gCACf,CAAC;gCACD,OAAO,KAAK,CAAC;4BACf,CAAC,CAAC,CACH,CAAC;wBACJ,CAAC;wBACD,KAAK,MAAM,CAAC,CAAC,CAAC;4BACZ,kCAAkC;4BAClC,OAAO,GAAG,CAAC,QAAQ,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE,CAClC,IAAI,CAAC,oBAAoB,CAAC,KAAK,EAAE,EAAE,IAAI,EAAE,KAAK,EAAE,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE;gCAC5D,KAAK,CAAC,UAAU,GAAG,EAAE,GAAG,KAAK,CAAC,UAAU,EAAE,CAAC;gCAC3C,OAAO,KAAK,CAAC;4BACf,CAAC,CAAC,CACH,CAAC;wBACJ,CAAC;wBACD,KAAK,IAAI,CAAC,CAAC,CAAC;4BACV,OAAO,CAAC,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC;wBAC5B,CAAC;oBACH,CAAC;gBACH,CAAC;YACH,CAAC;YACD,OAAO,UAAU,IAAI,GAAG;gBACtB,CAAC,CAAC,GAAG,CAAC,QAAQ,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE,CAAC,IAAI,CAAC,oBAAoB,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;gBACzE,CAAC,CAAC,EAAE,CAAC;QACT,CAAC,CAAC;QAEM,kBAAa,GAAG,KAAK,EAC3B,IAAa,EACb,QAAuB,EACvB,MAAsB,EACtB,EAAE;YACF,MAAM,MAAM,GAAG,IAAI,SAAS,EAA0B,CAAC;YACvD,MAAM,CAAC,iBAAiB,CACtB,CAAC,IAAI,EAAmB,EAAE,CACxB,MAAM,IAAK,IAAe,IAAK,IAAgB,CAAC,IAAI,KAAK,SAAS,CACrE,CAAC;YACF,MAAM,CAAC,QAAQ,CAAC,KAAK,EAAE,CAAC,EAAE,OAAO,EAAE,EAAE;gBACnC,IAAI,CAAC,CAAC,IAAI,CAAC,IAAI,KAAK,SAAS,EAAE,CAAC;oBAC9B,OAAO;gBACT,CAAC;gBACD,QAAQ,CAAC,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC;oBACvB,KAAK,QAAQ,CAAC,CAAC,CAAC;wBACd,OAAO,CAAC,eAAe,EAAE,CAAC;wBAC1B,MAAM;oBACR,CAAC;oBACD,KAAK,KAAK,CAAC,CAAC,CAAC;wBACX,IAAI,CAAC,MAAM,EAAE,CAAC;4BACZ,MAAM;wBACR,CAAC;wBACD,MAAM,KAAK,GAAG,CAAC,CAAC,IAAI,CAAC;wBACrB,MAAM,QAAQ,GACZ,OAAO,KAAK,EAAE,UAAU,CAAC,GAAG,KAAK,QAAQ;4BACvC,CAAC,CAAC,KAAK,CAAC,UAAU,CAAC,GAAG;4BACtB,CAAC,CAAC,EAAE,CAAC;wBACT,IAAI,QAAQ,EAAE,CAAC;4BACb,IAAI,MAAM,GAAG,EAAE,CAAC;4BAChB,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,EAAE,CAAC;gCACzB,MAAM,aAAa,GAAG,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;gCAC1C,OAAO,aAAa,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;oCAChC,MAAM,GAAG,GAAG,MAAM;yCACf,gBAAgB,EAAE;yCAClB,GAAG,CAAC,kBAAkB,CAAC,aAAa,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;oCACpD,IAAI,GAAG,EAAE,CAAC;wCACR,MAAM,GAAG,GAAG,CAAC;wCACb,MAAM;oCACR,CAAC;oCACD,aAAa,CAAC,KAAK,EAAE,CAAC;gCACxB,CAAC;4BACH,CAAC;iCAAM,CAAC;gCACN,IAAI,CAAC;oCACH,MAAM,GAAG,GAAG,MAAM,UAAU,CAC1B,QAAQ,EACR,SAAS,EACT,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,YAAY,CAAW,CACzC,CAAC;oCACF,IAAI,CAAC,GAAG,EAAE,CAAC;wCACT,MAAM;oCACR,CAAC;oCACD,MAAM,SAAS,GAAG,GAAG,CAAC,KAAK,EAAE,CAAC;oCAC9B,MAAM,IAAI,GACR,iCAAiC,CAC/B,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,qBAAqB,CAAC,IAAI,EAAE,CAC7C;wCACD,CAAC,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,OAAO,CAAC;4CACrC,GAAG;4CACH,CAAC,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,cAAc,CAAC,EAAE,KAAK,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;gDACjD,KAAK,CAAC,CAAC;oCACb,MAAM,IAAI,GAAG,IAAI,IAAI,CAAC,CAAC,MAAM,GAAG,CAAC,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE;wCAC9C,IAAI,EAAE,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,cAAc,CAAC,IAAI,EAAE;qCAC5C,CAAC,CAAC;oCACH,MAAM,GAAG,MAAM,GAAG,CAAC,MAAM,SAAS,CAAC,WAAW,EAAE,CAAC,CAAC;oCAClD,MAAM,EAAE,SAAS,EAAE,CAAC,GAAG,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;oCACtC,MAAM,MAAM,EAAE,WAAW,CAAC,MAAM,CAAC,CAAC;gCACpC,CAAC;gCAAC,OAAO,CAAC,EAAE,CAAC;oCACX,MAAM;gCACR,CAAC;4BACH,CAAC;4BACD,OAAO;iCACJ,QAAQ,CACP;gCACE,IAAI,EAAE,OAAO;gCACb,EAAE,EAAE,MAAM,EAAE;gCACZ,OAAO,EAAE,cAAc;gCACvB,KAAK,EAAE;oCACL,QAAQ,EAAE,MAAM;iCACjB;gCACD,QAAQ,EAAE,EAAE;6BACb,EACD,UAAU,CACX;iCACA,SAAS,EAAE,CAAC;4BACf,OAAO,CAAC,eAAe,EAAE,CAAC;4BAC1B,MAAM;wBACR,CAAC;wBACD,MAAM;oBACR,CAAC;oBACD,KAAK,KAAK,CAAC,CAAC,CAAC;wBACX,MAAM,IAAI,GAAG,iBAAiB,CAAC,CAAC,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;wBAC/C,IAAI,CAAC,IAAI,EAAE,CAAC;4BACV,MAAM;wBACR,CAAC;wBACD,MAAM,QAAQ,GACZ,IAAI,CAAC,QAAQ,CAAC,MAAM,KAAK,CAAC,IAAI,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,IAAI,KAAK,MAAM;4BAC5D,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;4BAClB,CAAC,CAAC,EAAE,GAAG,IAAI,EAAE,OAAO,EAAE,KAAK,EAAE,CAAC;wBAClC,IAAI,QAAQ,GAAG,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,EAAE,SAAS,CAAC;4BACtD,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,IAAI,CAC5B,SAAS,CAAC,EAAE,CACV,OAAO,SAAS,KAAK,QAAQ,IAAI,SAAS,CAAC,UAAU,CAAC,OAAO,CAAC,CACjE;4BACH,CAAC,CAAC,SAAS,CAAC;wBACd,QAAQ;4BACN,OAAO,QAAQ,KAAK,QAAQ;gCAC1B,CAAC,CAAC,QAAQ,CAAC,OAAO,CAAC,OAAO,EAAE,EAAE,CAAC;gCAC/B,CAAC,CAAC,SAAS,CAAC;wBAChB,OAAO;6BACJ,QAAQ,CACP;4BACE,IAAI,EAAE,OAAO;4BACb,EAAE,EAAE,MAAM,EAAE;4BACZ,OAAO,EAAE,aAAa;4BACtB,KAAK,EAAE;gCACL,QAAQ,EAAE,QAAQ,IAAI,YAAY;gCAClC,IAAI,EAAE;oCACJ,4BAA4B,EAAE,IAAI;oCAClC,KAAK,EAAE,IAAI,CAAC,YAAY,CAAC,QAAQ,EAAE;wCACjC,IAAI,EAAE,KAAK;wCACX,GAAG,EAAE,IAAI;qCACV,CAAC;iCACH;6BACF;4BACD,QAAQ,EAAE,EAAE;yBACb,EACD,UAAU,CACX;6BACA,SAAS,EAAE,CAAC;wBACf,OAAO,CAAC,eAAe,EAAE,CAAC;wBAC1B,MAAM;oBACR,CAAC;oBACD,KAAK,YAAY,CAAC,CAAC,CAAC;wBAClB,OAAO,CAAC,gBAAgB,CAAC,iBAAiB,EAAE,IAAI,CAAC,CAAC;wBAClD,8CAA8C;wBAC9C,MAAM,KAAK,GAAG,mBAAmB,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;wBAC1C,2BAA2B;wBAC3B,MAAM,aAAa,GAAG,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,CAAC;wBAC9D,IAAI,KAAK,IAAI,CAAC,aAAa,EAAE,CAAC;4BAC5B,OAAO;iCACJ,QAAQ,CACP;gCACE,IAAI,EAAE,OAAO;gCACb,EAAE,EAAE,MAAM,EAAE;gCACZ,OAAO,EAAE,kBAAkB;gCAC3B,KAAK,EAAE;oCACL,IAAI,EAAE,OAAO;oCACb,IAAI,EAAE;wCACJ,4BAA4B,EAAE,IAAI;wCAClC,KAAK,EAAE,IAAI,CAAC,YAAY,CACtB,0BAA0B,CAAC,CAAC,CAAC,IAAI,CAAC,CACnC;qCACF;iCACF;gCACD,QAAQ,EAAE,EAAE;6BACb,EACD,UAAU,CACX;iCACA,SAAS,EAAE,CAAC;wBACjB,CAAC;wBACD,MAAM;oBACR,CAAC;oBACD,KAAK,MAAM,CAAC;oBACZ,KAAK,KAAK,CAAC;oBACX,KAAK,MAAM,CAAC;oBACZ,KAAK,QAAQ,CAAC,CAAC,CAAC;wBACd;wBACE,sCAAsC;wBACtC,CAAC,CAAC,MAAM,EAAE,IAAI,CAAC,IAAI,KAAK,SAAS;4BACjC,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,KAAK,IAAI;4BAC9B,CAAC,sBAAsB,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE,CAC5C;gCACE,GAAG;gCACH,GAAG;gCACH,KAAK;gCACL,KAAK;gCACL,IAAI;gCACJ,MAAM;gCACN,KAAK;gCACL,IAAI;gCACJ,GAAG;gCACH,KAAK;gCACL,MAAM;gCACN,MAAM;gCACN,QAAQ;gCACR,GAAG;6BACJ,CAAC,QAAQ,CAAC,KAAK,CAAC,OAAO,CAAC,CAC1B;gCACC,CAAC,CAAC,IAAI,CAAC,QAAQ;qCACZ,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC;qCACxB,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,KAAK,MAAM,CAAC,CAAC,EACpC,CAAC;4BACD,OAAO;iCACJ,QAAQ,CACP;gCACE,IAAI,EAAE,OAAO;gCACb,EAAE,EAAE,MAAM,EAAE;gCACZ,OAAO,EAAE,kBAAkB;gCAC3B,KAAK,EAAE;oCACL,IAAI,EAAE,MAAM;oCACZ,IAAI,EAAE;wCACJ,4BAA4B,EAAE,IAAI;wCAClC,KAAK,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,IAAI,CAAC;qCACjC;iCACF;gCACD,QAAQ,EAAE,EAAE;6BACb,EACD,UAAU,CACX;iCACA,SAAS,EAAE,CAAC;4BACf,OAAO,CAAC,eAAe,EAAE,CAAC;wBAC5B,CAAC;wBACD,MAAM;oBACR,CAAC;oBACD,KAAK,GAAG,CAAC,CAAC,CAAC;wBACT,OAAO,CAAC,QAAQ,CACd;4BACE,IAAI,EAAE,OAAO;4BACb,EAAE,EAAE,MAAM,EAAE;4BACZ,OAAO,EAAE,kBAAkB;4BAC3B,KAAK,EAAE;gCACL,IAAI,EAAE,OAAO,CAAC,gBAAgB,CAAC,iBAAiB,CAAC;oCAC/C,CAAC,CAAC,OAAO;oCACT,CAAC,CAAC,MAAM;gCACV,IAAI,EAAE;oCACJ,4BAA4B,EAAE,IAAI;oCAClC,KAAK,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,IAAI,CAAC;iCACjC;6BACF;4BACD,QAAQ,EAAE,EAAE;yBACb,EACD,UAAU,CACX,CAAC;wBACF,MAAM;oBACR,CAAC;oBACD,KAAK,IAAI,CAAC;oBACV,KAAK,IAAI,CAAC,CAAC,CAAC;wBACV,OAAO,CAAC,cAAc,CAAC,gBAAgB,EAAE,UAAU,CAAC,CAAC;wBACrD,IAAI,CAAC,CAAC,IAAI,CAAC,OAAO,KAAK,IAAI,EAAE,CAAC;4BAC5B,OAAO,CAAC,cAAc,CAAC,gBAAgB,EAAE,UAAU,CAAC,CAAC;wBACvD,CAAC;6BAAM,IAAI,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,EAAE,SAAS,CAAC,EAAE,CAAC;4BACvD,IAAI,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,QAAQ,CAAC,YAAY,CAAC,EAAE,CAAC;gCACvD,OAAO,CAAC,cAAc,CAAC,gBAAgB,EAAE,MAAM,CAAC,CAAC;4BACnD,CAAC;iCAAM,IAAI,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE,CAAC;gCAC1D,OAAO,CAAC,cAAc,CAAC,gBAAgB,EAAE,QAAQ,CAAC,CAAC;4BACrD,CAAC;iCAAM,IAAI,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,QAAQ,CAAC,eAAe,CAAC,EAAE,CAAC;gCACjE,OAAO,CAAC,cAAc,CAAC,gBAAgB,EAAE,UAAU,CAAC,CAAC;4BACvD,CAAC;wBACH,CAAC;wBACD,MAAM;oBACR,CAAC;oBACD,KAAK,IAAI,CAAC,CAAC,CAAC;wBACV,MAAM,iBAAiB,GAAG,sBAAsB,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;wBAC5D,MAAM,QAAQ,GAAG,OAAO,CAAC,cAAc,CAAC,gBAAgB,CAAC,CAAC;wBAC1D,CAAC,CAAC,IAAI,GAAG,aAAa,CACpB,CAAC,CAAC,IAAI,EACN,OAAO,CAAC,EAAE,CAAC,OAAO,KAAK,KAAK,IAAI,OAAO,KAAK,GAAG,CAChD,CAAC;wBACF,OAAO,CAAC,QAAQ,CACd;4BACE,IAAI,EAAE,OAAO;4BACb,EAAE,EAAE,MAAM,EAAE;4BACZ,OAAO,EAAE,aAAa;4BACtB,KAAK,EAAE;gCACL,IAAI,EAAE,QAAQ;gCACd,IAAI,EAAE;oCACJ,4BAA4B,EAAE,IAAI;oCAClC,KAAK,EACH,QAAQ,KAAK,QAAQ;wCACnB,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,IAAI,CAAC;wCAC3B,CAAC,CAAC,IAAI,CAAC,YAAY,CACf,iBAAiB,CAAC,CAAC,CAAC,IAAI,EAAE,SAAS,CAAC,IAAI,CAAC,CAAC,IAAI,CAC/C;iCACR;gCACD,OAAO,EACL,QAAQ,KAAK,MAAM;oCACjB,CAAC,CAAC,iBAAiB;wCACjB,KAAK,CAAC,OAAO,CAAC,iBAAiB,CAAC,UAAU,EAAE,SAAS,CAAC;wCACtD,iBAAiB,CAAC,UAAU,CAAC,SAAS,CAAC,QAAQ,CAC7C,aAAa,CACd;oCACH,CAAC,CAAC,KAAK;gCACX,SAAS,EACP,QAAQ,KAAK,QAAQ;oCACnB,CAAC,CAAC,iBAAiB;wCACjB,iBAAiB,CAAC,OAAO,KAAK,SAAS;wCACvC,iBAAiB,CAAC,UAAU,CAAC,IAAI,KAAK,SAAS;oCACjD,CAAC,CAAC,KAAK;6BACZ;4BACD,QAAQ,EAAE,EAAE;yBACb,EACD,UAAU,CACX,CAAC;wBACF,MAAM;oBACR,CAAC;oBACD,KAAK,IAAI,CAAC,CAAC,CAAC;wBACV,OAAO;6BACJ,QAAQ,CACP;4BACE,IAAI,EAAE,OAAO;4BACb,EAAE,EAAE,MAAM,EAAE;4BACZ,OAAO,EAAE,gBAAgB;4BACzB,KAAK,EAAE,EAAE;4BACT,QAAQ,EAAE,EAAE;yBACb,EACD,UAAU,CACX;6BACA,SAAS,EAAE,CAAC;wBACf,MAAM;oBACR,CAAC;oBACD,KAAK,IAAI,CAAC;oBACV,KAAK,IAAI,CAAC;oBACV,KAAK,IAAI,CAAC;oBACV,KAAK,IAAI,CAAC;oBACV,KAAK,IAAI,CAAC;oBACV,KAAK,IAAI,CAAC,CAAC,CAAC;wBACV,OAAO;6BACJ,QAAQ,CACP;4BACE,IAAI,EAAE,OAAO;4BACb,EAAE,EAAE,MAAM,EAAE;4BACZ,OAAO,EAAE,kBAAkB;4BAC3B,KAAK,EAAE;gCACL,IAAI,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO;gCACpB,IAAI,EAAE;oCACJ,4BAA4B,EAAE,IAAI;oCAClC,KAAK,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,IAAI,CAAC;iCACjC;6BACF;4BACD,QAAQ,EAAE,EAAE;yBACb,EACD,UAAU,CACX;6BACA,SAAS,EAAE,CAAC;wBACf,MAAM;oBACR,CAAC;oBACD,KAAK,QAAQ,CAAC,CAAC,CAAC;wBACd,MAAM,GAAG,GAAG,CAAC,CAAC,IAAI,CAAC,UAAU,EAAE,GAAG,CAAC;wBACnC,IAAI,OAAO,GAAG,KAAK,QAAQ,EAAE,CAAC;4BAC5B,MAAM;wBACR,CAAC;wBACD,IAAI,GAAG,CAAC,UAAU,CAAC,gCAAgC,CAAC,EAAE,CAAC;4BACrD,MAAM,OAAO,GAAG,GAAG,CAAC,SAAS,CAC3B,gCAAgC,CAAC,MAAM,EACvC,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,SAAS,CACvD,CAAC;4BACF,OAAO;iCACJ,QAAQ,CACP;gCACE,IAAI,EAAE,OAAO;gCACb,EAAE,EAAE,MAAM,EAAE;gCACZ,OAAO,EAAE,sBAAsB;gCAC/B,KAAK,EAAE;oCACL,GAAG,EAAE,mCAAmC,OAAO,EAAE;iCAClD;gCACD,QAAQ,EAAE,EAAE;6BACb,EACD,UAAU,CACX;iCACA,SAAS,EAAE,CAAC;wBACjB,CAAC;wBACD,MAAM;oBACR,CAAC;gBACH,CAAC;YACH,CAAC,CAAC,CAAC;YACH,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,OAAO,EAAE,EAAE;gBAC7B,IAAI,CAAC,CAAC,IAAI,CAAC,IAAI,KAAK,SAAS,EAAE,CAAC;oBAC9B,OAAO;gBACT,CAAC;gBACD,QAAQ,CAAC,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC;oBACvB,KAAK,KAAK,CAAC,CAAC,CAAC;wBACX,IACE,CAAC,CAAC,MAAM,EAAE,IAAI,CAAC,IAAI,KAAK,SAAS;4BACjC,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,KAAK,IAAI;4BAC9B,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,EAAE,SAAS,CAAC,EAC3C,CAAC;4BACD,IACE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,QAAQ,CAClC,kCAAkC,CACnC;gCACD,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,QAAQ,CAClC,iCAAiC,CAClC;gCACD,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,QAAQ,CAAC,UAAU,CAAC,EAChD,CAAC;gCACD,OAAO,CAAC,SAAS,EAAE,CAAC;4BACtB,CAAC;wBACH,CAAC;wBACD,MAAM;oBACR,CAAC;oBACD,KAAK,YAAY,CAAC,CAAC,CAAC;wBAClB,OAAO,CAAC,gBAAgB,CAAC,iBAAiB,EAAE,KAAK,CAAC,CAAC;wBACnD,MAAM;oBACR,CAAC;oBACD,KAAK,GAAG,CAAC,CAAC,CAAC;wBACT,IACE,CAAC,CAAC,IAAI,EAAE,IAAI,KAAK,SAAS;4BAC1B,CAAC,CAAC,IAAI,CAAC,OAAO,KAAK,KAAK;4BACxB,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,EAAE,SAAS,CAAC;4BAC3C,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,QAAQ,CACnC,iCAAiC,CAClC;gCACC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC,EACnD,CAAC;4BACD,2CAA2C;4BAC3C,MAAM;wBACR,CAAC;wBACD,OAAO,CAAC,SAAS,EAAE,CAAC;wBACpB,MAAM;oBACR,CAAC;oBACD,KAAK,IAAI,CAAC,CAAC,CAAC;wBACV,OAAO,CAAC,SAAS,EAAE,CAAC;wBACpB,MAAM;oBACR,CAAC;gBACH,CAAC;YACH,CAAC,CAAC,CAAC;YACH,OAAO,MAAM,CAAC,IAAI,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;QACrC,CAAC,CAAC;QAEM,sBAAiB,GAAG,KAAK,EAC/B,QAAuB,EACvB,IAAa,EACb,MAAsB,EACtB,EAAE;YACF,MAAM,SAAS,GAAa,EAAE,CAAC;YAC/B,MAAM,MAAM,GAAG,IAAI,SAAS,EAA0B,CAAC;YACvD,MAAM,CAAC,iBAAiB,CACtB,CAAC,IAAI,EAAyB,EAAE,CAC9B,mBAAmB,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,OAAO,CAC9C,CAAC;YACF,MAAM,CAAC,QAAQ,CAAC,KAAK,EAAE,CAAC,EAAE,OAAO,EAAE,EAAE;gBACnC,MAAM,IAAI,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,EAAE,KAAK,EAAE,EAAE,EAAE,CAE/C,CAAC;gBACF,QAAQ,CAAC,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC;oBACvB,KAAK,aAAa,CAAC,CAAC,CAAC;wBACnB,OAAO;6BACJ,QAAQ,CACP;4BACE,IAAI,EAAE,SAAS;4BACf,OAAO,EAAE,MAAM;4BACf,UAAU,EAAE,EAAE;4BACd,QAAQ,EAAE,EAAE;yBACb,EACD,UAAU,CACX;6BACA,QAAQ,CACP;4BACE,IAAI,EAAE,SAAS;4BACf,OAAO,EAAE,MAAM;4BACf,UAAU,EAAE,EAAE;4BACd,QAAQ,EAAE,EAAE;yBACb,EACD,UAAU,CACX;6BACA,QAAQ,CACP;4BACE,IAAI,EAAE,SAAS;4BACf,OAAO,EAAE,OAAO;4BAChB,UAAU,EAAE,EAAE;4BACd,QAAQ,EAAE,EAAE;yBACb,EACD,UAAU,CACX;6BACA,QAAQ,CACP;4BACE,IAAI,EAAE,MAAM;4BACZ,KAAK,EAAE;;;;;;;;;;;;;;;;;;;;;;;iBAuBN,CAAC,OAAO,CAAC,QAAQ,EAAE,EAAE,CAAC;yBACxB,EACD,UAAU,CACX;6BACA,SAAS,EAAE;6BACX,SAAS,EAAE;6BACX,SAAS,EAAE;6BACX,QAAQ,CACP;4BACE,IAAI,EAAE,SAAS;4BACf,OAAO,EAAE,MAAM;4BACf,UAAU,EAAE,EAAE;4BACd,QAAQ,EAAE,EAAE;yBACb,EACD,UAAU,CACX;6BACA,QAAQ,CACP;4BACE,IAAI,EAAE,SAAS;4BACf,OAAO,EAAE,KAAK;4BACd,UAAU,EAAE;gCACV,KAAK,EAAE,iCAAiC;6BACzC;4BACD,QAAQ,EAAE,EAAE;yBACb,EACD,UAAU,CACX;6BACA,QAAQ,CAAC;4BACR,IAAI,EAAE,SAAS;4BACf,KAAK,EAAE,+BAA+B;yBACvC,CAAC;6BACD,SAAS,EAAE,CAAC;wBACf,MAAM;oBACR,CAAC;oBACD,KAAK,aAAa,CAAC,CAAC,CAAC;wBACnB,MAAM,OAAO,GAAG,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,QAAyB,CAAC;wBACvD,MAAM,WAAW,GAAG,OAAO;4BACzB,CAAC,CAAC,CAAC,oBAAoB,CAAC,IAAI,CACxB,IAAI,CAAC,EAAE,CACL,IAAI,CAAC,EAAE,KAAK,OAAO;gCACnB,IAAI,CAAC,IAAI,KAAK,OAAO;gCACrB,IAAI,CAAC,OAAO,EAAE,QAAQ,CAAC,OAAO,CAAC,CAClC,EAAE,EAAE,IAAI,MAAM,CAAC;4BAClB,CAAC,CAAC,MAAM,CAAC;wBAEX,aAAa;wBACb,MAAM,IAAI,GAAG,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,KAAsB,CAAC;wBACtD,MAAM,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;wBACtD,MAAM,IAAI,GAAG,MAAM,UAAU,CAAC,IAAI,EAAE;4BAClC,IAAI,EAAE,WAAW;4BACjB,KAAK,EACH,aAAa,CAAC,IAAI,KAAK,WAAW,CAAC,IAAI;gCACrC,CAAC,CAAC,WAAW;gCACb,CAAC,CAAC,YAAY;yBACnB,CAAC,CAAC;wBAEH,aAAa;wBACb,OAAO,CAAC,QAAQ,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC,SAAS,EAAE,CAAC;wBAC/C,MAAM;oBACR,CAAC;oBACD,KAAK,kBAAkB,CAAC,CAAC,CAAC;wBACxB,QAAQ,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC;4BAC1B,KAAK,MAAM,CAAC,CAAC,CAAC;gCACZ,OAAO;qCACJ,QAAQ,CACP;oCACE,IAAI,EAAE,SAAS;oCACf,OAAO,EAAE,KAAK;oCACd,UAAU,EAAE;wCACV,SAAS,EAAE,CAAC,kCAAkC,CAAC;qCAChD;oCACD,QAAQ,EAAE,EAAE;iCACb,EACD,UAAU,CACX;qCACA,QAAQ,CACP;oCACE,IAAI,EAAE,SAAS;oCACf,OAAO,EAAE,GAAG;oCACZ,UAAU,EAAE,EAAE;oCACd,QAAQ,EAAE,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,KAAK,CAAC;iCACxC,EACD,UAAU,CACX;qCACA,SAAS,EAAE;qCACX,QAAQ,CACP;oCACE,IAAI,EAAE,SAAS;oCACf,OAAO,EAAE,KAAK;oCACd,UAAU,EAAE;wCACV,SAAS,EAAE,CAAC,iCAAiC,CAAC;wCAC9C,KAAK,EAAE,qBAAqB;qCAC7B;oCACD,QAAQ,EAAE,EAAE;iCACb,EACD,UAAU,CACX,CAAC;gCACJ,MAAM;4BACR,CAAC;4BACD,KAAK,IAAI,CAAC;4BACV,KAAK,IAAI,CAAC;4BACV,KAAK,IAAI,CAAC;4BACV,KAAK,IAAI,CAAC;4BACV,KAAK,IAAI,CAAC;4BACV,KAAK,IAAI,CAAC,CAAC,CAAC;gCACV,OAAO;qCACJ,QAAQ,CACP;oCACE,IAAI,EAAE,SAAS;oCACf,OAAO,EAAE,KAAK;oCACd,UAAU,EAAE;wCACV,SAAS,EAAE,CAAC,kCAAkC,CAAC;qCAChD;oCACD,QAAQ,EAAE,EAAE;iCACb,EACD,UAAU,CACX;qCACA,QAAQ,CACP;oCACE,IAAI,EAAE,SAAS;oCACf,OAAO,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI;oCAC1B,UAAU,EAAE,EAAE;oCACd,QAAQ,EAAE,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,KAAK,CAAC;iCACxC,EACD,UAAU,CACX;qCACA,SAAS,EAAE;qCACX,QAAQ,CACP;oCACE,IAAI,EAAE,SAAS;oCACf,OAAO,EAAE,KAAK;oCACd,UAAU,EAAE;wCACV,SAAS,EAAE,CAAC,iCAAiC,CAAC;wCAC9C,KAAK,EAAE,qBAAqB;qCAC7B;oCACD,QAAQ,EAAE,EAAE;iCACb,EACD,UAAU,CACX,CAAC;gCACJ,MAAM;4BACR,CAAC;4BACD,KAAK,OAAO,CAAC,CAAC,CAAC;gCACb,OAAO;qCACJ,QAAQ,CACP;oCACE,IAAI,EAAE,SAAS;oCACf,OAAO,EAAE,KAAK;oCACd,UAAU,EAAE;wCACV,SAAS,EAAE,CAAC,kCAAkC,CAAC;qCAChD;oCACD,QAAQ,EAAE,EAAE;iCACb,EACD,UAAU,CACX;qCACA,QAAQ,CACP;oCACE,IAAI,EAAE,SAAS;oCACf,OAAO,EAAE,YAAY;oCACrB,UAAU,EAAE;wCACV,SAAS,EAAE,CAAC,OAAO,CAAC;qCACrB;oCACD,QAAQ,EAAE,EAAE;iCACb,EACD,UAAU,CACX;qCACA,QAAQ,CACP;oCACE,IAAI,EAAE,SAAS;oCACf,OAAO,EAAE,GAAG;oCACZ,UAAU,EAAE,EAAE;oCACd,QAAQ,EAAE,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,KAAK,CAAC;iCACxC,EACD,UAAU,CACX;qCACA,SAAS,EAAE;qCACX,SAAS,EAAE;qCACX,QAAQ,CACP;oCACE,IAAI,EAAE,SAAS;oCACf,OAAO,EAAE,KAAK;oCACd,UAAU,EAAE;wCACV,SAAS,EAAE,CAAC,iCAAiC,CAAC;wCAC9C,KAAK,EAAE,qBAAqB;qCAC7B;oCACD,QAAQ,EAAE,EAAE;iCACb,EACD,UAAU,CACX,CAAC;gCACJ,MAAM;4BACR,CAAC;wBACH,CAAC;wBACD,MAAM;oBACR,CAAC;oBACD,KAAK,aAAa,CAAC,CAAC,CAAC;wBACnB,OAAO;6BACJ,QAAQ,CACP;4BACE,IAAI,EAAE,SAAS;4BACf,OAAO,EAAE,KAAK;4BACd,UAAU,EAAE;gCACV,SAAS,EAAE,CAAC,6BAA6B,CAAC;6BAC3C;4BACD,QAAQ,EAAE,EAAE;yBACb,EACD,UAAU,CACX;6BACA,QAAQ,CACP;4BACE,IAAI,EAAE,SAAS;4BACf,OAAO,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,KAAK,UAAU,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI;4BACvD,UAAU,EAAE;gCACV,KAAK,EACH,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,KAAK,MAAM;oCAC1B,CAAC,CAAC,wBAAwB;oCAC1B,CAAC,CAAC,EAAE;6BACT;4BACD,QAAQ,EAAE,EAAE;yBACb,EACD,UAAU,CACX,CAAC;wBACJ,MAAM,UAAU,GAAG,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;wBACjD,IAAI,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,KAAK,MAAM,EAAE,CAAC;4BACjC,UAAU,CAAC,OAAO,CAAC;gCACjB,IAAI,EAAE,SAAS;gCACf,OAAO,EAAE,OAAO;gCAChB,UAAU,EAAE;oCACV,IAAI,EAAE,UAAU;oCAChB,OAAO,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,OAAkB;iCACzC;gCACD,QAAQ,EAAE;oCACR;wCACE,IAAI,EAAE,SAAS;wCACf,OAAO,EAAE,OAAO;wCAChB,UAAU,EAAE,EAAE;wCACd,QAAQ,EAAE,EAAE;qCACb;iCACF;6BACF,CAAC,CAAC;wBACL,CAAC;wBACD,OAAO;6BACJ,QAAQ,CACP;4BACE,IAAI,EAAE,SAAS;4BACf,OAAO,EAAE,IAAI;4BACb,UAAU,EAAE,EAAE;4BACd,QAAQ,EAAE,UAAU;yBACrB,EACD,UAAU,CACX;6BACA,SAAS,EAAE;6BACX,SAAS,EAAE;6BACX,QAAQ,CACP;4BACE,IAAI,EAAE,SAAS;4BACf,OAAO,EAAE,KAAK;4BACd,UAAU,EAAE;gCACV,SAAS,EAAE,CAAC,iCAAiC,CAAC;gCAC9C,KAAK,EAAE,qBAAqB;6BAC7B;4BACD,QAAQ,EAAE,EAAE;yBACb,EACD,UAAU,CACX,CAAC;wBACJ,MAAM;oBACR,CAAC;oBACD,KAAK,gBAAgB,CAAC,CAAC,CAAC;wBACtB,OAAO;6BACJ,QAAQ,CACP;4BACE,IAAI,EAAE,SAAS;4BACf,OAAO,EAAE,IAAI;4BACb,UAAU,EAAE,EAAE;4BACd,QAAQ,EAAE,EAAE;yBACb,EACD,UAAU,CACX;6BACA,SAAS,EAAE,CAAC;wBACf,MAAM;oBACR,CAAC;oBACD,KAAK,cAAc,CAAC,CAAC,CAAC;wBACpB,MAAM,MAAM,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,IAAI,EAAE,CAAW,CAAC;wBACvD,IAAI,CAAC,MAAM,EAAE,CAAC;4BACZ,MAAM;wBACR,CAAC;wBACD,MAAM,MAAM,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC;wBAClC,MAAM,IAAI,GAAG,MAAM,CAAC,SAAS,EAAE,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;wBAC5C,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;wBACvB,IAAI,CAAC,IAAI,EAAE,CAAC;4BACV,MAAM;wBACR,CAAC;wBACD,MAAM,QAAQ,GAAG,YAAY,CAAC,MAAM,CAAC,SAAS,EAAE,EAAE,MAAM,CAAC,CAAC;wBAC1D,MAAM,aAAa,GAAG,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,IAAI,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC;wBAChE,MAAM,UAAU,GAAG,aAAa;4BAC9B,CAAC,CAAC;gCACE,KAAK,EAAE,GAAG,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,IAAI;gCAChC,MAAM,EAAE,GAAG,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,IAAI;6BACnC;4BACH,CAAC,CAAC,EAAE,CAAC;wBAEP,OAAO;6BACJ,QAAQ,CACP;4BACE,IAAI,EAAE,SAAS;4BACf,OAAO,EAAE,QAAQ;4BACjB,UAAU,EAAE;gCACV,SAAS,EAAE,CAAC,8BAA8B,CAAC;6BAC5C;4BACD,QAAQ,EAAE,EAAE;yBACb,EACD,UAAU,CACX;6BACA,QAAQ,CACP;4BACE,IAAI,EAAE,SAAS;4BACf,OAAO,EAAE,KAAK;4BACd,UAAU,EAAE;gCACV,GAAG,EAAE,UAAU,QAAQ,EAAE;gCACzB,GAAG,EAAE,QAAQ;gCACb,KAAK,EAAG,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,OAA8B,IAAI,IAAI;gCAC3D,GAAG,UAAU;6BACd;4BACD,QAAQ,EAAE,EAAE;yBACb,EACD,UAAU,CACX;6BACA,SAAS,EAAE;6BACX,SAAS,EAAE,CAAC;wBACf,MAAM;oBACR,CAAC;gBACH,CAAC;YACH,CAAC,CAAC,CAAC;YACH,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,OAAO,EAAE,EAAE;gBAC7B,QAAQ,CAAC,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC;oBACvB,KAAK,aAAa,CAAC,CAAC,CAAC;wBACnB,OAAO,CAAC,SAAS,EAAE,CAAC,SAAS,EAAE,CAAC,SAAS,EAAE,CAAC;wBAC5C,MAAM;oBACR,CAAC;oBACD,KAAK,kBAAkB,CAAC,CAAC,CAAC;wBACxB,OAAO,CAAC,SAAS,EAAE,CAAC,SAAS,EAAE,CAAC;wBAChC,MAAM;oBACR,CAAC;oBACD,KAAK,aAAa,CAAC,CAAC,CAAC;wBACnB,OAAO,CAAC,SAAS,EAAE,CAAC,SAAS,EAAE,CAAC;wBAChC,MAAM;oBACR,CAAC;gBACH,CAAC;YACH,CAAC,CAAC,CAAC;YACH,OAAO;gBACL,GAAG,EAAE,CAAC,MAAM,MAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAS;gBAChD,SAAS;aACV,CAAC;QACJ,CAAC,CAAC;IA4LJ,CAAC;IA1LS,UAAU,CAAC,IAAU;QAC3B,OAAO,OAAO,EAAE,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;IAChD,CAAC;IAEQ,KAAK,CAAC,iBAAiB,CAC9B,OAAiC;QAEjC,MAAM,IAAI,GAAS;YACjB,IAAI,EAAE,MAAM;YACZ,QAAQ,EAAE;gBACR;oBACE,IAAI,EAAE,SAAS;iBAChB;aACF;SACF,CAAC;QACF,MAAM,EAAE,GAAG,EAAE,SAAS,EAAE,GAAG,MAAM,IAAI,CAAC,iBAAiB,CACrD,OAAO,CAAC,QAAQ,EAChB,IAAI,EACJ,OAAO,CAAC,MAAM,CACf,CAAC;QACF,OAAO;YACL,IAAI,EAAE,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC;YAC1B,SAAS;SACV,CAAC;IACJ,CAAC;IAEQ,KAAK,CAAC,eAAe,CAC5B,OAA+B;QAE/B,MAAM,EAAE,IAAI,EAAE,SAAS,EAAE,GAAG,MAAM,IAAI,CAAC,iBAAiB,CAAC;YACvD,QAAQ,EAAE,OAAO,CAAC,QAAQ,CAAC,MAAM;YACjC,MAAM,EAAE,OAAO,CAAC,MAAM;SACvB,CAAC,CAAC;QACH,OAAO;YACL,IAAI,EAAE,IAAI,CAAC,OAAO,CAChB,sCAAsC,EACtC,OAAO,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,OAAO,CAC1C;YACD,SAAS;SACV,CAAC;IACJ,CAAC;IAEQ,KAAK,CAAC,iBAAiB,CAC9B,OAAiC;QAEjC,IAAI,MAAM,GAAG,EAAE,CAAC;QAChB,MAAM,cAAc,GAAa,EAAE,CAAC;QACpC,KAAK,MAAM,YAAY,IAAI,OAAO,CAAC,QAAQ,CAAC,OAAO,EAAE,CAAC;YACpD,MAAM,IAAI,GAAS;gBACjB,IAAI,EAAE,MAAM;gBACZ,QAAQ,EAAE,EAAE;aACb,CAAC;YACF,MAAM,EAAE,GAAG,EAAE,SAAS,EAAE,GAAG,MAAM,IAAI,CAAC,iBAAiB,CACrD,YAAY,EACZ,IAAI,EACJ,OAAO,CAAC,MAAM,CACf,CAAC;YACF,cAAc,CAAC,IAAI,CAAC,GAAG,SAAS,CAAC,CAAC;YAClC,MAAM,IAAI,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;QACjC,CAAC;QACD,MAAM,IAAI,GAAG,MAAM,CAAC;QACpB,OAAO;YACL,IAAI,EAAE,IAAI;YACV,SAAS,EAAE,cAAc;SAC1B,CAAC;IACJ,CAAC;IAEQ,eAAe,CACtB,OAAuC;QAEvC,MAAM,OAAO,GAAG,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAC9C,MAAM,iBAAiB,GAAG;YACxB,IAAI,EAAE,OAAO;YACb,EAAE,EAAE,MAAM,EAAE;YACZ,OAAO,EAAE,aAAa;YACtB,KAAK,EAAE;gBACL,IAAI,EAAE,cAAc;gBACpB,UAAU,EAAE,6BAA6B;gBACzC,KAAK,EAAE,IAAI;gBACX,MAAM,EAAE,KAAK;gBACb,WAAW,EAAE,eAAe,CAAC,cAAc;aAC5C;YACD,QAAQ,EAAE,EAAE;SACb,CAAC;QACF,OAAO,IAAI,CAAC,aAAa,CACvB,OAAO,EACP,iBAAkC,EAClC,OAAO,CAAC,MAAM,CACf,CAAC;IACJ,CAAC;IAEQ,KAAK,CAAC,aAAa,CAC1B,OAAqC;QAErC,MAAM,OAAO,GAAG,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAC9C,MAAM,QAAQ,GAAG,iBAAiB,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;QACrD,MAAM,iBAAiB,GAAG;YACxB,IAAI,EAAE,OAAO;YACb,EAAE,EAAE,MAAM,EAAE;YACZ,OAAO,EAAE,aAAa;YACtB,KAAK,EAAE;gBACL,IAAI,EAAE,cAAc;gBACpB,UAAU,EAAE,6BAA6B;gBACzC,KAAK,EAAE,IAAI;gBACX,MAAM,EAAE,KAAK;gBACb,WAAW,EAAE,eAAe,CAAC,cAAc;aAC5C;YACD,QAAQ,EAAE,EAAE;SACb,CAAC;QACF,OAAO;YACL,IAAI,EAAE,MAAM;YACZ,IAAI,EAAE;gBACJ,EAAE,EAAE,MAAM,EAAE;gBACZ,KAAK,EAAE,kBAAkB,CAAC,QAAQ,EAAE,UAAU,CAAC;gBAC/C,UAAU,EAAE,IAAI,CAAC,GAAG,EAAE;gBACtB,IAAI,EAAE,EAAE;aACT;YACD,MAAM,EAAE;gBACN,IAAI,EAAE,OAAO;gBACb,EAAE,EAAE,MAAM,EAAE;gBACZ,OAAO,EAAE,aAAa;gBACtB,KAAK,EAAE;oBACL,KAAK,EAAE;wBACL,4BAA4B,EAAE,IAAI;wBAClC,KAAK,EAAE,IAAI,CAAC,YAAY,CACtB,QAAQ,IAAI;4BACV,IAAI,EAAE,MAAM;4BACZ,KAAK,EAAE,UAAU;yBAClB,CACF;qBACF;iBACF;gBACD,QAAQ,EAAE;oBACR;wBACE,IAAI,EAAE,OAAO;wBACb,EAAE,EAAE,MAAM,EAAE;wBACZ,OAAO,EAAE,gBAAgB;wBACzB,KAAK,EAAE;4BACL,QAAQ,EAAE,EAAE;yBACb;wBACD,QAAQ,EAAE,EAAE;qBACb;oBACD,MAAM,IAAI,CAAC,aAAa,CACtB,OAAO,EACP,iBAAkC,EAClC,OAAO,CAAC,MAAM,CACf;iBACF;aACF;SACF,CAAC;IACJ,CAAC;IAEQ,KAAK,CAAC,eAAe,CAC5B,OAAmC;QAEnC,MAAM,OAAO,GAAG,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAC9C,MAAM,iBAAiB,GAAG;YACxB,IAAI,EAAE,OAAO;YACb,EAAE,EAAE,MAAM,EAAE;YACZ,OAAO,EAAE,aAAa;YACtB,KAAK,EAAE;gBACL,IAAI,EAAE,cAAc;gBACpB,UAAU,EAAE,6BAA6B;gBACzC,KAAK,EAAE,IAAI;gBACX,MAAM,EAAE,KAAK;gBACb,WAAW,EAAE,eAAe,CAAC,cAAc;aAC5C;YACD,QAAQ,EAAE,EAAE;SACb,CAAC;QACF,MAAM,YAAY,GAAG,CAAC,MAAM,IAAI,CAAC,aAAa,CAC5C,OAAO,EACP,iBAAkC,EAClC,OAAO,CAAC,MAAM,CACf,CAAkB,CAAC;QACpB,IAAI,YAAY,CAAC,QAAQ,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;YACvC,OAAO,IAAI,CAAC;QACd,CAAC;QACD,OAAO;YACL,IAAI,EAAE,OAAO;YACb,OAAO,EAAE,CAAC,YAAY,CAAC;YACvB,WAAW,EAAE,OAAO,CAAC,WAAW;YAChC,gBAAgB,EAAE,OAAO,CAAC,gBAAgB;YAC1C,WAAW,EAAE,OAAO,CAAC,WAAW;YAChC,MAAM,EAAE,OAAO,CAAC,MAAM;SACvB,CAAC;IACJ,CAAC;CACF","sourcesContent":["import type { AffineTextAttributes } from '@lumensuite/affine-components/rich-text';\nimport type { DeltaInsert } from '@lumensuite/inline';\nimport type { Root } from 'hast';\n\nimport {\n  ColorScheme,\n  DEFAULT_NOTE_BACKGROUND_COLOR,\n  NoteDisplayMode,\n} from '@lumensuite/affine-model';\nimport { ThemeObserver } from '@lumensuite/affine-shared/theme';\nimport { getFilenameFromContentDisposition } from '@lumensuite/affine-shared/utils';\nimport { sha } from '@lumensuite/global/utils';\nimport {\n  type AssetsManager,\n  type BlockSnapshot,\n  BlockSnapshotSchema,\n  type DocSnapshot,\n  type FromBlockSnapshotPayload,\n  type FromBlockSnapshotResult,\n  type FromDocSnapshotPayload,\n  type FromDocSnapshotResult,\n  type FromSliceSnapshotPayload,\n  type FromSliceSnapshotResult,\n  getAssetName,\n  nanoid,\n  type SliceSnapshot,\n  type ToBlockSnapshotPayload,\n  type ToDocSnapshotPayload,\n} from '@lumensuite/store';\nimport { ASTWalker, BaseAdapter } from '@lumensuite/store';\nimport { collapseWhiteSpace } from 'collapse-white-space';\nimport rehypeParse from 'rehype-parse';\nimport rehypeStringify from 'rehype-stringify';\nimport { bundledLanguagesInfo, codeToHast } from 'shiki';\nimport { unified } from 'unified';\n\nimport {\n  hastFlatNodes,\n  hastGetElementChildren,\n  hastGetTextChildren,\n  hastGetTextChildrenOnlyAst,\n  hastGetTextContent,\n  hastQuerySelector,\n  type HtmlAST,\n} from './hast.js';\nimport { fetchable, fetchImage, mergeDeltas } from './utils.js';\n\nexport type Html = string;\n\ntype HtmlToSliceSnapshotPayload = {\n  file: Html;\n  assets?: AssetsManager;\n  blockVersions: Record<string, number>;\n  pageVersion: number;\n  workspaceVersion: number;\n  workspaceId: string;\n  pageId: string;\n};\n\nexport class HtmlAdapter extends BaseAdapter<Html> {\n  private _astToHtml = (ast: Root) => {\n    return unified().use(rehypeStringify).stringify(ast);\n  };\n\n  private _deltaToHast = (deltas: DeltaInsert<AffineTextAttributes>[]) => {\n    return deltas.map(delta => {\n      let hast: HtmlAST = {\n        type: 'text',\n        value: delta.insert,\n      };\n      if (delta.attributes?.reference) {\n        const title = this.configs.get(\n          'title:' + delta.attributes.reference.pageId\n        );\n        if (typeof title === 'string') {\n          hast = {\n            type: 'text',\n            value: title,\n          };\n        }\n      }\n      if (delta.attributes) {\n        if (delta.attributes.bold) {\n          hast = {\n            type: 'element',\n            tagName: 'strong',\n            properties: {},\n            children: [hast],\n          };\n        }\n        if (delta.attributes.italic) {\n          hast = {\n            type: 'element',\n            tagName: 'em',\n            properties: {},\n            children: [hast],\n          };\n        }\n        if (delta.attributes.code) {\n          hast = {\n            type: 'element',\n            tagName: 'code',\n            properties: {},\n            children: [hast],\n          };\n        }\n        if (delta.attributes.strike) {\n          hast = {\n            type: 'element',\n            tagName: 'del',\n            properties: {},\n            children: [hast],\n          };\n        }\n        if (delta.attributes.underline) {\n          hast = {\n            type: 'element',\n            tagName: 'u',\n            properties: {},\n            children: [hast],\n          };\n        }\n        if (delta.attributes.link) {\n          hast = {\n            type: 'element',\n            tagName: 'a',\n            properties: {\n              href: delta.attributes.link,\n            },\n            children: [hast],\n          };\n        }\n      }\n      return hast;\n    });\n  };\n\n  private _hastToDelta = (\n    ast: HtmlAST,\n    option: {\n      trim?: boolean;\n      pre?: boolean;\n      pageMap?: Map<string, string>;\n    } = { trim: true, pre: false }\n  ): DeltaInsert<object>[] => {\n    return this._hastToDeltaSpreaded(ast, option).reduce((acc, cur) => {\n      return mergeDeltas(acc, cur);\n    }, [] as DeltaInsert<object>[]);\n  };\n\n  private _hastToDeltaSpreaded = (\n    ast: HtmlAST,\n    option: {\n      trim?: boolean;\n      pre?: boolean;\n    } = { trim: true, pre: false }\n  ): DeltaInsert<object>[] => {\n    if (option.trim === undefined) {\n      option.trim = true;\n    }\n    switch (ast.type) {\n      case 'text': {\n        if (option.pre) {\n          return [{ insert: ast.value }];\n        }\n        if (option.trim) {\n          const value = collapseWhiteSpace(ast.value, { trim: option.trim });\n          if (value) {\n            return [{ insert: value }];\n          }\n          return [];\n        }\n        if (ast.value) {\n          return [{ insert: collapseWhiteSpace(ast.value) }];\n        }\n        return [];\n      }\n      case 'element': {\n        switch (ast.tagName) {\n          case 'ol':\n          case 'ul': {\n            return [];\n          }\n          case 'span':\n          case 'bdi':\n          case 'bdo':\n          case 'ins': {\n            return ast.children.flatMap(child =>\n              this._hastToDeltaSpreaded(child, { trim: false })\n            );\n          }\n          case 'strong':\n          case 'b': {\n            return ast.children.flatMap(child =>\n              this._hastToDeltaSpreaded(child, { trim: false }).map(delta => {\n                delta.attributes = { ...delta.attributes, bold: true };\n                return delta;\n              })\n            );\n          }\n          case 'i':\n          case 'em': {\n            return ast.children.flatMap(child =>\n              this._hastToDeltaSpreaded(child, { trim: false }).map(delta => {\n                delta.attributes = { ...delta.attributes, italic: true };\n                return delta;\n              })\n            );\n          }\n          case 'code': {\n            return ast.children.flatMap(child =>\n              this._hastToDeltaSpreaded(child, { trim: false }).map(delta => {\n                delta.attributes = { ...delta.attributes, code: true };\n                return delta;\n              })\n            );\n          }\n          case 'del': {\n            return ast.children.flatMap(child =>\n              this._hastToDeltaSpreaded(child, { trim: false }).map(delta => {\n                delta.attributes = { ...delta.attributes, strike: true };\n                return delta;\n              })\n            );\n          }\n          case 'u': {\n            return ast.children.flatMap(child =>\n              this._hastToDeltaSpreaded(child, { trim: false }).map(delta => {\n                delta.attributes = { ...delta.attributes, underline: true };\n                return delta;\n              })\n            );\n          }\n          case 'a': {\n            const href = ast.properties?.href;\n            if (typeof href !== 'string') {\n              return [];\n            }\n            return ast.children.flatMap(child =>\n              this._hastToDeltaSpreaded(child, { trim: false }).map(delta => {\n                if (href.startsWith('http')) {\n                  delta.attributes = {\n                    ...delta.attributes,\n                    link: href,\n                  };\n                  return delta;\n                }\n                return delta;\n              })\n            );\n          }\n          case 'mark': {\n            // TODO: add support for highlight\n            return ast.children.flatMap(child =>\n              this._hastToDeltaSpreaded(child, { trim: false }).map(delta => {\n                delta.attributes = { ...delta.attributes };\n                return delta;\n              })\n            );\n          }\n          case 'br': {\n            return [{ insert: '\\n' }];\n          }\n        }\n      }\n    }\n    return 'children' in ast\n      ? ast.children.flatMap(child => this._hastToDeltaSpreaded(child, option))\n      : [];\n  };\n\n  private _traverseHtml = async (\n    html: HtmlAST,\n    snapshot: BlockSnapshot,\n    assets?: AssetsManager\n  ) => {\n    const walker = new ASTWalker<HtmlAST, BlockSnapshot>();\n    walker.setONodeTypeGuard(\n      (node): node is HtmlAST =>\n        'type' in (node as object) && (node as HtmlAST).type !== undefined\n    );\n    walker.setEnter(async (o, context) => {\n      if (o.node.type !== 'element') {\n        return;\n      }\n      switch (o.node.tagName) {\n        case 'header': {\n          context.skipAllChildren();\n          break;\n        }\n        case 'img': {\n          if (!assets) {\n            break;\n          }\n          const image = o.node;\n          const imageURL =\n            typeof image?.properties.src === 'string'\n              ? image.properties.src\n              : '';\n          if (imageURL) {\n            let blobId = '';\n            if (!fetchable(imageURL)) {\n              const imageURLSplit = imageURL.split('/');\n              while (imageURLSplit.length > 0) {\n                const key = assets\n                  .getPathBlobIdMap()\n                  .get(decodeURIComponent(imageURLSplit.join('/')));\n                if (key) {\n                  blobId = key;\n                  break;\n                }\n                imageURLSplit.shift();\n              }\n            } else {\n              try {\n                const res = await fetchImage(\n                  imageURL,\n                  undefined,\n                  this.configs.get('imageProxy') as string\n                );\n                if (!res) {\n                  break;\n                }\n                const clonedRes = res.clone();\n                const name =\n                  getFilenameFromContentDisposition(\n                    res.headers.get('Content-Disposition') ?? ''\n                  ) ??\n                  (imageURL.split('/').at(-1) ?? 'image') +\n                    '.' +\n                    (res.headers.get('Content-Type')?.split('/').at(-1) ??\n                      'png');\n                const file = new File([await res.blob()], name, {\n                  type: res.headers.get('Content-Type') ?? '',\n                });\n                blobId = await sha(await clonedRes.arrayBuffer());\n                assets?.getAssets().set(blobId, file);\n                await assets?.writeToBlob(blobId);\n              } catch (_) {\n                break;\n              }\n            }\n            context\n              .openNode(\n                {\n                  type: 'block',\n                  id: nanoid(),\n                  flavour: 'affine:image',\n                  props: {\n                    sourceId: blobId,\n                  },\n                  children: [],\n                },\n                'children'\n              )\n              .closeNode();\n            context.skipAllChildren();\n            break;\n          }\n          break;\n        }\n        case 'pre': {\n          const code = hastQuerySelector(o.node, 'code');\n          if (!code) {\n            break;\n          }\n          const codeText =\n            code.children.length === 1 && code.children[0].type === 'text'\n              ? code.children[0]\n              : { ...code, tagName: 'div' };\n          let codeLang = Array.isArray(code.properties?.className)\n            ? code.properties.className.find(\n                className =>\n                  typeof className === 'string' && className.startsWith('code-')\n              )\n            : undefined;\n          codeLang =\n            typeof codeLang === 'string'\n              ? codeLang.replace('code-', '')\n              : undefined;\n          context\n            .openNode(\n              {\n                type: 'block',\n                id: nanoid(),\n                flavour: 'affine:code',\n                props: {\n                  language: codeLang ?? 'Plain Text',\n                  text: {\n                    '$lumensuite:internal:text$': true,\n                    delta: this._hastToDelta(codeText, {\n                      trim: false,\n                      pre: true,\n                    }),\n                  },\n                },\n                children: [],\n              },\n              'children'\n            )\n            .closeNode();\n          context.skipAllChildren();\n          break;\n        }\n        case 'blockquote': {\n          context.setGlobalContext('hast:blockquote', true);\n          // Special case for no paragraph in blockquote\n          const texts = hastGetTextChildren(o.node);\n          // check if only blank text\n          const onlyBlankText = texts.every(text => !text.value.trim());\n          if (texts && !onlyBlankText) {\n            context\n              .openNode(\n                {\n                  type: 'block',\n                  id: nanoid(),\n                  flavour: 'affine:paragraph',\n                  props: {\n                    type: 'quote',\n                    text: {\n                      '$lumensuite:internal:text$': true,\n                      delta: this._hastToDelta(\n                        hastGetTextChildrenOnlyAst(o.node)\n                      ),\n                    },\n                  },\n                  children: [],\n                },\n                'children'\n              )\n              .closeNode();\n          }\n          break;\n        }\n        case 'body':\n        case 'div':\n        case 'span':\n        case 'footer': {\n          if (\n            // Check if it is a paragraph like div\n            o.parent?.node.type === 'element' &&\n            o.parent.node.tagName !== 'li' &&\n            (hastGetElementChildren(o.node).every(child =>\n              [\n                'a',\n                'b',\n                'bdi',\n                'bdo',\n                'br',\n                'code',\n                'del',\n                'em',\n                'i',\n                'ins',\n                'mark',\n                'span',\n                'strong',\n                'u',\n              ].includes(child.tagName)\n            ) ||\n              o.node.children\n                .map(child => child.type)\n                .every(type => type === 'text'))\n          ) {\n            context\n              .openNode(\n                {\n                  type: 'block',\n                  id: nanoid(),\n                  flavour: 'affine:paragraph',\n                  props: {\n                    type: 'text',\n                    text: {\n                      '$lumensuite:internal:text$': true,\n                      delta: this._hastToDelta(o.node),\n                    },\n                  },\n                  children: [],\n                },\n                'children'\n              )\n              .closeNode();\n            context.skipAllChildren();\n          }\n          break;\n        }\n        case 'p': {\n          context.openNode(\n            {\n              type: 'block',\n              id: nanoid(),\n              flavour: 'affine:paragraph',\n              props: {\n                type: context.getGlobalContext('hast:blockquote')\n                  ? 'quote'\n                  : 'text',\n                text: {\n                  '$lumensuite:internal:text$': true,\n                  delta: this._hastToDelta(o.node),\n                },\n              },\n              children: [],\n            },\n            'children'\n          );\n          break;\n        }\n        case 'ul':\n        case 'ol': {\n          context.setNodeContext('hast:list:type', 'bulleted');\n          if (o.node.tagName === 'ol') {\n            context.setNodeContext('hast:list:type', 'numbered');\n          } else if (Array.isArray(o.node.properties?.className)) {\n            if (o.node.properties.className.includes('to-do-list')) {\n              context.setNodeContext('hast:list:type', 'todo');\n            } else if (o.node.properties.className.includes('toggle')) {\n              context.setNodeContext('hast:list:type', 'toggle');\n            } else if (o.node.properties.className.includes('bulleted-list')) {\n              context.setNodeContext('hast:list:type', 'bulleted');\n            }\n          }\n          break;\n        }\n        case 'li': {\n          const firstElementChild = hastGetElementChildren(o.node)[0];\n          const listType = context.getNodeContext('hast:list:type');\n          o.node = hastFlatNodes(\n            o.node,\n            tagName => tagName === 'div' || tagName === 'p'\n          );\n          context.openNode(\n            {\n              type: 'block',\n              id: nanoid(),\n              flavour: 'affine:list',\n              props: {\n                type: listType,\n                text: {\n                  '$lumensuite:internal:text$': true,\n                  delta:\n                    listType !== 'toggle'\n                      ? this._hastToDelta(o.node)\n                      : this._hastToDelta(\n                          hastQuerySelector(o.node, 'summary') ?? o.node\n                        ),\n                },\n                checked:\n                  listType === 'todo'\n                    ? firstElementChild &&\n                      Array.isArray(firstElementChild.properties?.className) &&\n                      firstElementChild.properties.className.includes(\n                        'checkbox-on'\n                      )\n                    : false,\n                collapsed:\n                  listType === 'toggle'\n                    ? firstElementChild &&\n                      firstElementChild.tagName === 'details' &&\n                      firstElementChild.properties.open === undefined\n                    : false,\n              },\n              children: [],\n            },\n            'children'\n          );\n          break;\n        }\n        case 'hr': {\n          context\n            .openNode(\n              {\n                type: 'block',\n                id: nanoid(),\n                flavour: 'affine:divider',\n                props: {},\n                children: [],\n              },\n              'children'\n            )\n            .closeNode();\n          break;\n        }\n        case 'h1':\n        case 'h2':\n        case 'h3':\n        case 'h4':\n        case 'h5':\n        case 'h6': {\n          context\n            .openNode(\n              {\n                type: 'block',\n                id: nanoid(),\n                flavour: 'affine:paragraph',\n                props: {\n                  type: o.node.tagName,\n                  text: {\n                    '$lumensuite:internal:text$': true,\n                    delta: this._hastToDelta(o.node),\n                  },\n                },\n                children: [],\n              },\n              'children'\n            )\n            .closeNode();\n          break;\n        }\n        case 'iframe': {\n          const src = o.node.properties?.src;\n          if (typeof src !== 'string') {\n            break;\n          }\n          if (src.startsWith('https://www.youtube.com/embed/')) {\n            const videoId = src.substring(\n              'https://www.youtube.com/embed/'.length,\n              src.indexOf('?') !== -1 ? src.indexOf('?') : undefined\n            );\n            context\n              .openNode(\n                {\n                  type: 'block',\n                  id: nanoid(),\n                  flavour: 'affine:embed-youtube',\n                  props: {\n                    url: `https://www.youtube.com/watch?v=${videoId}`,\n                  },\n                  children: [],\n                },\n                'children'\n              )\n              .closeNode();\n          }\n          break;\n        }\n      }\n    });\n    walker.setLeave((o, context) => {\n      if (o.node.type !== 'element') {\n        return;\n      }\n      switch (o.node.tagName) {\n        case 'div': {\n          if (\n            o.parent?.node.type === 'element' &&\n            o.parent.node.tagName !== 'li' &&\n            Array.isArray(o.node.properties?.className)\n          ) {\n            if (\n              o.node.properties.className.includes(\n                'affine-paragraph-block-container'\n              ) ||\n              o.node.properties.className.includes(\n                'affine-block-children-container'\n              ) ||\n              o.node.properties.className.includes('indented')\n            ) {\n              context.closeNode();\n            }\n          }\n          break;\n        }\n        case 'blockquote': {\n          context.setGlobalContext('hast:blockquote', false);\n          break;\n        }\n        case 'p': {\n          if (\n            o.next?.type === 'element' &&\n            o.next.tagName === 'div' &&\n            Array.isArray(o.next.properties?.className) &&\n            (o.next.properties.className.includes(\n              'affine-block-children-container'\n            ) ||\n              o.next.properties.className.includes('indented'))\n          ) {\n            // Close the node when leaving div indented\n            break;\n          }\n          context.closeNode();\n          break;\n        }\n        case 'li': {\n          context.closeNode();\n          break;\n        }\n      }\n    });\n    return walker.walk(html, snapshot);\n  };\n\n  private _traverseSnapshot = async (\n    snapshot: BlockSnapshot,\n    html: HtmlAST,\n    assets?: AssetsManager\n  ) => {\n    const assetsIds: string[] = [];\n    const walker = new ASTWalker<BlockSnapshot, HtmlAST>();\n    walker.setONodeTypeGuard(\n      (node): node is BlockSnapshot =>\n        BlockSnapshotSchema.safeParse(node).success\n    );\n    walker.setEnter(async (o, context) => {\n      const text = (o.node.props.text ?? { delta: [] }) as {\n        delta: DeltaInsert[];\n      };\n      switch (o.node.flavour) {\n        case 'affine:page': {\n          context\n            .openNode(\n              {\n                type: 'element',\n                tagName: 'html',\n                properties: {},\n                children: [],\n              },\n              'children'\n            )\n            .openNode(\n              {\n                type: 'element',\n                tagName: 'head',\n                properties: {},\n                children: [],\n              },\n              'children'\n            )\n            .openNode(\n              {\n                type: 'element',\n                tagName: 'style',\n                properties: {},\n                children: [],\n              },\n              'children'\n            )\n            .openNode(\n              {\n                type: 'text',\n                value: `\n                input[type='checkbox'] {\n                  display: none;\n                }\n                label:before {\n                  background: rgb(30, 150, 235);\n                  border-radius: 3px;\n                  height: 16px;\n                  width: 16px;\n                  display: inline-block;\n                  cursor: pointer;\n                }\n                input[type='checkbox'] + label:before {\n                  content: '';\n                  background: rgb(30, 150, 235);\n                  color: #fff;\n                  font-size: 16px;\n                  line-height: 16px;\n                  text-align: center;\n                }\n                input[type='checkbox']:checked + label:before {\n                  content: '✓';\n                }\n                `.replace(/\\s\\s+/g, ''),\n              },\n              'children'\n            )\n            .closeNode()\n            .closeNode()\n            .closeNode()\n            .openNode(\n              {\n                type: 'element',\n                tagName: 'body',\n                properties: {},\n                children: [],\n              },\n              'children'\n            )\n            .openNode(\n              {\n                type: 'element',\n                tagName: 'div',\n                properties: {\n                  style: 'width: 70vw; margin: 60px auto;',\n                },\n                children: [],\n              },\n              'children'\n            )\n            .openNode({\n              type: 'comment',\n              value: 'LumenSuiteDocTitlePlaceholder',\n            })\n            .closeNode();\n          break;\n        }\n        case 'affine:code': {\n          const rawLang = o.node.props.language as string | null;\n          const matchedLang = rawLang\n            ? (bundledLanguagesInfo.find(\n                info =>\n                  info.id === rawLang ||\n                  info.name === rawLang ||\n                  info.aliases?.includes(rawLang)\n              )?.id ?? 'text')\n            : 'text';\n\n          // @ts-ignore\n          const text = o.node.props.text.delta as DeltaInsert[];\n          const code = text.map(delta => delta.insert).join('');\n          const hast = await codeToHast(code, {\n            lang: matchedLang,\n            theme:\n              ThemeObserver.mode === ColorScheme.Dark\n                ? 'dark-plus'\n                : 'light-plus',\n          });\n\n          // @ts-ignore\n          context.openNode(hast, 'children').closeNode();\n          break;\n        }\n        case 'affine:paragraph': {\n          switch (o.node.props.type) {\n            case 'text': {\n              context\n                .openNode(\n                  {\n                    type: 'element',\n                    tagName: 'div',\n                    properties: {\n                      className: ['affine-paragraph-block-container'],\n                    },\n                    children: [],\n                  },\n                  'children'\n                )\n                .openNode(\n                  {\n                    type: 'element',\n                    tagName: 'p',\n                    properties: {},\n                    children: this._deltaToHast(text.delta),\n                  },\n                  'children'\n                )\n                .closeNode()\n                .openNode(\n                  {\n                    type: 'element',\n                    tagName: 'div',\n                    properties: {\n                      className: ['affine-block-children-container'],\n                      style: 'padding-left: 26px;',\n                    },\n                    children: [],\n                  },\n                  'children'\n                );\n              break;\n            }\n            case 'h1':\n            case 'h2':\n            case 'h3':\n            case 'h4':\n            case 'h5':\n            case 'h6': {\n              context\n                .openNode(\n                  {\n                    type: 'element',\n                    tagName: 'div',\n                    properties: {\n                      className: ['affine-paragraph-block-container'],\n                    },\n                    children: [],\n                  },\n                  'children'\n                )\n                .openNode(\n                  {\n                    type: 'element',\n                    tagName: o.node.props.type,\n                    properties: {},\n                    children: this._deltaToHast(text.delta),\n                  },\n                  'children'\n                )\n                .closeNode()\n                .openNode(\n                  {\n                    type: 'element',\n                    tagName: 'div',\n                    properties: {\n                      className: ['affine-block-children-container'],\n                      style: 'padding-left: 26px;',\n                    },\n                    children: [],\n                  },\n                  'children'\n                );\n              break;\n            }\n            case 'quote': {\n              context\n                .openNode(\n                  {\n                    type: 'element',\n                    tagName: 'div',\n                    properties: {\n                      className: ['affine-paragraph-block-container'],\n                    },\n                    children: [],\n                  },\n                  'children'\n                )\n                .openNode(\n                  {\n                    type: 'element',\n                    tagName: 'blockquote',\n                    properties: {\n                      className: ['quote'],\n                    },\n                    children: [],\n                  },\n                  'children'\n                )\n                .openNode(\n                  {\n                    type: 'element',\n                    tagName: 'p',\n                    properties: {},\n                    children: this._deltaToHast(text.delta),\n                  },\n                  'children'\n                )\n                .closeNode()\n                .closeNode()\n                .openNode(\n                  {\n                    type: 'element',\n                    tagName: 'div',\n                    properties: {\n                      className: ['affine-block-children-container'],\n                      style: 'padding-left: 26px;',\n                    },\n                    children: [],\n                  },\n                  'children'\n                );\n              break;\n            }\n          }\n          break;\n        }\n        case 'affine:list': {\n          context\n            .openNode(\n              {\n                type: 'element',\n                tagName: 'div',\n                properties: {\n                  className: ['affine-list-block-container'],\n                },\n                children: [],\n              },\n              'children'\n            )\n            .openNode(\n              {\n                type: 'element',\n                tagName: o.node.props.type === 'numbered' ? 'ol' : 'ul',\n                properties: {\n                  style:\n                    o.node.props.type === 'todo'\n                      ? 'list-style-type: none;'\n                      : '',\n                },\n                children: [],\n              },\n              'children'\n            );\n          const liChildren = this._deltaToHast(text.delta);\n          if (o.node.props.type === 'todo') {\n            liChildren.unshift({\n              type: 'element',\n              tagName: 'input',\n              properties: {\n                type: 'checkbox',\n                checked: o.node.props.checked as boolean,\n              },\n              children: [\n                {\n                  type: 'element',\n                  tagName: 'label',\n                  properties: {},\n                  children: [],\n                },\n              ],\n            });\n          }\n          context\n            .openNode(\n              {\n                type: 'element',\n                tagName: 'li',\n                properties: {},\n                children: liChildren,\n              },\n              'children'\n            )\n            .closeNode()\n            .closeNode()\n            .openNode(\n              {\n                type: 'element',\n                tagName: 'div',\n                properties: {\n                  className: ['affine-block-children-container'],\n                  style: 'padding-left: 26px;',\n                },\n                children: [],\n              },\n              'children'\n            );\n          break;\n        }\n        case 'affine:divider': {\n          context\n            .openNode(\n              {\n                type: 'element',\n                tagName: 'hr',\n                properties: {},\n                children: [],\n              },\n              'children'\n            )\n            .closeNode();\n          break;\n        }\n        case 'affine:image': {\n          const blobId = (o.node.props.sourceId ?? '') as string;\n          if (!assets) {\n            break;\n          }\n          await assets.readFromBlob(blobId);\n          const blob = assets.getAssets().get(blobId);\n          assetsIds.push(blobId);\n          if (!blob) {\n            break;\n          }\n          const blobName = getAssetName(assets.getAssets(), blobId);\n          const isScaledImage = o.node.props.width && o.node.props.height;\n          const widthStyle = isScaledImage\n            ? {\n                width: `${o.node.props.width}px`,\n                height: `${o.node.props.height}px`,\n              }\n            : {};\n\n          context\n            .openNode(\n              {\n                type: 'element',\n                tagName: 'figure',\n                properties: {\n                  className: ['affine-image-block-container'],\n                },\n                children: [],\n              },\n              'children'\n            )\n            .openNode(\n              {\n                type: 'element',\n                tagName: 'img',\n                properties: {\n                  src: `assets/${blobName}`,\n                  alt: blobName,\n                  title: (o.node.props.caption as string | undefined) ?? null,\n                  ...widthStyle,\n                },\n                children: [],\n              },\n              'children'\n            )\n            .closeNode()\n            .closeNode();\n          break;\n        }\n      }\n    });\n    walker.setLeave((o, context) => {\n      switch (o.node.flavour) {\n        case 'affine:page': {\n          context.closeNode().closeNode().closeNode();\n          break;\n        }\n        case 'affine:paragraph': {\n          context.closeNode().closeNode();\n          break;\n        }\n        case 'affine:list': {\n          context.closeNode().closeNode();\n          break;\n        }\n      }\n    });\n    return {\n      ast: (await walker.walk(snapshot, html)) as Root,\n      assetsIds,\n    };\n  };\n\n  private _htmlToAst(html: Html) {\n    return unified().use(rehypeParse).parse(html);\n  }\n\n  override async fromBlockSnapshot(\n    payload: FromBlockSnapshotPayload\n  ): Promise<FromBlockSnapshotResult<string>> {\n    const root: Root = {\n      type: 'root',\n      children: [\n        {\n          type: 'doctype',\n        },\n      ],\n    };\n    const { ast, assetsIds } = await this._traverseSnapshot(\n      payload.snapshot,\n      root,\n      payload.assets\n    );\n    return {\n      file: this._astToHtml(ast),\n      assetsIds,\n    };\n  }\n\n  override async fromDocSnapshot(\n    payload: FromDocSnapshotPayload\n  ): Promise<FromDocSnapshotResult<string>> {\n    const { file, assetsIds } = await this.fromBlockSnapshot({\n      snapshot: payload.snapshot.blocks,\n      assets: payload.assets,\n    });\n    return {\n      file: file.replace(\n        '<!--LumenSuiteDocTitlePlaceholder-->',\n        `<h1>${payload.snapshot.meta.title}</h1>`\n      ),\n      assetsIds,\n    };\n  }\n\n  override async fromSliceSnapshot(\n    payload: FromSliceSnapshotPayload\n  ): Promise<FromSliceSnapshotResult<string>> {\n    let buffer = '';\n    const sliceAssetsIds: string[] = [];\n    for (const contentSlice of payload.snapshot.content) {\n      const root: Root = {\n        type: 'root',\n        children: [],\n      };\n      const { ast, assetsIds } = await this._traverseSnapshot(\n        contentSlice,\n        root,\n        payload.assets\n      );\n      sliceAssetsIds.push(...assetsIds);\n      buffer += this._astToHtml(ast);\n    }\n    const html = buffer;\n    return {\n      file: html,\n      assetsIds: sliceAssetsIds,\n    };\n  }\n\n  override toBlockSnapshot(\n    payload: ToBlockSnapshotPayload<string>\n  ): Promise<BlockSnapshot> {\n    const htmlAst = this._htmlToAst(payload.file);\n    const blockSnapshotRoot = {\n      type: 'block',\n      id: nanoid(),\n      flavour: 'affine:note',\n      props: {\n        xywh: '[0,0,800,95]',\n        background: DEFAULT_NOTE_BACKGROUND_COLOR,\n        index: 'a0',\n        hidden: false,\n        displayMode: NoteDisplayMode.DocAndEdgeless,\n      },\n      children: [],\n    };\n    return this._traverseHtml(\n      htmlAst,\n      blockSnapshotRoot as BlockSnapshot,\n      payload.assets\n    );\n  }\n\n  override async toDocSnapshot(\n    payload: ToDocSnapshotPayload<string>\n  ): Promise<DocSnapshot> {\n    const htmlAst = this._htmlToAst(payload.file);\n    const titleAst = hastQuerySelector(htmlAst, 'title');\n    const blockSnapshotRoot = {\n      type: 'block',\n      id: nanoid(),\n      flavour: 'affine:note',\n      props: {\n        xywh: '[0,0,800,95]',\n        background: DEFAULT_NOTE_BACKGROUND_COLOR,\n        index: 'a0',\n        hidden: false,\n        displayMode: NoteDisplayMode.DocAndEdgeless,\n      },\n      children: [],\n    };\n    return {\n      type: 'page',\n      meta: {\n        id: nanoid(),\n        title: hastGetTextContent(titleAst, 'Untitled'),\n        createDate: Date.now(),\n        tags: [],\n      },\n      blocks: {\n        type: 'block',\n        id: nanoid(),\n        flavour: 'affine:page',\n        props: {\n          title: {\n            '$lumensuite:internal:text$': true,\n            delta: this._hastToDelta(\n              titleAst ?? {\n                type: 'text',\n                value: 'Untitled',\n              }\n            ),\n          },\n        },\n        children: [\n          {\n            type: 'block',\n            id: nanoid(),\n            flavour: 'affine:surface',\n            props: {\n              elements: {},\n            },\n            children: [],\n          },\n          await this._traverseHtml(\n            htmlAst,\n            blockSnapshotRoot as BlockSnapshot,\n            payload.assets\n          ),\n        ],\n      },\n    };\n  }\n\n  override async toSliceSnapshot(\n    payload: HtmlToSliceSnapshotPayload\n  ): Promise<SliceSnapshot | null> {\n    const htmlAst = this._htmlToAst(payload.file);\n    const blockSnapshotRoot = {\n      type: 'block',\n      id: nanoid(),\n      flavour: 'affine:note',\n      props: {\n        xywh: '[0,0,800,95]',\n        background: DEFAULT_NOTE_BACKGROUND_COLOR,\n        index: 'a0',\n        hidden: false,\n        displayMode: NoteDisplayMode.DocAndEdgeless,\n      },\n      children: [],\n    };\n    const contentSlice = (await this._traverseHtml(\n      htmlAst,\n      blockSnapshotRoot as BlockSnapshot,\n      payload.assets\n    )) as BlockSnapshot;\n    if (contentSlice.children.length === 0) {\n      return null;\n    }\n    return {\n      type: 'slice',\n      content: [contentSlice],\n      pageVersion: payload.pageVersion,\n      workspaceVersion: payload.workspaceVersion,\n      workspaceId: payload.workspaceId,\n      pageId: payload.pageId,\n    };\n  }\n}\n"]}