{"version":3,"file":"markdown.js","sourceRoot":"","sources":["../../../src/_common/adapters/markdown.ts"],"names":[],"mappings":"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","sourcesContent":["import type { AffineTextAttributes } from '@blocksuite/affine-components/rich-text';\nimport type { DeltaInsert } from '@blocksuite/inline/types';\nimport type { Heading, Root, RootContentMap, TableRow } from 'mdast';\n\nimport {\n  type Column,\n  DEFAULT_NOTE_BACKGROUND_COLOR,\n  NoteDisplayMode,\n  type SerializedCells,\n} from '@blocksuite/affine-model';\nimport { getFilenameFromContentDisposition } from '@blocksuite/affine-shared/utils';\nimport { assertExists, sha } from '@blocksuite/global/utils';\nimport {\n  type AssetsManager,\n  ASTWalker,\n  BaseAdapter,\n  type BlockSnapshot,\n  BlockSnapshotSchema,\n  type DocSnapshot,\n  type FromBlockSnapshotPayload,\n  type FromBlockSnapshotResult,\n  type FromDocSnapshotPayload,\n  type FromDocSnapshotResult,\n  type FromSliceSnapshotPayload,\n  type FromSliceSnapshotResult,\n  getAssetName,\n  nanoid,\n  type SliceSnapshot,\n  type ToBlockSnapshotPayload,\n  type ToDocSnapshotPayload,\n} from '@blocksuite/store';\nimport { format } from 'date-fns/format';\nimport remarkParse from 'remark-parse';\nimport remarkStringify from 'remark-stringify';\nimport { unified } from 'unified';\n\nimport { remarkGfm } from './gfm.js';\nimport { createText, fetchable, fetchImage, isNullish } from './utils.js';\n\nexport type Markdown = string;\n\ntype MdastUnionType<\n  K extends keyof RootContentMap,\n  V extends RootContentMap[K],\n> = V;\n\ntype MarkdownAST =\n  | MdastUnionType<keyof RootContentMap, RootContentMap[keyof RootContentMap]>\n  | Root;\n\ntype MarkdownToSliceSnapshotPayload = {\n  file: Markdown;\n  assets?: AssetsManager;\n  pageVersion: number;\n  workspaceVersion: number;\n  workspaceId: string;\n  pageId: string;\n};\n\nexport class MarkdownAdapter extends BaseAdapter<Markdown> {\n  private _traverseMarkdown = (\n    markdown: MarkdownAST,\n    snapshot: BlockSnapshot,\n    assets?: AssetsManager\n  ) => {\n    const walker = new ASTWalker<MarkdownAST, BlockSnapshot>();\n    walker.setONodeTypeGuard(\n      (node): node is MarkdownAST =>\n        !Array.isArray(node) &&\n        'type' in (node as object) &&\n        (node as MarkdownAST).type !== undefined\n    );\n    walker.setEnter(async (o, context) => {\n      switch (o.node.type) {\n        case 'html': {\n          context\n            .openNode(\n              {\n                type: 'block',\n                id: nanoid(),\n                flavour: 'affine:paragraph',\n                props: {\n                  type: 'text',\n                  text: {\n                    '$blocksuite:internal:text$': true,\n                    delta: [\n                      {\n                        insert: o.node.value,\n                      },\n                    ],\n                  },\n                },\n                children: [],\n              },\n              'children'\n            )\n            .closeNode();\n          break;\n        }\n        case 'code': {\n          context\n            .openNode(\n              {\n                type: 'block',\n                id: nanoid(),\n                flavour: 'affine:code',\n                props: {\n                  language: o.node.lang ?? 'Plain Text',\n                  text: {\n                    '$blocksuite:internal:text$': true,\n                    delta: [\n                      {\n                        insert: o.node.value,\n                      },\n                    ],\n                  },\n                },\n                children: [],\n              },\n              'children'\n            )\n            .closeNode();\n          break;\n        }\n        case 'paragraph': {\n          context\n            .openNode(\n              {\n                type: 'block',\n                id: nanoid(),\n                flavour: 'affine:paragraph',\n                props: {\n                  type: 'text',\n                  text: {\n                    '$blocksuite:internal:text$': true,\n                    delta: this._mdastToDelta(o.node),\n                  },\n                },\n                children: [],\n              },\n              'children'\n            )\n            .closeNode();\n          break;\n        }\n        case 'heading': {\n          context\n            .openNode(\n              {\n                type: 'block',\n                id: nanoid(),\n                flavour: 'affine:paragraph',\n                props: {\n                  type: `h${o.node.depth}`,\n                  text: {\n                    '$blocksuite:internal:text$': true,\n                    delta: this._mdastToDelta(o.node),\n                  },\n                },\n                children: [],\n              },\n              'children'\n            )\n            .closeNode();\n          break;\n        }\n        case 'blockquote': {\n          context\n            .openNode(\n              {\n                type: 'block',\n                id: nanoid(),\n                flavour: 'affine:paragraph',\n                props: {\n                  type: 'quote',\n                  text: {\n                    '$blocksuite:internal:text$': true,\n                    delta: this._mdastToDelta(o.node),\n                  },\n                },\n                children: [],\n              },\n              'children'\n            )\n            .closeNode();\n          context.skipAllChildren();\n          break;\n        }\n        case 'list': {\n          context.setNodeContext('mdast:list:ordered', o.node.ordered);\n          break;\n        }\n        case 'listItem': {\n          context.openNode(\n            {\n              type: 'block',\n              id: nanoid(),\n              flavour: 'affine:list',\n              props: {\n                type:\n                  o.node.checked !== null\n                    ? 'todo'\n                    : context.getNodeContext('mdast:list:ordered')\n                      ? 'numbered'\n                      : 'bulleted',\n                text: {\n                  '$blocksuite:internal:text$': true,\n                  delta:\n                    o.node.children[0] &&\n                    o.node.children[0].type === 'paragraph'\n                      ? this._mdastToDelta(o.node.children[0])\n                      : [],\n                },\n                checked: o.node.checked ?? false,\n                collapsed: false,\n              },\n              children: [],\n            },\n            'children'\n          );\n          if (o.node.children[0] && o.node.children[0].type === 'paragraph') {\n            context.skipChildren(1);\n          }\n          break;\n        }\n        case 'thematicBreak': {\n          context\n            .openNode(\n              {\n                type: 'block',\n                id: nanoid(),\n                flavour: 'affine:divider',\n                props: {},\n                children: [],\n              },\n              'children'\n            )\n            .closeNode();\n          break;\n        }\n        case 'image': {\n          let blobId = '';\n          if (!assets) {\n            break;\n          }\n          if (!fetchable(o.node.url)) {\n            const imageURLSplit = o.node.url.split('/');\n            while (imageURLSplit.length > 0) {\n              const key = assets\n                .getPathBlobIdMap()\n                .get(decodeURIComponent(imageURLSplit.join('/')));\n              if (key) {\n                blobId = key;\n                break;\n              }\n              imageURLSplit.shift();\n            }\n          } else {\n            const res = await fetchImage(\n              o.node.url,\n              undefined,\n              this.configs.get('imageProxy') as string\n            );\n            if (!res) {\n              break;\n            }\n            const clonedRes = res.clone();\n            const file = new File(\n              [await res.blob()],\n              getFilenameFromContentDisposition(\n                res.headers.get('Content-Disposition') ?? ''\n              ) ??\n                (o.node.url.split('/').at(-1) ?? 'image') +\n                  '.' +\n                  (res.headers.get('Content-Type')?.split('/').at(-1) ?? 'png'),\n              {\n                type: res.headers.get('Content-Type') ?? '',\n              }\n            );\n            blobId = await sha(await clonedRes.arrayBuffer());\n            assets?.getAssets().set(blobId, file);\n            await assets?.writeToBlob(blobId);\n          }\n          context\n            .openNode(\n              {\n                type: 'block',\n                id: nanoid(),\n                flavour: 'affine:image',\n                props: {\n                  sourceId: blobId,\n                },\n                children: [],\n              },\n              'children'\n            )\n            .closeNode();\n          break;\n        }\n        case 'table': {\n          const viewsColumns = o.node.children[0].children.map(() => {\n            return {\n              id: nanoid(),\n              hide: false,\n              width: 180,\n            };\n          });\n          const cells = Object.create(null);\n          o.node.children.slice(1).forEach(row => {\n            const rowId = nanoid();\n            cells[rowId] = Object.create(null);\n            row.children.slice(1).forEach((cell, index) => {\n              cells[rowId][viewsColumns[index + 1].id] = {\n                columnId: viewsColumns[index + 1].id,\n                value: createText(\n                  cell.children\n                    .map(child => ('value' in child ? child.value : ''))\n                    .join('')\n                ),\n              };\n            });\n          });\n          const columns = o.node.children[0].children.map((_child, index) => {\n            return {\n              type: index === 0 ? 'title' : 'rich-text',\n              name: _child.children\n                .map(child => ('value' in child ? child.value : ''))\n                .join(''),\n              data: {},\n              id: viewsColumns[index].id,\n            };\n          });\n          context.openNode(\n            {\n              type: 'block',\n              id: nanoid(),\n              flavour: 'affine:database',\n              props: {\n                views: [\n                  {\n                    id: nanoid(),\n                    name: 'Table View',\n                    mode: 'table',\n                    columns: [],\n                    filter: {\n                      type: 'group',\n                      op: 'and',\n                      conditions: [],\n                    },\n                    header: {\n                      titleColumn: viewsColumns[0]?.id,\n                      iconColumn: 'type',\n                    },\n                  },\n                ],\n                title: {\n                  '$blocksuite:internal:text$': true,\n                  delta: [],\n                },\n                cells,\n                columns,\n              },\n              children: [],\n            },\n            'children'\n          );\n          context.setNodeContext('affine:table:rowid', Object.keys(cells));\n          context.skipChildren(1);\n          break;\n        }\n        case 'tableRow': {\n          context\n            .openNode({\n              type: 'block',\n              id:\n                (\n                  context.getNodeContext('affine:table:rowid') as Array<string>\n                ).shift() ?? nanoid(),\n              flavour: 'affine:paragraph',\n              props: {\n                text: {\n                  '$blocksuite:internal:text$': true,\n                  delta: this._mdastToDelta(o.node.children[0]),\n                },\n                type: 'text',\n              },\n              children: [],\n            })\n            .closeNode();\n          context.skipAllChildren();\n          break;\n        }\n      }\n    });\n    walker.setLeave((o, context) => {\n      switch (o.node.type) {\n        case 'listItem': {\n          context.closeNode();\n          break;\n        }\n        case 'table': {\n          context.closeNode();\n          break;\n        }\n      }\n    });\n    return walker.walk(markdown, snapshot);\n  };\n\n  private _traverseSnapshot = async (\n    snapshot: BlockSnapshot,\n    markdown: MarkdownAST,\n    assets?: AssetsManager\n  ) => {\n    const assetsIds: string[] = [];\n    const walker = new ASTWalker<BlockSnapshot, MarkdownAST>();\n    walker.setONodeTypeGuard(\n      (node): node is BlockSnapshot =>\n        BlockSnapshotSchema.safeParse(node).success\n    );\n    walker.setEnter(async (o, context) => {\n      const text = (o.node.props.text ?? { delta: [] }) as {\n        delta: DeltaInsert[];\n      };\n      const currentTNode = context.currentNode();\n      switch (o.node.flavour) {\n        case 'affine:code': {\n          context\n            .openNode(\n              {\n                type: 'code',\n                lang: (o.node.props.language as string) ?? null,\n                meta: null,\n                value: text.delta.map(delta => delta.insert).join(''),\n              },\n              'children'\n            )\n            .closeNode();\n          break;\n        }\n        case 'affine:paragraph': {\n          const paragraphDepth = (context.getGlobalContext(\n            'affine:paragraph:depth'\n          ) ?? 0) as number;\n          switch (o.node.props.type) {\n            case 'h1':\n            case 'h2':\n            case 'h3':\n            case 'h4':\n            case 'h5':\n            case 'h6': {\n              context\n                .openNode(\n                  {\n                    type: 'heading',\n                    depth: parseInt(o.node.props.type[1]) as Heading['depth'],\n                    children: this._deltaToMdAST(text.delta, paragraphDepth),\n                  },\n                  'children'\n                )\n                .closeNode();\n              break;\n            }\n            case 'text': {\n              context\n                .openNode(\n                  {\n                    type: 'paragraph',\n                    children: this._deltaToMdAST(text.delta, paragraphDepth),\n                  },\n                  'children'\n                )\n                .closeNode();\n              break;\n            }\n            case 'quote': {\n              context\n                .openNode(\n                  {\n                    type: 'blockquote',\n                    children: [],\n                  },\n                  'children'\n                )\n                .openNode(\n                  {\n                    type: 'paragraph',\n                    children: this._deltaToMdAST(text.delta),\n                  },\n                  'children'\n                )\n                .closeNode()\n                .closeNode();\n              break;\n            }\n          }\n          context.setGlobalContext(\n            'affine:paragraph:depth',\n            paragraphDepth + 1\n          );\n          break;\n        }\n        case 'affine:list': {\n          // check if the list is of the same type\n          // if true, add the list item to the list\n          // if false, create a new list\n          if (\n            context.getNodeContext('affine:list:parent') === o.parent &&\n            currentTNode.type === 'list' &&\n            currentTNode.ordered === (o.node.props.type === 'numbered') &&\n            isNullish(currentTNode.children[0].checked) ===\n              isNullish(\n                o.node.props.type === 'todo'\n                  ? (o.node.props.checked as boolean)\n                  : undefined\n              )\n          ) {\n            context\n              .openNode(\n                {\n                  type: 'listItem',\n                  checked:\n                    o.node.props.type === 'todo'\n                      ? (o.node.props.checked as boolean)\n                      : undefined,\n                  spread: false,\n                  children: [],\n                },\n                'children'\n              )\n              .openNode(\n                {\n                  type: 'paragraph',\n                  children: this._deltaToMdAST(text.delta),\n                },\n                'children'\n              )\n              .closeNode();\n          } else {\n            context\n              .openNode(\n                {\n                  type: 'list',\n                  ordered: o.node.props.type === 'numbered',\n                  spread: false,\n                  children: [],\n                },\n                'children'\n              )\n              .setNodeContext('affine:list:parent', o.parent)\n              .openNode(\n                {\n                  type: 'listItem',\n                  checked:\n                    o.node.props.type === 'todo'\n                      ? (o.node.props.checked as boolean)\n                      : undefined,\n                  spread: false,\n                  children: [],\n                },\n                'children'\n              )\n              .openNode(\n                {\n                  type: 'paragraph',\n                  children: this._deltaToMdAST(text.delta),\n                },\n                'children'\n              )\n              .closeNode();\n          }\n          break;\n        }\n        case 'affine:divider': {\n          context\n            .openNode(\n              {\n                type: 'thematicBreak',\n              },\n              'children'\n            )\n            .closeNode();\n          break;\n        }\n        case 'affine:image': {\n          const blobId = (o.node.props.sourceId ?? '') as string;\n          if (!assets) {\n            break;\n          }\n          await assets.readFromBlob(blobId);\n          const blob = assets.getAssets().get(blobId);\n          assetsIds.push(blobId);\n          if (!blob) {\n            break;\n          }\n          const blobName = getAssetName(assets.getAssets(), blobId);\n          context\n            .openNode(\n              {\n                type: 'paragraph',\n                children: [],\n              },\n              'children'\n            )\n            .openNode(\n              {\n                type: 'image',\n                url: `assets/${blobName}`,\n                title: (o.node.props.caption as string | undefined) ?? null,\n                alt: (blob as File).name ?? null,\n              },\n              'children'\n            )\n            .closeNode()\n            .closeNode();\n          break;\n        }\n        case 'affine:page': {\n          const title = (o.node.props.title ?? { delta: [] }) as {\n            delta: DeltaInsert[];\n          };\n          if (title.delta.length === 0) break;\n          context\n            .openNode(\n              {\n                type: 'heading',\n                depth: 1,\n                children: this._deltaToMdAST(title.delta, 0),\n              },\n              'children'\n            )\n            .closeNode();\n          break;\n        }\n        case 'affine:database': {\n          const rows: TableRow[] = [];\n          const columns = o.node.props.columns as Array<Column>;\n          const children = o.node.children;\n          const cells = o.node.props.cells as SerializedCells;\n          const createAstCell = (children: MarkdownAST[]) => ({\n            type: 'tableCell',\n            children,\n          });\n          const mdAstCells = Array.prototype.map.call(\n            children,\n            (v: BlockSnapshot) =>\n              Array.prototype.map.call(columns, col => {\n                const cell = cells[v.id]?.[col.id];\n                if (!cell && col.type !== 'title') {\n                  return createAstCell([{ type: 'text', value: '' }]);\n                }\n                switch (col.type) {\n                  case 'link':\n                  case 'progress':\n                  case 'number':\n                    return createAstCell([\n                      {\n                        type: 'text',\n                        value: cell.value as string,\n                      },\n                    ]);\n                  case 'rich-text':\n                    return createAstCell(\n                      this._deltaToMdAST(\n                        (cell.value as { delta: DeltaInsert[] }).delta\n                      )\n                    );\n                  case 'title':\n                    return createAstCell(\n                      this._deltaToMdAST(\n                        (v.props.text as { delta: DeltaInsert[] }).delta\n                      )\n                    );\n                  case 'date':\n                    return createAstCell([\n                      {\n                        type: 'text',\n                        value: format(\n                          new Date(cell.value as number),\n                          'yyyy-MM-dd'\n                        ),\n                      },\n                    ]);\n                  case 'select': {\n                    const value = col.data.options.find(\n                      (opt: Record<string, string>) => opt.id === cell.value\n                    )?.value;\n                    return createAstCell([{ type: 'text', value }]);\n                  }\n                  case 'multi-select': {\n                    const value = Array.prototype.map\n                      .call(\n                        cell.value,\n                        val =>\n                          col.data.options.find(\n                            (opt: Record<string, string>) => val === opt.id\n                          ).value\n                      )\n                      .filter(Boolean)\n                      .join(',');\n                    return createAstCell([{ type: 'text', value }]);\n                  }\n                  case 'checkbox': {\n                    return createAstCell([\n                      { type: 'text', value: cell.value as string },\n                    ]);\n                  }\n                  default:\n                    return createAstCell([\n                      { type: 'text', value: cell.value as string },\n                    ]);\n                }\n              })\n          );\n\n          // Handle first row.\n          if (Array.isArray(columns)) {\n            rows.push({\n              type: 'tableRow',\n              children: Array.prototype.map.call(columns, v =>\n                createAstCell([\n                  {\n                    type: 'text',\n                    value: v.name,\n                  },\n                ])\n              ) as [],\n            });\n          }\n\n          // Handle 2-... rows\n          Array.prototype.forEach.call(mdAstCells, children => {\n            rows.push({ type: 'tableRow', children });\n          });\n\n          context\n            .openNode({\n              type: 'table',\n              children: rows,\n            })\n            .closeNode();\n\n          context.skipAllChildren();\n          break;\n        }\n        case 'affine:embed-synced-doc': {\n          const type = this.configs.get('embedSyncedDocExportType');\n\n          // this context is used for nested sync block\n          if (\n            context.getGlobalContext('embed-synced-doc-counter') === undefined\n          ) {\n            context.setGlobalContext('embed-synced-doc-counter', 0);\n          }\n          let counter = context.getGlobalContext(\n            'embed-synced-doc-counter'\n          ) as number;\n          context.setGlobalContext('embed-synced-doc-counter', ++counter);\n\n          if (type === 'content') {\n            assertExists(o.node.props.pageId);\n            const syncedDocId = o.node.props.pageId as string;\n\n            const syncedDoc = this.job.collection.getDoc(syncedDocId);\n            if (!syncedDoc) break;\n\n            if (counter === 1) {\n              const syncedSnapshot = await this.job.docToSnapshot(syncedDoc);\n              if (syncedSnapshot) {\n                await walker.walkONode(syncedSnapshot.blocks);\n              }\n            } else {\n              // TODO(@L-Sun) may be use the nested content\n              context\n                .openNode({\n                  type: 'paragraph',\n                  children: [\n                    { type: 'text', value: syncedDoc.meta?.title ?? '' },\n                  ],\n                })\n                .closeNode();\n            }\n          }\n\n          break;\n        }\n        case 'affine:embed-loom':\n        case 'affine:embed-github':\n        case 'affine:embed-youtube':\n        case 'affine:embed-figma':\n        case 'affine:bookmark': {\n          // Parse as link\n          if (\n            typeof o.node.props.title !== 'string' ||\n            typeof o.node.props.url !== 'string'\n          ) {\n            break;\n          }\n          context\n            .openNode(\n              {\n                type: 'paragraph',\n                children: [],\n              },\n              'children'\n            )\n            .openNode(\n              {\n                type: 'link',\n                url: o.node.props.url,\n                children: [\n                  {\n                    type: 'text',\n                    value: o.node.props.title,\n                  },\n                ],\n              },\n              'children'\n            )\n            .closeNode()\n            .closeNode();\n          break;\n        }\n      }\n    });\n    walker.setLeave((o, context) => {\n      const currentTNode = context.currentNode();\n      const previousTNode = context.previousNode();\n      switch (o.node.flavour) {\n        case 'affine:paragraph': {\n          context.setGlobalContext(\n            'affine:paragraph:depth',\n            (context.getGlobalContext('affine:paragraph:depth') as number) - 1\n          );\n          break;\n        }\n        case 'affine:list': {\n          if (\n            context.getPreviousNodeContext('affine:list:parent') === o.parent &&\n            currentTNode.type === 'listItem' &&\n            previousTNode?.type === 'list' &&\n            previousTNode.ordered === (o.node.props.type === 'numbered') &&\n            isNullish(currentTNode.checked) ===\n              isNullish(\n                o.node.props.type === 'todo'\n                  ? (o.node.props.checked as boolean)\n                  : undefined\n              )\n          ) {\n            context.closeNode();\n            if (o.next?.flavour !== 'affine:list') {\n              // If the next node is not a list, close the list\n              context.closeNode();\n            }\n          } else {\n            context.closeNode().closeNode();\n          }\n          break;\n        }\n        case 'affine:embed-synced-doc': {\n          const counter = context.getGlobalContext(\n            'embed-synced-doc-counter'\n          ) as number;\n          context.setGlobalContext('embed-synced-doc-counter', counter - 1);\n          break;\n        }\n      }\n    });\n    return {\n      ast: (await walker.walk(snapshot, markdown)) as Root,\n      assetsIds,\n    };\n  };\n\n  private _astToMarkdown(ast: Root) {\n    return unified()\n      .use(remarkGfm)\n      .use(remarkStringify, {\n        resourceLink: true,\n      })\n      .stringify(ast)\n      .replace(/&#x20;\\n/g, ' \\n');\n  }\n\n  private _deltaToMdAST(\n    deltas: DeltaInsert<AffineTextAttributes>[],\n    depth = 0\n  ) {\n    if (depth > 0) {\n      deltas.unshift({ insert: ' '.repeat(4).repeat(depth) });\n    }\n    return deltas.map(delta => {\n      let mdast: MarkdownAST = {\n        type: 'text',\n        value: delta.attributes?.underline\n          ? `<u>${delta.insert}</u>`\n          : delta.insert,\n      };\n      if (delta.attributes?.reference) {\n        const title = this.configs.get(\n          'title:' + delta.attributes.reference.pageId\n        );\n        if (typeof title === 'string') {\n          mdast = {\n            type: 'text',\n            value: title,\n          };\n        }\n      }\n      if (delta.attributes?.code) {\n        mdast = {\n          type: 'inlineCode',\n          value: delta.insert,\n        };\n      }\n      if (delta.attributes?.bold) {\n        mdast = {\n          type: 'strong',\n          children: [mdast],\n        };\n      }\n      if (delta.attributes?.italic) {\n        mdast = {\n          type: 'emphasis',\n          children: [mdast],\n        };\n      }\n      if (delta.attributes?.strike) {\n        mdast = {\n          type: 'delete',\n          children: [mdast],\n        };\n      }\n      if (delta.attributes?.link) {\n        if (delta.insert === '') {\n          mdast = {\n            type: 'text',\n            value: delta.attributes.link,\n          };\n        } else if (delta.insert !== delta.attributes.link) {\n          mdast = {\n            type: 'link',\n            url: delta.attributes.link,\n            children: [mdast],\n          };\n        }\n      }\n      return mdast;\n    });\n  }\n\n  private _markdownToAst(markdown: Markdown) {\n    return unified().use(remarkParse).use(remarkGfm).parse(markdown);\n  }\n\n  private _mdastToDelta(ast: MarkdownAST): DeltaInsert[] {\n    switch (ast.type) {\n      case 'text': {\n        return [{ insert: ast.value }];\n      }\n      case 'inlineCode': {\n        return [{ insert: ast.value, attributes: { code: true } }];\n      }\n      case 'strong': {\n        return ast.children.flatMap(child =>\n          this._mdastToDelta(child).map(delta => {\n            delta.attributes = { ...delta.attributes, bold: true };\n            return delta;\n          })\n        );\n      }\n      case 'emphasis': {\n        return ast.children.flatMap(child =>\n          this._mdastToDelta(child).map(delta => {\n            delta.attributes = { ...delta.attributes, italic: true };\n            return delta;\n          })\n        );\n      }\n      case 'delete': {\n        return ast.children.flatMap(child =>\n          this._mdastToDelta(child).map(delta => {\n            delta.attributes = { ...delta.attributes, strike: true };\n            return delta;\n          })\n        );\n      }\n      case 'link': {\n        return ast.children.flatMap(child =>\n          this._mdastToDelta(child).map(delta => {\n            delta.attributes = { ...delta.attributes, link: ast.url };\n            return delta;\n          })\n        );\n      }\n      case 'list': {\n        return [];\n      }\n    }\n    return 'children' in ast\n      ? ast.children.flatMap(child => this._mdastToDelta(child))\n      : [];\n  }\n\n  async fromBlockSnapshot({\n    snapshot,\n    assets,\n  }: FromBlockSnapshotPayload): Promise<FromBlockSnapshotResult<Markdown>> {\n    const root: Root = {\n      type: 'root',\n      children: [],\n    };\n    const { ast, assetsIds } = await this._traverseSnapshot(\n      snapshot,\n      root,\n      assets\n    );\n    return {\n      file: this._astToMarkdown(ast),\n      assetsIds,\n    };\n  }\n\n  async fromDocSnapshot({\n    snapshot,\n    assets,\n  }: FromDocSnapshotPayload): Promise<FromDocSnapshotResult<Markdown>> {\n    let buffer = '';\n    const { file, assetsIds } = await this.fromBlockSnapshot({\n      snapshot: snapshot.blocks,\n      assets,\n    });\n    buffer += file;\n    return {\n      file: buffer,\n      assetsIds,\n    };\n  }\n\n  async fromSliceSnapshot({\n    snapshot,\n    assets,\n  }: FromSliceSnapshotPayload): Promise<FromSliceSnapshotResult<Markdown>> {\n    let buffer = '';\n    const sliceAssetsIds: string[] = [];\n    for (const contentSlice of snapshot.content) {\n      const root: Root = {\n        type: 'root',\n        children: [],\n      };\n      const { ast, assetsIds } = await this._traverseSnapshot(\n        contentSlice,\n        root,\n        assets\n      );\n      sliceAssetsIds.push(...assetsIds);\n      buffer += this._astToMarkdown(ast);\n    }\n    const markdown =\n      buffer.match(/\\n/g)?.length === 1 ? buffer.trimEnd() : buffer;\n    return {\n      file: markdown,\n      assetsIds: sliceAssetsIds,\n    };\n  }\n\n  async toBlockSnapshot(\n    payload: ToBlockSnapshotPayload<Markdown>\n  ): Promise<BlockSnapshot> {\n    const markdownAst = this._markdownToAst(payload.file);\n    const blockSnapshotRoot = {\n      type: 'block',\n      id: nanoid(),\n      flavour: 'affine:note',\n      props: {\n        xywh: '[0,0,800,95]',\n        background: DEFAULT_NOTE_BACKGROUND_COLOR,\n        index: 'a0',\n        hidden: false,\n        displayMode: NoteDisplayMode.DocAndEdgeless,\n      },\n      children: [],\n    };\n    return this._traverseMarkdown(\n      markdownAst,\n      blockSnapshotRoot as BlockSnapshot,\n      payload.assets\n    );\n  }\n\n  async toDocSnapshot(\n    payload: ToDocSnapshotPayload<Markdown>\n  ): Promise<DocSnapshot> {\n    const markdownAst = this._markdownToAst(payload.file);\n    const blockSnapshotRoot = {\n      type: 'block',\n      id: nanoid(),\n      flavour: 'affine:note',\n      props: {\n        xywh: '[0,0,800,95]',\n        background: DEFAULT_NOTE_BACKGROUND_COLOR,\n        index: 'a0',\n        hidden: false,\n        displayMode: NoteDisplayMode.DocAndEdgeless,\n      },\n      children: [],\n    };\n    return {\n      type: 'page',\n      meta: {\n        id: nanoid(),\n        title: 'Untitled',\n        createDate: Date.now(),\n        tags: [],\n      },\n      blocks: {\n        type: 'block',\n        id: nanoid(),\n        flavour: 'affine:page',\n        props: {\n          title: {\n            '$blocksuite:internal:text$': true,\n            delta: [\n              {\n                insert: 'Untitled',\n              },\n            ],\n          },\n        },\n        children: [\n          {\n            type: 'block',\n            id: nanoid(),\n            flavour: 'affine:surface',\n            props: {\n              elements: {},\n            },\n            children: [],\n          },\n          await this._traverseMarkdown(\n            markdownAst,\n            blockSnapshotRoot as BlockSnapshot,\n            payload.assets\n          ),\n        ],\n      },\n    };\n  }\n\n  async toSliceSnapshot(\n    payload: MarkdownToSliceSnapshotPayload\n  ): Promise<SliceSnapshot | null> {\n    let codeFence = '';\n    payload.file = payload.file\n      .split('\\n')\n      .map(line => {\n        if (line.trimStart().startsWith('-')) {\n          return line;\n        }\n        let trimmedLine = line.trimStart();\n        if (!codeFence && trimmedLine.startsWith('```')) {\n          codeFence = trimmedLine.substring(\n            0,\n            trimmedLine.lastIndexOf('```') + 3\n          );\n          if (codeFence.split('').every(c => c === '`')) {\n            return line;\n          }\n          codeFence = '';\n        }\n        if (!codeFence && trimmedLine.startsWith('~~~')) {\n          codeFence = trimmedLine.substring(\n            0,\n            trimmedLine.lastIndexOf('~~~') + 3\n          );\n          if (codeFence.split('').every(c => c === '~')) {\n            return line;\n          }\n          codeFence = '';\n        }\n        if (\n          !!codeFence &&\n          trimmedLine.startsWith(codeFence) &&\n          trimmedLine.lastIndexOf(codeFence) === 0\n        ) {\n          codeFence = '';\n        }\n        if (codeFence) {\n          return line;\n        }\n\n        trimmedLine = trimmedLine.trimEnd();\n        if (!trimmedLine.startsWith('<') && !trimmedLine.endsWith('>')) {\n          // check if it is a url link and wrap it with the angle brackets\n          // sometimes the url includes emphasis `_` that will break URL parsing\n          //\n          // eg. /MuawcBMT1Mzvoar09-_66?mode=page&blockIds=rL2_GXbtLU2SsJVfCSmh_\n          // https://www.markdownguide.org/basic-syntax/#urls-and-email-addresses\n          try {\n            const valid =\n              URL.canParse?.(trimmedLine) ?? Boolean(new URL(trimmedLine));\n            if (valid) {\n              return `<${trimmedLine}>`;\n            }\n          } catch (err) {\n            console.log(err);\n          }\n        }\n\n        return line.replace(/^ /, '&#x20;');\n      })\n      .join('\\n');\n    const markdownAst = this._markdownToAst(payload.file);\n    const blockSnapshotRoot = {\n      type: 'block',\n      id: nanoid(),\n      flavour: 'affine:note',\n      props: {\n        xywh: '[0,0,800,95]',\n        background: DEFAULT_NOTE_BACKGROUND_COLOR,\n        index: 'a0',\n        hidden: false,\n        displayMode: NoteDisplayMode.DocAndEdgeless,\n      },\n      children: [],\n    };\n    const contentSlice = (await this._traverseMarkdown(\n      markdownAst,\n      blockSnapshotRoot as BlockSnapshot,\n      payload.assets\n    )) as BlockSnapshot;\n    if (contentSlice.children.length === 0) {\n      return null;\n    }\n    return {\n      type: 'slice',\n      content: [contentSlice],\n      pageVersion: payload.pageVersion,\n      workspaceVersion: payload.workspaceVersion,\n      workspaceId: payload.workspaceId,\n      pageId: payload.pageId,\n    };\n  }\n}\n"]}