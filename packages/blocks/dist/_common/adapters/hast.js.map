{"version":3,"file":"hast.js","sourceRoot":"","sources":["../../../src/_common/adapters/hast.ts"],"names":[],"mappings":"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","sourcesContent":["import type { Element, ElementContent, Root, RootContentMap, Text } from 'hast';\n\nexport type HastUnionType<\n  K extends keyof RootContentMap,\n  V extends RootContentMap[K],\n> = V;\n\nexport type HtmlAST =\n  | HastUnionType<keyof RootContentMap, RootContentMap[keyof RootContentMap]>\n  | Root;\n\nexport const hastGetTextContent = (\n  ast: HtmlAST | undefined,\n  defaultStr = ''\n): string => {\n  if (!ast) {\n    return defaultStr;\n  }\n  switch (ast.type) {\n    case 'text': {\n      return ast.value.replace(/\\s+/g, ' ');\n    }\n    case 'element': {\n      switch (ast.tagName) {\n        case 'br': {\n          return '\\n';\n        }\n      }\n      return ast.children.map(child => hastGetTextContent(child)).join('');\n    }\n  }\n  return defaultStr;\n};\n\nexport const hastGetElementChildren = (ast: HtmlAST | undefined): Element[] => {\n  if (!ast) {\n    return [];\n  }\n  if (ast.type === 'element') {\n    return ast.children.filter(child => child.type === 'element') as Element[];\n  }\n  return [];\n};\n\nexport const hastGetTextChildren = (ast: HtmlAST | undefined): Text[] => {\n  if (!ast) {\n    return [];\n  }\n  if (ast.type === 'element') {\n    return ast.children.filter(child => child.type === 'text') as Text[];\n  }\n  return [];\n};\n\nexport const hastGetTextChildrenOnlyAst = (ast: Element): Element => {\n  return {\n    ...ast,\n    children: hastGetTextChildren(ast),\n  };\n};\n\nconst querySelectorTag = (\n  ast: HtmlAST,\n  tagName: string\n): Element | undefined => {\n  if (ast.type === 'element') {\n    if (ast.tagName === tagName) {\n      return ast;\n    }\n    for (const child of ast.children) {\n      const result = querySelectorTag(child, tagName);\n      if (result) {\n        return result;\n      }\n    }\n  }\n  return undefined;\n};\n\nconst querySelectorClass = (\n  ast: HtmlAST,\n  className: string\n): Element | undefined => {\n  if (ast.type === 'element') {\n    if (\n      Array.isArray(ast.properties?.className) &&\n      ast.properties.className.includes(className)\n    ) {\n      return ast;\n    }\n    for (const child of ast.children) {\n      const result = querySelectorClass(child, className);\n      if (result) {\n        return result;\n      }\n    }\n  }\n  return undefined;\n};\n\nconst querySelectorId = (ast: HtmlAST, id: string): Element | undefined => {\n  if (ast.type === 'element') {\n    if (ast.properties.id === id) {\n      return ast;\n    }\n    for (const child of ast.children) {\n      const result = querySelectorId(child, id);\n      if (result) {\n        return result;\n      }\n    }\n  }\n  return undefined;\n};\n\nexport const hastQuerySelector = (\n  ast: HtmlAST,\n  selector: string\n): Element | undefined => {\n  if (ast.type === 'root') {\n    for (const child of ast.children) {\n      const result = hastQuerySelector(child, selector);\n      if (result) {\n        return result;\n      }\n    }\n  } else if (ast.type === 'element') {\n    if (selector.startsWith('.')) {\n      return querySelectorClass(ast, selector.slice(1));\n    } else if (selector.startsWith('#')) {\n      return querySelectorId(ast, selector.slice(1));\n    } else {\n      return querySelectorTag(ast, selector);\n    }\n  }\n  return undefined;\n};\n\nexport const hastFlatNodes = (\n  ast: HtmlAST,\n  expression: (tagName: string) => boolean\n): HtmlAST => {\n  if (ast.type === 'element') {\n    const children = ast.children.map(child =>\n      hastFlatNodes(child, expression)\n    );\n    return {\n      ...ast,\n      children: children.flatMap(child => {\n        if (child.type === 'element') {\n          if (expression(child.tagName)) {\n            return child.children;\n          }\n        }\n        return child;\n      }) as ElementContent[],\n    };\n  }\n  return ast;\n};\n"]}