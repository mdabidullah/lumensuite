{"version":3,"file":"notion-html.js","sourceRoot":"","sources":["../../../src/_common/adapters/notion-html.ts"],"names":[],"mappings":"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","sourcesContent":["import type { DeltaInsert } from '@lumensuite/inline';\n\nimport {\n  DEFAULT_NOTE_BACKGROUND_COLOR,\n  NoteDisplayMode,\n} from '@lumensuite/affine-model';\nimport { getFilenameFromContentDisposition } from '@lumensuite/affine-shared/utils';\nimport { getTagColor } from '@lumensuite/data-view';\nimport { LumenSuiteError, ErrorCode } from '@lumensuite/global/exceptions';\nimport { isEqual, sha } from '@lumensuite/global/utils';\nimport {\n  type AssetsManager,\n  ASTWalker,\n  BaseAdapter,\n  type BlockSnapshot,\n  type DocSnapshot,\n  type FromBlockSnapshotPayload,\n  type FromBlockSnapshotResult,\n  type FromDocSnapshotPayload,\n  type FromDocSnapshotResult,\n  type FromSliceSnapshotPayload,\n  type FromSliceSnapshotResult,\n  getAssetName,\n  nanoid,\n  type SliceSnapshot,\n} from '@lumensuite/store';\nimport { collapseWhiteSpace } from 'collapse-white-space';\nimport rehypeParse from 'rehype-parse';\nimport { unified } from 'unified';\n\nimport {\n  hastGetElementChildren,\n  hastGetTextChildrenOnlyAst,\n  hastGetTextContent,\n  hastQuerySelector,\n  type HtmlAST,\n} from './hast.js';\nimport { createText, fetchable, fetchImage, isText } from './utils.js';\n\nexport type NotionHtml = string;\n\ntype NotionHtmlToSliceSnapshotPayload = {\n  file: NotionHtml;\n  assets?: AssetsManager;\n  blockVersions: Record<string, number>;\n  pageVersion: number;\n  workspaceVersion: number;\n  workspaceId: string;\n  pageId: string;\n};\n\ntype NotionHtmlToDocSnapshotPayload = {\n  file: NotionHtml;\n  assets?: AssetsManager;\n  pageId?: string;\n  pageMap?: Map<string, string>;\n};\n\ntype NotionHtmlToBlockSnapshotPayload = NotionHtmlToDocSnapshotPayload;\n\nconst ColumnClassMap: Record<string, string> = {\n  typesSelect: 'select',\n  typesMultipleSelect: 'multi-select',\n  typesNumber: 'number',\n  typesCheckbox: 'checkbox',\n  typesText: 'rich-text',\n  typesTitle: 'title',\n};\n\ntype BlocksuiteTableColumn = {\n  type: string;\n  name: string;\n  data: {\n    options?: {\n      id: string;\n      value: string;\n      color: string;\n    }[];\n  };\n  id: string;\n};\n\ntype BlocksuiteTableRow = Record<\n  string,\n  {\n    columnId: string;\n    value: unknown;\n  }\n>;\n\nexport class NotionHtmlAdapter extends BaseAdapter<NotionHtml> {\n  private _hastToDelta = (\n    ast: HtmlAST,\n    option: {\n      trim?: boolean;\n      pre?: boolean;\n      pageMap?: Map<string, string>;\n    } = { trim: true, pre: false }\n  ): DeltaInsert<object>[] => {\n    return this._hastToDeltaSpreaded(ast, option).reduce((acc, cur) => {\n      if (acc.length === 0) {\n        return [cur];\n      }\n      const last = acc[acc.length - 1];\n      if (\n        typeof last.insert === 'string' &&\n        typeof cur.insert === 'string' &&\n        isEqual(last.attributes, cur.attributes)\n      ) {\n        last.insert += cur.insert;\n        return acc;\n      }\n      return [...acc, cur];\n    }, [] as DeltaInsert<object>[]);\n  };\n\n  private _hastToDeltaSpreaded = (\n    ast: HtmlAST,\n    option: {\n      trim?: boolean;\n      pre?: boolean;\n      pageMap?: Map<string, string>;\n    } = { trim: true, pre: false }\n  ): DeltaInsert<object>[] => {\n    if (option.trim === undefined) {\n      option.trim = true;\n    }\n    switch (ast.type) {\n      case 'text': {\n        if (option.pre) {\n          return [{ insert: ast.value }];\n        }\n        if (option.trim) {\n          const value = collapseWhiteSpace(ast.value, { trim: option.trim });\n          if (value) {\n            return [{ insert: value }];\n          }\n          return [];\n        }\n        if (ast.value) {\n          return [{ insert: collapseWhiteSpace(ast.value) }];\n        }\n        return [];\n      }\n      case 'element': {\n        switch (ast.tagName) {\n          case 'ol':\n          case 'ul': {\n            return [];\n          }\n          case 'span': {\n            return ast.children.flatMap(child =>\n              this._hastToDeltaSpreaded(child, option)\n            );\n          }\n          case 'strong': {\n            return ast.children.flatMap(child =>\n              this._hastToDeltaSpreaded(child, option).map(delta => {\n                delta.attributes = { ...delta.attributes, bold: true };\n                return delta;\n              })\n            );\n          }\n          case 'em': {\n            return ast.children.flatMap(child =>\n              this._hastToDeltaSpreaded(child, option).map(delta => {\n                delta.attributes = { ...delta.attributes, italic: true };\n                return delta;\n              })\n            );\n          }\n          case 'code': {\n            return ast.children.flatMap(child =>\n              this._hastToDeltaSpreaded(child, option).map(delta => {\n                delta.attributes = { ...delta.attributes, code: true };\n                return delta;\n              })\n            );\n          }\n          case 'del': {\n            return ast.children.flatMap(child =>\n              this._hastToDeltaSpreaded(child, option).map(delta => {\n                delta.attributes = { ...delta.attributes, strike: true };\n                return delta;\n              })\n            );\n          }\n          case 'u': {\n            return ast.children.flatMap(child =>\n              this._hastToDeltaSpreaded(child, option).map(delta => {\n                delta.attributes = { ...delta.attributes, underline: true };\n                return delta;\n              })\n            );\n          }\n          case 'a': {\n            const href = ast.properties?.href;\n            if (typeof href !== 'string') {\n              return [];\n            }\n            return ast.children.flatMap(child =>\n              this._hastToDeltaSpreaded(child, option).map(delta => {\n                if (option.pageMap) {\n                  const pageId = option.pageMap.get(decodeURIComponent(href));\n                  if (pageId) {\n                    delta.attributes = {\n                      ...delta.attributes,\n                      reference: {\n                        type: 'LinkedPage',\n                        pageId,\n                      },\n                    };\n                    delta.insert = ' ';\n                    return delta;\n                  }\n                }\n                if (href.startsWith('http')) {\n                  delta.attributes = {\n                    ...delta.attributes,\n                    link: href,\n                  };\n                  return delta;\n                }\n                return delta;\n              })\n            );\n          }\n          case 'mark': {\n            // TODO: add support for highlight\n            return ast.children.flatMap(child =>\n              this._hastToDeltaSpreaded(child, option).map(delta => {\n                delta.attributes = { ...delta.attributes };\n                return delta;\n              })\n            );\n          }\n        }\n      }\n    }\n    return 'children' in ast\n      ? ast.children.flatMap(child => this._hastToDeltaSpreaded(child, option))\n      : [];\n  };\n\n  private _traverseNotionHtml = async (\n    html: HtmlAST,\n    snapshot: BlockSnapshot,\n    assets?: AssetsManager,\n    pageMap?: Map<string, string>\n  ) => {\n    const walker = new ASTWalker<HtmlAST, BlockSnapshot>();\n    walker.setONodeTypeGuard(\n      (node): node is HtmlAST =>\n        'type' in (node as object) && (node as HtmlAST).type !== undefined\n    );\n    walker.setEnter(async (o, context) => {\n      if (o.node.type !== 'element') {\n        return;\n      }\n      switch (o.node.tagName) {\n        case 'header': {\n          context.skipAllChildren();\n          break;\n        }\n        case 'img': {\n          if (!assets) {\n            break;\n          }\n          if (context.getGlobalContext('hast:disableimg')) {\n            break;\n          }\n          const image = o.node;\n          const imageURL =\n            typeof image?.properties.src === 'string'\n              ? image.properties.src\n              : '';\n          if (imageURL) {\n            let blobId = '';\n            if (!fetchable(imageURL)) {\n              const imageURLSplit = imageURL.split('/');\n              while (imageURLSplit.length > 0) {\n                const key = assets\n                  .getPathBlobIdMap()\n                  .get(decodeURIComponent(imageURLSplit.join('/')));\n                if (key) {\n                  blobId = key;\n                  break;\n                }\n                imageURLSplit.shift();\n              }\n            } else {\n              const res = await fetchImage(\n                imageURL,\n                undefined,\n                this.configs.get('imageProxy') as string\n              );\n              if (!res) {\n                break;\n              }\n              const clonedRes = res.clone();\n              const name =\n                getFilenameFromContentDisposition(\n                  res.headers.get('Content-Disposition') ?? ''\n                ) ??\n                imageURL.split('/').at(-1) ??\n                'image' +\n                  '.' +\n                  (res.headers.get('Content-Type')?.split('/').at(-1) ?? 'png');\n              const file = new File([await res.blob()], name, {\n                type: res.headers.get('Content-Type') ?? '',\n              });\n              blobId = await sha(await clonedRes.arrayBuffer());\n              assets?.getAssets().set(blobId, file);\n              await assets?.writeToBlob(blobId);\n            }\n            context\n              .openNode(\n                {\n                  type: 'block',\n                  id: nanoid(),\n                  flavour: 'affine:image',\n                  props: {\n                    sourceId: blobId,\n                  },\n                  children: [],\n                },\n                'children'\n              )\n              .closeNode();\n            context.skipAllChildren();\n            break;\n          }\n          break;\n        }\n        case 'pre': {\n          const code = hastQuerySelector(o.node, 'code');\n          if (!code) {\n            break;\n          }\n          const codeText =\n            code.children.length === 1 && code.children[0].type === 'text'\n              ? code.children[0]\n              : { ...code, tag: 'div' };\n          context\n            .openNode(\n              {\n                type: 'block',\n                id: nanoid(),\n                flavour: 'affine:code',\n                props: {\n                  language: 'Plain Text',\n                  text: {\n                    '$lumensuite:internal:text$': true,\n                    delta: this._hastToDelta(codeText, {\n                      trim: false,\n                      pre: true,\n                    }),\n                  },\n                },\n                children: [],\n              },\n              'children'\n            )\n            .closeNode();\n          context.skipAllChildren();\n          break;\n        }\n        case 'blockquote': {\n          context.setGlobalContext('hast:blockquote', true);\n          context\n            .openNode(\n              {\n                type: 'block',\n                id: nanoid(),\n                flavour: 'affine:paragraph',\n                props: {\n                  type: 'quote',\n                  text: {\n                    '$lumensuite:internal:text$': true,\n                    delta: this._hastToDelta(\n                      hastGetTextChildrenOnlyAst(o.node),\n                      { pageMap }\n                    ),\n                  },\n                },\n                children: [],\n              },\n              'children'\n            )\n            .closeNode();\n          break;\n        }\n        case 'p': {\n          // Workaround for Notion's bug\n          // https://html.spec.whatwg.org/multipage/grouping-content.html#the-p-element\n          if (!o.node.properties.id) {\n            break;\n          }\n          context.openNode(\n            {\n              type: 'block',\n              id: nanoid(),\n              flavour: 'affine:paragraph',\n              props: {\n                type: context.getGlobalContext('hast:blockquote')\n                  ? 'quote'\n                  : 'text',\n                text: {\n                  '$lumensuite:internal:text$': true,\n                  delta: this._hastToDelta(o.node, { pageMap }),\n                },\n              },\n              children: [],\n            },\n            'children'\n          );\n          break;\n        }\n        case 'h1':\n        case 'h2':\n        case 'h3':\n        case 'h4':\n        case 'h5':\n        case 'h6': {\n          context\n            .openNode(\n              {\n                type: 'block',\n                id: nanoid(),\n                flavour: 'affine:paragraph',\n                props: {\n                  type: o.node.tagName,\n                  text: {\n                    '$lumensuite:internal:text$': true,\n                    delta: this._hastToDelta(o.node, { pageMap }),\n                  },\n                },\n                children: [],\n              },\n              'children'\n            )\n            .closeNode();\n          break;\n        }\n        case 'ul':\n        case 'ol': {\n          context.setNodeContext('hast:list:type', 'bulleted');\n          if (o.node.tagName === 'ol') {\n            context.setNodeContext('hast:list:type', 'numbered');\n          } else if (Array.isArray(o.node.properties?.className)) {\n            if (o.node.properties.className.includes('to-do-list')) {\n              context.setNodeContext('hast:list:type', 'todo');\n            } else if (o.node.properties.className.includes('toggle')) {\n              context.setNodeContext('hast:list:type', 'toggle');\n            } else if (o.node.properties.className.includes('bulleted-list')) {\n              context.setNodeContext('hast:list:type', 'bulleted');\n            }\n          }\n          break;\n        }\n        case 'li': {\n          const firstElementChild = hastGetElementChildren(o.node)[0];\n          const listType = context.getNodeContext('hast:list:type');\n          context.openNode(\n            {\n              type: 'block',\n              id: nanoid(),\n              flavour: 'affine:list',\n              props: {\n                type: listType,\n                text: {\n                  '$lumensuite:internal:text$': true,\n                  delta:\n                    listType !== 'toggle'\n                      ? this._hastToDelta(o.node, { pageMap })\n                      : this._hastToDelta(\n                          hastQuerySelector(o.node, 'summary') ?? o.node,\n                          { pageMap }\n                        ),\n                },\n                checked:\n                  listType === 'todo'\n                    ? firstElementChild &&\n                      Array.isArray(firstElementChild.properties?.className) &&\n                      firstElementChild.properties.className.includes(\n                        'checkbox-on'\n                      )\n                    : false,\n                collapsed:\n                  listType === 'toggle'\n                    ? firstElementChild &&\n                      firstElementChild.tagName === 'details' &&\n                      firstElementChild.properties.open === undefined\n                    : false,\n              },\n              children: [],\n            },\n            'children'\n          );\n          break;\n        }\n        case 'hr': {\n          context\n            .openNode(\n              {\n                type: 'block',\n                id: nanoid(),\n                flavour: 'affine:divider',\n                props: {},\n                children: [],\n              },\n              'children'\n            )\n            .closeNode();\n          break;\n        }\n        case 'figure': {\n          // Notion page link\n          if (hastQuerySelector(o.node, '.link-to-page')) {\n            context\n              .openNode(\n                {\n                  type: 'block',\n                  id: nanoid(),\n                  flavour: 'affine:paragraph',\n                  props: {\n                    type: 'text',\n                    text: {\n                      '$lumensuite:internal:text$': true,\n                      delta: this._hastToDelta(o.node, { pageMap }),\n                    },\n                  },\n                  children: [],\n                },\n                'children'\n              )\n              .closeNode();\n            context.skipAllChildren();\n            break;\n          }\n          // Notion callout\n          if (hastQuerySelector(o.node, '.callout')) {\n            context\n              .openNode(\n                {\n                  type: 'block',\n                  id: nanoid(),\n                  flavour: 'affine:paragraph',\n                  props: {\n                    type: 'text',\n                    text: {\n                      '$lumensuite:internal:text$': true,\n                      delta: this._hastToDelta(o.node, { pageMap }),\n                    },\n                  },\n                  children: [],\n                },\n                'children'\n              )\n              .closeNode();\n            context.skipAllChildren();\n            break;\n          }\n          // Notion bookmark\n          const bookmark = hastQuerySelector(o.node, '.bookmark');\n          if (bookmark) {\n            const bookmarkURL = bookmark.properties?.href;\n            const bookmarkTitle = hastGetTextContent(\n              hastQuerySelector(bookmark, '.bookmark-title')\n            );\n            const bookmarkDescription = hastGetTextContent(\n              hastQuerySelector(bookmark, '.bookmark-description')\n            );\n            const bookmarkIcon = hastQuerySelector(bookmark, '.bookmark-icon');\n            const bookmarkIconURL =\n              typeof bookmarkIcon?.properties?.src === 'string'\n                ? bookmarkIcon.properties.src\n                : '';\n            context\n              .openNode(\n                {\n                  type: 'block',\n                  id: nanoid(),\n                  flavour: 'affine:bookmark',\n                  props: {\n                    type: 'card',\n                    url: bookmarkURL ?? '',\n                    title: bookmarkTitle,\n                    description: bookmarkDescription,\n                    icon: bookmarkIconURL,\n                  },\n                  children: [],\n                },\n                'children'\n              )\n              .closeNode();\n            context.skipAllChildren();\n            break;\n          }\n          if (!assets) {\n            break;\n          }\n          // Notion image\n          const imageFigureWrapper = hastQuerySelector(o.node, '.image');\n          let imageURL = '';\n          if (imageFigureWrapper) {\n            const image = hastQuerySelector(imageFigureWrapper, 'img');\n            imageURL =\n              typeof image?.properties.src === 'string'\n                ? image.properties.src\n                : '';\n          }\n          if (imageURL) {\n            let blobId = '';\n            if (!fetchable(imageURL)) {\n              const imageURLSplit = imageURL.split('/');\n              while (imageURLSplit.length > 0) {\n                const key = assets\n                  .getPathBlobIdMap()\n                  .get(decodeURIComponent(imageURLSplit.join('/')));\n                if (key) {\n                  blobId = key;\n                  break;\n                }\n                imageURLSplit.shift();\n              }\n            } else {\n              const res = await fetchImage(\n                imageURL,\n                undefined,\n                this.configs.get('imageProxy') as string\n              );\n              if (!res) {\n                break;\n              }\n              const clonedRes = res.clone();\n              const name =\n                getFilenameFromContentDisposition(\n                  res.headers.get('Content-Disposition') ?? ''\n                ) ??\n                (imageURL.split('/').at(-1) ?? 'image') +\n                  '.' +\n                  (res.headers.get('Content-Type')?.split('/').at(-1) ?? 'png');\n              const file = new File([await res.blob()], name, {\n                type: res.headers.get('Content-Type') ?? '',\n              });\n              blobId = await sha(await clonedRes.arrayBuffer());\n              assets?.getAssets().set(blobId, file);\n              await assets?.writeToBlob(blobId);\n            }\n            context\n              .openNode(\n                {\n                  type: 'block',\n                  id: nanoid(),\n                  flavour: 'affine:image',\n                  props: {\n                    sourceId: blobId,\n                  },\n                  children: [],\n                },\n                'children'\n              )\n              .closeNode();\n            context.skipAllChildren();\n            break;\n          }\n          // Notion embeded\n          const embededFigureWrapper = hastQuerySelector(o.node, '.source');\n          let embededURL = '';\n          if (embededFigureWrapper) {\n            const embedA = hastQuerySelector(embededFigureWrapper, 'a');\n            embededURL =\n              typeof embedA?.properties.href === 'string'\n                ? embedA.properties.href\n                : '';\n          }\n          if (embededURL) {\n            let blobId = '';\n            let name = '';\n            let type = '';\n            let size = 0;\n            if (!fetchable(embededURL)) {\n              const embededURLSplit = embededURL.split('/');\n              while (embededURLSplit.length > 0) {\n                const key = assets\n                  .getPathBlobIdMap()\n                  .get(decodeURIComponent(embededURLSplit.join('/')));\n                if (key) {\n                  blobId = key;\n                  break;\n                }\n                embededURLSplit.shift();\n              }\n              const value = assets.getAssets().get(blobId);\n              if (value) {\n                name = getAssetName(assets.getAssets(), blobId);\n                size = value.size;\n                type = value.type;\n              }\n            } else {\n              const res = await fetch(embededURL).catch(error => {\n                console.warn('Error fetching embed:', error);\n                return null;\n              });\n              if (!res) {\n                break;\n              }\n              const resCloned = res.clone();\n              name =\n                getFilenameFromContentDisposition(\n                  res.headers.get('Content-Disposition') ?? ''\n                ) ??\n                (embededURL.split('/').at(-1) ?? 'file') +\n                  '.' +\n                  (res.headers.get('Content-Type')?.split('/').at(-1) ??\n                    'blob');\n              const file = new File([await res.blob()], name, {\n                type: res.headers.get('Content-Type') ?? '',\n              });\n              size = file.size;\n              type = file.type;\n              blobId = await sha(await resCloned.arrayBuffer());\n              assets?.getAssets().set(blobId, file);\n              await assets?.writeToBlob(blobId);\n            }\n            context\n              .openNode(\n                {\n                  type: 'block',\n                  id: nanoid(),\n                  flavour: 'affine:attachment',\n                  props: {\n                    name,\n                    size,\n                    type,\n                    sourceId: blobId,\n                  },\n                  children: [],\n                },\n                'children'\n              )\n              .closeNode();\n            context.skipAllChildren();\n            break;\n          }\n          break;\n        }\n        case 'th': {\n          const columnId = nanoid();\n          const columnTypeClass = hastQuerySelector(o.node, 'svg')?.properties\n            ?.className;\n          const columnType = Array.isArray(columnTypeClass)\n            ? (ColumnClassMap[columnTypeClass[0]] ?? 'rich-text')\n            : 'rich-text';\n          context.pushGlobalContextStack<BlocksuiteTableColumn>(\n            'hast:table:column',\n            {\n              type: columnType,\n              name: hastGetTextContent(hastGetTextChildrenOnlyAst(o.node)),\n              data: Object.create(null),\n              id: columnId,\n            }\n          );\n          // disable icon img in th\n          context.setGlobalContext('hast:disableimg', true);\n          break;\n        }\n        case 'tr': {\n          if (\n            o.parent?.node.type === 'element' &&\n            o.parent.node.tagName === 'tbody'\n          ) {\n            const columns =\n              context.getGlobalContextStack<BlocksuiteTableColumn>(\n                'hast:table:column'\n              );\n            const row = Object.create(null);\n            let plainTable = false;\n            hastGetElementChildren(o.node).forEach((child, index) => {\n              if (plainTable || columns[index] === undefined) {\n                plainTable = true;\n                if (columns[index] === undefined) {\n                  columns.push({\n                    type: 'rich-text',\n                    name: '',\n                    data: Object.create(null),\n                    id: nanoid(),\n                  });\n                  context.pushGlobalContextStack<BlockSnapshot>(\n                    'hast:table:children',\n                    {\n                      type: 'block',\n                      id: nanoid(),\n                      flavour: 'affine:paragraph',\n                      props: {\n                        text: {\n                          '$lumensuite:internal:text$': true,\n                          delta: this._hastToDelta(child),\n                        },\n                        type: 'text',\n                      },\n                      children: [],\n                    }\n                  );\n                }\n                context.pushGlobalContextStack<BlockSnapshot>(\n                  'hast:table:children',\n                  {\n                    type: 'block',\n                    id: nanoid(),\n                    flavour: 'affine:paragraph',\n                    props: {\n                      text: {\n                        '$lumensuite:internal:text$': true,\n                        delta: this._hastToDelta(child),\n                      },\n                      type: 'text',\n                    },\n                    children: [],\n                  }\n                );\n                row[columns[index].id] = {\n                  columnId: columns[index].id,\n                  value: hastGetTextContent(child),\n                };\n              } else if (hastQuerySelector(child, '.cell-title')) {\n                context.pushGlobalContextStack<BlockSnapshot>(\n                  'hast:table:children',\n                  {\n                    type: 'block',\n                    id: nanoid(),\n                    flavour: 'affine:paragraph',\n                    props: {\n                      text: {\n                        '$lumensuite:internal:text$': true,\n                        delta: this._hastToDelta(child, { pageMap }),\n                      },\n                      type: 'text',\n                    },\n                    children: [],\n                  }\n                );\n                columns[index].type = 'title';\n                return;\n              }\n              const optionIds: string[] = [];\n              if (hastQuerySelector(child, '.selected-value')) {\n                if (!('options' in columns[index].data)) {\n                  columns[index].data.options = [];\n                }\n                if (!['multi-select', 'select'].includes(columns[index].type)) {\n                  columns[index].type = 'select';\n                }\n                if (\n                  columns[index].type === 'select' &&\n                  child.type === 'element' &&\n                  child.children.length > 1\n                ) {\n                  columns[index].type = 'multi-select';\n                }\n                child.type === 'element' &&\n                  child.children.forEach(span => {\n                    const filteredArray = columns[index].data.options?.filter(\n                      option => option.value === hastGetTextContent(span)\n                    );\n                    const id = filteredArray?.length\n                      ? filteredArray[0].id\n                      : nanoid();\n                    if (!filteredArray?.length) {\n                      columns[index].data.options?.push({\n                        id,\n                        value: hastGetTextContent(span),\n                        color: getTagColor(),\n                      });\n                    }\n                    optionIds.push(id);\n                  });\n                // Expand will be done when leaving the table\n                row[columns[index].id] = {\n                  columnId: columns[index].id,\n                  value: optionIds,\n                };\n              } else if (hastQuerySelector(child, '.checkbox')) {\n                if (columns[index].type !== 'checkbox') {\n                  columns[index].type = 'checkbox';\n                }\n                row[columns[index].id] = {\n                  columnId: columns[index].id,\n                  value: hastQuerySelector(child, '.checkbox-on')\n                    ? true\n                    : false,\n                };\n              } else if (columns[index].type === 'number') {\n                const text = hastGetTextContent(child);\n                const number = Number(text);\n                if (Number.isNaN(number)) {\n                  columns[index].type = 'rich-text';\n                  row[columns[index].id] = {\n                    columnId: columns[index].id,\n                    value: createText(text),\n                  };\n                } else {\n                  row[columns[index].id] = {\n                    columnId: columns[index].id,\n                    value: number,\n                  };\n                }\n              } else {\n                row[columns[index].id] = {\n                  columnId: columns[index].id,\n                  value: hastGetTextContent(child),\n                };\n              }\n              if (\n                columns[index].type === 'rich-text' &&\n                !isText(row[columns[index].id].value)\n              ) {\n                row[columns[index].id] = {\n                  columnId: columns[index].id,\n                  value: createText(row[columns[index].id].value),\n                };\n              }\n            });\n            context.setGlobalContextStack('hast:table:column', columns);\n            context.pushGlobalContextStack('hast:table:rows', row);\n          }\n        }\n      }\n    });\n    walker.setLeave((o, context) => {\n      if (o.node.type !== 'element') {\n        return;\n      }\n      switch (o.node.tagName) {\n        case 'div': {\n          if (\n            o.parent?.node.type === 'element' &&\n            o.parent.node.tagName !== 'li' &&\n            Array.isArray(o.node.properties?.className)\n          ) {\n            if (o.node.properties.className.includes('indented')) {\n              context.closeNode();\n            }\n          }\n          break;\n        }\n        case 'blockquote': {\n          context.setGlobalContext('hast:blockquote', false);\n          break;\n        }\n        case 'p': {\n          if (!o.node.properties.id) {\n            break;\n          }\n          if (\n            o.next?.type === 'element' &&\n            o.next.tagName === 'div' &&\n            Array.isArray(o.next.properties?.className) &&\n            o.next.properties.className.includes('indented')\n          ) {\n            // Close the node when leaving div indented\n            break;\n          }\n          context.closeNode();\n          break;\n        }\n        case 'li': {\n          context.closeNode();\n          break;\n        }\n        case 'table': {\n          const columns =\n            context.getGlobalContextStack<BlocksuiteTableColumn>(\n              'hast:table:column'\n            );\n          context.setGlobalContextStack('hast:table:column', []);\n          const children = context.getGlobalContextStack<BlockSnapshot>(\n            'hast:table:children'\n          );\n          context.setGlobalContextStack('hast:table:children', []);\n          const cells = Object.create(null);\n          context\n            .getGlobalContextStack<BlocksuiteTableRow>('hast:table:rows')\n            .map((row, i) => {\n              Object.keys(row).forEach(columnId => {\n                if (\n                  columns.find(column => column.id === columnId)?.type ===\n                  'select'\n                ) {\n                  row[columnId].value = (row[columnId].value as string[])[0];\n                }\n              });\n              cells[children.at(i)?.id ?? nanoid()] = row;\n            });\n          context.setGlobalContextStack('hast:table:cells', []);\n          context.openNode(\n            {\n              type: 'block',\n              id: nanoid(),\n              flavour: 'affine:database',\n              props: {\n                views: [\n                  {\n                    id: nanoid(),\n                    name: 'Table View',\n                    mode: 'table',\n                    columns: [],\n                    filter: {\n                      type: 'group',\n                      op: 'and',\n                      conditions: [],\n                    },\n                    header: {\n                      titleColumn:\n                        columns.find(column => column.type === 'title')?.id ??\n                        '',\n                      iconColumn: 'type',\n                    },\n                  },\n                ],\n                title: {\n                  '$lumensuite:internal:text$': true,\n                  delta: [],\n                },\n                columns,\n                cells,\n              },\n              children: [],\n            },\n            'children'\n          );\n          children.forEach(child => {\n            context.openNode(child, 'children').closeNode();\n          });\n          context.closeNode();\n          break;\n        }\n        case 'th': {\n          context.setGlobalContext('hast:disableimg', false);\n          break;\n        }\n      }\n    });\n    return walker.walk(html, snapshot);\n  };\n\n  private _htmlToAst(notionHtml: NotionHtml) {\n    return unified().use(rehypeParse).parse(notionHtml);\n  }\n\n  override fromBlockSnapshot(\n    _payload: FromBlockSnapshotPayload\n  ): Promise<FromBlockSnapshotResult<NotionHtml>> {\n    throw new LumenSuiteError(\n      ErrorCode.TransformerNotImplementedError,\n      'NotionHtmlAdapter.fromBlockSnapshot is not implemented'\n    );\n  }\n\n  override fromDocSnapshot(\n    _payload: FromDocSnapshotPayload\n  ): Promise<FromDocSnapshotResult<NotionHtml>> {\n    throw new LumenSuiteError(\n      ErrorCode.TransformerNotImplementedError,\n      'NotionHtmlAdapter.fromDocSnapshot is not implemented'\n    );\n  }\n\n  override fromSliceSnapshot(\n    _payload: FromSliceSnapshotPayload\n  ): Promise<FromSliceSnapshotResult<NotionHtml>> {\n    throw new LumenSuiteError(\n      ErrorCode.TransformerNotImplementedError,\n      'NotionHtmlAdapter.fromSliceSnapshot is not implemented'\n    );\n  }\n\n  override toBlockSnapshot(\n    payload: NotionHtmlToBlockSnapshotPayload\n  ): Promise<BlockSnapshot> {\n    const notionHtmlAst = this._htmlToAst(payload.file);\n    const blockSnapshotRoot = {\n      type: 'block',\n      id: nanoid(),\n      flavour: 'affine:note',\n      props: {\n        xywh: '[0,0,800,95]',\n        background: DEFAULT_NOTE_BACKGROUND_COLOR,\n        index: 'a0',\n        hidden: false,\n        displayMode: NoteDisplayMode.DocAndEdgeless,\n      },\n      children: [],\n    };\n    return this._traverseNotionHtml(\n      notionHtmlAst,\n      blockSnapshotRoot as BlockSnapshot,\n      payload.assets,\n      payload.pageMap\n    );\n  }\n\n  override async toDoc(payload: NotionHtmlToDocSnapshotPayload) {\n    const snapshot = await this.toDocSnapshot(payload);\n    return this.job.snapshotToDoc(snapshot);\n  }\n\n  override async toDocSnapshot(\n    payload: NotionHtmlToDocSnapshotPayload\n  ): Promise<DocSnapshot> {\n    const notionHtmlAst = this._htmlToAst(payload.file);\n    const titleAst = hastQuerySelector(notionHtmlAst, 'title');\n    const blockSnapshotRoot = {\n      type: 'block',\n      id: nanoid(),\n      flavour: 'affine:note',\n      props: {\n        xywh: '[0,0,800,95]',\n        background: DEFAULT_NOTE_BACKGROUND_COLOR,\n        index: 'a0',\n        hidden: false,\n        displayMode: NoteDisplayMode.DocAndEdgeless,\n      },\n      children: [],\n    };\n    return {\n      type: 'page',\n      meta: {\n        id: payload.pageId ?? nanoid(),\n        title: hastGetTextContent(titleAst, 'Untitled'),\n        createDate: Date.now(),\n        tags: [],\n      },\n      blocks: {\n        type: 'block',\n        id: nanoid(),\n        flavour: 'affine:page',\n        props: {\n          title: {\n            '$lumensuite:internal:text$': true,\n            delta: this._hastToDelta(\n              titleAst ?? {\n                type: 'text',\n                value: 'Untitled',\n              }\n            ),\n          },\n        },\n        children: [\n          {\n            type: 'block',\n            id: nanoid(),\n            flavour: 'affine:surface',\n            props: {\n              elements: {},\n            },\n            children: [],\n          },\n          await this._traverseNotionHtml(\n            notionHtmlAst,\n            blockSnapshotRoot as BlockSnapshot,\n            payload.assets,\n            payload.pageMap\n          ),\n        ],\n      },\n    };\n  }\n\n  override async toSliceSnapshot(\n    payload: NotionHtmlToSliceSnapshotPayload\n  ): Promise<SliceSnapshot | null> {\n    const notionHtmlAst = this._htmlToAst(payload.file);\n    const blockSnapshotRoot = {\n      type: 'block',\n      id: nanoid(),\n      flavour: 'affine:note',\n      props: {\n        xywh: '[0,0,800,95]',\n        background: DEFAULT_NOTE_BACKGROUND_COLOR,\n        index: 'a0',\n        hidden: false,\n        displayMode: NoteDisplayMode.DocAndEdgeless,\n      },\n      children: [],\n    };\n    const contentSlice = (await this._traverseNotionHtml(\n      notionHtmlAst,\n      blockSnapshotRoot as BlockSnapshot,\n      payload.assets\n    )) as BlockSnapshot;\n    if (contentSlice.children.length === 0) {\n      return null;\n    }\n    return {\n      type: 'slice',\n      content: [contentSlice],\n      pageVersion: payload.pageVersion,\n      workspaceVersion: payload.workspaceVersion,\n      workspaceId: payload.workspaceId,\n      pageId: payload.pageId,\n    };\n  }\n}\n"]}