{"version":3,"file":"helper.js","sourceRoot":"","sources":["../../../src/_common/embed-block-helper/helper.ts"],"names":[],"mappings":"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","sourcesContent":["import { isAbortError } from '@blocksuite/affine-shared/utils';\nimport { BlockSuiteError, ErrorCode } from '@blocksuite/global/exceptions';\n\nimport type { LinkPreviewData, LinkPreviewResponseData } from './types.js';\n\nimport { DEFAULT_LINK_PREVIEW_ENDPOINT } from '../consts.js';\n\n// ========== Link Preview ==========\n\nexport class LinkPreviewer {\n  private _endpoint = DEFAULT_LINK_PREVIEW_ENDPOINT;\n\n  query = async (\n    url: string,\n    signal?: AbortSignal\n  ): Promise<Partial<LinkPreviewData>> => {\n    if (\n      (url.startsWith('https://x.com/') ||\n        url.startsWith('https://www.x.com/') ||\n        url.startsWith('https://www.twitter.com/') ||\n        url.startsWith('https://twitter.com/')) &&\n      url.includes('/status/')\n    ) {\n      // use api.fxtwitter.com\n      url =\n        'https://api.fxtwitter.com/status/' + /\\/status\\/(.*)/.exec(url)?.[1];\n      try {\n        const { tweet } = await fetch(url, { signal }).then(res => res.json());\n        return {\n          title: tweet.author.name,\n          icon: tweet.author.avatar_url,\n          description: tweet.text,\n          image: tweet.media?.photos?.[0].url || tweet.author.banner_url,\n        };\n      } catch (e) {\n        console.error(`Failed to fetch tweet: ${url}`);\n        console.error(e);\n        return {};\n      }\n    } else {\n      const response = await fetch(this._endpoint, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          url,\n        }),\n        signal,\n      })\n        .then(r => {\n          if (!r || !r.ok) {\n            throw new BlockSuiteError(\n              ErrorCode.DefaultRuntimeError,\n              `Failed to fetch link preview: ${url}`\n            );\n          }\n          return r;\n        })\n        .catch(err => {\n          if (isAbortError(err)) return null;\n          console.error(`Failed to fetch link preview: ${url}`);\n          console.error(err);\n          return null;\n        });\n\n      if (!response) return {};\n\n      const data: LinkPreviewResponseData = await response.json();\n      return {\n        title: data.title ? this._getStringFromHTML(data.title) : null,\n        description: data.description\n          ? this._getStringFromHTML(data.description)\n          : null,\n        icon: data.favicons?.[0],\n        image: data.images?.[0],\n      };\n    }\n  };\n\n  setEndpoint = (endpoint: string) => {\n    this._endpoint = endpoint;\n  };\n\n  private _getStringFromHTML(html: string) {\n    const div = document.createElement('div');\n    div.innerHTML = html;\n    return div.textContent;\n  }\n}\n"]}