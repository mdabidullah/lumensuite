{"version":3,"file":"test-utils.js","sourceRoot":"","sources":["../../../src/_common/test-utils/test-utils.ts"],"names":[],"mappings":"AAAA,OAAO,EACL,gBAAgB,EAChB,cAAc,GACf,MAAM,4CAA4C,CAAC;AAEpD,MAAM,YAAY;IAAlB;QACE,sCAAsC;QACtC,qBAAgB,GAAG,gBAAgB,CAAC;QAEpC,mBAAc,GAAG,cAAc,CAAC;IAClC,CAAC;CAAA;AAED,MAAM,OAAO,SAAS;IAAtB;QACE,iBAAY,GAAG,IAAI,YAAY,EAAE,CAAC;IACpC,CAAC;CAAA;AAID,MAAM,UAAU,iBAAiB,CAAC,QAAuC;IACvE,OAAO,IAAI,CAAC,KAAK,CAAC,uBAAuB,CAAC,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;AACvE,CAAC;AAED,MAAM,yBAAyB,GAAG;IAChC,cAAc;IACd,cAAc;IACd,cAAc;IACd,cAAc;CACf,CAAC;AAEF,SAAS,uBAAuB,CAAC,cAAsB;IACrD,MAAM,EAAE,GACN,+GAA+G,CAAC;IAClH,MAAM,OAAO,GAAG,cAAc,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;IAC5C,MAAM,iBAAiB,GAAG,IAAI,GAAG,EAAE,CAAC;IACpC,IAAI,aAAa,GAAG,CAAC,CAAC;IACtB,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,KAAK,EAAE,EAAE;QACvC,IAAI,yBAAyB,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;YACjD,iBAAiB,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;YAC1C,aAAa,EAAE,CAAC;QAClB,CAAC;aAAM,CAAC;YACN,iBAAiB,CAAC,GAAG,CACnB,KAAK,CAAC,CAAC,CAAC,EACR,sBAAsB,KAAK,GAAG,aAAa,IAAI,CAChD,CAAC;QACJ,CAAC;IACH,CAAC,CAAC,CAAC;IACH,OAAO,cAAc,CAAC,OAAO,CAAC,EAAE,EAAE,KAAK,CAAC,EAAE,CAAC,iBAAiB,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC;AAC3E,CAAC","sourcesContent":["import {\n  mergeToCodeModel,\n  transformModel,\n} from '../../root-block/utils/operations/model.js';\n\nclass DocTestUtils {\n  // block model operations (data layer)\n  mergeToCodeModel = mergeToCodeModel;\n\n  transformModel = transformModel;\n}\n\nexport class TestUtils {\n  docTestUtils = new DocTestUtils();\n}\n\nimport type { BlockSnapshot, SliceSnapshot } from '@lumensuite/store';\n\nexport function nanoidReplacement(snapshot: BlockSnapshot | SliceSnapshot) {\n  return JSON.parse(nanoidReplacementString(JSON.stringify(snapshot)));\n}\n\nconst escapedSnapshotAttributes = [\n  '\"attributes\"',\n  '\"conditions\"',\n  '\"iconColumn\"',\n  '\"background\"',\n];\n\nfunction nanoidReplacementString(snapshotString: string) {\n  const re =\n    /(\"block:[A-Za-z0-9-_]{10}\")|(\"[A-Za-z0-9-_]{10}\")|(\"var\\(--affine-tag-[a-z]{3,10}\\)\")|(\"[A-Za-z0-9-_=]{44}\")/g;\n  const matches = snapshotString.matchAll(re);\n  const matchesReplaceMap = new Map();\n  let escapedNumber = 0;\n  Array.from(matches).map((match, index) => {\n    if (escapedSnapshotAttributes.includes(match[0])) {\n      matchesReplaceMap.set(match[0], match[0]);\n      escapedNumber++;\n    } else {\n      matchesReplaceMap.set(\n        match[0],\n        `\"matchesReplaceMap[${index - escapedNumber}]\"`\n      );\n    }\n  });\n  return snapshotString.replace(re, match => matchesReplaceMap.get(match));\n}\n"]}