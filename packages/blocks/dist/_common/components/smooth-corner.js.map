{"version":3,"file":"smooth-corner.js","sourceRoot":"","sources":["../../../src/_common/components/smooth-corner.ts"],"names":[],"mappings":"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","sourcesContent":["import { getSvgPath } from '@lumensuite/global/utils';\nimport { css, html, LitElement, svg, type TemplateResult } from 'lit';\nimport { customElement, property, state } from 'lit/decorators.js';\n\n/**\n * ### A component to use figma 'smoothing radius'\n *\n * ```html\n * <smooth-corner\n *  .borderRadius=${10}\n *  .smooth=${0.5}\n *  .borderWidth=${2}\n *  .bgColor=${'white'}\n *   style=\"filter: drop-shadow(0px 0px 10px rgba(0, 0, 0, 0.1));\"\n * >\n *    <h1>Smooth Corner</h1>\n * </smooth-corner>\n * ```\n *\n * **Just wrap your content with it.**\n * - There is a ResizeObserver inside to observe the size of the content.\n * - In order to use both border and shadow, we use svg to draw.\n *    - So we need to use `stroke` and `drop-shadow` to replace `border` and `box-shadow`.\n *\n * #### required properties\n * - `borderRadius`: Equal to the border-radius\n * - `smooth`: From 0 to 1, refer to the figma smoothing radius\n *\n * #### customizable style properties\n * Provides some commonly used styles, dealing with their mapping with SVG attributes, such as:\n * - `borderWidth` (stroke-width)\n * - `borderColor` (stroke)\n * - `bgColor` (fill)\n * - `bgOpacity` (fill-opacity)\n *\n * #### More customization\n * Use css to customize this component, such as drop-shadow:\n * ```css\n * smooth-corner {\n *  filter: drop-shadow(0px 0px 10px rgba(0, 0, 0, 0.1));\n * }\n * ```\n */\n@customElement('smooth-corner')\nexport class SmoothCorner extends LitElement {\n  static override styles = css`\n    :host {\n      position: relative;\n    }\n    .smooth-corner-bg,\n    .smooth-corner-border {\n      position: absolute;\n      top: 0;\n      left: 0;\n      pointer-events: none;\n    }\n    .smooth-corner-border {\n      z-index: 2;\n    }\n    .smooth-corner-content {\n      position: relative;\n      z-index: 1;\n      width: 100%;\n      height: 100%;\n    }\n  `;\n\n  private _resizeObserver: ResizeObserver | null = null;\n\n  get _path() {\n    return getSvgPath({\n      width: this.width,\n      height: this.height,\n      cornerRadius: this.borderRadius, // defaults to 0\n      cornerSmoothing: this.smooth, // cornerSmoothing goes from 0 to 1\n    });\n  }\n\n  constructor() {\n    super();\n    this._resizeObserver = new ResizeObserver(entries => {\n      for (const entry of entries) {\n        this.width = entry.contentRect.width;\n        this.height = entry.contentRect.height;\n      }\n    });\n  }\n\n  private _getSvg(className: string, path: TemplateResult) {\n    return svg`<svg\n      class=\"${className}\"\n      width=${this.width + this.borderWidth}\n      height=${this.height + this.borderWidth}\n      viewBox=\"0 0 ${this.width + this.borderWidth} ${\n        this.height + this.borderWidth\n      }\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n    >\n      ${path}\n    </svg>`;\n  }\n\n  override connectedCallback(): void {\n    super.connectedCallback();\n    this._resizeObserver?.observe(this);\n  }\n\n  override disconnectedCallback(): void {\n    super.disconnectedCallback();\n    this._resizeObserver?.unobserve(this);\n  }\n\n  override render() {\n    return html`${this._getSvg(\n        'smooth-corner-bg',\n        svg`<path \n          d=\"${this._path}\" \n          fill=\"${this.bgColor}\" \n          fill-opacity=\"${this.bgOpacity}\"\n          transform=\"translate(${this.borderWidth / 2} ${this.borderWidth / 2})\"\n        >`\n      )}\n      ${this._getSvg(\n        'smooth-corner-border',\n        svg`<path \n          fill=\"none\"\n          d=\"${this._path}\" \n          stroke=\"${this.borderColor}\" \n          stroke-width=\"${this.borderWidth}\"\n          transform=\"translate(${this.borderWidth / 2} ${this.borderWidth / 2})\"\n        >`\n      )}\n      <div class=\"smooth-corner-content\">\n        <slot></slot>\n      </div>`;\n  }\n\n  /**\n   * Background color of the element\n   */\n  @property({ type: String })\n  accessor bgColor: string = 'white';\n\n  /**\n   * Background opacity of the element\n   */\n  @property({ type: Number })\n  accessor bgOpacity: number = 1;\n\n  /**\n   * Border color of the element\n   */\n  @property({ type: String })\n  accessor borderColor: string = 'black';\n\n  /**\n   * Equal to the border-radius\n   */\n  @property({ type: Number })\n  accessor borderRadius = 0;\n\n  /**\n   * Border width of the element in px\n   */\n  @property({ type: Number })\n  accessor borderWidth: number = 2;\n\n  @state()\n  accessor height: number = 0;\n\n  /**\n   * From 0 to 1\n   */\n  @property({ type: Number })\n  accessor smooth: number = 0;\n\n  @state()\n  accessor width: number = 0;\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'smooth-corner': SmoothCorner;\n  }\n}\n"]}