{"version":3,"file":"types.js","sourceRoot":"","sources":["../../../../src/_common/components/ai-item/types.ts"],"names":[],"mappings":"AA4BA,MAAe,WAAY,SAAQ,KAAK;CAEvC;AAED,MAAM,CAAN,IAAY,WAIX;AAJD,WAAY,WAAW;IACrB,0DAA2C,CAAA;IAC3C,kDAAmC,CAAA;IACnC,4CAA6B,CAAA;AAC/B,CAAC,EAJW,WAAW,KAAX,WAAW,QAItB;AAED,MAAM,OAAO,iBAAkB,SAAQ,WAAW;IAGhD;QACE,KAAK,CAAC,cAAc,CAAC,CAAC;QAHf,SAAI,GAAG,WAAW,CAAC,YAAY,CAAC;IAIzC,CAAC;CACF;AAED,6BAA6B;AAC7B,MAAM,OAAO,oBAAqB,SAAQ,WAAW;IAGnD;QACE,KAAK,CAAC,kBAAkB,CAAC,CAAC;QAHnB,SAAI,GAAG,WAAW,CAAC,eAAe,CAAC;IAI5C,CAAC;CACF;AAED,qBAAqB;AACrB,MAAM,OAAO,mBAAoB,SAAQ,WAAW;IAGlD,YAAY,UAAkB,eAAe;QAC3C,KAAK,CAAC,OAAO,CAAC,CAAC;QAHR,SAAI,GAAG,WAAW,CAAC,mBAAmB,CAAC;IAIhD,CAAC;CACF","sourcesContent":["import type { DocMode } from '@lumensuite/affine-model';\nimport type { Chain, EditorHost, InitCommandCtx } from '@lumensuite/block-std';\nimport type { TemplateResult } from 'lit';\n\nexport interface AIItemGroupConfig {\n  name?: string;\n  items: AIItemConfig[];\n}\n\nexport interface AIItemConfig {\n  name: string;\n  icon: TemplateResult | (() => HTMLElement);\n  showWhen?: (\n    chain: Chain<InitCommandCtx>,\n    editorMode: DocMode,\n    host: EditorHost\n  ) => boolean;\n  subItem?: AISubItemConfig[];\n  subItemOffset?: [number, number];\n  handler?: (host: EditorHost) => void;\n  beta?: boolean;\n}\n\nexport interface AISubItemConfig {\n  type: string;\n  handler?: (host: EditorHost) => void;\n}\n\nabstract class BaseAIError extends Error {\n  abstract readonly type: AIErrorType;\n}\n\nexport enum AIErrorType {\n  GeneralNetworkError = 'GeneralNetworkError',\n  PaymentRequired = 'PaymentRequired',\n  Unauthorized = 'Unauthorized',\n}\n\nexport class UnauthorizedError extends BaseAIError {\n  readonly type = AIErrorType.Unauthorized;\n\n  constructor() {\n    super('Unauthorized');\n  }\n}\n\n// user has used up the quota\nexport class PaymentRequiredError extends BaseAIError {\n  readonly type = AIErrorType.PaymentRequired;\n\n  constructor() {\n    super('Payment required');\n  }\n}\n\n// general 500x error\nexport class GeneralNetworkError extends BaseAIError {\n  readonly type = AIErrorType.GeneralNetworkError;\n\n  constructor(message: string = 'Network error') {\n    super(message);\n  }\n}\n\nexport type AIError =\n  | UnauthorizedError\n  | PaymentRequiredError\n  | GeneralNetworkError;\n"]}