{"version":3,"file":"block-selection.js","sourceRoot":"","sources":["../../../src/_common/components/block-selection.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,EAAuB,aAAa,EAAE,MAAM,uBAAuB,CAAC;AAC3E,OAAO,EAAE,GAAG,EAAE,UAAU,EAAuB,MAAM,KAAK,CAAC;AAC3D,OAAO,EAAE,aAAa,EAAE,QAAQ,EAAE,MAAM,mBAAmB,CAAC;AAE5D;;;;;;;;;;;;;;;;GAgBG;IAEU,cAAc;4BAD1B,aAAa,CAAC,wBAAwB,CAAC;;;;sBACJ,aAAa,CAAC,UAAU,CAAC;;;;;;;;;;8BAAjC,SAAQ,WAAyB;;;;iCAgC1D,QAAQ,CAAC,EAAE,SAAS,EAAE,KAAK,EAAE,CAAC;wCAG9B,QAAQ,CAAC,EAAE,SAAS,EAAE,KAAK,EAAE,CAAC;uCAG9B,QAAQ,CAAC,EAAE,SAAS,EAAE,KAAK,EAAE,CAAC;YAL/B,oKAAS,KAAK,6BAAL,KAAK,qFAAkB;YAGhC,yLAAS,YAAY,6BAAZ,YAAY,mGAAa;YAGlC,sLAAS,WAAW,6BAAX,WAAW,iGAAa;YAvCnC,6KAwCC;;;;iBAvCiB,WAAM,GAAG,GAAG,CAAA;;;;;;;;;;;;;GAa3B,AAbqB,CAapB;QAEO,iBAAiB;YACxB,KAAK,CAAC,iBAAiB,EAAE,CAAC;YAE1B,IAAI,CAAC,KAAK,CAAC,YAAY,GAAG,GAAG,IAAI,CAAC,YAAY,IAAI,CAAC;YACnD,IAAI,IAAI,CAAC,WAAW,KAAK,CAAC,EAAE,CAAC;gBAC3B,IAAI,CAAC,KAAK,CAAC,SAAS,GAAG,aAAa,CAAC;gBACrC,IAAI,CAAC,KAAK,CAAC,SAAS,GAAG,cAAc,IAAI,CAAC,WAAW,QAAQ,IAAI,CAAC,WAAW,KAAK,CAAC;YACrF,CAAC;YACD,IAAI,CAAC,KAAK,CAAC,WAAW,GAAG,GAAG,IAAI,CAAC,WAAW,IAAI,CAAC;QACnD,CAAC;QAEkB,OAAO,CAAC,kBAAkC;YAC3D,KAAK,CAAC,OAAO,CAAC,kBAAkB,CAAC,CAAC;YAClC,IAAI,CAAC,KAAK,CAAC,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,MAAM,CAAC;QAC3E,CAAC;QAGD,+EAAgC;QAAhC,IAAS,KAAK,2CAAkB;QAAhC,IAAS,KAAK,iDAAkB;QAGhC,yIAAgC,CAAC,GAAC;QAAlC,IAAS,YAAY,kDAAa;QAAlC,IAAS,YAAY,wDAAa;QAGlC,8IAA+B,CAAC,GAAC;QAAjC,IAAS,WAAW,iDAAa;QAAjC,IAAS,WAAW,uDAAa;;;;;;YAvCtB,uDAAc;;;;;SAAd,cAAc","sourcesContent":["import { type BlockComponent, SignalWatcher } from '@blocksuite/block-std';\nimport { css, LitElement, type PropertyValues } from 'lit';\nimport { customElement, property } from 'lit/decorators.js';\n\n/**\n * Renders a the block selection.\n *\n * @example\n * ```ts\n * class Block extends LitElement {\n *   state override styles = css`\n *     :host {\n *       position: relative;\n *     }\n *\n *   render() {\n *      return html`<affine-block-selection></affine-block-selection>\n *   };\n * }\n * ```\n */\n@customElement('affine-block-selection')\nexport class BlockSelection extends SignalWatcher(LitElement) {\n  static override styles = css`\n    :host {\n      position: absolute;\n      z-index: 1;\n      left: 0;\n      top: 0;\n      width: 100%;\n      height: 100%;\n      pointer-events: none;\n      background-color: var(--affine-hover-color);\n      border-color: transparent;\n      border-style: solid;\n    }\n  `;\n\n  override connectedCallback(): void {\n    super.connectedCallback();\n\n    this.style.borderRadius = `${this.borderRadius}px`;\n    if (this.borderWidth !== 0) {\n      this.style.boxSizing = 'content-box';\n      this.style.transform = `translate(-${this.borderWidth}px, -${this.borderWidth}px)`;\n    }\n    this.style.borderWidth = `${this.borderWidth}px`;\n  }\n\n  protected override updated(_changedProperties: PropertyValues): void {\n    super.updated(_changedProperties);\n    this.style.display = this.block.selected?.is('block') ? 'block' : 'none';\n  }\n\n  @property({ attribute: false })\n  accessor block!: BlockComponent;\n\n  @property({ attribute: false })\n  accessor borderRadius: number = 5;\n\n  @property({ attribute: false })\n  accessor borderWidth: number = 0;\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'affine-block-selection': BlockSelection;\n  }\n}\n"]}