{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../src/image-block/utils.ts"],"names":[],"mappings":"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","sourcesContent":["import type {\n  AttachmentBlockProps,\n  ImageBlockModel,\n  ImageBlockProps,\n} from '@blocksuite/affine-model';\nimport type { EditorHost } from '@blocksuite/block-std';\nimport type { BlockModel } from '@blocksuite/store';\n\nimport { toast } from '@blocksuite/affine-components/toast';\nimport {\n  downloadBlob,\n  humanFileSize,\n  withTempBlobData,\n} from '@blocksuite/affine-shared/utils';\nimport { BlockSuiteError, ErrorCode } from '@blocksuite/global/exceptions';\n\nimport type { ImageBlockComponent } from './image-block.js';\nimport type { ImageEdgelessBlockComponent } from './image-edgeless-block.js';\n\nimport { readImageSize } from '../root-block/edgeless/components/utils.js';\nimport { transformModel } from '../root-block/utils/operations/model.js';\n\nconst MAX_RETRY_COUNT = 3;\nconst DEFAULT_ATTACHMENT_NAME = 'affine-attachment';\n\nconst imageUploads = new Set<string>();\nexport function setImageUploading(blockId: string) {\n  imageUploads.add(blockId);\n}\nexport function setImageUploaded(blockId: string) {\n  imageUploads.delete(blockId);\n}\nexport function isImageUploading(blockId: string) {\n  return imageUploads.has(blockId);\n}\n\nexport async function uploadBlobForImage(\n  editorHost: EditorHost,\n  blockId: string,\n  blob: Blob\n): Promise<void> {\n  if (isImageUploading(blockId)) {\n    console.error('The image is already uploading!');\n    return;\n  }\n  setImageUploading(blockId);\n  const doc = editorHost.doc;\n  let sourceId: string | undefined;\n\n  try {\n    sourceId = await doc.blobSync.set(blob);\n  } catch (error) {\n    console.error(error);\n    if (error instanceof Error) {\n      toast(\n        editorHost,\n        `Failed to upload image! ${error.message || error.toString()}`\n      );\n    }\n  } finally {\n    setImageUploaded(blockId);\n\n    const imageModel = doc.getBlockById(blockId) as ImageBlockModel | null;\n\n    doc.withoutTransact(() => {\n      if (!imageModel) {\n        return;\n      }\n      doc.updateBlock(imageModel, {\n        sourceId,\n      } satisfies Partial<ImageBlockProps>);\n    });\n  }\n}\n\nasync function getImageBlob(model: ImageBlockModel) {\n  const sourceId = model.sourceId;\n  if (!sourceId) {\n    return null;\n  }\n\n  const doc = model.doc;\n  const blob = await doc.blobSync.get(sourceId);\n\n  if (!blob) {\n    return null;\n  }\n\n  if (!blob.type) {\n    const buffer = await blob.arrayBuffer();\n    const FileType = await import('file-type');\n    const fileType = await FileType.fileTypeFromBuffer(buffer);\n    if (!fileType?.mime.startsWith('image/')) {\n      return null;\n    }\n\n    return new Blob([buffer], { type: fileType.mime });\n  }\n\n  if (!blob.type.startsWith('image/')) {\n    return null;\n  }\n\n  return blob;\n}\n\nexport async function fetchImageBlob(\n  block: ImageBlockComponent | ImageEdgelessBlockComponent\n) {\n  try {\n    if (block.model.sourceId !== block.lastSourceId || !block.blobUrl) {\n      block.loading = true;\n      block.error = false;\n      block.blob = undefined;\n\n      if (block.blobUrl) {\n        URL.revokeObjectURL(block.blobUrl);\n        block.blobUrl = undefined;\n      }\n    } else if (block.blobUrl) {\n      return;\n    }\n\n    const { model } = block;\n    const { id, sourceId, doc } = model;\n\n    if (isImageUploading(id)) {\n      return;\n    }\n\n    if (!sourceId) {\n      return;\n    }\n\n    const blob = await doc.blobSync.get(sourceId);\n    if (!blob) {\n      return;\n    }\n\n    block.loading = false;\n    block.blob = blob;\n    block.blobUrl = URL.createObjectURL(blob);\n    block.lastSourceId = sourceId;\n  } catch (error) {\n    block.retryCount++;\n    console.warn(`${error}, retrying`, block.retryCount);\n\n    if (block.retryCount < MAX_RETRY_COUNT) {\n      setTimeout(() => {\n        fetchImageBlob(block).catch(console.error);\n        // 1s, 2s, 3s\n      }, 1000 * block.retryCount);\n    } else {\n      block.loading = false;\n      block.error = true;\n    }\n  }\n}\n\nexport async function downloadImageBlob(\n  block: ImageBlockComponent | ImageEdgelessBlockComponent\n) {\n  const { host, downloading } = block;\n  if (downloading) {\n    toast(host, 'Download in progress...');\n    return;\n  }\n\n  block.downloading = true;\n\n  const blob = await getImageBlob(block.model);\n  if (!blob) {\n    toast(host, `Unable to download image!`);\n    return;\n  }\n\n  toast(host, `Downloading image...`);\n\n  downloadBlob(blob, 'image');\n\n  block.downloading = false;\n}\n\nexport async function resetImageSize(\n  block: ImageBlockComponent | ImageEdgelessBlockComponent\n) {\n  const { blob, model } = block;\n  if (!blob) {\n    return;\n  }\n\n  const file = new File([blob], 'image.png', { type: blob.type });\n  const size = await readImageSize(file);\n  block.doc.updateBlock(model, {\n    width: size.width,\n    height: size.height,\n  });\n}\n\nfunction convertToString(blob: Blob): Promise<string | null> {\n  return new Promise(resolve => {\n    const reader = new FileReader();\n    reader.addEventListener('load', _ => resolve(reader.result as string));\n    reader.addEventListener('error', () => resolve(null));\n    reader.readAsDataURL(blob);\n  });\n}\n\nfunction convertToPng(blob: Blob): Promise<Blob | null> {\n  return new Promise(resolve => {\n    const reader = new FileReader();\n    reader.addEventListener('load', _ => {\n      const img = new Image();\n      img.onload = () => {\n        const c = document.createElement('canvas');\n        c.width = img.width;\n        c.height = img.height;\n        const ctx = c.getContext('2d');\n        if (!ctx) return;\n        ctx.drawImage(img, 0, 0);\n        c.toBlob(resolve, 'image/png');\n      };\n      img.onerror = () => resolve(null);\n      img.src = reader.result as string;\n    });\n    reader.addEventListener('error', () => resolve(null));\n    reader.readAsDataURL(blob);\n  });\n}\n\nexport async function copyImageBlob(\n  block: ImageBlockComponent | ImageEdgelessBlockComponent\n) {\n  const { host, model } = block;\n  let blob = await getImageBlob(model);\n  if (!blob) {\n    console.error('Failed to get image blob');\n    return;\n  }\n\n  try {\n    // @ts-ignore\n    if (window.apis?.clipboard?.copyAsImageFromString) {\n      const dataURL = await convertToString(blob);\n      if (!dataURL)\n        throw new BlockSuiteError(\n          ErrorCode.DefaultRuntimeError,\n          'Cant convert a blob to data URL.'\n        );\n      // @ts-ignore\n      await window.apis.clipboard?.copyAsImageFromString(dataURL);\n    } else {\n      // DOMException: Type image/jpeg not supported on write.\n      if (blob.type !== 'image/png') {\n        const pngBlob = await convertToPng(blob);\n        if (!pngBlob) {\n          console.error('Failed to convert blob to PNG');\n          return;\n        }\n        blob = pngBlob;\n      }\n\n      if (!globalThis.isSecureContext) {\n        console.error(\n          'Clipboard API is not available in insecure context',\n          blob.type,\n          blob\n        );\n        return;\n      }\n\n      await navigator.clipboard.write([\n        new ClipboardItem({ [blob.type]: blob }),\n      ]);\n    }\n\n    toast(host, 'Copied image to clipboard');\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nexport function shouldResizeImage(node: Node, target: EventTarget | null) {\n  return !!(\n    target &&\n    target instanceof HTMLElement &&\n    node.contains(target) &&\n    target.classList.contains('resize')\n  );\n}\n\nexport function addSiblingImageBlock(\n  editorHost: EditorHost,\n  files: File[],\n  maxFileSize: number,\n  targetModel: BlockModel,\n  place: 'after' | 'before' = 'after'\n) {\n  const imageFiles = files.filter(file => file.type.startsWith('image/'));\n  if (!imageFiles.length) {\n    return;\n  }\n\n  const isSizeExceeded = imageFiles.some(file => file.size > maxFileSize);\n  if (isSizeExceeded) {\n    toast(\n      editorHost,\n      `You can only upload files less than ${humanFileSize(\n        maxFileSize,\n        true,\n        0\n      )}`\n    );\n    return;\n  }\n\n  const imageBlockProps: Partial<ImageBlockProps> &\n    {\n      flavour: 'affine:image';\n    }[] = imageFiles.map(file => ({\n    flavour: 'affine:image',\n    size: file.size,\n  }));\n\n  const doc = editorHost.doc;\n  const blockIds = doc.addSiblingBlocks(targetModel, imageBlockProps, place);\n  blockIds.map(\n    (blockId, index) =>\n      void uploadBlobForImage(editorHost, blockId, imageFiles[index])\n  );\n  return blockIds;\n}\n\nexport function addImageBlocks(\n  editorHost: EditorHost,\n  files: File[],\n  maxFileSize: number,\n  parent?: BlockModel | string | null,\n  parentIndex?: number\n) {\n  const imageFiles = files.filter(file => file.type.startsWith('image/'));\n  if (!imageFiles.length) {\n    return;\n  }\n\n  const isSizeExceeded = imageFiles.some(file => file.size > maxFileSize);\n  if (isSizeExceeded) {\n    toast(\n      editorHost,\n      `You can only upload files less than ${humanFileSize(\n        maxFileSize,\n        true,\n        0\n      )}`\n    );\n    return;\n  }\n\n  const doc = editorHost.doc;\n  const blockIds = imageFiles.map(file =>\n    doc.addBlock('affine:image', { size: file.size }, parent, parentIndex)\n  );\n  blockIds.map(\n    (blockId, index) =>\n      void uploadBlobForImage(editorHost, blockId, imageFiles[index])\n  );\n  return blockIds;\n}\n\n/**\n * Turn the image block into a attachment block.\n */\nexport async function turnImageIntoCardView(\n  block: ImageBlockComponent | ImageEdgelessBlockComponent\n) {\n  const doc = block.doc;\n  if (!doc.schema.flavourSchemaMap.has('affine:attachment')) {\n    console.error('The attachment flavour is not supported!');\n    return;\n  }\n\n  const model = block.model;\n  const sourceId = model.sourceId;\n  const blob = await getImageBlob(model);\n  if (!sourceId || !blob) {\n    console.error('Image data not available');\n    return;\n  }\n\n  const { saveImageData, getAttachmentData } = withTempBlobData();\n  saveImageData(sourceId, { width: model.width, height: model.height });\n  const attachmentConvertData = getAttachmentData(sourceId);\n  const attachmentProp: Partial<AttachmentBlockProps> = {\n    sourceId,\n    name: DEFAULT_ATTACHMENT_NAME,\n    size: blob.size,\n    type: blob.type,\n    caption: model.caption,\n    ...attachmentConvertData,\n  };\n  transformModel(model, 'affine:attachment', attachmentProp);\n}\n"]}