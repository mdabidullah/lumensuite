{"version":3,"file":"indexeddb.js","sourceRoot":"","sources":["../../../src/blob/impl/indexeddb.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,WAAW,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,EAAE,MAAM,YAAY,CAAC;AAI9D,MAAM,OAAO,mBAAmB;IAO9B,YAAqB,IAAY;QAAZ,SAAI,GAAJ,IAAI,CAAQ;QANxB,kBAAa,GAAG,WAAW,CAAC,GAAG,IAAI,CAAC,IAAI,YAAY,EAAE,WAAW,CAAC,CAAC;QAE5E,aAAQ,GAAG,KAAK,CAAC;QAER,UAAK,GAAG,WAAW,CAAC,GAAG,IAAI,CAAC,IAAI,OAAO,EAAE,MAAM,CAAC,CAAC;IAEtB,CAAC;IAErC,KAAK,CAAC,MAAM,CAAC,GAAW;QACtB,MAAM,GAAG,CAAC,GAAG,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;QAC3B,MAAM,GAAG,CAAC,GAAG,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;IACrC,CAAC;IAED,KAAK,CAAC,GAAG,CAAC,GAAW;QACnB,MAAM,GAAG,GAAG,MAAM,GAAG,CAAc,GAAG,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;QACpD,IAAI,GAAG,EAAE,CAAC;YACR,OAAO,IAAI,IAAI,CAAC,CAAC,GAAG,CAAC,EAAE;gBACrB,IAAI,EAAE,MAAM,GAAG,CAAC,GAAG,EAAE,IAAI,CAAC,aAAa,CAAC;aACzC,CAAC,CAAC;QACL,CAAC;QACD,OAAO,IAAI,CAAC;IACd,CAAC;IAED,KAAK,CAAC,IAAI;QACR,MAAM,IAAI,GAAG,MAAM,IAAI,CAAS,IAAI,CAAC,KAAK,CAAC,CAAC;QAC5C,OAAO,IAAI,CAAC;IACd,CAAC;IAED,KAAK,CAAC,GAAG,CAAC,GAAW,EAAE,KAAW;QAChC,MAAM,GAAG,CAAC,GAAG,EAAE,MAAM,KAAK,CAAC,WAAW,EAAE,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;QACtD,MAAM,GAAG,CAAC,GAAG,EAAE,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;QAC/C,OAAO,GAAG,CAAC;IACb,CAAC;CACF","sourcesContent":["import { createStore, del, get, keys, set } from 'idb-keyval';\n\nimport type { BlobSource } from '../source.js';\n\nexport class IndexedDBBlobSource implements BlobSource {\n  readonly mimeTypeStore = createStore(`${this.name}_blob_mime`, 'blob_mime');\n\n  readonly = false;\n\n  readonly store = createStore(`${this.name}_blob`, 'blob');\n\n  constructor(readonly name: string) {}\n\n  async delete(key: string) {\n    await del(key, this.store);\n    await del(key, this.mimeTypeStore);\n  }\n\n  async get(key: string) {\n    const res = await get<ArrayBuffer>(key, this.store);\n    if (res) {\n      return new Blob([res], {\n        type: await get(key, this.mimeTypeStore),\n      });\n    }\n    return null;\n  }\n\n  async list() {\n    const list = await keys<string>(this.store);\n    return list;\n  }\n\n  async set(key: string, value: Blob) {\n    await set(key, await value.arrayBuffer(), this.store);\n    await set(key, value.type, this.mimeTypeStore);\n    return key;\n  }\n}\n"]}