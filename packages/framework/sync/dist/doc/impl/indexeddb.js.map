{"version":3,"file":"indexeddb.js","sourceRoot":"","sources":["../../../src/doc/impl/indexeddb.ts"],"names":[],"mappings":"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","sourcesContent":["import { type DBSchema, type IDBPDatabase, openDB } from 'idb';\nimport { diffUpdate, encodeStateVectorFromUpdate, mergeUpdates } from 'yjs';\n\nimport type { DocSource } from '../source.js';\n\nexport const dbVersion = 1;\nexport const DEFAULT_DB_NAME = 'lumensuite-local';\n\ntype UpdateMessage = {\n  timestamp: number;\n  update: Uint8Array;\n};\n\ntype DocCollectionPersist = {\n  id: string;\n  updates: UpdateMessage[];\n};\n\ninterface LumenSuiteBinaryDB extends DBSchema {\n  collection: {\n    key: string;\n    value: DocCollectionPersist;\n  };\n}\n\nexport function upgradeDB(db: IDBPDatabase<LumenSuiteBinaryDB>) {\n  db.createObjectStore('collection', { keyPath: 'id' });\n}\n\ntype ChannelMessage = {\n  type: 'db-updated';\n  payload: { docId: string; update: Uint8Array };\n};\n\nexport class IndexedDBDocSource implements DocSource {\n  // indexeddb could be shared between tabs, so we use broadcast channel to notify other tabs\n  channel = new BroadcastChannel('indexeddb:' + this.dbName);\n\n  dbPromise: Promise<IDBPDatabase<LumenSuiteBinaryDB>> | null = null;\n\n  mergeCount = 1;\n\n  name = 'indexeddb';\n\n  constructor(readonly dbName: string = DEFAULT_DB_NAME) {}\n\n  getDb() {\n    if (this.dbPromise === null) {\n      this.dbPromise = openDB<LumenSuiteBinaryDB>(this.dbName, dbVersion, {\n        upgrade: upgradeDB,\n      });\n    }\n    return this.dbPromise;\n  }\n\n  async pull(\n    docId: string,\n    state: Uint8Array\n  ): Promise<{ data: Uint8Array; state?: Uint8Array | undefined } | null> {\n    const db = await this.getDb();\n    const store = db\n      .transaction('collection', 'readonly')\n      .objectStore('collection');\n    const data = await store.get(docId);\n\n    if (!data) {\n      return null;\n    }\n\n    const { updates } = data;\n    const update = mergeUpdates(updates.map(({ update }) => update));\n\n    const diff = state.length ? diffUpdate(update, state) : update;\n\n    return { data: diff, state: encodeStateVectorFromUpdate(update) };\n  }\n\n  async push(docId: string, data: Uint8Array): Promise<void> {\n    const db = await this.getDb();\n    const store = db\n      .transaction('collection', 'readwrite')\n      .objectStore('collection');\n\n    const { updates } = (await store.get(docId)) ?? { updates: [] };\n    let rows: UpdateMessage[] = [\n      ...updates,\n      { timestamp: Date.now(), update: data },\n    ];\n    if (this.mergeCount && rows.length >= this.mergeCount) {\n      const merged = mergeUpdates(rows.map(({ update }) => update));\n      rows = [{ timestamp: Date.now(), update: merged }];\n    }\n    await store.put({\n      id: docId,\n      updates: rows,\n    });\n    this.channel.postMessage({\n      type: 'db-updated',\n      payload: { docId, update: data },\n    } satisfies ChannelMessage);\n  }\n\n  subscribe(cb: (docId: string, data: Uint8Array) => void) {\n    function onMessage(event: MessageEvent<ChannelMessage>) {\n      const { type, payload } = event.data;\n      if (type === 'db-updated') {\n        const { docId, update } = payload;\n        cb(docId, update);\n      }\n    }\n    this.channel.addEventListener('message', onMessage);\n    return () => {\n      this.channel.removeEventListener('message', onMessage);\n    };\n  }\n}\n"]}