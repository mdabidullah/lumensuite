{"version":3,"file":"broadcast.js","sourceRoot":"","sources":["../../../src/doc/impl/broadcast.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,YAAY,EAAE,MAAM,0BAA0B,CAAC;AACxD,OAAO,EAAE,UAAU,EAAE,2BAA2B,EAAE,YAAY,EAAE,MAAM,KAAK,CAAC;AAc5E,MAAM,OAAO,yBAAyB;IA4BpC,YAAqB,cAAsB,gBAAgB;QAAtC,gBAAW,GAAX,WAAW,CAA2B;QA3BnD,eAAU,GAAG,CAAC,KAAmC,EAAE,EAAE;YAC3D,IAAI,KAAK,CAAC,IAAI,CAAC,IAAI,KAAK,MAAM,EAAE,CAAC;gBAC/B,KAAK,MAAM,CAAC,KAAK,EAAE,IAAI,CAAC,IAAI,IAAI,CAAC,MAAM,EAAE,CAAC;oBACxC,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC;wBACvB,IAAI,EAAE,QAAQ;wBACd,KAAK;wBACL,IAAI;qBACoB,CAAC,CAAC;gBAC9B,CAAC;gBACD,OAAO;YACT,CAAC;YAED,MAAM,EAAE,KAAK,EAAE,IAAI,EAAE,GAAG,KAAK,CAAC,IAAI,CAAC;YACnC,MAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;YACtC,IAAI,MAAM,EAAE,CAAC;gBACX,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,KAAK,EAAE,YAAY,CAAC,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC;YACvD,CAAC;iBAAM,CAAC;gBACN,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;YAC/B,CAAC;QACH,CAAC,CAAC;QAEF,YAAO,GAAG,IAAI,gBAAgB,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QAEjD,WAAM,GAAG,IAAI,GAAG,EAAsB,CAAC;QAEvC,SAAI,GAAG,mBAAmB,CAAC;QAGzB,IAAI,CAAC,OAAO,CAAC,gBAAgB,CAAC,SAAS,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC;QAE1D,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC;YACvB,IAAI,EAAE,MAAM;SACb,CAAC,CAAC;IACL,CAAC;IAED,IAAI,CAAC,KAAa,EAAE,KAAiB;QACnC,MAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;QACtC,IAAI,CAAC,MAAM;YAAE,OAAO,IAAI,CAAC;QAEzB,MAAM,IAAI,GAAG,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,UAAU,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC;QAC/D,OAAO,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,2BAA2B,CAAC,MAAM,CAAC,EAAE,CAAC;IACpE,CAAC;IAED,IAAI,CAAC,KAAa,EAAE,IAAgB;QAClC,MAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;QACtC,IAAI,MAAM,EAAE,CAAC;YACX,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,KAAK,EAAE,YAAY,CAAC,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC;QACvD,CAAC;aAAM,CAAC;YACN,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;QAC/B,CAAC;QAED,YAAY,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC;QACrC,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC;YACvB,IAAI,EAAE,QAAQ;YACd,KAAK;YACL,IAAI,EAAE,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,KAAK,CAAE;SACL,CAAC,CAAC;IAC9B,CAAC;IAED,SAAS,CAAC,EAA6C;QACrD,MAAM,eAAe,GAAG,IAAI,eAAe,EAAE,CAAC;QAC9C,IAAI,CAAC,OAAO,CAAC,gBAAgB,CAC3B,SAAS,EACT,CAAC,KAAmC,EAAE,EAAE;YACtC,IAAI,KAAK,CAAC,IAAI,CAAC,IAAI,KAAK,QAAQ;gBAAE,OAAO;YACzC,MAAM,EAAE,KAAK,EAAE,IAAI,EAAE,GAAG,KAAK,CAAC,IAAI,CAAC;YACnC,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;QAClB,CAAC,EACD,EAAE,MAAM,EAAE,eAAe,CAAC,MAAM,EAAE,CACnC,CAAC;QACF,OAAO,GAAG,EAAE;YACV,eAAe,CAAC,KAAK,EAAE,CAAC;QAC1B,CAAC,CAAC;IACJ,CAAC;CACF","sourcesContent":["import { assertExists } from '@blocksuite/global/utils';\nimport { diffUpdate, encodeStateVectorFromUpdate, mergeUpdates } from 'yjs';\n\nimport type { DocSource } from '../source.js';\n\ntype ChannelMessage =\n  | {\n      type: 'init';\n    }\n  | {\n      type: 'update';\n      docId: string;\n      data: Uint8Array;\n    };\n\nexport class BroadcastChannelDocSource implements DocSource {\n  private _onMessage = (event: MessageEvent<ChannelMessage>) => {\n    if (event.data.type === 'init') {\n      for (const [docId, data] of this.docMap) {\n        this.channel.postMessage({\n          type: 'update',\n          docId,\n          data,\n        } satisfies ChannelMessage);\n      }\n      return;\n    }\n\n    const { docId, data } = event.data;\n    const update = this.docMap.get(docId);\n    if (update) {\n      this.docMap.set(docId, mergeUpdates([update, data]));\n    } else {\n      this.docMap.set(docId, data);\n    }\n  };\n\n  channel = new BroadcastChannel(this.channelName);\n\n  docMap = new Map<string, Uint8Array>();\n\n  name = 'broadcast-channel';\n\n  constructor(readonly channelName: string = 'blocksuite:doc') {\n    this.channel.addEventListener('message', this._onMessage);\n\n    this.channel.postMessage({\n      type: 'init',\n    });\n  }\n\n  pull(docId: string, state: Uint8Array) {\n    const update = this.docMap.get(docId);\n    if (!update) return null;\n\n    const diff = state.length ? diffUpdate(update, state) : update;\n    return { data: diff, state: encodeStateVectorFromUpdate(update) };\n  }\n\n  push(docId: string, data: Uint8Array) {\n    const update = this.docMap.get(docId);\n    if (update) {\n      this.docMap.set(docId, mergeUpdates([update, data]));\n    } else {\n      this.docMap.set(docId, data);\n    }\n\n    assertExists(this.docMap.get(docId));\n    this.channel.postMessage({\n      type: 'update',\n      docId,\n      data: this.docMap.get(docId)!,\n    } satisfies ChannelMessage);\n  }\n\n  subscribe(cb: (docId: string, data: Uint8Array) => void) {\n    const abortController = new AbortController();\n    this.channel.addEventListener(\n      'message',\n      (event: MessageEvent<ChannelMessage>) => {\n        if (event.data.type !== 'update') return;\n        const { docId, data } = event.data;\n        cb(docId, data);\n      },\n      { signal: abortController.signal }\n    );\n    return () => {\n      abortController.abort();\n    };\n  }\n}\n"]}