{"version":3,"file":"broadcast.js","sourceRoot":"","sources":["../../../src/awareness/impl/broadcast.ts"],"names":[],"mappings":"AAEA,OAAO,EACL,oBAAoB,EACpB,qBAAqB,GACtB,MAAM,uBAAuB,CAAC;AAU/B,MAAM,OAAO,+BAA+B;IAqB1C,YAAqB,WAAmB;QAAnB,gBAAW,GAAX,WAAW,CAAQ;QApBxC,cAAS,GAAqB,IAAI,CAAC;QAEnC,YAAO,GAA4B,IAAI,CAAC;QAExC,0BAAqB,GAAG,CAAC,OAAyB,EAAE,MAAe,EAAE,EAAE;YACrE,IAAI,MAAM,KAAK,QAAQ,EAAE,CAAC;gBACxB,OAAO;YACT,CAAC;YAED,MAAM,cAAc,GAAG,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE,CAChE,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAChB,CAAC;YAEF,MAAM,MAAM,GAAG,qBAAqB,CAAC,IAAI,CAAC,SAAU,EAAE,cAAc,CAAC,CAAC;YACtE,IAAI,CAAC,OAAO,EAAE,WAAW,CAAC;gBACxB,IAAI,EAAE,QAAQ;gBACd,MAAM,EAAE,MAAM;aACU,CAAC,CAAC;QAC9B,CAAC,CAAC;IAEyC,CAAC;IAE5C,OAAO,CAAC,SAAoB;QAC1B,IAAI,CAAC,OAAO,GAAG,IAAI,gBAAgB,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QACtD,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC;YACvB,IAAI,EAAE,SAAS;SACS,CAAC,CAAC;QAC5B,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;QAC3B,SAAS,CAAC,EAAE,CAAC,QAAQ,EAAE,IAAI,CAAC,qBAAqB,CAAC,CAAC;QACnD,IAAI,CAAC,OAAO,CAAC,gBAAgB,CAC3B,SAAS,EACT,CAAC,KAAmC,EAAE,EAAE;YACtC,IAAI,CAAC,oBAAoB,CAAC,KAAK,CAAC,CAAC;QACnC,CAAC,CACF,CAAC;IACJ,CAAC;IAED,UAAU;QACR,IAAI,CAAC,SAAS,EAAE,GAAG,CAAC,QAAQ,EAAE,IAAI,CAAC,qBAAqB,CAAC,CAAC;QAC1D,IAAI,CAAC,OAAO,EAAE,KAAK,EAAE,CAAC;QACtB,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;IACtB,CAAC;IAED,oBAAoB,CAAC,KAAmC;QACtD,IAAI,KAAK,CAAC,IAAI,CAAC,IAAI,KAAK,QAAQ,EAAE,CAAC;YACjC,MAAM,MAAM,GAAG,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC;YACjC,oBAAoB,CAAC,IAAI,CAAC,SAAU,EAAE,MAAM,EAAE,QAAQ,CAAC,CAAC;QAC1D,CAAC;QACD,IAAI,KAAK,CAAC,IAAI,CAAC,IAAI,KAAK,SAAS,EAAE,CAAC;YAClC,IAAI,CAAC,OAAO,EAAE,WAAW,CAAC;gBACxB,IAAI,EAAE,QAAQ;gBACd,MAAM,EAAE,qBAAqB,CAAC,IAAI,CAAC,SAAU,EAAE;oBAC7C,IAAI,CAAC,SAAU,CAAC,QAAQ;iBACzB,CAAC;aACsB,CAAC,CAAC;QAC9B,CAAC;IACH,CAAC;CACF","sourcesContent":["import type { Awareness } from 'y-protocols/awareness';\n\nimport {\n  applyAwarenessUpdate,\n  encodeAwarenessUpdate,\n} from 'y-protocols/awareness';\n\nimport type { AwarenessSource } from '../source.js';\n\ntype AwarenessChanges = Record<'added' | 'updated' | 'removed', number[]>;\n\ntype ChannelMessage =\n  | { type: 'connect' }\n  | { type: 'update'; update: Uint8Array };\n\nexport class BroadcastChannelAwarenessSource implements AwarenessSource {\n  awareness: Awareness | null = null;\n\n  channel: BroadcastChannel | null = null;\n\n  handleAwarenessUpdate = (changes: AwarenessChanges, origin: unknown) => {\n    if (origin === 'remote') {\n      return;\n    }\n\n    const changedClients = Object.values(changes).reduce((res, cur) =>\n      res.concat(cur)\n    );\n\n    const update = encodeAwarenessUpdate(this.awareness!, changedClients);\n    this.channel?.postMessage({\n      type: 'update',\n      update: update,\n    } satisfies ChannelMessage);\n  };\n\n  constructor(readonly channelName: string) {}\n\n  connect(awareness: Awareness): void {\n    this.channel = new BroadcastChannel(this.channelName);\n    this.channel.postMessage({\n      type: 'connect',\n    } satisfies ChannelMessage);\n    this.awareness = awareness;\n    awareness.on('update', this.handleAwarenessUpdate);\n    this.channel.addEventListener(\n      'message',\n      (event: MessageEvent<ChannelMessage>) => {\n        this.handleChannelMessage(event);\n      }\n    );\n  }\n\n  disconnect(): void {\n    this.awareness?.off('update', this.handleAwarenessUpdate);\n    this.channel?.close();\n    this.channel = null;\n  }\n\n  handleChannelMessage(event: MessageEvent<ChannelMessage>) {\n    if (event.data.type === 'update') {\n      const update = event.data.update;\n      applyAwarenessUpdate(this.awareness!, update, 'remote');\n    }\n    if (event.data.type === 'connect') {\n      this.channel?.postMessage({\n        type: 'update',\n        update: encodeAwarenessUpdate(this.awareness!, [\n          this.awareness!.clientID,\n        ]),\n      } satisfies ChannelMessage);\n    }\n  }\n}\n"]}