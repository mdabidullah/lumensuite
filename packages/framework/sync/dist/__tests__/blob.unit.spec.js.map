{"version":3,"file":"blob.unit.spec.js","sourceRoot":"","sources":["../../src/__tests__/blob.unit.spec.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,0BAA0B,CAAC;AACtD,OAAO,EAAE,UAAU,EAAE,QAAQ,EAAE,MAAM,EAAE,EAAE,EAAE,MAAM,QAAQ,CAAC;AAE1D,OAAO,EAAE,UAAU,EAAE,MAAM,mBAAmB,CAAC;AAC/C,OAAO,EAAE,gBAAgB,EAAE,MAAM,uBAAuB,CAAC;AAEzD,QAAQ,CAAC,kCAAkC,EAAE,GAAG,EAAE;IAChD,IAAI,UAA4B,CAAC;IACjC,IAAI,YAA8B,CAAC;IACnC,IAAI,MAAkB,CAAC;IAEvB,UAAU,CAAC,GAAG,EAAE;QACd,UAAU,GAAG,IAAI,gBAAgB,EAAE,CAAC;QACpC,YAAY,GAAG,IAAI,gBAAgB,EAAE,CAAC;QACtC,MAAM,GAAG,IAAI,UAAU,CAAC,UAAU,EAAE,CAAC,YAAY,CAAC,EAAE,IAAI,UAAU,EAAE,CAAC,CAAC;IACxE,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,0BAA0B,EAAE,KAAK,IAAI,EAAE;QACxC,MAAM,IAAI,GAAG,IAAI,IAAI,CAAC,CAAC,MAAM,CAAC,EAAE,EAAE,IAAI,EAAE,YAAY,EAAE,CAAC,CAAC;QACxD,MAAM,GAAG,GAAG,MAAM,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QACnC,MAAM,aAAa,GAAG,MAAM,MAAM,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QAC5C,MAAM,CAAC,aAAa,CAAC,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC;QACrC,MAAM,CAAC,MAAM,aAAa,EAAE,IAAI,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IACnD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,mDAAmD,EAAE,KAAK,IAAI,EAAE;QACjE,MAAM,IAAI,GAAG,IAAI,IAAI,CAAC,CAAC,MAAM,CAAC,EAAE,EAAE,IAAI,EAAE,YAAY,EAAE,CAAC,CAAC;QACxD,MAAM,GAAG,GAAG,MAAM,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QACnC,MAAM,MAAM,CAAC,IAAI,EAAE,CAAC;QACpB,MAAM,aAAa,GAAG,MAAM,YAAY,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QAClD,MAAM,CAAC,aAAa,CAAC,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC;QACrC,MAAM,CAAC,MAAM,aAAa,EAAE,IAAI,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IACnD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,uBAAuB,EAAE,KAAK,IAAI,EAAE;QACrC,MAAM,KAAK,GAAG,IAAI,IAAI,CAAC,CAAC,OAAO,CAAC,EAAE,EAAE,IAAI,EAAE,YAAY,EAAE,CAAC,CAAC;QAC1D,MAAM,KAAK,GAAG,IAAI,IAAI,CAAC,CAAC,OAAO,CAAC,EAAE,EAAE,IAAI,EAAE,YAAY,EAAE,CAAC,CAAC;QAC1D,MAAM,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;QACxB,MAAM,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;QACxB,MAAM,QAAQ,GAAG,MAAM,MAAM,CAAC,IAAI,EAAE,CAAC;QACrC,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IAClC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,+CAA+C,EAAE,KAAK,IAAI,EAAE;QAC7D,MAAM,IAAI,GAAG,IAAI,IAAI,CAAC,CAAC,MAAM,CAAC,EAAE,EAAE,IAAI,EAAE,YAAY,EAAE,CAAC,CAAC;QACxD,MAAM,GAAG,GAAG,MAAM,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QACnC,MAAM,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;QACzB,MAAM,aAAa,GAAG,MAAM,MAAM,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QAC5C,MAAM,CAAC,aAAa,CAAC,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC;IACvC,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import { NoopLogger } from '@blocksuite/global/utils';\nimport { beforeEach, describe, expect, it } from 'vitest';\n\nimport { BlobEngine } from '../blob/engine.js';\nimport { MemoryBlobSource } from '../blob/impl/index.js';\n\ndescribe('BlobEngine with MemoryBlobSource', () => {\n  let mainSource: MemoryBlobSource;\n  let shadowSource: MemoryBlobSource;\n  let engine: BlobEngine;\n\n  beforeEach(() => {\n    mainSource = new MemoryBlobSource();\n    shadowSource = new MemoryBlobSource();\n    engine = new BlobEngine(mainSource, [shadowSource], new NoopLogger());\n  });\n\n  it('should set and get blobs', async () => {\n    const blob = new Blob(['test'], { type: 'text/plain' });\n    const key = await engine.set(blob);\n    const retrievedBlob = await engine.get(key);\n    expect(retrievedBlob).not.toBeNull();\n    expect(await retrievedBlob?.text()).toBe('test');\n  });\n\n  it('should sync blobs between main and shadow sources', async () => {\n    const blob = new Blob(['test'], { type: 'text/plain' });\n    const key = await engine.set(blob);\n    await engine.sync();\n    const retrievedBlob = await shadowSource.get(key);\n    expect(retrievedBlob).not.toBeNull();\n    expect(await retrievedBlob?.text()).toBe('test');\n  });\n\n  it('should list all blobs', async () => {\n    const blob1 = new Blob(['test1'], { type: 'text/plain' });\n    const blob2 = new Blob(['test2'], { type: 'text/plain' });\n    await engine.set(blob1);\n    await engine.set(blob2);\n    const blobList = await engine.list();\n    expect(blobList.length).toBe(2);\n  });\n\n  it('should not delete blobs (unsupported feature)', async () => {\n    const blob = new Blob(['test'], { type: 'text/plain' });\n    const key = await engine.set(blob);\n    await engine.delete(key);\n    const retrievedBlob = await engine.get(key);\n    expect(retrievedBlob).not.toBeNull();\n  });\n});\n"]}