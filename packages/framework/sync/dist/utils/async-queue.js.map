{"version":3,"file":"async-queue.js","sourceRoot":"","sources":["../../src/utils/async-queue.ts"],"names":[],"mappings":"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","sourcesContent":["export class AsyncQueue<T> {\n  private _queue: T[];\n\n  private _resolveUpdate: (() => void) | null = null;\n\n  private _waitForUpdate: Promise<void> | null = null;\n\n  get length() {\n    return this._queue.length;\n  }\n\n  constructor(init: T[] = []) {\n    this._queue = init;\n  }\n\n  clear() {\n    this._queue = [];\n  }\n\n  find(predicate: (update: T) => boolean) {\n    return this._queue.find(predicate);\n  }\n\n  async next(\n    abort?: AbortSignal,\n    dequeue: (arr: T[]) => T | undefined = a => a.shift()\n  ): Promise<T> {\n    const update = dequeue(this._queue);\n    if (update) {\n      return update;\n    } else {\n      if (!this._waitForUpdate) {\n        this._waitForUpdate = new Promise(resolve => {\n          this._resolveUpdate = resolve;\n        });\n      }\n\n      await Promise.race([\n        this._waitForUpdate,\n        new Promise((_, reject) => {\n          if (abort?.aborted) {\n            reject(abort?.reason);\n          }\n          abort?.addEventListener('abort', () => {\n            reject(abort.reason);\n          });\n        }),\n      ]);\n\n      return this.next(abort, dequeue);\n    }\n  }\n\n  push(...updates: T[]) {\n    this._queue.push(...updates);\n    if (this._resolveUpdate) {\n      const resolve = this._resolveUpdate;\n      this._resolveUpdate = null;\n      this._waitForUpdate = null;\n      resolve();\n    }\n  }\n\n  remove(predicate: (update: T) => boolean) {\n    const index = this._queue.findIndex(predicate);\n    if (index !== -1) {\n      this._queue.splice(index, 1);\n    }\n  }\n}\n\nexport class PriorityAsyncQueue<\n  T extends { id: string },\n> extends AsyncQueue<T> {\n  constructor(\n    init: T[] = [],\n    readonly priorityTarget: SharedPriorityTarget = new SharedPriorityTarget()\n  ) {\n    super(init);\n  }\n\n  override next(abort?: AbortSignal | undefined): Promise<T> {\n    return super.next(abort, arr => {\n      if (this.priorityTarget.priorityRule !== null) {\n        const index = arr.findIndex(update =>\n          this.priorityTarget.priorityRule?.(update.id)\n        );\n        if (index !== -1) {\n          return arr.splice(index, 1)[0];\n        }\n      }\n      return arr.shift();\n    });\n  }\n}\n\n/**\n * Shared priority target can be shared by multiple queues.\n */\nexport class SharedPriorityTarget {\n  priorityRule: ((id: string) => boolean) | null = null;\n}\n"]}