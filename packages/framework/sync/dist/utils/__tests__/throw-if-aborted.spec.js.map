{"version":3,"file":"throw-if-aborted.spec.js","sourceRoot":"","sources":["../../../src/utils/__tests__/throw-if-aborted.spec.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,QAAQ,EAAE,MAAM,EAAE,IAAI,EAAE,MAAM,QAAQ,CAAC;AAEhD,OAAO,EAAE,cAAc,EAAE,MAAM,wBAAwB,CAAC;AAExD,QAAQ,CAAC,kBAAkB,EAAE,GAAG,EAAE;IAChC,IAAI,CAAC,OAAO,EAAE,GAAG,EAAE;QACjB,MAAM,eAAe,GAAG,IAAI,eAAe,EAAE,CAAC;QAC9C,MAAM,WAAW,GAAG,eAAe,CAAC,MAAM,CAAC;QAC3C,MAAM,CAAC,cAAc,CAAC,WAAW,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC/C,eAAe,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC;QACpC,MAAM,CAAC,GAAG,EAAE,CAAC,cAAc,CAAC,WAAW,CAAC,CAAC,CAAC,YAAY,CAAC,YAAY,CAAC,CAAC;IACvE,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import { describe, expect, test } from 'vitest';\n\nimport { throwIfAborted } from '../throw-if-aborted.js';\n\ndescribe('throw-if-aborted', () => {\n  test('basic', () => {\n    const abortController = new AbortController();\n    const abortSignal = abortController.signal;\n    expect(throwIfAborted(abortSignal)).toBe(true);\n    abortController.abort('TEST_ABORT');\n    expect(() => throwIfAborted(abortSignal)).toThrowError('TEST_ABORT');\n  });\n});\n"]}