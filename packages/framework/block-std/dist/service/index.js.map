{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/service/index.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,gBAAgB,EAAE,MAAM,uBAAuB,CAAC;AACzD,OAAO,EAAE,sBAAsB,EAAE,MAAM,kBAAkB,CAAC;AAE1D,MAAM,OAAO,cAAe,SAAQ,gBAAgB;aACzB,QAAG,GAAG,gBAAgB,CAAC;IAEvC,OAAO;QACd,KAAK,CAAC,OAAO,EAAE,CAAC;QAEhB,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,MAAM,CAAC,sBAAsB,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE;YACjE,OAAO,CAAC,OAAO,EAAE,CAAC;QACpB,CAAC,CAAC,CAAC;IACL,CAAC;IAEQ,SAAS;QAChB,KAAK,CAAC,SAAS,EAAE,CAAC;QAElB,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,MAAM,CAAC,sBAAsB,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE;YACjE,OAAO,CAAC,SAAS,EAAE,CAAC;QACtB,CAAC,CAAC,CAAC;IACL,CAAC","sourcesContent":["import { LifeCycleWatcher } from '../extension/index.js';\nimport { BlockServiceIdentifier } from '../identifier.js';\n\nexport class ServiceManager extends LifeCycleWatcher {\n  static override readonly key = 'serviceManager';\n\n  override mounted() {\n    super.mounted();\n\n    this.std.provider.getAll(BlockServiceIdentifier).forEach(service => {\n      service.mounted();\n    });\n  }\n\n  override unmounted() {\n    super.unmounted();\n\n    this.std.provider.getAll(BlockServiceIdentifier).forEach(service => {\n      service.unmounted();\n    });\n  }\n}\n"]}