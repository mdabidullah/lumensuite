{"version":3,"file":"editor-host.unit.spec.js","sourceRoot":"","sources":["../../src/__tests__/editor-host.unit.spec.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,aAAa,EAAE,eAAe,EAAE,MAAM,EAAE,MAAM,mBAAmB,CAAC;AAC3E,OAAO,EAAE,QAAQ,EAAE,MAAM,EAAE,IAAI,EAAE,MAAM,QAAQ,CAAC;AAEhD,OAAO,EAAE,mBAAmB,EAAE,MAAM,kBAAkB,CAAC;AACvD,OAAO,EAEL,kBAAkB,EAClB,eAAe,EACf,eAAe,GAChB,MAAM,kBAAkB,CAAC;AAC1B,OAAO,EAAE,SAAS,EAAE,MAAM,gBAAgB,CAAC;AAE3C,SAAS,iBAAiB;IACxB,MAAM,WAAW,GAAG,eAAe,CAAC,aAAa,CAAC;IAClD,MAAM,MAAM,GAAG,IAAI,MAAM,EAAE,CAAC;IAC5B,MAAM,CAAC,QAAQ,CAAC,CAAC,eAAe,EAAE,eAAe,EAAE,kBAAkB,CAAC,CAAC,CAAC;IACxE,OAAO,EAAE,EAAE,EAAE,iBAAiB,EAAE,WAAW,EAAE,MAAM,EAAE,CAAC;AACxD,CAAC;AAED,SAAS,IAAI,CAAC,IAAY;IACxB,OAAO,IAAI,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,UAAU,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC,CAAC;AAC3D,CAAC;AAED,QAAQ,CAAC,aAAa,EAAE,GAAG,EAAE;IAC3B,IAAI,CAAC,qDAAqD,EAAE,KAAK,IAAI,EAAE;QACrE,MAAM,UAAU,GAAG,IAAI,aAAa,CAAC,iBAAiB,EAAE,CAAC,CAAC;QAE1D,UAAU,CAAC,IAAI,CAAC,UAAU,EAAE,CAAC;QAC7B,MAAM,GAAG,GAAG,UAAU,CAAC,SAAS,CAAC,EAAE,EAAE,EAAE,MAAM,EAAE,CAAC,CAAC;QACjD,GAAG,CAAC,IAAI,EAAE,CAAC;QACX,MAAM,MAAM,GAAG,GAAG,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC;QACzC,MAAM,MAAM,GAAG,GAAG,CAAC,QAAQ,CAAC,WAAW,EAAE,EAAE,EAAE,MAAM,CAAC,CAAC;QACrD,MAAM,SAAS,GAAG,GAAG,CAAC,QAAQ,CAAC,cAAc,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,EAAE,MAAM,CAAC,CAAC;QACvE,MAAM,YAAY,GAAG,GAAG,CAAC,QAAQ,CAAC,SAAS,CAAE,CAAC;QAE9C,MAAM,eAAe,GAAG,IAAI,mBAAmB,EAAE,CAAC;QAClD,eAAe,CAAC,GAAG,GAAG,GAAG,CAAC;QAC1B,eAAe,CAAC,KAAK,GAAG,SAAS,CAAC;QAElC,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC,CAAC;QAEtC,MAAM,IAAI,CAAC,EAAE,CAAC,CAAC;QACf,IAAI,UAAU,GAAG,eAAe,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;QAE9D,MAAM,CAAC,UAAW,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;QAEjD,YAAY,CAAC,KAA2B,CAAC,IAAI,GAAG,IAAI,CAAC;QACtD,MAAM,IAAI,CAAC,EAAE,CAAC,CAAC;QACf,UAAU,GAAG,eAAe,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;QAE1D,MAAM,CAAC,UAAW,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;IACpD,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import { DocCollection, IdGeneratorType, Schema } from '@blocksuite/store';\nimport { describe, expect, test } from 'vitest';\n\nimport { TestEditorContainer } from './test-editor.js';\nimport {\n  type HeadingBlockModel,\n  HeadingBlockSchema,\n  NoteBlockSchema,\n  RootBlockSchema,\n} from './test-schema.js';\nimport { testSpecs } from './test-spec.js';\n\nfunction createTestOptions() {\n  const idGenerator = IdGeneratorType.AutoIncrement;\n  const schema = new Schema();\n  schema.register([RootBlockSchema, NoteBlockSchema, HeadingBlockSchema]);\n  return { id: 'test-collection', idGenerator, schema };\n}\n\nfunction wait(time: number) {\n  return new Promise(resolve => setTimeout(resolve, time));\n}\n\ndescribe('editor host', () => {\n  test('editor host should rerender model when view changes', async () => {\n    const collection = new DocCollection(createTestOptions());\n\n    collection.meta.initialize();\n    const doc = collection.createDoc({ id: 'home' });\n    doc.load();\n    const rootId = doc.addBlock('test:page');\n    const noteId = doc.addBlock('test:note', {}, rootId);\n    const headingId = doc.addBlock('test:heading', { type: 'h1' }, noteId);\n    const headingBlock = doc.getBlock(headingId)!;\n\n    const editorContainer = new TestEditorContainer();\n    editorContainer.doc = doc;\n    editorContainer.specs = testSpecs;\n\n    document.body.append(editorContainer);\n\n    await wait(50);\n    let headingElm = editorContainer.std.view.getBlock(headingId);\n\n    expect(headingElm!.tagName).toBe('TEST-H1-BLOCK');\n\n    (headingBlock.model as HeadingBlockModel).type = 'h2';\n    await wait(50);\n    headingElm = editorContainer.std.view.getBlock(headingId);\n\n    expect(headingElm!.tagName).toBe('TEST-H2-BLOCK');\n  });\n});\n"]}