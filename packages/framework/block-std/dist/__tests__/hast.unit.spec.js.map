{"version":3,"file":"hast.unit.spec.js","sourceRoot":"","sources":["../../src/__tests__/hast.unit.spec.ts"],"names":[],"mappings":"AAAA,OAAO,WAAW,MAAM,cAAc,CAAC;AACvC,OAAO,EAAE,OAAO,EAAE,MAAM,SAAS,CAAC;AAClC,OAAO,EAAE,QAAQ,EAAE,MAAM,EAAE,IAAI,EAAE,MAAM,QAAQ,CAAC;AAEhD,OAAO,EAAE,qBAAqB,EAAE,MAAM,uBAAuB,CAAC;AAE9D,QAAQ,CAAC,4BAA4B,EAAE,GAAG,EAAE;IAC1C,IAAI,CAAC,kBAAkB,EAAE,GAAG,EAAE;QAC5B,MAAM,OAAO,GAAG,OAAO,EAAE,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC,KAAK,CAAC;;;;;QAK7C,CAAC,CAAC;QACN,MAAM,SAAS,GACb,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,qBAAqB,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE;YAC1D,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,IAAI,EAAE,CAAC;gBAC7B,OAAO,IAAI,CAAC;YACd,CAAC;YACD,IAAI,CAAC,KAAK,OAAO,IAAI,CAAC,KAAK,OAAO,EAAE,CAAC;gBACnC,OAAO,OAAO,CAAC;YACjB,CAAC;YACD,OAAO,KAAK,CAAC;QACf,CAAC,EAAE,OAAO,CAAC,KAAK,KAAK,CAAC;QACxB,MAAM,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC/B,CAAC,CAAC,CAAC;IAEH,IAAI,CAAC,qBAAqB,EAAE,GAAG,EAAE;QAC/B,MAAM,OAAO,GAAG,OAAO,EAAE,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC,KAAK,CAAC;;;;QAI7C,CAAC,CAAC;QACN,MAAM,SAAS,GACb,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,qBAAqB,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE;YAC1D,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,IAAI,EAAE,CAAC;gBAC7B,OAAO,IAAI,CAAC;YACd,CAAC;YACD,IAAI,CAAC,KAAK,OAAO,IAAI,CAAC,KAAK,OAAO,EAAE,CAAC;gBACnC,OAAO,OAAO,CAAC;YACjB,CAAC;YACD,OAAO,KAAK,CAAC;QACf,CAAC,EAAE,OAAO,CAAC,KAAK,KAAK,CAAC;QACxB,MAAM,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC/B,CAAC,CAAC,CAAC;IAEH,IAAI,CAAC,eAAe,EAAE,GAAG,EAAE;QACzB,MAAM,OAAO,GAAG,OAAO,EAAE,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC,KAAK,CAAC;;;;QAI7C,CAAC,CAAC;QACN,MAAM,SAAS,GACb,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,qBAAqB,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE;YAC1D,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,IAAI,EAAE,CAAC;gBAC7B,OAAO,IAAI,CAAC;YACd,CAAC;YACD,IAAI,CAAC,KAAK,OAAO,IAAI,CAAC,KAAK,OAAO,EAAE,CAAC;gBACnC,OAAO,OAAO,CAAC;YACjB,CAAC;YACD,OAAO,KAAK,CAAC;QACf,CAAC,EAAE,OAAO,CAAC,KAAK,KAAK,CAAC;QACxB,MAAM,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAChC,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import rehypeParse from 'rehype-parse';\nimport { unified } from 'unified';\nimport { describe, expect, test } from 'vitest';\n\nimport { onlyContainImgElement } from '../clipboard/index.js';\n\ndescribe('only contains img elements', () => {\n  test('normal with head', () => {\n    const htmlAst = unified().use(rehypeParse).parse(`<html>\n<head></head>\n<body>\n<!--StartFragment--><img src=\"https://files.slack.com/deadbeef.png\" alt=\"image.png\"/><!--EndFragment-->\n</body>\n</html>`);\n    const isImgOnly =\n      htmlAst.children.map(onlyContainImgElement).reduce((a, b) => {\n        if (a === 'no' || b === 'no') {\n          return 'no';\n        }\n        if (a === 'maybe' && b === 'maybe') {\n          return 'maybe';\n        }\n        return 'yes';\n      }, 'maybe') === 'yes';\n    expect(isImgOnly).toBe(true);\n  });\n\n  test('normal without head', () => {\n    const htmlAst = unified().use(rehypeParse).parse(`<html>\n<body>\n<!--StartFragment--><img src=\"https://files.slack.com/deadbeef.png\" alt=\"image.png\"/><!--EndFragment-->\n</body>\n</html>`);\n    const isImgOnly =\n      htmlAst.children.map(onlyContainImgElement).reduce((a, b) => {\n        if (a === 'no' || b === 'no') {\n          return 'no';\n        }\n        if (a === 'maybe' && b === 'maybe') {\n          return 'maybe';\n        }\n        return 'yes';\n      }, 'maybe') === 'yes';\n    expect(isImgOnly).toBe(true);\n  });\n\n  test('contain spans', () => {\n    const htmlAst = unified().use(rehypeParse).parse(`<html>\n<body>\n<!--StartFragment--><img src=\"https://files.slack.com/deadbeef.png\" alt=\"image.png\"/><span></span><!--EndFragment-->\n</body>\n</html>`);\n    const isImgOnly =\n      htmlAst.children.map(onlyContainImgElement).reduce((a, b) => {\n        if (a === 'no' || b === 'no') {\n          return 'no';\n        }\n        if (a === 'maybe' && b === 'maybe') {\n          return 'maybe';\n        }\n        return 'yes';\n      }, 'maybe') === 'yes';\n    expect(isImgOnly).toBe(false);\n  });\n});\n"]}