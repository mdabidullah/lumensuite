{"version":3,"file":"command.unit.spec.js","sourceRoot":"","sources":["../../src/__tests__/command.unit.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { beforeEach, describe, expect, test, vi } from 'vitest';\n\nimport type { Command } from '../command/index.js';\n\nimport { CommandManager } from '../command/index.js';\n\ntype Command1 = Command<\n  never,\n  'commandData1',\n  {\n    command1Option?: string;\n  }\n>;\n\ntype Command2 = Command<'commandData1', 'commandData2'>;\n\ntype Command3 = Command<'commandData1' | 'commandData2', 'commandData3'>;\n\ndeclare global {\n  namespace LumenSuite {\n    interface CommandContext {\n      commandData1?: string;\n      commandData2?: string;\n      commandData3?: string;\n    }\n\n    interface Commands {\n      command1: Command1;\n      command2: Command2;\n      command3: Command3;\n      command4: Command;\n    }\n  }\n}\n\ndescribe('CommandManager', () => {\n  let std: LumenSuite.Std;\n  let commandManager: CommandManager;\n\n  beforeEach(() => {\n    // @ts-ignore\n    std = {};\n    commandManager = new CommandManager(std);\n  });\n\n  test('can add and execute a command', () => {\n    const command1: Command = vi.fn((_ctx, next) => next());\n    const command2: Command = vi.fn((_ctx, _next) => {});\n    commandManager.add('command1', command1);\n    commandManager.add('command2', command2);\n\n    const [success1] = commandManager.chain().command1().run();\n    const [success2] = commandManager.chain().command2().run();\n\n    expect(command1).toHaveBeenCalled();\n    expect(command2).toHaveBeenCalled();\n    expect(success1).toBeTruthy();\n    expect(success2).toBeFalsy();\n  });\n\n  test('can chain multiple commands', () => {\n    const command1: Command = vi.fn((_ctx, next) => next());\n    const command2: Command = vi.fn((_ctx, next) => next());\n    const command3: Command = vi.fn((_ctx, next) => next());\n\n    commandManager.add('command1', command1);\n    commandManager.add('command2', command2);\n    commandManager.add('command3', command3);\n\n    const [success] = commandManager\n      .chain()\n      .command1()\n      .command2()\n      .command3()\n      .run();\n\n    expect(command1).toHaveBeenCalled();\n    expect(command2).toHaveBeenCalled();\n    expect(command3).toHaveBeenCalled();\n    expect(success).toBeTruthy();\n  });\n\n  test('skip commands if there is a command failed before them (`next` not executed)', () => {\n    const command1: Command = vi.fn((_ctx, next) => next());\n    const command2: Command = vi.fn((_ctx, _next) => {});\n    const command3: Command = vi.fn((_ctx, next) => next());\n\n    commandManager.add('command1', command1);\n    commandManager.add('command2', command2);\n    commandManager.add('command3', command3);\n\n    const [success] = commandManager\n      .chain()\n      .command1()\n      .command2()\n      .command3()\n      .run();\n\n    expect(command1).toHaveBeenCalled();\n    expect(command2).toHaveBeenCalled();\n    expect(command3).not.toHaveBeenCalled();\n    expect(success).toBeFalsy();\n  });\n\n  test('can handle command failure', () => {\n    const errorSpy = vi.spyOn(console, 'error').mockImplementation(() => {});\n\n    const command1: Command = vi.fn((_ctx, next) => next());\n    const command2: Command = vi.fn((_ctx, _next) => {\n      throw new Error('command2 failed');\n    });\n    const command3: Command = vi.fn((_ctx, next) => next());\n\n    commandManager.add('command1', command1);\n    commandManager.add('command2', command2);\n    commandManager.add('command3', command3);\n\n    const [success] = commandManager\n      .chain()\n      .command1()\n      .command2()\n      .command3()\n      .run();\n\n    expect(command1).toHaveBeenCalled();\n    expect(command2).toHaveBeenCalled();\n    expect(command3).not.toHaveBeenCalled();\n    expect(success).toBeFalsy();\n    expect(errorSpy).toHaveBeenCalledWith(new Error('command2 failed'));\n  });\n\n  test('can pass data to command when calling a command', () => {\n    const command1: Command = vi.fn((_ctx, next) => next());\n\n    commandManager.add('command1', command1);\n\n    const [success] = commandManager\n      .chain()\n      .command1({ command1Option: 'test' })\n      .run();\n\n    expect(command1).toHaveBeenCalledWith(\n      expect.objectContaining({ command1Option: 'test' }),\n      expect.any(Function)\n    );\n    expect(success).toBeTruthy();\n  });\n\n  test('can add data to the command chain with `with` method', () => {\n    const command1: Command = vi.fn((_ctx, next) => next());\n\n    commandManager.add('command1', command1);\n\n    const [success, ctx] = commandManager\n      .chain()\n      .with({ commandData1: 'test' })\n      .command1()\n      .run();\n\n    expect(command1).toHaveBeenCalledWith(\n      expect.objectContaining({ commandData1: 'test' }),\n      expect.any(Function)\n    );\n    expect(success).toBeTruthy();\n    expect(ctx.commandData1).toBe('test');\n  });\n\n  test('passes and updates context across commands', () => {\n    const command1: Command<'std', 'commandData1'> = vi.fn((_ctx, next) =>\n      next({ commandData1: '123' })\n    );\n    const command2: Command<'commandData1'> = vi.fn((ctx, next) => {\n      expect(ctx.commandData1).toBe('123');\n      next({ commandData1: '456' });\n    });\n\n    commandManager.add('command1', command1);\n    commandManager.add('command2', command2);\n\n    const [success, ctx] = commandManager.chain().command1().command2().run();\n\n    expect(command1).toHaveBeenCalled();\n    expect(command2).toHaveBeenCalled();\n    expect(success).toBeTruthy();\n    expect(ctx.commandData1).toBe('456');\n  });\n\n  test('can execute an inline command', () => {\n    const inlineCommand: Command = vi.fn((_ctx, next) => next());\n\n    const success = commandManager.chain().inline(inlineCommand).run();\n\n    expect(inlineCommand).toHaveBeenCalled();\n    expect(success).toBeTruthy();\n  });\n\n  test('can execute a single command with `exec`', () => {\n    const command1: Command1 = vi.fn((_ctx, next) =>\n      next({ commandData1: (_ctx.command1Option ?? '') + '123' })\n    );\n    const command2: Command2 = vi.fn((_ctx, next) =>\n      next({ commandData2: 'cmd2' })\n    );\n    const command3: Command3 = vi.fn((_ctx, next) => next());\n\n    commandManager.add('command1', command1);\n    commandManager.add('command2', command2);\n    commandManager.add('command3', command3);\n\n    const result1 = commandManager.exec('command1');\n    const result2 = commandManager.exec('command1', {\n      command1Option: 'test',\n    });\n    const result3 = commandManager.exec('command2');\n    const result4 = commandManager.exec('command3');\n\n    expect(command1).toHaveBeenCalled();\n    expect(command2).toHaveBeenCalled();\n    expect(command3).toHaveBeenCalled();\n    expect(result1).toEqual({ commandData1: '123', success: true });\n    expect(result2).toEqual({ commandData1: 'test123', success: true });\n    expect(result3).toEqual({ commandData2: 'cmd2', success: true });\n    expect(result4).toEqual({ success: true });\n  });\n\n  test('should not continue with the rest of the chain if all commands in `try` fail', () => {\n    const command1: Command<never, 'commandData1'> = vi.fn((_ctx, _next) => {});\n    const command2: Command = vi.fn((_ctx, _next) => {});\n    const command3: Command = vi.fn((_ctx, next) => next());\n\n    commandManager.add('command1', command1);\n    commandManager.add('command2', command2);\n    commandManager.add('command3', command3);\n\n    const [success] = commandManager\n      .chain()\n      .try(cmd => [cmd.command1(), cmd.command2()])\n      .command3()\n      .run();\n\n    expect(command1).toHaveBeenCalled();\n    expect(command2).toHaveBeenCalled();\n    expect(command3).not.toHaveBeenCalled();\n    expect(success).toBeFalsy();\n  });\n\n  test('should not re-execute previous commands in the chain before `try`', () => {\n    const command1: Command1 = vi.fn((_ctx, next) =>\n      next({ commandData1: '123' })\n    );\n    const command2: Command = vi.fn((_ctx, _next) => {});\n    const command3: Command = vi.fn((_ctx, next) => next());\n\n    commandManager.add('command1', command1);\n    commandManager.add('command2', command2);\n    commandManager.add('command3', command3);\n\n    const [success, ctx] = commandManager\n      .chain()\n      .command1()\n      .try(cmd => [cmd.command2(), cmd.command3()])\n      .run();\n\n    expect(command1).toHaveBeenCalledTimes(1);\n    expect(command2).toHaveBeenCalled();\n    expect(command3).toHaveBeenCalled();\n    expect(success).toBeTruthy();\n    expect(ctx.commandData1).toBe('123');\n  });\n\n  test('should continue with the rest of the chain if one command in `try` succeeds', () => {\n    const command1: Command1 = vi.fn((_ctx, _next) => {});\n    const command2: Command2 = vi.fn((_ctx, next) =>\n      next({ commandData2: '123' })\n    );\n    const command3: Command3 = vi.fn((_ctx, next) =>\n      next({ commandData3: '456' })\n    );\n\n    commandManager.add('command1', command1);\n    commandManager.add('command2', command2);\n    commandManager.add('command3', command3);\n\n    const [success, ctx] = commandManager\n      .chain()\n      .try(cmd => [cmd.command1(), cmd.command2()])\n      .command3()\n      .run();\n\n    expect(command1).toHaveBeenCalled();\n    expect(command2).toHaveBeenCalled();\n    expect(command3).toHaveBeenCalled();\n    expect(success).toBeTruthy();\n    expect(ctx.commandData1).toBeUndefined();\n    expect(ctx.commandData2).toBe('123');\n    expect(ctx.commandData3).toBe('456');\n  });\n\n  test('should not execute any further commands in `try` after one succeeds', () => {\n    const command1: Command1 = vi.fn((_ctx, next) =>\n      next({ commandData1: '123' })\n    );\n    const command2: Command2 = vi.fn((_ctx, next) =>\n      next({ commandData2: '456' })\n    );\n\n    commandManager.add('command1', command1);\n    commandManager.add('command2', command2);\n\n    const [success, ctx] = commandManager\n      .chain()\n      .try(cmd => [cmd.command1(), cmd.command2()])\n      .run();\n\n    expect(command1).toHaveBeenCalled();\n    expect(command2).not.toHaveBeenCalled();\n    expect(success).toBeTruthy();\n    expect(ctx.commandData1).toBe('123');\n    expect(ctx.commandData2).toBeUndefined();\n  });\n\n  test('should pass context correctly in `try` when a command succeeds', () => {\n    const command1: Command = vi.fn((_ctx, next) =>\n      next({ commandData1: 'fromCommand1', commandData2: 'fromCommand1' })\n    );\n    const command2: Command<'commandData1' | 'commandData2'> = vi.fn(\n      (ctx, next) => {\n        expect(ctx.commandData1).toBe('fromCommand1');\n        expect(ctx.commandData2).toBe('fromCommand1');\n        // override commandData2\n        next({ commandData2: 'fromCommand2' });\n      }\n    );\n    const command3: Command<'commandData1' | 'commandData2'> = vi.fn(\n      (ctx, next) => {\n        expect(ctx.commandData1).toBe('fromCommand1');\n        expect(ctx.commandData2).toBe('fromCommand2');\n        next();\n      }\n    );\n\n    commandManager.add('command1', command1);\n    commandManager.add('command2', command2);\n    commandManager.add('command3', command3);\n\n    const [success] = commandManager\n      .chain()\n      .command1()\n      .try(cmd => [cmd.command2()])\n      .command3()\n      .run();\n\n    expect(command1).toHaveBeenCalled();\n    expect(command2).toHaveBeenCalled();\n    expect(command3).toHaveBeenCalled();\n    expect(success).toBeTruthy();\n  });\n\n  test('should continue with the rest of the chain if at least one command in `tryAll` succeeds', () => {\n    const command1: Command = vi.fn((_ctx, _next) => {});\n    const command2: Command = vi.fn((_ctx, next) => next());\n    const command3: Command = vi.fn((_ctx, next) => next());\n\n    commandManager.add('command1', command1);\n    commandManager.add('command2', command2);\n    commandManager.add('command3', command3);\n\n    const [success] = commandManager\n      .chain()\n      .tryAll(cmd => [cmd.command1(), cmd.command2()])\n      .command3()\n      .run();\n\n    expect(command1).toHaveBeenCalled();\n    expect(command2).toHaveBeenCalled();\n    expect(command3).toHaveBeenCalled();\n    expect(success).toBeTruthy();\n  });\n\n  test('should execute all commands in `tryAll` even if one has already succeeded', () => {\n    const command1: Command1 = vi.fn((_ctx, next) =>\n      next({ commandData1: '123' })\n    );\n    const command2: Command2 = vi.fn((_ctx, next) =>\n      next({ commandData2: '456' })\n    );\n    const command3: Command3 = vi.fn((_ctx, next) =>\n      next({ commandData3: '789' })\n    );\n\n    commandManager.add('command1', command1);\n    commandManager.add('command2', command2);\n    commandManager.add('command3', command3);\n\n    const [success, ctx] = commandManager\n      .chain()\n      .tryAll(cmd => [cmd.command1(), cmd.command2(), cmd.command3()])\n      .run();\n\n    expect(command1).toHaveBeenCalled();\n    expect(command2).toHaveBeenCalled();\n    expect(command3).toHaveBeenCalled();\n    expect(ctx.commandData1).toBe('123');\n    expect(ctx.commandData2).toBe('456');\n    expect(ctx.commandData3).toBe('789');\n    expect(success).toBeTruthy();\n  });\n\n  test('should not continue with the rest of the chain if all commands in `tryAll` fail', () => {\n    const command1: Command1 = vi.fn((_ctx, _next) => {});\n    const command2: Command2 = vi.fn((_ctx, _next) => {});\n    const command3: Command3 = vi.fn((_ctx, next) =>\n      next({ commandData3: '123' })\n    );\n\n    commandManager.add('command1', command1);\n    commandManager.add('command2', command2);\n    commandManager.add('command3', command3);\n\n    const [success, ctx] = commandManager\n      .chain()\n      .tryAll(cmd => [cmd.command1(), cmd.command2()])\n      .command3()\n      .run();\n\n    expect(command1).toHaveBeenCalled();\n    expect(command2).toHaveBeenCalled();\n    expect(command3).not.toHaveBeenCalled();\n    expect(ctx.commandData3).toBeUndefined();\n    expect(success).toBeFalsy();\n  });\n\n  test('should pass context correctly in `tryAll` when at least one command succeeds', () => {\n    const command1: Command = vi.fn((_ctx, next) =>\n      next({ commandData1: 'fromCommand1' })\n    );\n    const command2: Command<'commandData1'> = vi.fn((ctx, next) => {\n      expect(ctx.commandData1).toBe('fromCommand1');\n      // override commandData1\n      next({ commandData1: 'fromCommand2', commandData2: 'fromCommand2' });\n    });\n    const command3: Command<'commandData1' | 'commandData2'> = vi.fn(\n      (ctx, next) => {\n        expect(ctx.commandData1).toBe('fromCommand2');\n        expect(ctx.commandData2).toBe('fromCommand2');\n        next({\n          // override commandData2\n          commandData2: 'fromCommand3',\n          commandData3: 'fromCommand3',\n        });\n      }\n    );\n    const command4: Command<'commandData1' | 'commandData2' | 'commandData3'> =\n      vi.fn((ctx, next) => {\n        expect(ctx.commandData1).toBe('fromCommand2');\n        expect(ctx.commandData2).toBe('fromCommand3');\n        expect(ctx.commandData3).toBe('fromCommand3');\n        next();\n      });\n\n    commandManager.add('command1', command1);\n    commandManager.add('command2', command2);\n    commandManager.add('command3', command3);\n    commandManager.add('command4', command4);\n\n    const [success, ctx] = commandManager\n      .chain()\n      .command1()\n      .tryAll(cmd => [cmd.command2(), cmd.command3()])\n      .command4()\n      .run();\n\n    expect(command1).toHaveBeenCalled();\n    expect(command2).toHaveBeenCalled();\n    expect(command3).toHaveBeenCalled();\n    expect(command4).toHaveBeenCalled();\n    expect(success).toBeTruthy();\n    expect(ctx.commandData1).toBe('fromCommand2');\n    expect(ctx.commandData2).toBe('fromCommand3');\n    expect(ctx.commandData3).toBe('fromCommand3');\n  });\n\n  test('should not re-execute commands before `tryAll` after executing `tryAll`', () => {\n    const command1: Command = vi.fn((_ctx, next) => next());\n    const command2: Command = vi.fn((_ctx, next) => next());\n    const command3: Command = vi.fn((_ctx, _next) => {});\n    const command4: Command = vi.fn((_ctx, next) => next());\n\n    commandManager.add('command1', command1);\n    commandManager.add('command2', command2);\n    commandManager.add('command3', command3);\n    commandManager.add('command4', command4);\n\n    const [success] = commandManager\n      .chain()\n      .command1()\n      .tryAll(cmd => [cmd.command2(), cmd.command3()])\n      .command4()\n      .run();\n\n    expect(command1).toHaveBeenCalledTimes(1);\n    expect(command2).toHaveBeenCalled();\n    expect(command3).toHaveBeenCalled();\n    expect(command4).toHaveBeenCalled();\n    expect(success).toBeTruthy();\n  });\n});\n"]}