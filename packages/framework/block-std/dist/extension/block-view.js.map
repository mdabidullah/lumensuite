{"version":3,"file":"block-view.js","sourceRoot":"","sources":["../../src/extension/block-view.ts"],"names":[],"mappings":"AAGA,OAAO,EAAE,mBAAmB,EAAE,MAAM,kBAAkB,CAAC;AAEvD;;;;;;;;;;;;;;;;;GAiBG;AACH,MAAM,UAAU,kBAAkB,CAChC,OAA2B,EAC3B,IAAmB;IAEnB,OAAO;QACL,KAAK,EAAE,EAAE,CAAC,EAAE;YACV,EAAE,CAAC,OAAO,CAAC,mBAAmB,CAAC,OAAO,CAAC,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,CAAC;QACvD,CAAC;KACF,CAAC;AACJ,CAAC","sourcesContent":["import type { BlockViewType } from '../spec/type.js';\nimport type { ExtensionType } from './extension.js';\n\nimport { BlockViewIdentifier } from '../identifier.js';\n\n/**\n * Create a block view extension.\n *\n * @param flavour The flavour of the block that the view is for.\n * @param view Lit literal template for the view. Example: `my-list-block`\n *\n * The view is a lit template that is used to render the block.\n *\n * @example\n * ```ts\n * import { BlockViewExtension } from '@lumensuite/block-std';\n *\n * const MyListBlockViewExtension = BlockViewExtension(\n *   'affine:list',\n *   literal`my-list-block`\n * );\n * ```\n */\nexport function BlockViewExtension(\n  flavour: LumenSuite.Flavour,\n  view: BlockViewType\n): ExtensionType {\n  return {\n    setup: di => {\n      di.addImpl(BlockViewIdentifier(flavour), () => view);\n    },\n  };\n}\n"]}