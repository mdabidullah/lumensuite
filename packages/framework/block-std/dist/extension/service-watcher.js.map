{"version":3,"file":"service-watcher.js","sourceRoot":"","sources":["../../src/extension/service-watcher.ts"],"names":[],"mappings":"AAEA,OAAO,EAAE,eAAe,EAAE,SAAS,EAAE,MAAM,+BAA+B,CAAC;AAK3E,OAAO,EACL,sBAAsB,EACtB,0BAA0B,EAC1B,aAAa,GACd,MAAM,kBAAkB,CAAC;AAC1B,OAAO,EAAE,gBAAgB,EAAE,MAAM,wBAAwB,CAAC;AAE1D,MAAM,KAAK,GAAG,IAAI,GAAG,EAAkB,CAAC;AAExC;;;;;;GAMG;AACH,MAAM,OAAgB,mBAAoB,SAAQ,gBAAgB;IAGhE,YACE,GAAkB,EACT,YAA0B;QAEnC,KAAK,CAAC,GAAG,CAAC,CAAC;QAFF,iBAAY,GAAZ,YAAY,CAAc;IAGrC,CAAC;IAED,MAAM,CAAU,KAAK,CAAC,EAAa;QACjC,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC;YAClB,MAAM,IAAI,eAAe,CACvB,SAAS,CAAC,cAAc,EACxB,mDAAmD,CACpD,CAAC;QACJ,CAAC;QACD,MAAM,EAAE,GAAG,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QACxC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC;QAChC,EAAE,CAAC,OAAO,CACR,0BAA0B,CAAC,GAAG,IAAI,CAAC,OAAO,YAAY,EAAE,EAAE,CAAC,EAC3D,IAAI,EACJ,CAAC,aAAa,EAAE,sBAAsB,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CACtD,CAAC;IACJ,CAAC;CACF","sourcesContent":["import type { Container } from '@lumensuite/global/di';\n\nimport { LumenSuiteError, ErrorCode } from '@lumensuite/global/exceptions';\n\nimport type { BlockStdScope } from '../scope/index.js';\nimport type { BlockService } from './service.js';\n\nimport {\n  BlockServiceIdentifier,\n  LifeCycleWatcherIdentifier,\n  StdIdentifier,\n} from '../identifier.js';\nimport { LifeCycleWatcher } from './lifecycle-watcher.js';\n\nconst idMap = new Map<string, number>();\n\n/**\n * @deprecated\n * BlockServiceWatcher is deprecated. You should reconsider where to put your feature.\n *\n * BlockServiceWatcher is a legacy extension that is used to watch the slots registered on block service.\n * However, we recommend using the new extension system.\n */\nexport abstract class BlockServiceWatcher extends LifeCycleWatcher {\n  static flavour: string;\n\n  constructor(\n    std: BlockStdScope,\n    readonly blockService: BlockService\n  ) {\n    super(std);\n  }\n\n  static override setup(di: Container) {\n    if (!this.flavour) {\n      throw new LumenSuiteError(\n        ErrorCode.ValueNotExists,\n        'Flavour is not defined in the BlockServiceWatcher'\n      );\n    }\n    const id = idMap.get(this.flavour) ?? 0;\n    idMap.set(this.flavour, id + 1);\n    di.addImpl(\n      LifeCycleWatcherIdentifier(`${this.flavour}-watcher-${id}`),\n      this,\n      [StdIdentifier, BlockServiceIdentifier(this.flavour)]\n    );\n  }\n}\n"]}