{"version":3,"file":"lifecycle-watcher.js","sourceRoot":"","sources":["../../src/extension/lifecycle-watcher.ts"],"names":[],"mappings":"AAEA,OAAO,EAAE,eAAe,EAAE,SAAS,EAAE,MAAM,+BAA+B,CAAC;AAI3E,OAAO,EAAE,0BAA0B,EAAE,aAAa,EAAE,MAAM,kBAAkB,CAAC;AAC7E,OAAO,EAAE,SAAS,EAAE,MAAM,gBAAgB,CAAC;AAE3C;;;;;;;;;;;;;;;;GAgBG;AACH,MAAM,OAAgB,gBAAiB,SAAQ,SAAS;IAGtD,YAAqB,GAAkB;QACrC,KAAK,EAAE,CAAC;QADW,QAAG,GAAH,GAAG,CAAe;IAEvC,CAAC;IAED,MAAM,CAAU,KAAK,CAAC,EAAa;QACjC,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC;YACd,MAAM,IAAI,eAAe,CACvB,SAAS,CAAC,cAAc,EACxB,4CAA4C,CAC7C,CAAC;QACJ,CAAC;QAED,EAAE,CAAC,GAAG,CAAC,IAAiE,EAAE;YACxE,aAAa;SACd,CAAC,CAAC;QAEH,EAAE,CAAC,OAAO,CAAC,0BAA0B,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,QAAQ,CAAC,EAAE,CAC1D,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,CACnB,CAAC;IACJ,CAAC;IAED;;OAEG;IACH,OAAO,KAAI,CAAC;IAEZ;;;OAGG;IACH,OAAO,KAAI,CAAC;IAEZ;;OAEG;IACH,QAAQ,KAAI,CAAC;IAEb;;;OAGG;IACH,SAAS,KAAI,CAAC;CACf","sourcesContent":["import type { Container } from '@lumensuite/global/di';\n\nimport { LumenSuiteError, ErrorCode } from '@lumensuite/global/exceptions';\n\nimport type { BlockStdScope } from '../scope/index.js';\n\nimport { LifeCycleWatcherIdentifier, StdIdentifier } from '../identifier.js';\nimport { Extension } from './extension.js';\n\n/**\n * A life cycle watcher is an extension that watches the life cycle of the editor.\n * It is used to perform actions when the editor is created, mounted, rendered, or unmounted.\n *\n * When creating a life cycle watcher, you must define a key that is unique to the watcher.\n * The key is used to identify the watcher in the dependency injection container.\n * ```ts\n * class MyLifeCycleWatcher extends LifeCycleWatcher {\n *  static override readonly key = 'my-life-cycle-watcher';\n * ```\n *\n * In the life cycle watcher, the methods will be called in the following order:\n * 1. `created`: Called when the std is created.\n * 2. `rendered`: Called when `std.render` is called.\n * 3. `mounted`: Called when the editor host is mounted.\n * 4. `unmounted`: Called when the editor host is unmounted.\n */\nexport abstract class LifeCycleWatcher extends Extension {\n  static key: string;\n\n  constructor(readonly std: BlockStdScope) {\n    super();\n  }\n\n  static override setup(di: Container) {\n    if (!this.key) {\n      throw new LumenSuiteError(\n        ErrorCode.ValueNotExists,\n        'Key is not defined in the LifeCycleWatcher'\n      );\n    }\n\n    di.add(this as unknown as { new (std: BlockStdScope): LifeCycleWatcher }, [\n      StdIdentifier,\n    ]);\n\n    di.addImpl(LifeCycleWatcherIdentifier(this.key), provider =>\n      provider.get(this)\n    );\n  }\n\n  /**\n   * Called when std is created.\n   */\n  created() {}\n\n  /**\n   * Called when editor host is mounted.\n   * Which means the editor host emit the `connectedCallback` lifecycle event.\n   */\n  mounted() {}\n\n  /**\n   * Called when `std.render` is called.\n   */\n  rendered() {}\n\n  /**\n   * Called when editor host is unmounted.\n   * Which means the editor host emit the `disconnectedCallback` lifecycle event.\n   */\n  unmounted() {}\n}\n"]}