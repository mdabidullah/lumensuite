{"version":3,"file":"command.js","sourceRoot":"","sources":["../../src/extension/command.ts"],"names":[],"mappings":"AAGA,OAAO,EAAE,iBAAiB,EAAE,MAAM,kBAAkB,CAAC;AAErD;;;;;;;;;;;;;GAaG;AACH,MAAM,UAAU,gBAAgB,CAAC,QAAuB;IACtD,OAAO;QACL,KAAK,EAAE,EAAE,CAAC,EAAE;YACV,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,EAAE,OAAO,CAAC,EAAE,EAAE;gBACnD,EAAE,CAAC,OAAO,CAAC,iBAAiB,CAAC,IAAI,CAAC,EAAE,GAAG,EAAE,CAAC,OAAO,CAAC,CAAC;YACrD,CAAC,CAAC,CAAC;QACL,CAAC;KACF,CAAC;AACJ,CAAC","sourcesContent":["import type { BlockCommands } from '../spec/index.js';\nimport type { ExtensionType } from './extension.js';\n\nimport { CommandIdentifier } from '../identifier.js';\n\n/**\n * Create a command extension.\n *\n * @param commands A map of command names to command implementations.\n *\n * @example\n * ```ts\n * import { CommandExtension } from '@lumensuite/block-std';\n *\n * const MyCommandExtension = CommandExtension({\n *   'my-command': MyCommand\n * });\n * ```\n */\nexport function CommandExtension(commands: BlockCommands): ExtensionType {\n  return {\n    setup: di => {\n      Object.entries(commands).forEach(([name, command]) => {\n        di.addImpl(CommandIdentifier(name), () => command);\n      });\n    },\n  };\n}\n"]}