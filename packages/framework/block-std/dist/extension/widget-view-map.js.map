{"version":3,"file":"widget-view-map.js","sourceRoot":"","sources":["../../src/extension/widget-view-map.ts"],"names":[],"mappings":"AAGA,OAAO,EAAE,uBAAuB,EAAE,MAAM,kBAAkB,CAAC;AAE3D;;;;;;;;;;;;;;;;GAgBG;AACH,MAAM,UAAU,sBAAsB,CACpC,OAA2B,EAC3B,aAAgC;IAEhC,OAAO;QACL,KAAK,EAAE,EAAE,CAAC,EAAE;YACV,EAAE,CAAC,OAAO,CAAC,uBAAuB,CAAC,OAAO,CAAC,EAAE,GAAG,EAAE,CAAC,aAAa,CAAC,CAAC;QACpE,CAAC;KACF,CAAC;AACJ,CAAC","sourcesContent":["import type { WidgetViewMapType } from '../spec/type.js';\nimport type { ExtensionType } from './extension.js';\n\nimport { WidgetViewMapIdentifier } from '../identifier.js';\n\n/**\n * Create a widget view map extension.\n *\n * @param flavour The flavour of the block that the widget view map is for.\n * @param widgetViewMap A map of widget names to widget view lit literal.\n *\n * A widget view map is to provide a map of widgets to a block.\n * For every target block, it's view will be rendered with the widget views.\n *\n * @example\n * ```ts\n * import { WidgetViewMapExtension } from '@lumensuite/block-std';\n *\n * const MyWidgetViewMapExtension = WidgetViewMapExtension('my-flavour', {\n *  'my-widget': literal`my-widget-view`\n * });\n */\nexport function WidgetViewMapExtension(\n  flavour: LumenSuite.Flavour,\n  widgetViewMap: WidgetViewMapType\n): ExtensionType {\n  return {\n    setup: di => {\n      di.addImpl(WidgetViewMapIdentifier(flavour), () => widgetViewMap);\n    },\n  };\n}\n"]}