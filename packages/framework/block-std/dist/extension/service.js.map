{"version":3,"file":"service.js","sourceRoot":"","sources":["../../src/extension/service.ts"],"names":[],"mappings":"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","sourcesContent":["import type { Container } from '@lumensuite/global/di';\n\nimport { LumenSuiteError, ErrorCode } from '@lumensuite/global/exceptions';\nimport { DisposableGroup } from '@lumensuite/global/utils';\n\nimport type { EventName, UIEventHandler } from '../event/index.js';\nimport type { BlockStdScope } from '../scope/index.js';\n\nimport {\n  BlockFlavourIdentifier,\n  BlockServiceIdentifier,\n  StdIdentifier,\n} from '../identifier.js';\nimport { getSlots } from '../spec/index.js';\nimport { Extension } from './extension.js';\n\n/**\n * @deprecated\n * BlockService is deprecated. You should reconsider where to put your feature.\n *\n * BlockService is a legacy extension that is used to provide services to the block.\n * In the previous version of LumenSuite, block service provides a way to extend the block.\n * However, in the new version, we recommend using the new extension system.\n */\nexport abstract class BlockService extends Extension {\n  static flavour: string;\n\n  readonly disposables = new DisposableGroup();\n\n  readonly flavour: string;\n\n  readonly specSlots = getSlots();\n\n  get collection() {\n    return this.std.collection;\n  }\n\n  get doc() {\n    return this.std.doc;\n  }\n\n  get host() {\n    return this.std.host;\n  }\n\n  get selectionManager() {\n    return this.std.selection;\n  }\n\n  get uiEventDispatcher() {\n    return this.std.event;\n  }\n\n  constructor(\n    readonly std: BlockStdScope,\n    readonly flavourProvider: { flavour: string }\n  ) {\n    super();\n    this.flavour = flavourProvider.flavour;\n  }\n\n  static override setup(di: Container) {\n    if (!this.flavour) {\n      throw new LumenSuiteError(\n        ErrorCode.ValueNotExists,\n        'Flavour is not defined in the BlockService'\n      );\n    }\n    di.add(\n      this as unknown as {\n        new (\n          std: BlockStdScope,\n          flavourProvider: { flavour: string }\n        ): BlockService;\n      },\n      [StdIdentifier, BlockFlavourIdentifier(this.flavour)]\n    );\n    di.addImpl(BlockServiceIdentifier(this.flavour), provider =>\n      provider.get(this)\n    );\n  }\n\n  bindHotKey(\n    keymap: Record<string, UIEventHandler>,\n    options?: { global: boolean }\n  ) {\n    this.disposables.add(\n      this.uiEventDispatcher.bindHotkey(keymap, {\n        flavour: options?.global ? undefined : this.flavour,\n      })\n    );\n  }\n\n  // life cycle start\n  dispose() {\n    this.disposables.dispose();\n  }\n\n  // event handlers start\n  handleEvent(\n    name: EventName,\n    fn: UIEventHandler,\n    options?: { global: boolean }\n  ) {\n    this.disposables.add(\n      this.uiEventDispatcher.add(name, fn, {\n        flavour: options?.global ? undefined : this.flavour,\n      })\n    );\n  }\n  // life cycle end\n\n  mounted() {\n    this.specSlots.mounted.emit({ service: this });\n  }\n\n  unmounted() {\n    this.dispose();\n    this.specSlots.unmounted.emit({ service: this });\n  }\n  // event handlers end\n}\n"]}