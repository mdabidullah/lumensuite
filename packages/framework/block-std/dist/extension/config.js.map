{"version":3,"file":"config.js","sourceRoot":"","sources":["../../src/extension/config.ts"],"names":[],"mappings":"AAEA,OAAO,EAAE,gBAAgB,EAAE,MAAM,kBAAkB,CAAC;AAEpD;;;;;;;;;;;;;;;;GAgBG;AACH,MAAM,UAAU,eAAe,CAC7B,MAA0B,EAC1B,MAA+B;IAE/B,OAAO;QACL,KAAK,EAAE,EAAE,CAAC,EAAE;YACV,EAAE,CAAC,OAAO,CAAC,gBAAgB,CAAC,MAAM,CAAC,EAAE,GAAG,EAAE,CAAC,MAAM,CAAC,CAAC;QACrD,CAAC;KACF,CAAC;AACJ,CAAC","sourcesContent":["import type { ExtensionType } from './extension.js';\n\nimport { ConfigIdentifier } from '../identifier.js';\n\n/**\n * Create a config extension.\n * A config extension provides a configuration object for a block flavour.\n * The configuration object can be used like:\n * ```ts\n * const config = std.provider.get(ConfigIdentifier('my-flavour'));\n * ```\n *\n * @param flavor The flavour of the block that the config is for.\n * @param config The configuration object.\n *\n * @example\n * ```ts\n * import { ConfigExtension } from '@blocksuite/block-std';\n * const MyConfigExtension = ConfigExtension('my-flavour', config);\n * ```\n */\nexport function ConfigExtension(\n  flavor: BlockSuite.Flavour,\n  config: Record<string, unknown>\n): ExtensionType {\n  return {\n    setup: di => {\n      di.addImpl(ConfigIdentifier(flavor), () => config);\n    },\n  };\n}\n"]}