{"version":3,"file":"viewport-element.js","sourceRoot":"","sources":["../../src/gfx/viewport-element.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,EAAE,GAAG,EAAE,IAAI,EAAE,UAAU,EAAE,MAAM,KAAK,CAAC;AAC5C,OAAO,EAAE,aAAa,EAAE,QAAQ,EAAE,KAAK,EAAE,MAAM,mBAAmB,CAAC;AAMnE;;GAEG;AACH,MAAM,UAAU,8BAA8B,CAE5C,IAAO,EAAE,OAAqB;IAC9B,IAAI,KAAK,GAAuB,SAAS,CAAC;IAC1C,IAAI,UAAU,GAAc,EAAE,CAAC;IAE/B,OAAO,CAAC,CAAC,GAAG,IAAe,EAAE,EAAE;QAC7B,UAAU,GAAG,IAAI,CAAC;QAElB,IAAI,KAAK,KAAK,SAAS,EAAE,CAAC;YACxB,KAAK,GAAG,qBAAqB,CAAC,GAAG,EAAE;gBACjC,KAAK,GAAG,SAAS,CAAC;gBAElB,IAAI,CAAC,OAAO,IAAI,OAAO,CAAC,WAAW,EAAE,CAAC;oBACpC,IAAI,CAAC,GAAG,UAAU,CAAC,CAAC;gBACtB,CAAC;YACH,CAAC,CAAC,CAAC;QACL,CAAC;IACH,CAAC,CAAM,CAAC;AACV,CAAC;IAGY,kBAAkB;4BAD9B,aAAa,CAAC,cAAc,CAAC;;;;sBACU,UAAU;;;;;;;;;;;;;kCAAlB,SAAQ,WAAU;;;;qCA0H/C,KAAK,CAAC,eAAe,CAAC;+CAGtB,QAAQ,CAAC,EAAE,SAAS,EAAE,KAAK,EAAE,CAAC;gCAG9B,QAAQ,CAAC,EAAE,SAAS,EAAE,KAAK,EAAE,CAAC;gDAG9B,QAAQ,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC;YAR3B,gLAAS,SAAS,6BAAT,SAAS,6FAA+B;YAGjD,8MAAS,mBAAmB,6BAAnB,mBAAmB,iHAAgD;YAG5E,iKAAS,IAAI,6BAAJ,IAAI,mFAAyB;YAGtC,iNAAS,oBAAoB,6BAApB,oBAAoB,mHAAa;YApI5C,6KAqIC;;;;iBApIiB,WAAM,GAAG,GAAG,CAAA;;;;;;;;GAQ3B,AARqB,CAQpB;QAwDM,eAAe,CACrB,UAAkB,EAClB,UAAkB,EAClB,IAAY;YAEZ,OAAO,eAAe,UAAU,OAAO,UAAU,gBAAgB,IAAI,GAAG,CAAC;QAC3E,CAAC;QAEQ,iBAAiB;YACxB,KAAK,CAAC,iBAAiB,EAAE,CAAC;YAE1B,IAAI,CAAC,QAAQ,CAAC,eAAe,CAAC,EAAE,CAAC,GAAG,EAAE;gBACpC,IAAI,CAAC,gBAAgB,EAAE,CAAC;gBACxB,IAAI,CAAC,iBAAiB,EAAE,CAAC;YAC3B,CAAC,CAAC,CAAC;QACL,CAAC;QAEQ,MAAM;YACb,OAAO,IAAI,CAAA;;WAEJ,CAAC;QACV,CAAC;QAED,sBAAsB,CAAC,EAAU;YAC/B,MAAM,EAAE,OAAO,EAAE,OAAO,EAAE,GAAG,OAAO,CAAC,aAAa,EAAQ,CAAC;YAE3D,IAAI,CAAC,uBAAuB,CAAC,IAAI,CAAC,EAAE,EAAE,EAAE,OAAO,EAAE,CAAC,CAAC;YAEnD,IAAI,CAAC,IAAI,CAAC,qBAAqB,EAAE,CAAC;gBAChC,IAAI,CAAC,qBAAqB,GAAG,IAAI,CAAC;gBAClC,MAAM,QAAQ,GAAG,GAAG,EAAE;oBACpB,IAAI,IAAI,CAAC,uBAAuB,CAAC,MAAM,EAAE,CAAC;wBACxC,MAAM,cAAc,GAAG,IAAI,CAAC,uBAAuB,CAAC,MAAM,CACxD,CAAC,EACD,IAAI,CAAC,oBAAoB,CAC1B,CAAC;wBAEF,cAAc,CAAC,OAAO,CAAC,CAAC,EAAE,OAAO,EAAE,EAAE,EAAE,CAAC,OAAO,EAAE,CAAC,CAAC;wBAEnD,IAAI,IAAI,CAAC,uBAAuB,CAAC,MAAM,EAAE,CAAC;4BACxC,qBAAqB,CAAC,GAAG,EAAE;gCACzB,IAAI,CAAC,WAAW,IAAI,QAAQ,EAAE,CAAC;4BACjC,CAAC,CAAC,CAAC;wBACL,CAAC;6BAAM,CAAC;4BACN,IAAI,CAAC,qBAAqB,GAAG,KAAK,CAAC;wBACrC,CAAC;oBACH,CAAC;gBACH,CAAC,CAAC;gBAEF,qBAAqB,CAAC,GAAG,EAAE;oBACzB,IAAI,CAAC,WAAW,IAAI,QAAQ,EAAE,CAAC;gBACjC,CAAC,CAAC,CAAC;YACL,CAAC;YAED,OAAO,OAAO,CAAC;QACjB,CAAC;QAGD,4BAAiD;QAAjD,IAAS,SAAS,+CAA+B;QAAjD,IAAS,SAAS,qDAA+B;QAGjD,sCAA4E;QAA5E,IAAS,mBAAmB,yDAAgD;QAA5E,IAAS,mBAAmB,+DAAgD;QAG5E,uBAAsC;QAAtC,IAAS,IAAI,0CAAyB;QAAtC,IAAS,IAAI,gDAAyB;QAGtC,uCAA0C;QAA1C,IAAS,oBAAoB,0DAAa;QAA1C,IAAS,oBAAoB,gEAAa;;;YAzHlC,sBAAiB,GAAG,8BAA8B,CAAC,GAAG,EAAE;gBAC9D,IAAI,IAAI,CAAC,mBAAmB,IAAI,IAAI,CAAC,IAAI,EAAE,CAAC;oBAC1C,MAAM,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;oBACvB,MAAM,gBAAgB,GAAG,IAAI,CAAC,mBAAmB,EAAE,CAAC;oBAEpD,gBAAgB,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;wBAC/B,MAAM,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;wBAE9C,IAAI,IAAI,EAAE,CAAC;4BACT,IAAI,CAAC,KAAK,CAAC,OAAO,GAAG,EAAE,CAAC;wBAC1B,CAAC;wBAED,IAAI,IAAI,CAAC,kBAAkB,EAAE,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC;4BACxC,IAAI,CAAC,kBAAmB,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;wBACzC,CAAC;oBACH,CAAC,CAAC,CAAC;oBAEH,IAAI,CAAC,kBAAkB,EAAE,OAAO,CAAC,KAAK,CAAC,EAAE;wBACvC,MAAM,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;wBAE9C,IAAI,IAAI,EAAE,CAAC;4BACT,IAAI,CAAC,KAAK,CAAC,OAAO,GAAG,MAAM,CAAC;wBAC9B,CAAC;oBACH,CAAC,CAAC,CAAC;oBAEH,IAAI,CAAC,kBAAkB,GAAG,gBAAgB,CAAC;gBAC7C,CAAC;YACH,CAAC,EAAE,IAAI,CAAC,CAAC;YAID,4BAAuB,GAGzB,EAAE,CAAC;YAED,qBAAgB,GAAG,8BAA8B,CAAC,GAAG,EAAE;gBAC7D,MAAM,EAAE,UAAU,EAAE,UAAU,EAAE,IAAI,EAAE,GAAG,IAAI,CAAC,QAAQ,CAAC;gBAEvD,IAAI,IAAI,CAAC,SAAS,EAAE,CAAC;oBACnB,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,SAAS,GAAG,IAAI,CAAC,eAAe,CACnD,UAAU,EACV,UAAU,EACV,IAAI,CACL,CAAC;gBACJ,CAAC;YACH,CAAC,EAAE,IAAI,CAAC,CAAC;YAED,0BAAqB,GAAG,KAAK,CAAC;YAEtC,oBAAe,GAAG,IAAI,GAAG,EAAU,CAAC;YA8D3B,oFAAmC,IAAI,EAAC;YAGxC,yKAAmE;YAGnE,qJAA6B;YAG7B,6JAA+B,CAAC,GAAC;;;;YApI/B,uDAAkB;;;;;SAAlB,kBAAkB","sourcesContent":["import { css, html, LitElement } from 'lit';\nimport { customElement, property, query } from 'lit/decorators.js';\n\nimport type { EditorHost } from '../view/index.js';\nimport type { GfxBlockElementModel } from './gfx-block-model.js';\nimport type { Viewport } from './viewport.js';\n\n/**\n * A wrapper around `requestConnectedFrame` that only calls at most once in one frame\n */\nexport function requestThrottledConnectedFrame<\n  T extends (...args: unknown[]) => void,\n>(func: T, element?: HTMLElement): T {\n  let raqId: number | undefined = undefined;\n  let latestArgs: unknown[] = [];\n\n  return ((...args: unknown[]) => {\n    latestArgs = args;\n\n    if (raqId === undefined) {\n      raqId = requestAnimationFrame(() => {\n        raqId = undefined;\n\n        if (!element || element.isConnected) {\n          func(...latestArgs);\n        }\n      });\n    }\n  }) as T;\n}\n\n@customElement('gfx-viewport')\nexport class GfxViewportElement extends LitElement {\n  static override styles = css`\n    .gfx-viewport {\n      position: absolute;\n      left: 0;\n      top: 0;\n      contain: size layout style;\n      display: block;\n    }\n  `;\n\n  private _hideOutsideBlock = requestThrottledConnectedFrame(() => {\n    if (this.getModelsInViewport && this.host) {\n      const host = this.host;\n      const modelsInViewport = this.getModelsInViewport();\n\n      modelsInViewport.forEach(model => {\n        const view = host.std.view.getBlock(model.id);\n\n        if (view) {\n          view.style.display = '';\n        }\n\n        if (this._lastVisibleModels?.has(model)) {\n          this._lastVisibleModels!.delete(model);\n        }\n      });\n\n      this._lastVisibleModels?.forEach(model => {\n        const view = host.std.view.getBlock(model.id);\n\n        if (view) {\n          view.style.display = 'none';\n        }\n      });\n\n      this._lastVisibleModels = modelsInViewport;\n    }\n  }, this);\n\n  private _lastVisibleModels?: Set<GfxBlockElementModel>;\n\n  private _pendingChildrenUpdates: {\n    id: string;\n    resolve: () => void;\n  }[] = [];\n\n  private _refreshViewport = requestThrottledConnectedFrame(() => {\n    const { translateX, translateY, zoom } = this.viewport;\n\n    if (this.container) {\n      this.container.style.transform = this._toCSSTransform(\n        translateX,\n        translateY,\n        zoom\n      );\n    }\n  }, this);\n\n  private _updatingChildrenFlag = false;\n\n  renderingBlocks = new Set<string>();\n\n  viewport!: Viewport;\n\n  private _toCSSTransform(\n    translateX: number,\n    translateY: number,\n    zoom: number\n  ) {\n    return `translate3d(${translateX}px, ${translateY}px, 0) scale(${zoom})`;\n  }\n\n  override connectedCallback(): void {\n    super.connectedCallback();\n\n    this.viewport.viewportUpdated.on(() => {\n      this._refreshViewport();\n      this._hideOutsideBlock();\n    });\n  }\n\n  override render() {\n    return html`<div class=\"gfx-viewport\">\n      <slot></slot>\n    </div>`;\n  }\n\n  scheduleUpdateChildren(id: string) {\n    const { promise, resolve } = Promise.withResolvers<void>();\n\n    this._pendingChildrenUpdates.push({ id, resolve });\n\n    if (!this._updatingChildrenFlag) {\n      this._updatingChildrenFlag = true;\n      const schedule = () => {\n        if (this._pendingChildrenUpdates.length) {\n          const childToUpdates = this._pendingChildrenUpdates.splice(\n            0,\n            this.maxConcurrentRenders\n          );\n\n          childToUpdates.forEach(({ resolve }) => resolve());\n\n          if (this._pendingChildrenUpdates.length) {\n            requestAnimationFrame(() => {\n              this.isConnected && schedule();\n            });\n          } else {\n            this._updatingChildrenFlag = false;\n          }\n        }\n      };\n\n      requestAnimationFrame(() => {\n        this.isConnected && schedule();\n      });\n    }\n\n    return promise;\n  }\n\n  @query('.gfx-viewport')\n  accessor container: HTMLDivElement | null = null;\n\n  @property({ attribute: false })\n  accessor getModelsInViewport: undefined | (() => Set<GfxBlockElementModel>);\n\n  @property({ attribute: false })\n  accessor host: undefined | EditorHost;\n\n  @property({ type: Number })\n  accessor maxConcurrentRenders: number = 2;\n}\n"]}