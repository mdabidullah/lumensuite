{"version":3,"file":"gfx-block-model.js","sourceRoot":"","sources":["../../src/gfx/gfx-block-model.ts"],"names":[],"mappings":"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","sourcesContent":["import type {\n  Constructor,\n  IVec,\n  SerializedXYWH,\n} from '@blocksuite/global/utils';\n\nimport { BlockSuiteError, ErrorCode } from '@blocksuite/global/exceptions';\nimport {\n  Bound,\n  getBoundsWithRotation,\n  getPointsFromBoundsWithRotation,\n  linePolygonIntersects,\n  PointLocation,\n  polygonGetPointTangent,\n  polygonNearestPoint,\n  rotatePoints,\n} from '@blocksuite/global/utils';\nimport { BlockModel } from '@blocksuite/store';\n\nimport type { EditorHost } from '../view/index.js';\nimport type {\n  GfxCompatibleProps,\n  GfxElementGeometry,\n  GfxGroupLikeElementModel,\n  GfxPrimitiveElementModel,\n  PointTestOptions,\n} from './surface/element-model.js';\n\nimport { SurfaceBlockModel } from './surface/surface-model.js';\n\nexport class GfxBlockElementModel<\n    Props extends GfxCompatibleProps = GfxCompatibleProps,\n  >\n  extends BlockModel<Props>\n  implements GfxElementGeometry\n{\n  private _externalXYWH: SerializedXYWH | undefined = undefined;\n\n  connectable = true;\n\n  rotate = 0;\n\n  get elementBound() {\n    const bound = Bound.deserialize(this.xywh);\n    return Bound.from(getBoundsWithRotation({ ...bound, rotate: this.rotate }));\n  }\n\n  get externalBound(): Bound | null {\n    return this._externalXYWH ? Bound.deserialize(this._externalXYWH) : null;\n  }\n\n  get externalXYWH(): SerializedXYWH | undefined {\n    return this._externalXYWH;\n  }\n\n  set externalXYWH(xywh: SerializedXYWH | undefined) {\n    this._externalXYWH = xywh;\n  }\n\n  get group(): GfxGroupLikeElementModel | null {\n    const surface = this.doc\n      .getBlocks()\n      .find(block => block instanceof SurfaceBlockModel);\n\n    if (!surface) return null;\n\n    return (surface as SurfaceBlockModel).getGroup(this.id) ?? null;\n  }\n\n  get groups(): GfxGroupLikeElementModel[] {\n    const surface = this.doc\n      .getBlocks()\n      .find(block => block instanceof SurfaceBlockModel);\n\n    if (!surface) return [];\n\n    return (surface as SurfaceBlockModel).getGroups(this.id);\n  }\n\n  containsBound(bounds: Bound): boolean {\n    const bound = Bound.deserialize(this.xywh);\n    const points = getPointsFromBoundsWithRotation({\n      x: bound.x,\n      y: bound.y,\n      w: bound.w,\n      h: bound.h,\n      rotate: this.rotate,\n    });\n    return points.some(point => bounds.containsPoint(point));\n  }\n\n  getLineIntersections(start: IVec, end: IVec): PointLocation[] | null {\n    const bound = Bound.deserialize(this.xywh);\n\n    return linePolygonIntersects(\n      start,\n      end,\n      rotatePoints(bound.points, bound.center, this.rotate ?? 0)\n    );\n  }\n\n  getNearestPoint(point: IVec): IVec {\n    const bound = Bound.deserialize(this.xywh);\n    return polygonNearestPoint(\n      rotatePoints(bound.points, bound.center, this.rotate ?? 0),\n      point\n    );\n  }\n\n  getRelativePointLocation(relativePoint: IVec): PointLocation {\n    const bound = Bound.deserialize(this.xywh);\n    const point = bound.getRelativePoint(relativePoint);\n    const rotatePoint = rotatePoints(\n      [point],\n      bound.center,\n      this.rotate ?? 0\n    )[0];\n    const points = rotatePoints(bound.points, bound.center, this.rotate ?? 0);\n    const tangent = polygonGetPointTangent(points, rotatePoint);\n\n    return new PointLocation(rotatePoint, tangent);\n  }\n\n  includesPoint(\n    x: number,\n    y: number,\n    _: PointTestOptions,\n    __: EditorHost\n  ): boolean {\n    const bound = Bound.deserialize(this.xywh);\n    return bound.isPointInBound([x, y], 0);\n  }\n\n  intersectsBound(bound: Bound): boolean {\n    return (\n      this.containsBound(bound) ||\n      bound.points.some((point, i, points) =>\n        this.getLineIntersections(point, points[(i + 1) % points.length])\n      )\n    );\n  }\n}\n\nexport function GfxCompatible<\n  Props extends GfxCompatibleProps,\n  T extends Constructor<BlockModel<Props>> = Constructor<BlockModel<Props>>,\n>(BlockModelSuperClass: T) {\n  if (BlockModelSuperClass === BlockModel) {\n    return GfxBlockElementModel as unknown as typeof GfxBlockElementModel<Props>;\n  } else {\n    let currentClass = BlockModelSuperClass;\n\n    while (\n      Object.getPrototypeOf(currentClass.prototype) !== BlockModel.prototype &&\n      Object.getPrototypeOf(currentClass.prototype) !== null\n    ) {\n      currentClass = Object.getPrototypeOf(currentClass.prototype).constructor;\n    }\n\n    if (Object.getPrototypeOf(currentClass.prototype) === null) {\n      throw new BlockSuiteError(\n        ErrorCode.GfxBlockElementError,\n        'The SuperClass is not a subclass of BlockModel'\n      );\n    }\n\n    Object.setPrototypeOf(\n      currentClass.prototype,\n      GfxBlockElementModel.prototype\n    );\n  }\n\n  return BlockModelSuperClass as unknown as typeof GfxBlockElementModel<Props>;\n}\n\nexport type GfxModel = GfxBlockElementModel | GfxPrimitiveElementModel;\n"]}