{"version":3,"file":"watch.js","sourceRoot":"","sources":["../../../../src/gfx/surface/decorators/watch.ts"],"names":[],"mappings":"AAEA,OAAO,EAAE,iBAAiB,EAAE,iBAAiB,EAAE,MAAM,aAAa,CAAC;AAQnE,MAAM,WAAW,GAAG,MAAM,CAAC,OAAO,CAAC,CAAC;AAEpC;;;GAGG;AACH,MAAM,UAAU,KAAK,CAAwC,EAAc;IACzE,OAAO,SAAS,cAAc,CAC5B,CAAU,EACV,OAAsC;QAEtC,MAAM,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC;QAC1B,OAAO;YACL,IAAI,CAAiC,CAAI;gBACvC,iBAAiB,CAAC,WAAW,EAAE,MAAM,CAAC,cAAc,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,EAAE,CAAC,CAAC;gBACtE,OAAO,CAAC,CAAC;YACX,CAAC;SAC2D,CAAC;IACjE,CAAC,CAAC;AACJ,CAAC;AAED,SAAS,YAAY,CAAC,KAAc,EAAE,IAAqB;IACzD,OAAO,iBAAiB,CAAC,KAAK,EAAE,WAAW,EAAE,IAAI,CAAC,CAAC;AACrD,CAAC;AAED,SAAS,UAAU,CAAC,IAAqB,EAAE,QAAkC;IAC3E,MAAM,KAAK,GAAG,MAAM,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC;IAC9C,MAAM,OAAO,GAAG,YAAY,CAAC,KAAK,EAAE,IAAc,CAAE,CAAC;IAErD,IAAI,CAAC,OAAO;QAAE,OAAO;IAErB,QAAQ,CAAC,aAAa,CAAC,CAAC,GAAG,CACzB,QAAQ,CAAC,OAAO,CAAC,cAAc,CAAC,EAAE,CAAC,OAAO,CAAC,EAAE;QAC3C,IAAI,OAAO,CAAC,EAAE,KAAK,QAAQ,CAAC,EAAE,IAAI,IAAI,IAAI,OAAO,CAAC,KAAK,EAAE,CAAC;YACxD,OAAO,CAAC,OAAO,CAAC,SAAS,CAAC,IAAc,CAAC,EAAE,QAAQ,EAAE,OAAO,CAAC,KAAK,CAAC,CAAC;QACtE,CAAC;IACH,CAAC,CAAC,CACH,CAAC;AACJ,CAAC;AAED,MAAM,UAAU,kBAAkB,CAChC,SAAkB,EAClB,QAAkC;IAElC,MAAM,QAAQ,GAAG,iBAAiB,CAAC,SAAS,EAAE,WAAW,CAAC,CAAC;IAE3D,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;QACnC,UAAU,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;IAC7B,CAAC,CAAC,CAAC;AACL,CAAC","sourcesContent":["import type { GfxPrimitiveElementModel } from '../element-model.js';\n\nimport { getObjectPropMeta, setObjectPropMeta } from './common.js';\n\ntype WatchFn<T extends GfxPrimitiveElementModel = GfxPrimitiveElementModel> = (\n  oldValue: unknown,\n  instance: T,\n  local: boolean\n) => void;\n\nconst watchSymbol = Symbol('watch');\n\n/**\n * The watch decorator is used to watch the property change of the element.\n * You can thinks of it as a decorator version of `elementUpdated` slot of the surface model.\n */\nexport function watch<V, T extends GfxPrimitiveElementModel>(fn: WatchFn<T>) {\n  return function watchDecorator(\n    _: unknown,\n    context: ClassAccessorDecoratorContext\n  ) {\n    const prop = context.name;\n    return {\n      init(this: GfxPrimitiveElementModel, v: V) {\n        setObjectPropMeta(watchSymbol, Object.getPrototypeOf(this), prop, fn);\n        return v;\n      },\n    } as ClassAccessorDecoratorResult<GfxPrimitiveElementModel, V>;\n  };\n}\n\nfunction getWatchMeta(proto: unknown, prop: string | symbol): null | WatchFn {\n  return getObjectPropMeta(proto, watchSymbol, prop);\n}\n\nfunction startWatch(prop: string | symbol, receiver: GfxPrimitiveElementModel) {\n  const proto = Object.getPrototypeOf(receiver);\n  const watchFn = getWatchMeta(proto, prop as string)!;\n\n  if (!watchFn) return;\n\n  receiver['_disposable'].add(\n    receiver.surface.elementUpdated.on(payload => {\n      if (payload.id === receiver.id && prop in payload.props) {\n        watchFn(payload.oldValues[prop as string], receiver, payload.local);\n      }\n    })\n  );\n}\n\nexport function initializeWatchers(\n  prototype: unknown,\n  receiver: GfxPrimitiveElementModel\n) {\n  const watchers = getObjectPropMeta(prototype, watchSymbol);\n\n  Object.keys(watchers).forEach(prop => {\n    startWatch(prop, receiver);\n  });\n}\n"]}