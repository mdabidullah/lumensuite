{"version":3,"file":"observer.js","sourceRoot":"","sources":["../../../../src/gfx/surface/decorators/observer.ts"],"names":[],"mappings":"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","sourcesContent":["import type { Y } from '@blocksuite/store';\n\nimport type { GfxPrimitiveElementModel } from '../element-model.js';\n\nimport { getObjectPropMeta, setObjectPropMeta } from './common.js';\n\nconst observeSymbol = Symbol('observe');\nconst observerDisposableSymbol = Symbol('observerDisposable');\n\ntype ObserveFn<\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  E extends Y.YEvent<any> = Y.YEvent<any>,\n  T extends GfxPrimitiveElementModel = GfxPrimitiveElementModel,\n> = (\n  /**\n   * The event object of the Y.Map or Y.Array, the `null` value means the observer is initializing.\n   */\n  event: E | null,\n  instance: T,\n  /**\n   * The transaction object of the Y.Map or Y.Array, the `null` value means the observer is initializing.\n   */\n  transaction: Y.Transaction | null\n) => void;\n\n/**\n * A decorator to observe the y type property.\n * You can think of it is just a decorator version of 'observe' method of Y.Array and Y.Map.\n *\n * The observer function start to observe the property when the model is mounted. And it will\n * re-observe the property automatically when the value is altered.\n * @param fn\n * @returns\n */\nexport function observe<\n  V,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  E extends Y.YEvent<any>,\n  T extends GfxPrimitiveElementModel,\n>(fn: ObserveFn<E, T>) {\n  return function observeDecorator(\n    _: unknown,\n    context: ClassAccessorDecoratorContext\n  ) {\n    const prop = context.name;\n    return {\n      init(this: T, v: V) {\n        setObjectPropMeta(observeSymbol, Object.getPrototypeOf(this), prop, fn);\n        return v;\n      },\n    } as ClassAccessorDecoratorResult<GfxPrimitiveElementModel, V>;\n  };\n}\n\nfunction getObserveMeta(\n  proto: unknown,\n  prop: string | symbol\n): null | ObserveFn {\n  // @ts-ignore\n  return getObjectPropMeta(proto, observeSymbol, prop);\n}\n\nexport function startObserve(\n  prop: string | symbol,\n  receiver: GfxPrimitiveElementModel\n) {\n  const proto = Object.getPrototypeOf(receiver);\n  const observeFn = getObserveMeta(proto, prop as string)!;\n  // @ts-ignore\n  const observerDisposable = receiver[observerDisposableSymbol] ?? {};\n\n  // @ts-ignore\n  receiver[observerDisposableSymbol] = observerDisposable;\n\n  if (observerDisposable[prop]) {\n    observerDisposable[prop]();\n    delete observerDisposable[prop];\n  }\n\n  if (!observeFn) {\n    return;\n  }\n\n  const value = receiver[prop as keyof GfxPrimitiveElementModel] as\n    | Y.Map<unknown>\n    | Y.Array<unknown>\n    | null;\n\n  observeFn(null, receiver, null);\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const fn = (event: Y.YEvent<any>, transaction: Y.Transaction) => {\n    observeFn(event, receiver, transaction);\n  };\n\n  if (value && 'observe' in value) {\n    value.observe(fn);\n\n    observerDisposable[prop] = () => {\n      value.unobserve(fn);\n    };\n  } else {\n    console.warn(\n      `Failed to observe \"${prop.toString()}\" of ${\n        receiver.type\n      } element, make sure it's a Y type.`\n    );\n  }\n}\n\nexport function initializeObservers(\n  proto: unknown,\n  receiver: GfxPrimitiveElementModel\n) {\n  const observers = getObjectPropMeta(proto, observeSymbol);\n\n  Object.keys(observers).forEach(prop => {\n    startObserve(prop, receiver);\n  });\n\n  receiver['_disposable'].add(() => {\n    // @ts-ignore\n    Object.values(receiver[observerDisposableSymbol] ?? {}).forEach(dispose =>\n      (dispose as () => void)()\n    );\n  });\n}\n"]}