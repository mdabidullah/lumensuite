{"version":3,"file":"local.js","sourceRoot":"","sources":["../../../../src/gfx/surface/decorators/local.ts"],"names":[],"mappings":"AAEA,OAAO,EAAE,iBAAiB,EAAE,MAAM,aAAa,CAAC;AAChD,OAAO,EAAE,YAAY,EAAE,MAAM,cAAc,CAAC;AAC5C,OAAO,EAAE,eAAe,EAAE,kBAAkB,EAAE,MAAM,aAAa,CAAC;AAElE;;;;;GAKG;AACH,MAAM,UAAU,KAAK;IACnB,OAAO,SAAS,cAAc,CAC5B,OAA2C,EAC3C,OAAsC;QAEtC,MAAM,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC;QAE1B,OAAO;YACL,IAAI,CAAU,CAAI;gBAChB,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;gBAEzB,OAAO,CAAC,CAAC;YACX,CAAC;YACD,GAAG;gBACD,OAAO,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;YAC/B,CAAC;YACD,GAAG,CAAU,aAAsB;gBACjC,MAAM,UAAU,GAAG,iBAAiB,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE,QAAQ,CAAC;gBAC7D,MAAM,QAAQ,GAAG,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;gBACvC,mEAAmE;gBACnE,sCAAsC;gBACtC,MAAM,MAAM,GAAG,UAAU;oBACvB,CAAC,CAAC,aAAa;oBACf,CAAC,CAAC,YAAY,CAAC,IAAI,EAAE,aAAa,EAAE,IAAI,CAAC,CAAC;gBAE5C,MAAM,YAAY,GAAG,eAAe,CAAC,IAAI,EAAE,aAAa,EAAE,IAAI,CAAC,CAAC;gBAEhE,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;gBAE9B,+EAA+E;gBAC/E,IAAI,CAAC,UAAU,EAAE,CAAC;oBAChB,kBAAkB,CAAC,YAAY,EAAE,IAAI,CAAC,CAAC;oBAEvC,IAAI,CAAC,SAAS,CAAC;wBACb,KAAK,EAAE;4BACL,CAAC,IAAI,CAAC,EAAE,MAAM;yBACf;wBACD,SAAS,EAAE;4BACT,CAAC,IAAI,CAAC,EAAE,QAAQ;yBACjB;wBACD,KAAK,EAAE,IAAI;qBACZ,CAAC,CAAC;oBAEH,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC;wBAChC,EAAE,EAAE,IAAI,CAAC,EAAE;wBACX,KAAK,EAAE;4BACL,CAAC,IAAI,CAAC,EAAE,MAAM;yBACf;wBACD,SAAS,EAAE;4BACT,CAAC,IAAI,CAAC,EAAE,QAAQ;yBACjB;qBACF,CAAC,CAAC;gBACL,CAAC;YACH,CAAC;SACoC,CAAC;IAC1C,CAAC,CAAC;AACJ,CAAC","sourcesContent":["import type { GfxPrimitiveElementModel } from '../element-model.js';\n\nimport { getDecoratorState } from './common.js';\nimport { convertProps } from './convert.js';\nimport { getDerivedProps, updateDerivedProps } from './derive.js';\n\n/**\n * A decorator to mark the property as a local property.\n *\n * The local property act like it is a field property, but it's not synced to the Y map.\n * Updating local property will also trigger the `elementUpdated` slot of the surface model\n */\nexport function local<V, T extends GfxPrimitiveElementModel>() {\n  return function localDecorator(\n    _target: ClassAccessorDecoratorTarget<T, V>,\n    context: ClassAccessorDecoratorContext\n  ) {\n    const prop = context.name;\n\n    return {\n      init(this: T, v: V) {\n        this._local.set(prop, v);\n\n        return v;\n      },\n      get(this: T) {\n        return this._local.get(prop);\n      },\n      set(this: T, originalValue: unknown) {\n        const isCreating = getDecoratorState(this.surface)?.creating;\n        const oldValue = this._local.get(prop);\n        // When state is creating, the value is considered as default value\n        // hence there's no need to convert it\n        const newVal = isCreating\n          ? originalValue\n          : convertProps(prop, originalValue, this);\n\n        const derivedProps = getDerivedProps(prop, originalValue, this);\n\n        this._local.set(prop, newVal);\n\n        // During creating, no need to invoke an update event and derive another update\n        if (!isCreating) {\n          updateDerivedProps(derivedProps, this);\n\n          this._onChange({\n            props: {\n              [prop]: newVal,\n            },\n            oldValues: {\n              [prop]: oldValue,\n            },\n            local: true,\n          });\n\n          this.surface['hooks'].update.emit({\n            id: this.id,\n            props: {\n              [prop]: newVal,\n            },\n            oldValues: {\n              [prop]: oldValue,\n            },\n          });\n        }\n      },\n    } as ClassAccessorDecoratorResult<T, V>;\n  };\n}\n"]}