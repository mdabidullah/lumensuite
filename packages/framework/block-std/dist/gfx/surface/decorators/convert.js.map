{"version":3,"file":"convert.js","sourceRoot":"","sources":["../../../../src/gfx/surface/decorators/convert.ts"],"names":[],"mappings":"AAEA,OAAO,EAAE,iBAAiB,EAAE,iBAAiB,EAAE,MAAM,aAAa,CAAC;AAEnE,MAAM,aAAa,GAAG,MAAM,CAAC,SAAS,CAAC,CAAC;AAExC;;;;;;;;GAQG;AACH,MAAM,UAAU,OAAO,CACrB,EAA0C;IAE1C,OAAO,SAAS,gBAAgB,CAC9B,CAAU,EACV,OAAsC;QAEtC,MAAM,IAAI,GAAG,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAClC,OAAO;YACL,IAAI,CAAU,CAAI;gBAChB,MAAM,KAAK,GAAG,MAAM,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;gBAC1C,iBAAiB,CAAC,aAAa,EAAE,KAAK,EAAE,IAAI,EAAE,EAAE,CAAC,CAAC;gBAClD,OAAO,CAAC,CAAC;YACX,CAAC;SACoC,CAAC;IAC1C,CAAC,CAAC;AACJ,CAAC;AAED,SAAS,cAAc,CACrB,KAAc,EACd,IAAqB;IAErB,OAAO,iBAAiB,CAAC,KAAK,EAAE,aAAa,EAAE,IAAI,CAAC,CAAC;AACvD,CAAC;AAED,MAAM,UAAU,YAAY,CAC1B,QAAyB,EACzB,SAAkB,EAClB,QAAiB;IAEjB,MAAM,KAAK,GAAG,MAAM,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC;IAC9C,MAAM,SAAS,GAAG,cAAc,CAAC,KAAK,EAAE,QAAkB,CAAE,CAAC;IAE7D,OAAO,SAAS,CAAC,CAAC,CAAC,SAAS,CAAC,SAAS,EAAE,QAAQ,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;AAChE,CAAC","sourcesContent":["import type { GfxPrimitiveElementModel } from '../element-model.js';\n\nimport { getObjectPropMeta, setObjectPropMeta } from './common.js';\n\nconst convertSymbol = Symbol('convert');\n\n/**\n * The convert decorator is used to convert the property value before it's\n * set to the Y map.\n *\n * Note:\n * 1. This decorator function will not execute in model initialization.\n * @param fn\n * @returns\n */\nexport function convert<V, T extends GfxPrimitiveElementModel>(\n  fn: (propValue: V, instance: T) => unknown\n) {\n  return function convertDecorator(\n    _: unknown,\n    context: ClassAccessorDecoratorContext\n  ) {\n    const prop = String(context.name);\n    return {\n      init(this: T, v: V) {\n        const proto = Object.getPrototypeOf(this);\n        setObjectPropMeta(convertSymbol, proto, prop, fn);\n        return v;\n      },\n    } as ClassAccessorDecoratorResult<T, V>;\n  };\n}\n\nfunction getConvertMeta(\n  proto: unknown,\n  prop: string | symbol\n): null | ((propValue: unknown, instance: unknown) => unknown) {\n  return getObjectPropMeta(proto, convertSymbol, prop);\n}\n\nexport function convertProps(\n  propName: string | symbol,\n  propValue: unknown,\n  receiver: unknown\n) {\n  const proto = Object.getPrototypeOf(receiver);\n  const convertFn = getConvertMeta(proto, propName as string)!;\n\n  return convertFn ? convertFn(propValue, receiver) : propValue;\n}\n"]}