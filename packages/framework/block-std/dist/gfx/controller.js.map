{"version":3,"file":"controller.js","sourceRoot":"","sources":["../../src/gfx/controller.ts"],"names":[],"mappings":"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","sourcesContent":["import type { ServiceIdentifier } from '@lumensuite/global/di';\nimport type { BlockModel } from '@lumensuite/store';\n\nimport {\n  Bound,\n  DisposableGroup,\n  type IBound,\n  last,\n} from '@lumensuite/global/utils';\n\nimport type { BlockStdScope } from '../scope/block-std-scope.js';\nimport type { SurfaceBlockModel } from './surface/surface-model.js';\n\nimport { LifeCycleWatcher } from '../extension/lifecycle-watcher.js';\nimport { LifeCycleWatcherIdentifier } from '../identifier.js';\nimport { onSurfaceAdded } from '../utils/gfx.js';\nimport { GfxBlockElementModel, type GfxModel } from './gfx-block-model.js';\nimport { GridManager } from './grid.js';\nimport { LayerManager } from './layer.js';\nimport {\n  GfxPrimitiveElementModel,\n  type PointTestOptions,\n} from './surface/element-model.js';\nimport { Viewport } from './viewport.js';\n\nexport class GfxController extends LifeCycleWatcher {\n  static override key = 'gfxController';\n\n  private _disposables: DisposableGroup = new DisposableGroup();\n\n  private _surface: SurfaceBlockModel | null = null;\n\n  readonly grid: GridManager;\n\n  readonly layer: LayerManager;\n\n  readonly viewport: Viewport = new Viewport();\n\n  get doc() {\n    return this.std.doc;\n  }\n\n  get surface() {\n    return this._surface;\n  }\n\n  constructor(std: BlockStdScope) {\n    super(std);\n\n    this.grid = new GridManager();\n    this.layer = new LayerManager(this.doc, null);\n\n    this._disposables.add(\n      onSurfaceAdded(this.doc, surface => {\n        this._surface = surface;\n\n        if (surface) {\n          this._disposables.add(this.grid.watch({ surface }));\n          this.layer.watch({ surface });\n        }\n      })\n    );\n    this._disposables.add(this.grid.watch({ doc: this.doc }));\n    this._disposables.add(this.layer);\n    this._disposables.add(this.viewport);\n  }\n\n  /**\n   * Get a block or element by its id.\n   * Note that non-gfx block can also be queried in this method.\n   * @param id\n   * @returns\n   */\n  getElementById<\n    T extends GfxModel | BlockModel<object> = GfxModel | BlockModel<object>,\n  >(id: string): T | null {\n    // @ts-ignore\n    return (\n      this.surface?.getElementById(id) ?? this.doc.getBlock(id)?.model ?? null\n    );\n  }\n  /**\n   * Get elements on a specific point.\n   * @param x\n   * @param y\n   * @param options\n   */\n  getElementByPoint(\n    x: number,\n    y: number,\n    options: { all: true } & PointTestOptions\n  ): GfxModel[];\n\n  getElementByPoint(\n    x: number,\n    y: number,\n    options?: { all?: false } & PointTestOptions\n  ): GfxModel | null;\n  getElementByPoint(\n    x: number,\n    y: number,\n    options: PointTestOptions & {\n      all?: boolean;\n    } = { all: false, hitThreshold: 10 }\n  ): GfxModel | GfxModel[] | null {\n    options.zoom = this.viewport.zoom;\n    options.hitThreshold ??= 10;\n\n    const hitThreshold = options.hitThreshold;\n    const responsePadding = options.responsePadding ?? [\n      hitThreshold / 2,\n      hitThreshold / 2,\n    ];\n    const all = options.all ?? false;\n    const hitTestBound = {\n      x: x - responsePadding[1],\n      y: y - responsePadding[0],\n      w: responsePadding[1] * 2,\n      h: responsePadding[0] * 2,\n    };\n\n    const candidates = this.grid.search(hitTestBound);\n    const picked = candidates.filter(\n      elm =>\n        elm.includesPoint(x, y, options as PointTestOptions, this.std.host) ||\n        elm.externalBound?.isPointInBound([x, y])\n    );\n\n    picked.sort(this.layer.compare);\n\n    if (all) {\n      return picked;\n    }\n\n    return last(picked) ?? null;\n  }\n  /**\n   * Query all elements in an area.\n   * @param bound\n   * @param options\n   */\n  getElementsByBound(\n    bound: IBound | Bound,\n    options?: { type: 'all' }\n  ): GfxModel[];\n  getElementsByBound(\n    bound: IBound | Bound,\n    options: { type: 'canvas' }\n  ): GfxPrimitiveElementModel[];\n\n  getElementsByBound(\n    bound: IBound | Bound,\n    options: { type: 'block' }\n  ): GfxBlockElementModel[];\n\n  getElementsByBound(\n    bound: IBound | Bound,\n    options: { type: 'block' | 'canvas' | 'all' } = {\n      type: 'all',\n    }\n  ): GfxModel[] {\n    bound = bound instanceof Bound ? bound : Bound.from(bound);\n\n    let candidates = this.grid.search(bound);\n\n    if (options.type !== 'all') {\n      const filter =\n        options.type === 'block'\n          ? (elm: GfxModel) => elm instanceof GfxBlockElementModel\n          : (elm: GfxModel) => elm instanceof GfxPrimitiveElementModel;\n\n      candidates = candidates.filter(filter);\n    }\n\n    candidates.sort(this.layer.compare);\n\n    return candidates;\n  }\n\n  getElementsByType(type: string): (GfxModel | BlockModel<object>)[] {\n    return (\n      this.surface?.getElementsByType(type) ??\n      this.doc.getBlocksByFlavour(type).map(b => b.model)\n    );\n  }\n\n  override mounted() {\n    this.viewport.setViewportElm(this.std.host);\n  }\n\n  override unmounted() {\n    this._disposables.dispose();\n  }\n}\n\nexport const GfxControllerIdentifier = LifeCycleWatcherIdentifier(\n  GfxController.key\n) as ServiceIdentifier<GfxController>;\n"]}