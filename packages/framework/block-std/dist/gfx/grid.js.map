{"version":3,"file":"grid.js","sourceRoot":"","sources":["../../src/gfx/grid.ts"],"names":[],"mappings":"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","sourcesContent":["import type { IBound } from '@blocksuite/global/utils';\nimport type { BlockModel, Doc } from '@blocksuite/store';\n\nimport {\n  Bound,\n  getBoundsWithRotation,\n  intersects,\n  isPointIn,\n} from '@blocksuite/global/utils';\n\nimport { compare } from '../utils/layer.js';\nimport { GfxBlockElementModel, type GfxModel } from './gfx-block-model.js';\nimport { SurfaceBlockModel } from './surface/surface-model.js';\n\nfunction getGridIndex(val: number) {\n  return Math.ceil(val / DEFAULT_GRID_SIZE) - 1;\n}\n\nfunction rangeFromBound(a: IBound): number[] {\n  if (a.rotate) a = getBoundsWithRotation(a);\n  const minRow = getGridIndex(a.x);\n  const maxRow = getGridIndex(a.x + a.w);\n  const minCol = getGridIndex(a.y);\n  const maxCol = getGridIndex(a.y + a.h);\n  return [minRow, maxRow, minCol, maxCol];\n}\n\nfunction rangeFromElement(ele: GfxModel): number[] {\n  const bound = ele.elementBound;\n  const minRow = getGridIndex(bound.x);\n  const maxRow = getGridIndex(bound.maxX);\n  const minCol = getGridIndex(bound.y);\n  const maxCol = getGridIndex(bound.maxY);\n  return [minRow, maxRow, minCol, maxCol];\n}\n\nfunction rangeFromElementExternal(ele: GfxModel): number[] | null {\n  if (!ele.externalXYWH) return null;\n\n  const bound = Bound.deserialize(ele.externalXYWH);\n  const minRow = getGridIndex(bound.x);\n  const maxRow = getGridIndex(bound.maxX);\n  const minCol = getGridIndex(bound.y);\n  const maxCol = getGridIndex(bound.maxY);\n  return [minRow, maxRow, minCol, maxCol];\n}\n\nexport const DEFAULT_GRID_SIZE = 3000;\n\nexport class GridManager {\n  private _elementToGrids = new Map<GfxModel, Set<Set<GfxModel>>>();\n\n  private _externalElementToGrids = new Map<GfxModel, Set<Set<GfxModel>>>();\n\n  private _externalGrids = new Map<string, Set<GfxModel>>();\n\n  private _grids = new Map<string, Set<GfxModel>>();\n\n  get isEmpty() {\n    return this._grids.size === 0;\n  }\n\n  private _addToExternalGrids(element: GfxModel) {\n    const range = rangeFromElementExternal(element);\n\n    if (!range) {\n      this._removeFromExternalGrids(element);\n      return;\n    }\n\n    const [minRow, maxRow, minCol, maxCol] = range;\n    const grids = new Set<Set<GfxModel>>();\n    this._externalElementToGrids.set(element, grids);\n\n    for (let i = minRow; i <= maxRow; i++) {\n      for (let j = minCol; j <= maxCol; j++) {\n        let grid = this._getExternalGrid(i, j);\n        if (!grid) {\n          grid = this._createExternalGrid(i, j);\n        }\n        grid.add(element);\n        grids.add(grid);\n      }\n    }\n  }\n\n  private _createExternalGrid(row: number, col: number) {\n    const id = row + '|' + col;\n    const elements = new Set<GfxModel>();\n    this._externalGrids.set(id, elements);\n    return elements;\n  }\n\n  private _createGrid(row: number, col: number) {\n    const id = row + '|' + col;\n    const elements = new Set<GfxModel>();\n    this._grids.set(id, elements);\n    return elements;\n  }\n\n  private _getExternalGrid(row: number, col: number) {\n    const id = row + '|' + col;\n    return this._externalGrids.get(id);\n  }\n\n  private _getGrid(row: number, col: number) {\n    const id = row + '|' + col;\n    return this._grids.get(id);\n  }\n\n  private _removeFromExternalGrids(element: GfxModel) {\n    const grids = this._externalElementToGrids.get(element);\n    if (grids) {\n      for (const grid of grids) {\n        grid.delete(element);\n      }\n    }\n  }\n\n  private _searchExternal(bound: IBound, strict = false): Set<GfxModel> {\n    const [minRow, maxRow, minCol, maxCol] = rangeFromBound(bound);\n    const results = new Set<GfxModel>();\n    const b = Bound.from(bound);\n\n    for (let i = minRow; i <= maxRow; i++) {\n      for (let j = minCol; j <= maxCol; j++) {\n        const gridElements = this._getExternalGrid(i, j);\n        if (!gridElements) continue;\n\n        for (const element of gridElements) {\n          const externalBound = element.externalBound;\n          if (\n            externalBound &&\n            (strict\n              ? b.contains(externalBound)\n              : intersects(externalBound, bound))\n          ) {\n            results.add(element);\n          }\n        }\n      }\n    }\n\n    return results;\n  }\n\n  add(element: GfxModel) {\n    this._addToExternalGrids(element);\n\n    const [minRow, maxRow, minCol, maxCol] = rangeFromElement(element);\n    const grids = new Set<Set<GfxModel>>();\n    this._elementToGrids.set(element, grids);\n\n    for (let i = minRow; i <= maxRow; i++) {\n      for (let j = minCol; j <= maxCol; j++) {\n        let grid = this._getGrid(i, j);\n        if (!grid) {\n          grid = this._createGrid(i, j);\n        }\n        grid.add(element);\n        grids.add(grid);\n      }\n    }\n  }\n\n  boundHasChanged(a: IBound, b: IBound) {\n    const [minRow, maxRow, minCol, maxCol] = rangeFromBound(a);\n    const [minRow2, maxRow2, minCol2, maxCol2] = rangeFromBound(b);\n    return (\n      minRow !== minRow2 ||\n      maxRow !== maxRow2 ||\n      minCol !== minCol2 ||\n      maxCol !== maxCol2\n    );\n  }\n\n  /**\n   *\n   * @param bound\n   * @param strict\n   * @param reverseChecking If true, check if the bound is inside the elements instead of checking if the elements are inside the bound\n   * @returns\n   */\n  has(\n    bound: IBound,\n    strict: boolean = false,\n    reverseChecking: boolean = false,\n    filter?: (model: GfxModel) => boolean\n  ) {\n    const [minRow, maxRow, minCol, maxCol] = rangeFromBound(bound);\n    const b = Bound.from(bound);\n    const check = reverseChecking\n      ? (target: Bound) => {\n          return strict ? target.contains(b) : intersects(b, target);\n        }\n      : (target: Bound) => {\n          return strict ? b.contains(target) : intersects(target, b);\n        };\n\n    for (let i = minRow; i <= maxRow; i++) {\n      for (let j = minCol; j <= maxCol; j++) {\n        const gridElements = this._getGrid(i, j);\n        if (!gridElements) continue;\n        for (const element of gridElements) {\n          if ((!filter || filter(element)) && check(element.elementBound)) {\n            return true;\n          }\n        }\n      }\n    }\n\n    return false;\n  }\n\n  pick(x: number, y: number): GfxModel[] {\n    const row = getGridIndex(x);\n    const col = getGridIndex(y);\n    const gridElements = this._getGrid(row, col);\n    if (!gridElements) return [];\n\n    const results: GfxModel[] = [];\n    for (const element of gridElements) {\n      if (\n        isPointIn(getBoundsWithRotation(Bound.deserialize(element.xywh)), x, y)\n      ) {\n        results.push(element);\n      }\n    }\n\n    return results;\n  }\n\n  remove(element: GfxModel) {\n    const grids = this._elementToGrids.get(element);\n    if (grids) {\n      for (const grid of grids) {\n        grid.delete(element);\n      }\n    }\n\n    this._removeFromExternalGrids(element);\n  }\n  search(\n    bound: IBound,\n    strict?: boolean,\n    options?: {\n      useSet?: false;\n      filter?: (model: GfxModel) => boolean;\n    }\n  ): GfxModel[];\n  search(\n    bound: IBound,\n    strict: boolean | undefined,\n    options: {\n      useSet: true;\n      filter?: (model: GfxModel) => boolean;\n    }\n  ): Set<GfxModel>;\n\n  search(\n    bound: IBound,\n    strict = false,\n    options: {\n      /**\n       * If true, return a set of elements instead of an array\n       */\n      useSet?: boolean;\n      filter?: (model: GfxModel) => boolean;\n    } = {\n      useSet: false,\n    }\n  ): GfxModel[] | Set<GfxModel> {\n    const results: Set<GfxModel> = this._searchExternal(bound, strict);\n    const [minRow, maxRow, minCol, maxCol] = rangeFromBound(bound);\n    const b = Bound.from(bound);\n    const returnSet = options.useSet ?? false;\n    const filter = options.filter;\n\n    for (let i = minRow; i <= maxRow; i++) {\n      for (let j = minCol; j <= maxCol; j++) {\n        const gridElements = this._getGrid(i, j);\n        if (!gridElements) continue;\n        for (const element of gridElements) {\n          if (\n            (!filter || filter(element)) && strict\n              ? b.contains(element.elementBound)\n              : intersects(element.elementBound, b)\n          ) {\n            results.add(element);\n          }\n        }\n      }\n    }\n\n    if (returnSet) return results;\n\n    // sort elements in set based on index\n    const sorted = Array.from(results).sort(compare);\n\n    return sorted;\n  }\n\n  update(element: GfxModel) {\n    this.remove(element);\n    this.add(element);\n  }\n\n  watch(blocks: { doc?: Doc; surface?: SurfaceBlockModel | null }) {\n    const disposables: { dispose: () => void }[] = [];\n    const { doc, surface } = blocks;\n    const isRenderableBlock = (\n      block: BlockModel\n    ): block is GfxBlockElementModel => {\n      return (\n        block instanceof GfxBlockElementModel &&\n        (block.parent?.role === 'root' ||\n          block.parent instanceof SurfaceBlockModel)\n      );\n    };\n\n    if (doc) {\n      disposables.push(\n        doc.slots.blockUpdated.on(payload => {\n          if (payload.type === 'add') {\n            if (isRenderableBlock(payload.model)) {\n              this.add(payload.model);\n            }\n          }\n\n          if (payload.type === 'update') {\n            if (payload.props.key === 'xywh') {\n              this.update(\n                doc.getBlock(payload.id)?.model as GfxBlockElementModel\n              );\n            }\n          }\n\n          if (payload.type === 'delete') {\n            if (payload.model instanceof GfxBlockElementModel) {\n              this.remove(payload.model);\n            }\n          }\n        })\n      );\n\n      Object.values(doc.blocks.peek()).forEach(block => {\n        if (isRenderableBlock(block.model)) {\n          this.add(block.model);\n        }\n      });\n    }\n\n    if (surface) {\n      disposables.push(\n        surface.elementAdded.on(payload => {\n          this.add(surface.getElementById(payload.id)!);\n        })\n      );\n\n      disposables.push(\n        surface.elementRemoved.on(payload => {\n          this.remove(payload.model);\n        })\n      );\n\n      disposables.push(\n        surface.elementUpdated.on(payload => {\n          if (payload.props['xywh'] || payload.props['externalXYWH']) {\n            this.update(surface.getElementById(payload.id)!);\n          }\n        })\n      );\n\n      surface.elementModels.forEach(model => {\n        this.add(model);\n      });\n    }\n\n    return () => {\n      disposables.forEach(d => d.dispose());\n    };\n  }\n}\n"]}