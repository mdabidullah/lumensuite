{"version":3,"file":"manager.js","sourceRoot":"","sources":["../../src/selection/manager.ts"],"names":[],"mappings":"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","sourcesContent":["import { BlockSuiteError, ErrorCode } from '@blocksuite/global/exceptions';\nimport { DisposableGroup, Slot } from '@blocksuite/global/utils';\nimport { nanoid, type StackItem } from '@blocksuite/store';\nimport { computed, signal } from '@lit-labs/preact-signals';\n\nimport type { BlockStdScope } from '../scope/index.js';\nimport type { BaseSelection } from './base.js';\n\nimport { LifeCycleWatcher } from '../extension/index.js';\nimport {\n  BlockSelection,\n  CursorSelection,\n  SurfaceSelection,\n  TextSelection,\n} from './variants/index.js';\n\ninterface SelectionConstructor {\n  type: string;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  new (...args: any[]): BaseSelection;\n  fromJSON(json: Record<string, unknown>): BaseSelection;\n}\n\nexport class SelectionManager extends LifeCycleWatcher {\n  static override readonly key = 'selectionManager';\n\n  private _id: string;\n\n  private _itemAdded = (event: { stackItem: StackItem }) => {\n    event.stackItem.meta.set('selection-state', this.value);\n  };\n\n  private _itemPopped = (event: { stackItem: StackItem }) => {\n    const selection = event.stackItem.meta.get('selection-state');\n    if (selection) {\n      this.set(selection as BaseSelection[]);\n    }\n  };\n\n  private _jsonToSelection = (json: Record<string, unknown>) => {\n    const ctor = this._selectionConstructors[json.type as string];\n    if (!ctor) {\n      throw new BlockSuiteError(\n        ErrorCode.SelectionError,\n        `Unknown selection type: ${json.type}`\n      );\n    }\n    return ctor.fromJSON(json);\n  };\n\n  private _remoteSelections = signal<Map<number, BaseSelection[]>>(new Map());\n\n  private _selectionConstructors: Record<string, SelectionConstructor> = {};\n\n  private _selections = signal<BaseSelection[]>([]);\n\n  disposables = new DisposableGroup();\n\n  slots = {\n    changed: new Slot<BaseSelection[]>(),\n    remoteChanged: new Slot<Map<number, BaseSelection[]>>(),\n  };\n\n  private get _store() {\n    return this.std.collection.awarenessStore;\n  }\n\n  get id() {\n    return this._id;\n  }\n\n  get remoteSelections() {\n    return this._remoteSelections.value;\n  }\n\n  get value() {\n    return this._selections.value;\n  }\n\n  constructor(std: BlockStdScope) {\n    super(std);\n    this._id = `${this.std.doc.blockCollection.id}:${nanoid()}`;\n    this._setupDefaultSelections();\n    this._store.awareness.on(\n      'change',\n      (change: { updated: number[]; added: number[]; removed: number[] }) => {\n        const all = change.updated.concat(change.added).concat(change.removed);\n        const localClientID = this._store.awareness.clientID;\n        const exceptLocal = all.filter(id => id !== localClientID);\n        const hasLocal = all.includes(localClientID);\n        if (hasLocal) {\n          const localSelectionJson = this._store.getLocalSelection(this.id);\n          const localSelection = localSelectionJson.map(json => {\n            return this._jsonToSelection(json);\n          });\n          this._selections.value = localSelection;\n        }\n\n        // Only consider remote selections from other clients\n        if (exceptLocal.length > 0) {\n          const map = new Map<number, BaseSelection[]>();\n          this._store.getStates().forEach((state, id) => {\n            if (id === this._store.awareness.clientID) return;\n            // selection id starts with the same block collection id from others clients would be considered as remote selections\n            const selection = Object.entries(state.selectionV2)\n              .filter(([key]) =>\n                key.startsWith(this.std.doc.blockCollection.id)\n              )\n              .flatMap(([_, selection]) => selection);\n\n            const selections = selection\n              .map(json => {\n                try {\n                  return this._jsonToSelection(json);\n                } catch (error) {\n                  console.error(\n                    'Parse remote selection failed:',\n                    id,\n                    json,\n                    error\n                  );\n                  return null;\n                }\n              })\n              .filter((sel): sel is BaseSelection => !!sel);\n\n            map.set(id, selections);\n          });\n          this._remoteSelections.value = map;\n        }\n      }\n    );\n  }\n\n  private _setupDefaultSelections() {\n    this.register([\n      TextSelection,\n      BlockSelection,\n      SurfaceSelection,\n      CursorSelection,\n    ]);\n  }\n\n  clear(types?: string[]) {\n    if (types) {\n      const values = this.value.filter(\n        selection => !types.includes(selection.type)\n      );\n      this.set(values);\n    } else {\n      this.set([]);\n    }\n  }\n\n  create<T extends BlockSuite.SelectionType>(\n    type: T,\n    ...args: ConstructorParameters<BlockSuite.Selection[T]>\n  ): BlockSuite.SelectionInstance[T] {\n    const ctor = this._selectionConstructors[type];\n    if (!ctor) {\n      throw new BlockSuiteError(\n        ErrorCode.SelectionError,\n        `Unknown selection type: ${type}`\n      );\n    }\n    return new ctor(...args) as BlockSuite.SelectionInstance[T];\n  }\n\n  dispose() {\n    Object.values(this.slots).forEach(slot => slot.dispose());\n    this.disposables.dispose();\n  }\n\n  filter<T extends BlockSuite.SelectionType>(type: T) {\n    return this.filter$(type).value;\n  }\n\n  filter$<T extends BlockSuite.SelectionType>(type: T) {\n    return computed(() =>\n      this.value.filter((sel): sel is BlockSuite.SelectionInstance[T] =>\n        sel.is(type)\n      )\n    );\n  }\n\n  find<T extends BlockSuite.SelectionType>(type: T) {\n    return this.find$(type).value;\n  }\n\n  find$<T extends BlockSuite.SelectionType>(type: T) {\n    return computed(() =>\n      this.value.find((sel): sel is BlockSuite.SelectionInstance[T] =>\n        sel.is(type)\n      )\n    );\n  }\n\n  fromJSON(json: Record<string, unknown>[]) {\n    const selections = json.map(json => {\n      return this._jsonToSelection(json);\n    });\n    return this.set(selections);\n  }\n\n  getGroup(group: string) {\n    return this.value.filter(s => s.group === group);\n  }\n\n  override mounted() {\n    if (this.disposables.disposed) {\n      this.disposables = new DisposableGroup();\n    }\n    this.std.doc.history.on('stack-item-added', this._itemAdded);\n    this.std.doc.history.on('stack-item-popped', this._itemPopped);\n    this.disposables.add(\n      this._store.slots.update.on(({ id }) => {\n        if (id === this._store.awareness.clientID) {\n          return;\n        }\n        this.slots.remoteChanged.emit(this.remoteSelections);\n      })\n    );\n  }\n\n  register(ctor: SelectionConstructor | SelectionConstructor[]) {\n    [ctor].flat().forEach(ctor => {\n      this._selectionConstructors[ctor.type] = ctor;\n    });\n    return this;\n  }\n\n  set(selections: BaseSelection[]) {\n    this._store.setLocalSelection(\n      this.id,\n      selections.map(s => s.toJSON())\n    );\n    this.slots.changed.emit(selections);\n  }\n\n  setGroup(group: string, selections: BaseSelection[]) {\n    const current = this.value.filter(s => s.group !== group);\n    this.set([...current, ...selections]);\n  }\n\n  override unmounted() {\n    this.std.doc.history.off('stack-item-added', this._itemAdded);\n    this.std.doc.history.off('stack-item-popped', this._itemPopped);\n    this.slots.changed.dispose();\n    this.disposables.dispose();\n    this.clear();\n  }\n\n  update(fn: (currentSelections: BaseSelection[]) => BaseSelection[]) {\n    const selections = fn(this.value);\n    this.set(selections);\n  }\n}\n"]}