{"version":3,"file":"block.js","sourceRoot":"","sources":["../../../src/selection/variants/block.ts"],"names":[],"mappings":"AAAA,OAAO,CAAC,MAAM,KAAK,CAAC;AAEpB,OAAO,EAAE,aAAa,EAAE,MAAM,YAAY,CAAC;AAE3C,MAAM,oBAAoB,GAAG,CAAC,CAAC,MAAM,CAAC;IACpC,OAAO,EAAE,CAAC,CAAC,MAAM,EAAE;CACpB,CAAC,CAAC;AAEH,MAAM,OAAO,cAAe,SAAQ,aAAa;aAC/B,UAAK,GAAG,MAAM,CAAC;aAEf,SAAI,GAAG,OAAO,CAAC;IAE/B,MAAM,CAAU,QAAQ,CAAC,IAA6B;QACpD,oBAAoB,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;QACjC,OAAO,IAAI,cAAc,CAAC;YACxB,OAAO,EAAE,IAAI,CAAC,OAAiB;SAChC,CAAC,CAAC;IACL,CAAC;IAEQ,MAAM,CAAC,KAAoB;QAClC,IAAI,KAAK,YAAY,cAAc,EAAE,CAAC;YACpC,OAAO,IAAI,CAAC,OAAO,KAAK,KAAK,CAAC,OAAO,CAAC;QACxC,CAAC;QACD,OAAO,KAAK,CAAC;IACf,CAAC;IAEQ,MAAM;QACb,OAAO;YACL,IAAI,EAAE,OAAO;YACb,OAAO,EAAE,IAAI,CAAC,OAAO;SACtB,CAAC;IACJ,CAAC","sourcesContent":["import z from 'zod';\n\nimport { BaseSelection } from '../base.js';\n\nconst BlockSelectionSchema = z.object({\n  blockId: z.string(),\n});\n\nexport class BlockSelection extends BaseSelection {\n  static override group = 'note';\n\n  static override type = 'block';\n\n  static override fromJSON(json: Record<string, unknown>): BlockSelection {\n    BlockSelectionSchema.parse(json);\n    return new BlockSelection({\n      blockId: json.blockId as string,\n    });\n  }\n\n  override equals(other: BaseSelection): boolean {\n    if (other instanceof BlockSelection) {\n      return this.blockId === other.blockId;\n    }\n    return false;\n  }\n\n  override toJSON(): Record<string, unknown> {\n    return {\n      type: 'block',\n      blockId: this.blockId,\n    };\n  }\n}\n\ndeclare global {\n  namespace BlockSuite {\n    interface Selection {\n      block: typeof BlockSelection;\n    }\n  }\n}\n"]}