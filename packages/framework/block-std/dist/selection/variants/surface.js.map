{"version":3,"file":"surface.js","sourceRoot":"","sources":["../../../src/selection/variants/surface.ts"],"names":[],"mappings":"AAAA,OAAO,CAAC,MAAM,KAAK,CAAC;AAEpB,OAAO,EAAE,aAAa,EAAE,MAAM,YAAY,CAAC;AAE3C,MAAM,sBAAsB,GAAG,CAAC,CAAC,MAAM,CAAC;IACtC,QAAQ,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC;IAC7B,OAAO,EAAE,CAAC,CAAC,OAAO,EAAE;IACpB,UAAU,EAAE,CAAC,CAAC,OAAO,EAAE,CAAC,QAAQ,EAAE;CACnC,CAAC,CAAC;AAEH,MAAM,OAAO,gBAAiB,SAAQ,aAAa;aACjC,UAAK,GAAG,KAAK,CAAC;aAEd,SAAI,GAAG,SAAS,CAAC;IAQjC,YACE,OAAe,EACf,QAAkB,EAClB,OAAgB,EAChB,UAAU,GAAG,KAAK;QAElB,KAAK,CAAC,EAAE,OAAO,EAAE,CAAC,CAAC;QAEnB,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;IAC/B,CAAC;IAED,MAAM,CAAU,QAAQ,CACtB,IAOK;QAEL,sBAAsB,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;QACnC,OAAO,IAAI,gBAAgB,CACzB,IAAI,CAAC,OAAiB,EACtB,IAAI,CAAC,QAAoB,EACzB,IAAI,CAAC,OAAkB,EACtB,IAAI,CAAC,UAAsB,IAAI,KAAK,CACtC,CAAC;IACJ,CAAC;IAEQ,MAAM,CAAC,KAAoB;QAClC,IAAI,KAAK,YAAY,gBAAgB,EAAE,CAAC;YACtC,OAAO,CACL,IAAI,CAAC,OAAO,KAAK,KAAK,CAAC,OAAO;gBAC9B,IAAI,CAAC,QAAQ,CAAC,MAAM,KAAK,KAAK,CAAC,QAAQ,CAAC,MAAM;gBAC9C,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,EAAE,EAAE,GAAG,EAAE,EAAE,CAAC,EAAE,KAAK,KAAK,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;gBAC5D,IAAI,CAAC,OAAO,KAAK,KAAK,CAAC,OAAO;gBAC9B,IAAI,CAAC,UAAU,KAAK,KAAK,CAAC,UAAU,CACrC,CAAC;QACJ,CAAC;QAED,OAAO,KAAK,CAAC;IACf,CAAC;IAED,OAAO;QACL,OAAO,IAAI,CAAC,QAAQ,CAAC,MAAM,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC;IACrD,CAAC;IAEQ,MAAM;QACb,OAAO;YACL,IAAI,EAAE,SAAS;YACf,OAAO,EAAE,IAAI,CAAC,OAAO;YACrB,QAAQ,EAAE,IAAI,CAAC,QAAQ;YACvB,OAAO,EAAE,IAAI,CAAC,OAAO;YACrB,UAAU,EAAE,IAAI,CAAC,UAAU;SAC5B,CAAC;IACJ,CAAC","sourcesContent":["import z from 'zod';\n\nimport { BaseSelection } from '../base.js';\n\nconst SurfaceSelectionSchema = z.object({\n  elements: z.array(z.string()),\n  editing: z.boolean(),\n  inoperable: z.boolean().optional(),\n});\n\nexport class SurfaceSelection extends BaseSelection {\n  static override group = 'gfx';\n\n  static override type = 'surface';\n\n  readonly editing: boolean;\n\n  readonly elements: string[];\n\n  readonly inoperable: boolean;\n\n  constructor(\n    blockId: string,\n    elements: string[],\n    editing: boolean,\n    inoperable = false\n  ) {\n    super({ blockId });\n\n    this.elements = elements;\n    this.editing = editing;\n    this.inoperable = inoperable;\n  }\n\n  static override fromJSON(\n    json:\n      | Record<string, unknown>\n      | {\n          blockId: string[];\n          elements: string[];\n          editing: boolean;\n          inoperable?: boolean;\n        }\n  ): SurfaceSelection {\n    SurfaceSelectionSchema.parse(json);\n    return new SurfaceSelection(\n      json.blockId as string,\n      json.elements as string[],\n      json.editing as boolean,\n      (json.inoperable as boolean) || false\n    );\n  }\n\n  override equals(other: BaseSelection): boolean {\n    if (other instanceof SurfaceSelection) {\n      return (\n        this.blockId === other.blockId &&\n        this.elements.length === other.elements.length &&\n        this.elements.every((id, idx) => id === other.elements[idx]) &&\n        this.editing === other.editing &&\n        this.inoperable === other.inoperable\n      );\n    }\n\n    return false;\n  }\n\n  isEmpty() {\n    return this.elements.length === 0 && !this.editing;\n  }\n\n  override toJSON(): Record<string, unknown> {\n    return {\n      type: 'surface',\n      blockId: this.blockId,\n      elements: this.elements,\n      editing: this.editing,\n      inoperable: this.inoperable,\n    };\n  }\n}\n\ndeclare global {\n  namespace BlockSuite {\n    interface Selection {\n      surface: typeof SurfaceSelection;\n    }\n  }\n}\n"]}