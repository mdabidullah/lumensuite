{"version":3,"file":"text.js","sourceRoot":"","sources":["../../../src/selection/variants/text.ts"],"names":[],"mappings":"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","sourcesContent":["import z from 'zod';\n\nimport { BaseSelection } from '../base.js';\n\nexport type TextRangePoint = {\n  blockId: string;\n  index: number;\n  length: number;\n};\n\nexport type TextSelectionProps = {\n  from: TextRangePoint;\n  to: TextRangePoint | null;\n  reverse?: boolean;\n};\n\nconst TextSelectionSchema = z.object({\n  from: z.object({\n    blockId: z.string(),\n    index: z.number(),\n    length: z.number(),\n  }),\n  to: z\n    .object({\n      blockId: z.string(),\n      index: z.number(),\n      length: z.number(),\n    })\n    .nullable(),\n  // The `optional()` is for backward compatibility,\n  // since `reverse` may not exist in remote selection.\n  reverse: z.boolean().optional(),\n});\n\nexport class TextSelection extends BaseSelection {\n  static override group = 'note';\n\n  static override type = 'text';\n\n  from: TextRangePoint;\n\n  reverse: boolean;\n\n  to: TextRangePoint | null;\n\n  get end(): TextRangePoint {\n    return this.reverse ? this.from : (this.to ?? this.from);\n  }\n\n  get start(): TextRangePoint {\n    return this.reverse ? (this.to ?? this.from) : this.from;\n  }\n\n  constructor({ from, to, reverse }: TextSelectionProps) {\n    super({\n      blockId: from.blockId,\n    });\n    this.from = from;\n\n    this.to = this._equalPoint(from, to) ? null : to;\n\n    this.reverse = !!reverse;\n  }\n\n  static override fromJSON(json: Record<string, unknown>): TextSelection {\n    TextSelectionSchema.parse(json);\n    return new TextSelection({\n      from: json.from as TextRangePoint,\n      to: json.to as TextRangePoint | null,\n      reverse: !!json.reverse,\n    });\n  }\n\n  private _equalPoint(\n    a: TextRangePoint | null,\n    b: TextRangePoint | null\n  ): boolean {\n    if (a && b) {\n      return (\n        a.blockId === b.blockId && a.index === b.index && a.length === b.length\n      );\n    }\n\n    return a === b;\n  }\n\n  empty(): boolean {\n    return !!this.to;\n  }\n\n  override equals(other: BaseSelection): boolean {\n    if (other instanceof TextSelection) {\n      return (\n        this.blockId === other.blockId &&\n        this._equalPoint(other.from, this.from) &&\n        this._equalPoint(other.to, this.to)\n      );\n    }\n    return false;\n  }\n\n  isCollapsed(): boolean {\n    return this.to === null && this.from.length === 0;\n  }\n\n  isInSameBlock(): boolean {\n    return this.to === null || this.from.blockId === this.to.blockId;\n  }\n\n  override toJSON(): Record<string, unknown> {\n    return {\n      type: 'text',\n      from: this.from,\n      to: this.to,\n      reverse: this.reverse,\n    };\n  }\n}\n\ndeclare global {\n  namespace BlockSuite {\n    interface Selection {\n      text: typeof TextSelection;\n    }\n  }\n}\n"]}