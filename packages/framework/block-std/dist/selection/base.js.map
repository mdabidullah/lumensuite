{"version":3,"file":"base.js","sourceRoot":"","sources":["../../src/selection/base.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,eAAe,EAAE,SAAS,EAAE,MAAM,+BAA+B,CAAC;AAY3E,MAAM,OAAgB,aAAa;IAOjC,IAAI,KAAK;QACP,OAAQ,IAAI,CAAC,WAAoC,CAAC,KAAK,CAAC;IAC1D,CAAC;IAED,IAAI,IAAI;QACN,OAAQ,IAAI,CAAC,WAAoC;aAC9C,IAAgC,CAAC;IACtC,CAAC;IAED,YAAY,EAAE,OAAO,EAAwB;QAC3C,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;IACzB,CAAC;IAED,MAAM,CAAC,QAAQ,CAAC,CAA0B;QACxC,MAAM,IAAI,eAAe,CACvB,SAAS,CAAC,cAAc,EACxB,+BAA+B,CAChC,CAAC;IACJ,CAAC;IAID,EAAE,CACA,IAAO;QAEP,OAAO,IAAI,CAAC,IAAI,KAAK,IAAI,CAAC;IAC5B,CAAC;CAGF","sourcesContent":["import { BlockSuiteError, ErrorCode } from '@blocksuite/global/exceptions';\n\ntype SelectionConstructor<T = unknown> = {\n  type: string;\n  group: string;\n  new (...args: unknown[]): T;\n};\n\nexport type BaseSelectionOptions = {\n  blockId: string;\n};\n\nexport abstract class BaseSelection {\n  static readonly group: string;\n\n  static readonly type: string;\n\n  readonly blockId: string;\n\n  get group(): string {\n    return (this.constructor as SelectionConstructor).group;\n  }\n\n  get type(): BlockSuite.SelectionType {\n    return (this.constructor as SelectionConstructor)\n      .type as BlockSuite.SelectionType;\n  }\n\n  constructor({ blockId }: BaseSelectionOptions) {\n    this.blockId = blockId;\n  }\n\n  static fromJSON(_: Record<string, unknown>): BaseSelection {\n    throw new BlockSuiteError(\n      ErrorCode.SelectionError,\n      'You must override this method'\n    );\n  }\n\n  abstract equals(other: BaseSelection): boolean;\n\n  is<T extends BlockSuite.SelectionType>(\n    type: T\n  ): this is BlockSuite.SelectionInstance[T] {\n    return this.type === type;\n  }\n\n  abstract toJSON(): Record<string, unknown>;\n}\n"]}