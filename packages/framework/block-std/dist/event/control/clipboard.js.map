{"version":3,"file":"clipboard.js","sourceRoot":"","sources":["../../../src/event/control/clipboard.ts"],"names":[],"mappings":"AAEA,OAAO,EAAE,YAAY,EAAE,mBAAmB,EAAE,MAAM,YAAY,CAAC;AAC/D,OAAO,EAAE,mBAAmB,EAAE,MAAM,uBAAuB,CAAC;AAC5D,OAAO,EAAE,oBAAoB,EAAE,gBAAgB,EAAE,MAAM,oBAAoB,CAAC;AAE5E,MAAM,OAAO,gBAAgB;IAgC3B,YAAoB,WAA8B;QAA9B,gBAAW,GAAX,WAAW,CAAmB;QA/B1C,UAAK,GAAG,CAAC,KAAqB,EAAE,EAAE;YACxC,MAAM,mBAAmB,GAAG,IAAI,mBAAmB,CAAC;gBAClD,KAAK;aACN,CAAC,CAAC;YACH,IAAI,CAAC,WAAW,CAAC,GAAG,CAClB,MAAM,EACN,IAAI,CAAC,cAAc,CAAC,KAAK,EAAE,mBAAmB,CAAC,CAChD,CAAC;QACJ,CAAC,CAAC;QAEM,SAAI,GAAG,CAAC,KAAqB,EAAE,EAAE;YACvC,MAAM,mBAAmB,GAAG,IAAI,mBAAmB,CAAC;gBAClD,KAAK;aACN,CAAC,CAAC;YACH,IAAI,CAAC,WAAW,CAAC,GAAG,CAClB,KAAK,EACL,IAAI,CAAC,cAAc,CAAC,KAAK,EAAE,mBAAmB,CAAC,CAChD,CAAC;QACJ,CAAC,CAAC;QAEM,WAAM,GAAG,CAAC,KAAqB,EAAE,EAAE;YACzC,MAAM,mBAAmB,GAAG,IAAI,mBAAmB,CAAC;gBAClD,KAAK;aACN,CAAC,CAAC;YAEH,IAAI,CAAC,WAAW,CAAC,GAAG,CAClB,OAAO,EACP,IAAI,CAAC,cAAc,CAAC,KAAK,EAAE,mBAAmB,CAAC,CAChD,CAAC;QACJ,CAAC,CAAC;IAEmD,CAAC;IAE9C,cAAc,CAAC,KAAY,EAAE,cAAmC;QACtE,OAAO,mBAAmB,CAAC,IAAI,CAC7B,IAAI,YAAY,CAAC,KAAK,CAAC,EACvB,IAAI,gBAAgB,CAAC;YACnB,KAAK;YACL,UAAU,EAAE,oBAAoB,CAAC,SAAS;SAC3C,CAAC,EACF,cAAc,CACf,CAAC;IACJ,CAAC;IAED,MAAM;QACJ,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC,YAAY,CAAC,QAAQ,EAAE,KAAK,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;QACtE,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC,YAAY,CAAC,QAAQ,EAAE,MAAM,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;QACxE,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC,YAAY,CAAC,QAAQ,EAAE,OAAO,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;IAC5E,CAAC;CACF","sourcesContent":["import type { UIEventDispatcher } from '../dispatcher.js';\n\nimport { UIEventState, UIEventStateContext } from '../base.js';\nimport { ClipboardEventState } from '../state/clipboard.js';\nimport { EventScopeSourceType, EventSourceState } from '../state/source.js';\n\nexport class ClipboardControl {\n  private _copy = (event: ClipboardEvent) => {\n    const clipboardEventState = new ClipboardEventState({\n      event,\n    });\n    this._dispatcher.run(\n      'copy',\n      this._createContext(event, clipboardEventState)\n    );\n  };\n\n  private _cut = (event: ClipboardEvent) => {\n    const clipboardEventState = new ClipboardEventState({\n      event,\n    });\n    this._dispatcher.run(\n      'cut',\n      this._createContext(event, clipboardEventState)\n    );\n  };\n\n  private _paste = (event: ClipboardEvent) => {\n    const clipboardEventState = new ClipboardEventState({\n      event,\n    });\n\n    this._dispatcher.run(\n      'paste',\n      this._createContext(event, clipboardEventState)\n    );\n  };\n\n  constructor(private _dispatcher: UIEventDispatcher) {}\n\n  private _createContext(event: Event, clipboardState: ClipboardEventState) {\n    return UIEventStateContext.from(\n      new UIEventState(event),\n      new EventSourceState({\n        event,\n        sourceType: EventScopeSourceType.Selection,\n      }),\n      clipboardState\n    );\n  }\n\n  listen() {\n    this._dispatcher.disposables.addFromEvent(document, 'cut', this._cut);\n    this._dispatcher.disposables.addFromEvent(document, 'copy', this._copy);\n    this._dispatcher.disposables.addFromEvent(document, 'paste', this._paste);\n  }\n}\n"]}