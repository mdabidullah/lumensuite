{"version":3,"file":"base.js","sourceRoot":"","sources":["../../src/event/base.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,eAAe,EAAE,SAAS,EAAE,MAAM,+BAA+B,CAAC;AAM3E,MAAM,OAAO,YAAY;IAIvB,YAAmB,KAAY;QAAZ,UAAK,GAAL,KAAK,CAAO;QAH/B,wDAAwD;QACxD,SAAI,GAAG,cAAc,CAAC;IAEY,CAAC;CACpC;AAED,MAAM,OAAO,mBAAmB;IAAhC;QACU,SAAI,GAAiC,EAAE,CAAC;QAEhD,QAAG,GAAG,CAA4C,KAAY,EAAE,EAAE;YAChE,MAAM,IAAI,GAAG,KAAK,CAAC,IAAI,CAAC;YACxB,IAAI,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC;gBACpB,OAAO,CAAC,IAAI,CAAC,4CAA4C,EAAE,IAAI,CAAC,CAAC;YACnE,CAAC;YAED,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,KAAK,CAAC;QAC1B,CAAC,CAAC;QAEF,QAAG,GAAG,CACJ,IAAU,EACQ,EAAE;YACpB,MAAM,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAC9B,IAAI,CAAC,KAAK,EAAE,CAAC;gBACX,MAAM,IAAI,eAAe,CACvB,SAAS,CAAC,oBAAoB,EAC9B,8BAA8B,IAAI,YAAY,CAC/C,CAAC;YACJ,CAAC;YACD,OAAO,KAAyB,CAAC;QACnC,CAAC,CAAC;QAEF,QAAG,GAAG,CAAC,IAAsB,EAAE,EAAE;YAC/B,OAAO,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC3B,CAAC,CAAC;IASJ,CAAC;IAPC,MAAM,CAAC,IAAI,CAAC,GAAG,MAAsB;QACnC,MAAM,OAAO,GAAG,IAAI,mBAAmB,EAAE,CAAC;QAC1C,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;YACrB,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;QACrB,CAAC,CAAC,CAAC;QACH,OAAO,OAAO,CAAC;IACjB,CAAC;CACF","sourcesContent":["import { LumenSuiteError, ErrorCode } from '@lumensuite/global/exceptions';\n\ntype MatchEvent<T extends string> = T extends UIEventStateType\n  ? LumenSuiteUIEventState[T]\n  : UIEventState;\n\nexport class UIEventState {\n  /** when extends, override it with pattern `xxxState` */\n  type = 'defaultState';\n\n  constructor(public event: Event) {}\n}\n\nexport class UIEventStateContext {\n  private _map: Record<string, UIEventState> = {};\n\n  add = <State extends UIEventState = UIEventState>(state: State) => {\n    const name = state.type;\n    if (this._map[name]) {\n      console.warn('UIEventStateContext: state name duplicated', name);\n    }\n\n    this._map[name] = state;\n  };\n\n  get = <Type extends UIEventStateType = UIEventStateType>(\n    type: Type\n  ): MatchEvent<Type> => {\n    const state = this._map[type];\n    if (!state) {\n      throw new LumenSuiteError(\n        ErrorCode.EventDispatcherError,\n        `UIEventStateContext: state ${type} not found`\n      );\n    }\n    return state as MatchEvent<Type>;\n  };\n\n  has = (type: UIEventStateType) => {\n    return !!this._map[type];\n  };\n\n  static from(...states: UIEventState[]) {\n    const context = new UIEventStateContext();\n    states.forEach(state => {\n      context.add(state);\n    });\n    return context;\n  }\n}\n\nexport type UIEventHandler = (\n  context: UIEventStateContext\n) => boolean | null | undefined | void;\n\ndeclare global {\n  interface LumenSuiteUIEventState {\n    defaultState: UIEventState;\n  }\n\n  type UIEventStateType = keyof LumenSuiteUIEventState;\n}\n"]}