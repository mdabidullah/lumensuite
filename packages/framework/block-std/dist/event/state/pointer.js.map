{"version":3,"file":"pointer.js","sourceRoot":"","sources":["../../../src/event/state/pointer.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,YAAY,EAAE,MAAM,YAAY,CAAC;AAY1C,MAAM,OAAO,iBAAkB,SAAQ,YAAY;IAuBjD,IAAI,CAAC;QACH,OAAO,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;IACtB,CAAC;IAED,IAAI,CAAC;QACH,OAAO,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;IACtB,CAAC;IAED,YAAY,EAAE,KAAK,EAAE,IAAI,EAAE,MAAM,EAAE,MAAM,EAAE,IAAI,EAA4B;QACzE,KAAK,CAAC,KAAK,CAAC,CAAC;QAXN,SAAI,GAAG,cAAc,CAAC;QAa7B,MAAM,OAAO,GAAG,KAAK,CAAC,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC;QAC1C,MAAM,OAAO,GAAG,KAAK,CAAC,OAAO,GAAG,IAAI,CAAC,GAAG,CAAC;QAEzC,IAAI,CAAC,GAAG,GAAG,KAAK,CAAC;QACjB,IAAI,CAAC,KAAK,GAAG,EAAE,CAAC,EAAE,OAAO,EAAE,CAAC,EAAE,OAAO,EAAE,CAAC;QACxC,IAAI,CAAC,eAAe,GAAG,EAAE,CAAC,EAAE,IAAI,CAAC,IAAI,EAAE,CAAC,EAAE,IAAI,CAAC,GAAG,EAAE,CAAC;QACrD,IAAI,CAAC,KAAK,GAAG,EAAE,CAAC,EAAE,MAAM,EAAE,CAAC,EAAE,MAAM,EAAE,CAAC;QACtC,IAAI,CAAC,KAAK,GAAG,IAAI;YACf,CAAC,CAAC,EAAE,CAAC,EAAE,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,EAAE,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE;YAC1D,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;QACnB,IAAI,CAAC,IAAI,GAAG;YACV,KAAK,EAAE,KAAK,CAAC,QAAQ;YACrB,GAAG,EAAE,KAAK,CAAC,OAAO,IAAI,KAAK,CAAC,OAAO;YACnC,GAAG,EAAE,KAAK,CAAC,MAAM;SAClB,CAAC;QACF,IAAI,CAAC,MAAM,GAAG,IAAI,EAAE,MAAM,IAAI,KAAK,CAAC,MAAM,CAAC;QAC3C,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC,QAAQ,CAAC;IACjC,CAAC;CACF;AAED,MAAM,OAAO,sBAAuB,SAAQ,YAAY;IAKtD,YAAY,KAAmB,EAAE,QAA6B;QAC5D,KAAK,CAAC,KAAK,CAAC,CAAC;QAHN,SAAI,GAAG,mBAAmB,CAAC;QAIlC,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;IAC3B,CAAC;CACF","sourcesContent":["import { UIEventState } from '../base.js';\n\ntype PointerEventStateOptions = {\n  event: PointerEvent;\n  rect: DOMRect;\n  startX: number;\n  startY: number;\n  last: PointerEventState | null;\n};\n\ntype Point = { x: number; y: number };\n\nexport class PointerEventState extends UIEventState {\n  button: number;\n\n  containerOffset: Point;\n\n  delta: Point;\n\n  keys: {\n    shift: boolean;\n    cmd: boolean;\n    alt: boolean;\n  };\n\n  point: Point;\n\n  pressure: number;\n\n  raw: PointerEvent;\n\n  start: Point;\n\n  override type = 'pointerState';\n\n  get x() {\n    return this.point.x;\n  }\n\n  get y() {\n    return this.point.y;\n  }\n\n  constructor({ event, rect, startX, startY, last }: PointerEventStateOptions) {\n    super(event);\n\n    const offsetX = event.clientX - rect.left;\n    const offsetY = event.clientY - rect.top;\n\n    this.raw = event;\n    this.point = { x: offsetX, y: offsetY };\n    this.containerOffset = { x: rect.left, y: rect.top };\n    this.start = { x: startX, y: startY };\n    this.delta = last\n      ? { x: offsetX - last.point.x, y: offsetY - last.point.y }\n      : { x: 0, y: 0 };\n    this.keys = {\n      shift: event.shiftKey,\n      cmd: event.metaKey || event.ctrlKey,\n      alt: event.altKey,\n    };\n    this.button = last?.button || event.button;\n    this.pressure = event.pressure;\n  }\n}\n\nexport class MultiPointerEventState extends UIEventState {\n  pointers: PointerEventState[];\n\n  override type = 'multiPointerState';\n\n  constructor(event: PointerEvent, pointers: PointerEventState[]) {\n    super(event);\n    this.pointers = pointers;\n  }\n}\n\ndeclare global {\n  interface BlockSuiteUIEventState {\n    pointerState: PointerEventState;\n    multiPointerState: MultiPointerEventState;\n  }\n}\n"]}