{"version":3,"file":"utils.unit.spec.js","sourceRoot":"","sources":["../../src/__tests__/utils.unit.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { describe, expect, test } from 'vitest';\n\nimport { isEqual } from '../utils.js';\n\ndescribe('isEqual', () => {\n  test('number', () => {\n    expect(isEqual(1, 1)).toBe(true);\n    expect(isEqual(1, 114514)).toBe(false);\n    expect(isEqual(NaN, NaN)).toBe(true);\n    expect(isEqual(0, -0)).toBe(false);\n  });\n\n  test('string', () => {\n    expect(isEqual('', '')).toBe(true);\n    expect(isEqual('', ' ')).toBe(false);\n  });\n\n  test('array', () => {\n    expect(isEqual([], [])).toBe(true);\n    expect(isEqual([1, 1, 4, 5, 1, 4], [])).toBe(false);\n    expect(isEqual([1, 1, 4, 5, 1, 4], [1, 1, 4, 5, 1, 4])).toBe(true);\n  });\n\n  test('object', () => {\n    expect(isEqual({}, {})).toBe(true);\n    expect(\n      isEqual(\n        {\n          f: 1,\n          g: {\n            o: '',\n          },\n        },\n        {\n          f: 1,\n          g: {\n            o: '',\n          },\n        }\n      )\n    ).toBe(true);\n    expect(isEqual({}, { foo: 1 })).toBe(false);\n    // @ts-expect-error\n    expect(isEqual({ foo: 1 }, {})).toBe(false);\n  });\n\n  test('nested', () => {\n    const nested = {\n      string: 'this is a string',\n      integer: 42,\n      array: [19, 19, 810, 'test', NaN],\n      nestedArray: [\n        [1, 2],\n        [3, 4],\n      ],\n      float: 114.514,\n      undefined,\n      object: {\n        'first-child': true,\n        'second-child': false,\n        'last-child': null,\n      },\n      bigint: 110101195306153019n,\n    };\n    expect(isEqual(nested, nested)).toBe(true);\n    // @ts-expect-error\n    expect(isEqual({ foo: [] }, { foo: '' })).toBe(false);\n  });\n});\n"]}