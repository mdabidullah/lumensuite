{"version":3,"file":"error.js","sourceRoot":"","sources":["../../src/di/error.ts"],"names":[],"mappings":"AAEA,OAAO,EAAE,uBAAuB,EAAE,MAAM,aAAa,CAAC;AAEtD,MAAM,OAAO,mBAAoB,SAAQ,KAAK;IAC5C;QACE,KAAK,CAAC,yCAAyC,CAAC,CAAC;IACnD,CAAC;CACF;AAED,MAAM,OAAO,uBAAwB,SAAQ,KAAK;IAChD,YAAqB,eAAyC;QAC5D,KAAK,CACH,uCAAuC;YACrC,wBAAwB,CAAC,eAAe,CAAC,CAC5C,CAAC;QAJiB,oBAAe,GAAf,eAAe,CAA0B;IAK9D,CAAC;CACF;AAED,MAAM,OAAO,oBAAqB,SAAQ,KAAK;IAC7C,YAAqB,UAAkC;QACrD,KAAK,CAAC,WAAW,mBAAmB,CAAC,UAAU,CAAC,yBAAyB,CAAC,CAAC;QADxD,eAAU,GAAV,UAAU,CAAwB;IAEvD,CAAC;CACF;AAED,MAAM,OAAO,sBAAuB,SAAQ,KAAK;IAC/C,YACW,IAA4B,EAC5B,MAA8B,EAC9B,eAAyC;QAElD,KAAK,CACH,sBAAsB,mBAAmB,CACvC,MAAM,CACP,wBAAwB,mBAAmB,CAC1C,IAAI,CACL,MAAM,wBAAwB,CAAC,eAAe,CAAC,EAAE,CACnD,CAAC;QAVO,SAAI,GAAJ,IAAI,CAAwB;QAC5B,WAAM,GAAN,MAAM,CAAwB;QAC9B,oBAAe,GAAf,eAAe,CAA0B;IASpD,CAAC;CACF;AAED,MAAM,OAAO,+BAAgC,SAAQ,KAAK;IACxD,YAAqB,UAAkC;QACrD,KAAK,CAAC,WAAW,mBAAmB,CAAC,UAAU,CAAC,iBAAiB,CAAC,CAAC;QADhD,eAAU,GAAV,UAAU,CAAwB;IAEvD,CAAC;CACF;AAED,SAAS,mBAAmB,CAAC,UAAkC;IAC7D,OAAO,IAAI,UAAU,CAAC,cAAc,IAClC,UAAU,CAAC,OAAO,KAAK,uBAAuB;QAC5C,CAAC,CAAC,IAAI,UAAU,CAAC,OAAO,GAAG;QAC3B,CAAC,CAAC,EACN,EAAE,CAAC;AACL,CAAC;AAED,SAAS,wBAAwB,CAAC,eAAyC;IACzE,OAAO,eAAe;SACnB,GAAG,CAAC,UAAU,CAAC,EAAE,CAAC,GAAG,mBAAmB,CAAC,UAAU,CAAC,EAAE,CAAC;SACvD,IAAI,CAAC,MAAM,CAAC,CAAC;AAClB,CAAC","sourcesContent":["import type { ServiceIdentifierValue } from './types.js';\n\nimport { DEFAULT_SERVICE_VARIANT } from './consts.js';\n\nexport class RecursionLimitError extends Error {\n  constructor() {\n    super('Dynamic resolve recursion limit reached');\n  }\n}\n\nexport class CircularDependencyError extends Error {\n  constructor(readonly dependencyStack: ServiceIdentifierValue[]) {\n    super(\n      `A circular dependency was detected.\\n` +\n        stringifyDependencyStack(dependencyStack)\n    );\n  }\n}\n\nexport class ServiceNotFoundError extends Error {\n  constructor(readonly identifier: ServiceIdentifierValue) {\n    super(`Service ${stringifyIdentifier(identifier)} not found in container`);\n  }\n}\n\nexport class MissingDependencyError extends Error {\n  constructor(\n    readonly from: ServiceIdentifierValue,\n    readonly target: ServiceIdentifierValue,\n    readonly dependencyStack: ServiceIdentifierValue[]\n  ) {\n    super(\n      `Missing dependency ${stringifyIdentifier(\n        target\n      )} in creating service ${stringifyIdentifier(\n        from\n      )}.\\n${stringifyDependencyStack(dependencyStack)}`\n    );\n  }\n}\n\nexport class DuplicateServiceDefinitionError extends Error {\n  constructor(readonly identifier: ServiceIdentifierValue) {\n    super(`Service ${stringifyIdentifier(identifier)} already exists`);\n  }\n}\n\nfunction stringifyIdentifier(identifier: ServiceIdentifierValue) {\n  return `[${identifier.identifierName}]${\n    identifier.variant !== DEFAULT_SERVICE_VARIANT\n      ? `(${identifier.variant})`\n      : ''\n  }`;\n}\n\nfunction stringifyDependencyStack(dependencyStack: ServiceIdentifierValue[]) {\n  return dependencyStack\n    .map(identifier => `${stringifyIdentifier(identifier)}`)\n    .join(' -> ');\n}\n"]}