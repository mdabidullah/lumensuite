{"version":3,"file":"provider.js","sourceRoot":"","sources":["../../src/di/provider.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\nimport type { Container } from './container.js';\nimport type {\n  GeneralServiceIdentifier,\n  ServiceIdentifierValue,\n  ServiceVariant,\n} from './types.js';\n\nimport {\n  CircularDependencyError,\n  MissingDependencyError,\n  RecursionLimitError,\n  ServiceNotFoundError,\n} from './error.js';\nimport { parseIdentifier } from './identifier.js';\n\nexport interface ResolveOptions {\n  sameScope?: boolean;\n  optional?: boolean;\n}\n\nexport abstract class ServiceProvider {\n  abstract container: Container;\n\n  get<T>(identifier: GeneralServiceIdentifier<T>, options?: ResolveOptions): T {\n    return this.getRaw(parseIdentifier(identifier), {\n      ...options,\n      optional: false,\n    });\n  }\n\n  getAll<T>(\n    identifier: GeneralServiceIdentifier<T>,\n    options?: ResolveOptions\n  ): Map<ServiceVariant, T> {\n    return this.getAllRaw(parseIdentifier(identifier), {\n      ...options,\n    });\n  }\n\n  abstract getAllRaw(\n    identifier: ServiceIdentifierValue,\n    options?: ResolveOptions\n  ): Map<ServiceVariant, any>;\n\n  getOptional<T>(\n    identifier: GeneralServiceIdentifier<T>,\n    options?: ResolveOptions\n  ): T | null {\n    return this.getRaw(parseIdentifier(identifier), {\n      ...options,\n      optional: true,\n    });\n  }\n\n  abstract getRaw(\n    identifier: ServiceIdentifierValue,\n    options?: ResolveOptions\n  ): any;\n}\n\nexport class ServiceCachePool {\n  cache = new Map<string, Map<ServiceVariant, any>>();\n\n  getOrInsert(identifier: ServiceIdentifierValue, insert: () => any) {\n    const cache = this.cache.get(identifier.identifierName) ?? new Map();\n    if (!cache.has(identifier.variant)) {\n      cache.set(identifier.variant, insert());\n    }\n    const cached = cache.get(identifier.variant);\n    this.cache.set(identifier.identifierName, cache);\n    return cached;\n  }\n}\n\nexport class ServiceResolver extends ServiceProvider {\n  container = this.provider.container;\n\n  constructor(\n    readonly provider: BasicServiceProvider,\n    readonly depth = 0,\n    readonly stack: ServiceIdentifierValue[] = []\n  ) {\n    super();\n  }\n\n  getAllRaw(\n    identifier: ServiceIdentifierValue,\n    { sameScope = false }: ResolveOptions = {}\n  ): Map<ServiceVariant, any> {\n    const vars = this.provider.container.getFactoryAll(\n      identifier,\n      this.provider.scope\n    );\n\n    if (vars === undefined) {\n      if (this.provider.parent && !sameScope) {\n        return this.provider.parent.getAllRaw(identifier);\n      }\n\n      return new Map();\n    }\n\n    const result = new Map<ServiceVariant, any>();\n\n    for (const [variant, factory] of vars) {\n      const service = this.provider.cache.getOrInsert(\n        { identifierName: identifier.identifierName, variant },\n        () => {\n          const nextResolver = this.track(identifier);\n          try {\n            return factory(nextResolver);\n          } catch (err) {\n            if (err instanceof ServiceNotFoundError) {\n              throw new MissingDependencyError(\n                identifier,\n                err.identifier,\n                this.stack\n              );\n            }\n            throw err;\n          }\n        }\n      );\n      result.set(variant, service);\n    }\n\n    return result;\n  }\n\n  getRaw(\n    identifier: ServiceIdentifierValue,\n    { sameScope = false, optional = false }: ResolveOptions = {}\n  ) {\n    const factory = this.provider.container.getFactory(\n      identifier,\n      this.provider.scope\n    );\n    if (!factory) {\n      if (this.provider.parent && !sameScope) {\n        return this.provider.parent.getRaw(identifier, {\n          sameScope,\n          optional,\n        });\n      }\n\n      if (optional) {\n        return undefined;\n      }\n      throw new ServiceNotFoundError(identifier);\n    }\n\n    return this.provider.cache.getOrInsert(identifier, () => {\n      const nextResolver = this.track(identifier);\n      try {\n        return factory(nextResolver);\n      } catch (err) {\n        if (err instanceof ServiceNotFoundError) {\n          throw new MissingDependencyError(\n            identifier,\n            err.identifier,\n            this.stack\n          );\n        }\n        throw err;\n      }\n    });\n  }\n\n  track(identifier: ServiceIdentifierValue): ServiceResolver {\n    const depth = this.depth + 1;\n    if (depth >= 100) {\n      throw new RecursionLimitError();\n    }\n    const circular = this.stack.find(\n      i =>\n        i.identifierName === identifier.identifierName &&\n        i.variant === identifier.variant\n    );\n    if (circular) {\n      throw new CircularDependencyError([...this.stack, identifier]);\n    }\n\n    return new ServiceResolver(this.provider, depth, [\n      ...this.stack,\n      identifier,\n    ]);\n  }\n}\n\nexport class BasicServiceProvider extends ServiceProvider {\n  readonly cache = new ServiceCachePool();\n\n  readonly container: Container;\n\n  constructor(\n    container: Container,\n    readonly scope: string[],\n    readonly parent: ServiceProvider | null\n  ) {\n    super();\n    this.container = container.clone();\n    this.container.addValue(ServiceProvider, this, {\n      scope: scope,\n      override: true,\n    });\n  }\n\n  getAllRaw(\n    identifier: ServiceIdentifierValue,\n    options?: ResolveOptions\n  ): Map<ServiceVariant, any> {\n    const resolver = new ServiceResolver(this);\n    return resolver.getAllRaw(identifier, options);\n  }\n\n  getRaw(identifier: ServiceIdentifierValue, options?: ResolveOptions) {\n    const resolver = new ServiceResolver(this);\n    return resolver.getRaw(identifier, options);\n  }\n}\n"]}