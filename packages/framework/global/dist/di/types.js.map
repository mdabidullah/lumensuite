{"version":3,"file":"types.js","sourceRoot":"","sources":["../../src/di/types.ts"],"names":[],"mappings":"","sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\nimport type { ServiceProvider } from './provider.js';\n\nexport type Type<T = any> = abstract new (...args: any) => T;\n\nexport type ServiceFactory<T = any> = (provider: ServiceProvider) => T;\nexport type ServiceVariant = string;\n\n/**\n *\n */\nexport type ServiceScope = string[];\n\nexport type ServiceIdentifierValue = {\n  identifierName: string;\n  variant: ServiceVariant;\n};\n\nexport type GeneralServiceIdentifier<T = any> = ServiceIdentifier<T> | Type<T>;\n\nexport type ServiceIdentifier<T> = {\n  identifierName: string;\n  variant: ServiceVariant;\n  __TYPE__: T;\n};\n\nexport type ServiceIdentifierType<T> =\n  T extends ServiceIdentifier<infer R>\n    ? R\n    : T extends Type<infer R>\n      ? R\n      : never;\n\nexport type TypesToDeps<T extends any[]> = {\n  [index in keyof T]:\n    | GeneralServiceIdentifier<T[index]>\n    | (T[index] extends (infer I)[] ? [GeneralServiceIdentifier<I>] : never);\n};\n"]}