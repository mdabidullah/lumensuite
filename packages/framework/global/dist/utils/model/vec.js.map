{"version":3,"file":"vec.js","sourceRoot":"","sources":["../../../src/utils/model/vec.ts"],"names":[],"mappings":"AAAA,kIAAkI;AAClI,oBAAoB;AAMpB,MAAM,OAAO,GAAG;IACd;;;;OAIG;aACI,QAAG,GAAG,CAAC,CAAW,EAAY,EAAE;QACrC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAC1C,CAAC,CAAC;IAEF;;;;OAIG;aACI,QAAG,GAAG,CAAC,CAAW,EAAE,CAAW,EAAQ,EAAE;QAC9C,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACpC,CAAC,CAAC;IAEF;;;;OAIG;aACI,cAAS,GAAG,CAAC,CAAW,EAAE,CAAS,EAAQ,EAAE;QAClD,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;IAC9B,CAAC,CAAC;IAEF;;;;OAIG;aACI,QAAG,GAAG,CAAC,CAAW,EAAE,CAAW,EAAU,EAAE;QAChD,OAAO,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IAClD,CAAC,CAAC;IAEF;;;;;OAKG;aACI,SAAI,GAAG,CAAC,EAAQ,EAAE,EAAQ,EAAE,EAAQ,EAAU,EAAE;QACrD,QAAQ;QACR,MAAM,EAAE,GAAG,GAAG,CAAC,GAAG,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;QAC3B,MAAM,EAAE,GAAG,GAAG,CAAC,GAAG,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;QAC3B,OAAO,GAAG,CAAC,GAAG,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;IACzB,CAAC,CAAC;IAEF;;;;OAIG;aACI,UAAK,GAAG,CAAC,CAAO,EAAE,CAAO,EAAU,EAAE;QAC1C,OAAO,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAC9C,CAAC,CAAC;IAEF;;;;;OAKG;aACI,cAAS,GAAG,CAAC,EAAY,EAAE,EAAY,EAAE,EAAY,EAAW,EAAE;QACvE,OAAO,GAAG,CAAC,MAAM,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC;IACpC,CAAC,CAAC;IAEF;;;;OAIG;aACI,QAAG,GAAG,CAAC,CAAW,EAAE,CAAW,EAAU,EAAE;QAChD,OAAO,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;IACnC,CAAC,CAAC;IAEF;;;;OAIG;aACI,SAAI,GAAG,CAAC,CAAW,EAAE,CAAW,EAAU,EAAE;QACjD,OAAO,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAC9C,CAAC,CAAC;IAEF;;;;OAIG;aACI,UAAK,GAAG,CAAC,CAAO,EAAE,CAAO,EAAU,EAAE;QAC1C,OAAO,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IACjC,CAAC,CAAC;IAEF;;;;;OAKG;aACI,qBAAgB,GAAG,CACxB,MAKC,EACD,CAAW,EACH,EAAE;QACV,OAAO,GAAG,CAAC,IAAI,CAAC,CAAC,EAAE,GAAG,CAAC,oBAAoB,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC,CAAC;IAC1D,CAAC,CAAC;IAEF;;;;;;;OAOG;aACI,0BAAqB,GAAG,CAC7B,CAAO,EACP,CAAO,EACP,CAAO,EACP,KAAK,GAAG,IAAI,EACJ,EAAE;QACV,OAAO,GAAG,CAAC,IAAI,CAAC,CAAC,EAAE,GAAG,CAAC,yBAAyB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC;IACpE,CAAC,CAAC;IAEF;;;;;;OAMG;aACI,+BAA0B,GAAG,CAAC,CAAO,EAAE,CAAO,EAAE,CAAO,EAAU,EAAE;QACxE,OAAO,GAAG,CAAC,IAAI,CAAC,CAAC,EAAE,GAAG,CAAC,8BAA8B,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IAClE,CAAC,CAAC;IAEF;;;;OAIG;aACI,QAAG,GAAG,CAAC,CAAO,EAAE,CAAS,EAAQ,EAAE;QACxC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;IAC9B,CAAC,CAAC;IAEF;;;;OAIG;aACI,SAAI,GAAG,CAAC,CAAO,EAAE,CAAO,EAAQ,EAAE;QACvC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACpC,CAAC,CAAC;IAEF;;;;OAIG;aACI,QAAG,GAAG,CAAC,CAAW,EAAE,CAAW,EAAU,EAAE;QAChD,OAAO,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;IACnC,CAAC,CAAC;IAEF;;;;;OAKG;aACI,aAAQ,GAAG,CAAC,CAAW,EAAE,CAAW,EAAY,EAAE;QACvD,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACrC,MAAM,EAAE,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAC5C,IAAI,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;QACnC,CAAC,GAAG,CAAC,GAAG,CAAC,OAAO,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,OAAO,CAAC,CAAC;QAClD,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;IAC9B,CAAC,CAAC;IAEF;;;;;;;OAOG;aACI,QAAG,GAAG,CAAC,CAAO,EAAE,CAAO,EAAE,IAAY,EAAE,EAAU,EAAE,CAAC,GAAG,CAAC,EAAQ,EAAE;QACvE,MAAM,CAAC,GAAG,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,EAAE,EAAE,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,IAAI,CAAC,CAAC;QACrD,OAAO,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IACnD,CAAC,CAAC;IAEF;;;;OAIG;aACI,YAAO,GAAG,CAAC,CAAW,EAAE,CAAW,EAAW,EAAE;QACrD,OAAO,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;IACxC,CAAC,CAAC;IAEF;;;;;OAKG;aACI,WAAM,GAAG,CAAC,EAAY,EAAE,EAAY,EAAE,EAAY,EAAU,EAAE;QACnE,mCAAmC;QACnC,oCAAoC;QACpC,4BAA4B;QAC5B,OAAO,CACL,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,CACtE,CAAC;IACJ,CAAC,CAAC;IAEF;;;OAGG;aACI,QAAG,GAAG,CAAC,CAAW,EAAU,EAAE;QACnC,OAAO,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAChC,CAAC,CAAC;IAEF;;;OAGG;aACI,SAAI,GAAG,CAAC,CAAW,EAAU,EAAE;QACpC,OAAO,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;IACnC,CAAC,CAAC;IAEF;;;;;OAKG;aACI,QAAG,GAAG,CAAC,CAAO,EAAE,CAAO,EAAE,CAAS,EAAQ,EAAE;QACjD,OAAO,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IAC/C,CAAC,CAAC;IAEF;;OAEG;aACI,QAAG,GAAG,CAAC,GAAG,CAAa,EAAE,EAAE;QAChC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACxE,CAAC,CAAC;IAEF;;;;OAIG;aACI,QAAG,GAAG,CAAC,CAAO,EAAE,CAAO,EAAQ,EAAE;QACtC,OAAO,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC;IACrC,CAAC,CAAC;IAEF;;OAEG;aACI,QAAG,GAAG,CAAC,GAAG,CAAa,EAAE,EAAE;QAChC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACxE,CAAC,CAAC;IAEF;;;;OAIG;aACI,QAAG,GAAG,CAAC,CAAO,EAAE,CAAS,EAAQ,EAAE;QACxC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;IAC9B,CAAC,CAAC;IAEF;;;;OAIG;aACI,SAAI,GAAG,CAAC,CAAO,EAAE,CAAO,EAAQ,EAAE;QACvC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACpC,CAAC,CAAC;IAEF;;;;;OAKG;aACI,yBAAoB,GAAG,CAC5B,MAKC,EACD,CAAW,EACD,EAAE;QACZ,OAAO;YACL,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,MAAM,CAAC,IAAI,EAAE,MAAM,CAAC,IAAI,CAAC;YACzC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,MAAM,CAAC,IAAI,EAAE,MAAM,CAAC,IAAI,CAAC;SAC1C,CAAC;IACJ,CAAC,CAAC;IAEF;;;;;;;OAOG;aACI,8BAAyB,GAAG,CACjC,CAAO,EACP,CAAO,EACP,CAAO,EACP,KAAK,GAAG,IAAI,EACN,EAAE;QACR,MAAM,CAAC,GAAG,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QACjC,MAAM,CAAC,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;QAE5D,IAAI,KAAK,EAAE,CAAC;YACV,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;gBAAE,OAAO,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YAC5D,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;gBAAE,OAAO,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YAC5D,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;gBAAE,OAAO,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YAC5D,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;gBAAE,OAAO,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAC9D,CAAC;QAED,OAAO,CAAC,CAAC;IACX,CAAC,CAAC;IAEF;;;;;;OAMG;aACI,mCAA8B,GAAG,CAAC,CAAO,EAAE,CAAO,EAAE,CAAO,EAAQ,EAAE;QAC1E,OAAO,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;IAC3D,CAAC,CAAC;IAEF;;;OAGG;aACI,QAAG,GAAG,CAAC,CAAW,EAAY,EAAE;QACrC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACxB,CAAC,CAAC;IAEF;;;OAGG;aACI,cAAS,GAAG,CAAC,CAAO,EAAQ,EAAE;QACnC,OAAO,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IACpB,CAAC,CAAC;IAEF;;;;;;OAMG;aACI,UAAK,GAAG,CAAC,CAAO,EAAE,CAAO,EAAE,CAAS,EAAY,EAAE;QACvD,IAAI,GAAG,CAAC,OAAO,CAAC,CAAC,EAAE,CAAC,CAAC;YAAE,OAAO,CAAC,CAAC;QAChC,OAAO,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IACxD,CAAC,CAAC;IAEF;;;;;OAKG;aACI,iBAAY,GAAG,CAAC,CAAW,EAAE,CAAS,EAAE,CAAS,EAAY,EAAE;QACpE,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAC1D,CAAC,CAAC;IAEF;;;OAGG;aACI,QAAG,GAAG,CAAC,CAAO,EAAQ,EAAE;QAC7B,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACvB,CAAC,CAAC;aAEK,gBAAW,GAAG,CAAC,CAAO,EAAE,CAAO,EAAE,MAAc,EAAQ,EAAE;QAC9D,IAAI,CAAC,GAAG,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QAC/B,IAAI,GAAG,CAAC,OAAO,CAAC,CAAC,EAAE,CAAC,CAAC;YAAE,CAAC,GAAG,CAAC,CAAC;QAC7B,OAAO,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC;IACxC,CAAC,CAAC;IAEF;;;;;OAKG;aACI,kBAAa,GAAG,CAAC,CAAO,EAAE,CAAO,EAAE,KAAK,GAAG,CAAC,EAAc,EAAE;QACjE,OAAO,KAAK,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,KAAK,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE;YAChD,MAAM,CAAC,GAAG,CAAC,GAAG,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;YAC1B,MAAM,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;YAC/C,OAAO,CAAC,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QAClC,CAAC,CAAC,CAAC;IACL,CAAC,CAAC;IAEF;;;;OAIG;aACI,QAAG,GAAG,CAAC,CAAW,EAAE,CAAW,EAAU,EAAE;QAChD,OAAO,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IACpC,CAAC,CAAC;aAEK,YAAO,GAAG,CAAC,CAAW,EAAE,CAAS,EAAY,EAAE;QACpD,MAAM,CAAC,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QACrB,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;IAC1C,CAAC,CAAC;IAEF;;;;OAIG;aACI,QAAG,GAAG,CAAC,CAAW,EAAE,CAAC,GAAG,CAAC,EAAQ,EAAE;QACxC,OAAO;YACL,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;YACvC,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;SACxC,CAAC;IACJ,CAAC,CAAC;IAEF;;;;;OAKG;aACI,YAAO,GAAG,CAAC,CAAO,EAAE,CAAO,EAAE,CAAC,GAAG,CAAC,EAAQ,EAAE;QACjD,IAAI,CAAC,KAAK,CAAC;YAAE,OAAO,CAAC,CAAC;QAEtB,MAAM,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QACtB,MAAM,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QAEtB,MAAM,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;QACvB,MAAM,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;QAEvB,MAAM,EAAE,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;QAC3B,MAAM,EAAE,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;QAE3B,OAAO,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAChC,CAAC,CAAC;IAEF;;;;OAIG;aACI,UAAK,GAAG,CAAC,CAAW,EAAE,CAAW,EAAE,EAAE;QAC1C,IAAI,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YAAE,OAAO,GAAG,CAAC;QAC9B,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACvC,CAAC,CAAC;IAEF;;;;OAIG;aACI,QAAG,GAAG,CAAC,CAAO,EAAE,CAAO,EAAQ,EAAE;QACtC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACpC,CAAC,CAAC;IAEF;;;;OAIG;aACI,cAAS,GAAG,CAAC,CAAO,EAAE,CAAS,EAAQ,EAAE;QAC9C,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;IAC9B,CAAC,CAAC;IAEF;;;;;OAKG;aACI,YAAO,GAAG,CAAC,CAAO,EAAE,CAAO,EAAQ,EAAE;QAC1C,OAAO,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IAChC,CAAC,CAAC;IAEF;;;OAGG;aACI,YAAO,GAAG,CAAC,CAAW,EAAY,EAAE;QACzC,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC;IAC/C,CAAC,CAAC;aAEK,YAAO,GAAG,CAAC,CAAO,EAAE,EAAE;QAC3B,OAAO;YACL,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;YACP,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;SACR,CAAC;IACJ,CAAC,CAAC;IAEF;;;;OAIG;aACI,gBAAW,GAAG,CAAC,CAAW,EAAE,CAAC,GAAG,CAAC,EAAY,EAAE;QACpD,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC;IACtD,CAAC,CAAC;aAEK,UAAK,GAAG,CAAC,CAA2B,EAAQ,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;IAEjE;;;OAGG;aACI,QAAG,GAAG,CAAC,CAAO,EAAQ,EAAE;QAC7B,OAAO,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;IAChC,CAAC,CAAC;IAEF;;;;OAIG;aACI,QAAG,GAAG,CAAC,CAAO,EAAE,CAAO,EAAQ,EAAE;QACtC,6CAA6C;QAC7C,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACpC,CAAC,CAAC;IAWF,MAAM,CAAC,KAAK,CAAC,CAAS,EAAE,GAAW,EAAE,GAAY;QAC/C,OAAO,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,KAAK,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACjE,CAAC;IAWD,MAAM,CAAC,MAAM,CAAC,CAAW,EAAE,GAAW,EAAE,GAAY;QAClD,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CACf,GAAG,KAAK,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE,GAAG,CAAC,CAC/D,CAAC;IACJ,CAAC;IAED;;;OAGG;IACH,MAAM,CAAC,KAAK,CAAC,CAAW,EAAE,CAAW,EAAE,CAAW;QAChD,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACvE,CAAC;IAED;;;;;;;;OAQG;IACH,MAAM,CAAC,IAAI,CAAC,CAAW,EAAE,IAAI,GAAG,CAAC;QAC/B,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,IAAI,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,IAAI,CAAC,CAAC;IAC1E,CAAC","sourcesContent":["// Inlined from https://raw.githubusercontent.com/tldraw/tldraw/24cad6959f59f93e20e556d018c391fd89d4ecca/packages/vec/src/index.ts\n// Credits to tldraw\n\nexport type IVec = [number, number];\n\nexport type IVec3 = [number, number, number];\n\nexport class Vec {\n  /**\n   * Absolute value of a vector.\n   * @param A\n   * @returns\n   */\n  static abs = (A: number[]): number[] => {\n    return [Math.abs(A[0]), Math.abs(A[1])];\n  };\n\n  /**\n   * Add vectors.\n   * @param A\n   * @param B\n   */\n  static add = (A: number[], B: number[]): IVec => {\n    return [A[0] + B[0], A[1] + B[1]];\n  };\n\n  /**\n   * Add scalar to vector.\n   * @param A\n   * @param B\n   */\n  static addScalar = (A: number[], n: number): IVec => {\n    return [A[0] + n, A[1] + n];\n  };\n\n  /**\n   * Angle between vector A and vector B in radians\n   * @param A\n   * @param B\n   */\n  static ang = (A: number[], B: number[]): number => {\n    return Math.atan2(Vec.cpr(A, B), Vec.dpr(A, B));\n  };\n\n  /**\n   * Get the angle between the three vectors A, B, and C.\n   * @param p1\n   * @param pc\n   * @param p2\n   */\n  static ang3 = (p1: IVec, pc: IVec, p2: IVec): number => {\n    // this,\n    const v1 = Vec.vec(pc, p1);\n    const v2 = Vec.vec(pc, p2);\n    return Vec.ang(v1, v2);\n  };\n\n  /**\n   * Angle between vector A and vector B in radians\n   * @param A\n   * @param B\n   */\n  static angle = (A: IVec, B: IVec): number => {\n    return Math.atan2(B[1] - A[1], B[0] - A[0]);\n  };\n\n  /**\n   * Get whether p1 is left of p2, relative to pc.\n   * @param p1\n   * @param pc\n   * @param p2\n   */\n  static clockwise = (p1: number[], pc: number[], p2: number[]): boolean => {\n    return Vec.isLeft(p1, pc, p2) > 0;\n  };\n\n  /**\n   * Cross product (outer product) | A X B |\n   * @param A\n   * @param B\n   */\n  static cpr = (A: number[], B: number[]): number => {\n    return A[0] * B[1] - B[0] * A[1];\n  };\n\n  /**\n   * Dist length from A to B\n   * @param A\n   * @param B\n   */\n  static dist = (A: number[], B: number[]): number => {\n    return Math.hypot(A[1] - B[1], A[0] - B[0]);\n  };\n\n  /**\n   * Dist length from A to B squared.\n   * @param A\n   * @param B\n   */\n  static dist2 = (A: IVec, B: IVec): number => {\n    return Vec.len2(Vec.sub(A, B));\n  };\n\n  /**\n   * Distance between a point and the nearest point on a bounding box.\n   * @param bounds The bounding box.\n   * @param P The point\n   * @returns\n   */\n  static distanceToBounds = (\n    bounds: {\n      minX: number;\n      minY: number;\n      maxX: number;\n      maxY: number;\n    },\n    P: number[]\n  ): number => {\n    return Vec.dist(P, Vec.nearestPointOnBounds(bounds, P));\n  };\n\n  /**\n   * Distance between a point and the nearest point on a line segment between A and B\n   * @param A The start of the line segment\n   * @param B The end of the line segment\n   * @param P The off-line point\n   * @param clamp Whether to clamp the point between A and B.\n   * @returns\n   */\n  static distanceToLineSegment = (\n    A: IVec,\n    B: IVec,\n    P: IVec,\n    clamp = true\n  ): number => {\n    return Vec.dist(P, Vec.nearestPointOnLineSegment(A, B, P, clamp));\n  };\n\n  /**\n   * Distance between a point and a line with a known unit vector that passes through a point.\n   * @param A Any point on the line\n   * @param u The unit vector for the line.\n   * @param P A point not on the line to test.\n   * @returns\n   */\n  static distanceToLineThroughPoint = (A: IVec, u: IVec, P: IVec): number => {\n    return Vec.dist(P, Vec.nearestPointOnLineThroughPoint(A, u, P));\n  };\n\n  /**\n   * Vector division by scalar.\n   * @param A\n   * @param n\n   */\n  static div = (A: IVec, n: number): IVec => {\n    return [A[0] / n, A[1] / n];\n  };\n\n  /**\n   * Vector division by vector.\n   * @param A\n   * @param n\n   */\n  static divV = (A: IVec, B: IVec): IVec => {\n    return [A[0] / B[0], A[1] / B[1]];\n  };\n\n  /**\n   * Dot product\n   * @param A\n   * @param B\n   */\n  static dpr = (A: number[], B: number[]): number => {\n    return A[0] * B[0] + A[1] * B[1];\n  };\n\n  /**\n   * A faster, though less accurate method for testing distances. Maybe faster?\n   * @param A\n   * @param B\n   * @returns\n   */\n  static fastDist = (A: number[], B: number[]): number[] => {\n    const V = [B[0] - A[0], B[1] - A[1]];\n    const aV = [Math.abs(V[0]), Math.abs(V[1])];\n    let r = 1 / Math.max(aV[0], aV[1]);\n    r = r * (1.29289 - (aV[0] + aV[1]) * r * 0.29289);\n    return [V[0] * r, V[1] * r];\n  };\n\n  /**\n   * Interpolate from A to B when curVAL goes fromVAL: number[] => to\n   * @param A\n   * @param B\n   * @param from Starting value\n   * @param to Ending value\n   * @param s Strength\n   */\n  static int = (A: IVec, B: IVec, from: number, to: number, s = 1): IVec => {\n    const t = (Vec.clamp(from, to) - from) / (to - from);\n    return Vec.add(Vec.mul(A, 1 - t), Vec.mul(B, s));\n  };\n\n  /**\n   * Check of two vectors are identical.\n   * @param A\n   * @param B\n   */\n  static isEqual = (A: number[], B: number[]): boolean => {\n    return A[0] === B[0] && A[1] === B[1];\n  };\n\n  /**\n   * Get whether p1 is left of p2, relative to pc.\n   * @param p1\n   * @param pc\n   * @param p2\n   */\n  static isLeft = (p1: number[], pc: number[], p2: number[]): number => {\n    //  isLeft: >0 for counterclockwise\n    //          =0 for none (degenerate)\n    //          <0 for clockwise\n    return (\n      (pc[0] - p1[0]) * (p2[1] - p1[1]) - (p2[0] - p1[0]) * (pc[1] - p1[1])\n    );\n  };\n\n  /**\n   * Length of the vector\n   * @param A\n   */\n  static len = (A: number[]): number => {\n    return Math.hypot(A[0], A[1]);\n  };\n\n  /**\n   * Length of the vector squared\n   * @param A\n   */\n  static len2 = (A: number[]): number => {\n    return A[0] * A[0] + A[1] * A[1];\n  };\n\n  /**\n   * Interpolate vector A to B with a scalar t\n   * @param A\n   * @param B\n   * @param t scalar\n   */\n  static lrp = (A: IVec, B: IVec, t: number): IVec => {\n    return Vec.add(A, Vec.mul(Vec.sub(B, A), t));\n  };\n\n  /**\n   * Get a vector comprised of the maximum of two or more vectors.\n   */\n  static max = (...v: number[][]) => {\n    return [Math.max(...v.map(a => a[0])), Math.max(...v.map(a => a[1]))];\n  };\n\n  /**\n   * Mean between two vectors or mid vector between two vectors\n   * @param A\n   * @param B\n   */\n  static med = (A: IVec, B: IVec): IVec => {\n    return Vec.mul(Vec.add(A, B), 0.5);\n  };\n\n  /**\n   * Get a vector comprised of the minimum of two or more vectors.\n   */\n  static min = (...v: number[][]) => {\n    return [Math.min(...v.map(a => a[0])), Math.min(...v.map(a => a[1]))];\n  };\n\n  /**\n   * Vector multiplication by scalar\n   * @param A\n   * @param n\n   */\n  static mul = (A: IVec, n: number): IVec => {\n    return [A[0] * n, A[1] * n];\n  };\n\n  /**\n   * Multiple two vectors.\n   * @param A\n   * @param B\n   */\n  static mulV = (A: IVec, B: IVec): IVec => {\n    return [A[0] * B[0], A[1] * B[1]];\n  };\n\n  /**\n   * Get the nearest point on a bounding box to a point P.\n   * @param bounds The bounding box\n   * @param P The point point\n   * @returns\n   */\n  static nearestPointOnBounds = (\n    bounds: {\n      minX: number;\n      minY: number;\n      maxX: number;\n      maxY: number;\n    },\n    P: number[]\n  ): number[] => {\n    return [\n      Vec.clamp(P[0], bounds.minX, bounds.maxX),\n      Vec.clamp(P[1], bounds.minY, bounds.maxY),\n    ];\n  };\n\n  /**\n   * Get the nearest point on a line segment between A and B\n   * @param A The start of the line segment\n   * @param B The end of the line segment\n   * @param P The off-line point\n   * @param clamp Whether to clamp the point between A and B.\n   * @returns\n   */\n  static nearestPointOnLineSegment = (\n    A: IVec,\n    B: IVec,\n    P: IVec,\n    clamp = true\n  ): IVec => {\n    const u = Vec.uni(Vec.sub(B, A));\n    const C = Vec.add(A, Vec.mul(u, Vec.pry(Vec.sub(P, A), u)));\n\n    if (clamp) {\n      if (C[0] < Math.min(A[0], B[0])) return A[0] < B[0] ? A : B;\n      if (C[0] > Math.max(A[0], B[0])) return A[0] > B[0] ? A : B;\n      if (C[1] < Math.min(A[1], B[1])) return A[1] < B[1] ? A : B;\n      if (C[1] > Math.max(A[1], B[1])) return A[1] > B[1] ? A : B;\n    }\n\n    return C;\n  };\n\n  /**\n   * Get the nearest point on a line with a known unit vector that passes through point A\n   * @param A Any point on the line\n   * @param u The unit vector for the line.\n   * @param P A point not on the line to test.\n   * @returns\n   */\n  static nearestPointOnLineThroughPoint = (A: IVec, u: IVec, P: IVec): IVec => {\n    return Vec.add(A, Vec.mul(u, Vec.pry(Vec.sub(P, A), u)));\n  };\n\n  /**\n   * Negate a vector.\n   * @param A\n   */\n  static neg = (A: number[]): number[] => {\n    return [-A[0], -A[1]];\n  };\n\n  /**\n   * Get normalized / unit vector.\n   * @param A\n   */\n  static normalize = (A: IVec): IVec => {\n    return Vec.uni(A);\n  };\n\n  /**\n   * Push a point A towards point B by a given distance.\n   * @param A\n   * @param B\n   * @param d\n   * @returns\n   */\n  static nudge = (A: IVec, B: IVec, d: number): number[] => {\n    if (Vec.isEqual(A, B)) return A;\n    return Vec.add(A, Vec.mul(Vec.uni(Vec.sub(B, A)), d));\n  };\n\n  /**\n   * Push a point in a given angle by a given distance.\n   * @param A\n   * @param B\n   * @param d\n   */\n  static nudgeAtAngle = (A: number[], a: number, d: number): number[] => {\n    return [Math.cos(a) * d + A[0], Math.sin(a) * d + A[1]];\n  };\n\n  /**\n   * Perpendicular rotation of a vector A\n   * @param A\n   */\n  static per = (A: IVec): IVec => {\n    return [A[1], -A[0]];\n  };\n\n  static pointOffset = (A: IVec, B: IVec, offset: number): IVec => {\n    let u = Vec.uni(Vec.sub(B, A));\n    if (Vec.isEqual(A, B)) u = A;\n    return Vec.add(A, Vec.mul(u, offset));\n  };\n\n  /**\n   * Get an array of points between two points.\n   * @param A The first point.\n   * @param B The second point.\n   * @param steps The number of points to return.\n   */\n  static pointsBetween = (A: IVec, B: IVec, steps = 6): number[][] => {\n    return Array.from({ length: steps }).map((_, i) => {\n      const t = i / (steps - 1);\n      const k = Math.min(1, 0.5 + Math.abs(0.5 - t));\n      return [...Vec.lrp(A, B, t), k];\n    });\n  };\n\n  /**\n   * Project A over B\n   * @param A\n   * @param B\n   */\n  static pry = (A: number[], B: number[]): number => {\n    return Vec.dpr(A, B) / Vec.len(B);\n  };\n\n  static rescale = (a: number[], n: number): number[] => {\n    const l = Vec.len(a);\n    return [(n * a[0]) / l, (n * a[1]) / l];\n  };\n\n  /**\n   * Vector rotation by r (radians)\n   * @param A\n   * @param r rotation in radians\n   */\n  static rot = (A: number[], r = 0): IVec => {\n    return [\n      A[0] * Math.cos(r) - A[1] * Math.sin(r),\n      A[0] * Math.sin(r) + A[1] * Math.cos(r),\n    ];\n  };\n\n  /**\n   * Rotate a vector around another vector by r (radians)\n   * @param A vector\n   * @param C center\n   * @param r rotation in radians\n   */\n  static rotWith = (A: IVec, C: IVec, r = 0): IVec => {\n    if (r === 0) return A;\n\n    const s = Math.sin(r);\n    const c = Math.cos(r);\n\n    const px = A[0] - C[0];\n    const py = A[1] - C[1];\n\n    const nx = px * c - py * s;\n    const ny = px * s + py * c;\n\n    return [nx + C[0], ny + C[1]];\n  };\n\n  /**\n   * Get the slope between two points.\n   * @param A\n   * @param B\n   */\n  static slope = (A: number[], B: number[]) => {\n    if (A[0] === B[0]) return NaN;\n    return (A[1] - B[1]) / (A[0] - B[0]);\n  };\n\n  /**\n   * Subtract vectors.\n   * @param A\n   * @param B\n   */\n  static sub = (A: IVec, B: IVec): IVec => {\n    return [A[0] - B[0], A[1] - B[1]];\n  };\n\n  /**\n   * Subtract scalar from vector.\n   * @param A\n   * @param B\n   */\n  static subScalar = (A: IVec, n: number): IVec => {\n    return [A[0] - n, A[1] - n];\n  };\n\n  /**\n   * Get the tangent between two vectors.\n   * @param A\n   * @param B\n   * @returns\n   */\n  static tangent = (A: IVec, B: IVec): IVec => {\n    return Vec.uni(Vec.sub(A, B));\n  };\n\n  /**\n   * Round a vector to two decimal places.\n   * @param a\n   */\n  static toFixed = (a: number[]): number[] => {\n    return a.map(v => Math.round(v * 100) / 100);\n  };\n\n  static toPoint = (v: IVec) => {\n    return {\n      x: v[0],\n      y: v[1],\n    };\n  };\n\n  /**\n   * Round a vector to a precision length.\n   * @param a\n   * @param n\n   */\n  static toPrecision = (a: number[], n = 4): number[] => {\n    return [+a[0].toPrecision(n), +a[1].toPrecision(n)];\n  };\n\n  static toVec = (v: { x: number; y: number }): IVec => [v.x, v.y];\n\n  /**\n   * Get normalized / unit vector.\n   * @param A\n   */\n  static uni = (A: IVec): IVec => {\n    return Vec.div(A, Vec.len(A));\n  };\n\n  /**\n   * Get the vector from vectors A to B.\n   * @param A\n   * @param B\n   */\n  static vec = (A: IVec, B: IVec): IVec => {\n    // A, B as vectors get the vector from A to B\n    return [B[0] - A[0], B[1] - A[1]];\n  };\n\n  /**\n   * Clamp a value into a range.\n   * @param n\n   * @param min\n   */\n  static clamp(n: number, min: number): number;\n\n  static clamp(n: number, min: number, max: number): number;\n\n  static clamp(n: number, min: number, max?: number): number {\n    return Math.max(min, max !== undefined ? Math.min(n, max) : n);\n  }\n\n  /**\n   * Clamp a value into a range.\n   * @param n\n   * @param min\n   */\n  static clampV(A: number[], min: number): number[];\n\n  static clampV(A: number[], min: number, max: number): number[];\n\n  static clampV(A: number[], min: number, max?: number): number[] {\n    return A.map(n =>\n      max !== undefined ? Vec.clamp(n, min, max) : Vec.clamp(n, min)\n    );\n  }\n\n  /**\n   * Cross (for point in polygon)\n   *\n   */\n  static cross(x: number[], y: number[], z: number[]): number {\n    return (y[0] - x[0]) * (z[1] - x[1]) - (z[0] - x[0]) * (y[1] - x[1]);\n  }\n\n  /**\n   * Snap vector to nearest step.\n   * @param A\n   * @param step\n   * @example\n   * ```ts\n   * Vec.snap([10.5, 28], 10) // [10, 30]\n   * ```\n   */\n  static snap(a: number[], step = 1) {\n    return [Math.round(a[0] / step) * step, Math.round(a[1] / step) * step];\n  }\n}\n"]}