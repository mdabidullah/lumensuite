{"version":3,"file":"bound.js","sourceRoot":"","sources":["../../../src/utils/model/bound.ts"],"names":[],"mappings":"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","sourcesContent":["import type { SerializedXYWH, XYWH } from '../xywh.js';\nimport type { IVec } from './vec.js';\n\nimport {\n  EPSILON,\n  getBoundsFromPoints,\n  lineIntersects,\n  polygonPointDistance,\n} from '../math.js';\nimport { deserializeXYWH, serializeXYWH } from '../xywh.js';\n\n/**\n * Represents the x, y, width, and height of a block that can be easily accessed.\n */\nexport interface IBound {\n  x: number;\n  y: number;\n  w: number;\n  h: number;\n  rotate?: number;\n}\n\nexport class Bound implements IBound {\n  h: number;\n\n  w: number;\n\n  x: number;\n\n  y: number;\n\n  get bl() {\n    return [this.x, this.y + this.h];\n  }\n\n  get br() {\n    return [this.x + this.w, this.y + this.h];\n  }\n\n  get center(): IVec {\n    return [this.x + this.w / 2, this.y + this.h / 2];\n  }\n\n  set center([cx, cy]: IVec) {\n    const [px, py] = this.center;\n    this.x += cx - px;\n    this.y += cy - py;\n  }\n\n  get horizontalLine(): IVec[] {\n    return [\n      [this.x, this.y + this.h / 2],\n      [this.x + this.w, this.y + this.h / 2],\n    ];\n  }\n\n  get leftLine(): IVec[] {\n    return [\n      [this.x, this.y],\n      [this.x, this.y + this.h],\n    ];\n  }\n\n  get lowerLine(): IVec[] {\n    return [\n      [this.x, this.y + this.h],\n      [this.x + this.w, this.y + this.h],\n    ];\n  }\n\n  get maxX() {\n    return this.x + this.w;\n  }\n\n  get maxY() {\n    return this.y + this.h;\n  }\n\n  get midPoints(): IVec[] {\n    return [\n      [this.x + this.w / 2, this.y],\n      [this.x + this.w, this.y + this.h / 2],\n      [this.x + this.w / 2, this.y + this.h],\n      [this.x, this.y + this.h / 2],\n    ];\n  }\n\n  get minX() {\n    return this.x;\n  }\n\n  get minY() {\n    return this.y;\n  }\n\n  get points(): IVec[] {\n    return [\n      [this.x, this.y],\n      [this.x + this.w, this.y],\n      [this.x + this.w, this.y + this.h],\n      [this.x, this.y + this.h],\n    ];\n  }\n\n  get rightLine(): IVec[] {\n    return [\n      [this.x + this.w, this.y],\n      [this.x + this.w, this.y + this.h],\n    ];\n  }\n\n  get tl(): IVec {\n    return [this.x, this.y];\n  }\n\n  get tr() {\n    return [this.x + this.w, this.y];\n  }\n\n  get upperLine(): IVec[] {\n    return [\n      [this.x, this.y],\n      [this.x + this.w, this.y],\n    ];\n  }\n\n  get verticalLine(): IVec[] {\n    return [\n      [this.x + this.w / 2, this.y],\n      [this.x + this.w / 2, this.y + this.h],\n    ];\n  }\n\n  constructor(x = 0, y = 0, w = 0, h = 0) {\n    this.x = x;\n    this.y = y;\n    this.w = w;\n    this.h = h;\n  }\n\n  static deserialize(s: string) {\n    const [x, y, w, h] = deserializeXYWH(s);\n    return new Bound(x, y, w, h);\n  }\n\n  static from(arg1: IBound) {\n    return new Bound(arg1.x, arg1.y, arg1.w, arg1.h);\n  }\n\n  static fromCenter(center: IVec, width: number, height: number) {\n    const [x, y] = center;\n    return new Bound(x - width / 2, y - height / 2, width, height);\n  }\n\n  static fromDOMRect({ left, top, width, height }: DOMRect) {\n    return new Bound(left, top, width, height);\n  }\n\n  static fromPoints(points: IVec[]) {\n    const { minX, minY, maxX, maxY } = getBoundsFromPoints(points);\n    return new Bound(minX, minY, maxX - minX, maxY - minY);\n  }\n\n  static fromXYWH(xywh: XYWH) {\n    return new Bound(xywh[0], xywh[1], xywh[2], xywh[3]);\n  }\n\n  static serialize(bound: IBound) {\n    return serializeXYWH(bound.x, bound.y, bound.w, bound.h);\n  }\n\n  clone(): Bound {\n    return new Bound(this.x, this.y, this.w, this.h);\n  }\n\n  contains(bound: Bound) {\n    return (\n      bound.x >= this.x &&\n      bound.y >= this.y &&\n      bound.maxX <= this.maxX &&\n      bound.maxY <= this.maxY\n    );\n  }\n\n  containsPoint([x, y]: IVec): boolean {\n    const { minX, minY, maxX, maxY } = this;\n    return minX <= x && x <= maxX && minY <= y && y <= maxY;\n  }\n\n  expand(\n    left: number,\n    top: number = left,\n    right: number = left,\n    bottom: number = top\n  ) {\n    return new Bound(\n      this.x - left,\n      this.y - top,\n      this.w + left + right,\n      this.h + top + bottom\n    );\n  }\n\n  getRelativePoint([x, y]: IVec): IVec {\n    return [this.x + x * this.w, this.y + y * this.h];\n  }\n\n  getVerticesAndMidpoints() {\n    return [...this.points, ...this.midPoints];\n  }\n\n  horizontalDistance(bound: Bound) {\n    return Math.min(\n      Math.abs(this.minX - bound.maxX),\n      Math.abs(this.maxX - bound.minX)\n    );\n  }\n\n  include(point: IVec) {\n    const x1 = Math.min(this.x, point[0]),\n      y1 = Math.min(this.y, point[1]),\n      x2 = Math.max(this.maxX, point[0]),\n      y2 = Math.max(this.maxY, point[1]);\n    return new Bound(x1, y1, x2 - x1, y2 - y1);\n  }\n\n  intersectLine(sp: IVec, ep: IVec, infinite = false) {\n    const rst: IVec[] = [];\n    (\n      [\n        [this.tl, this.tr],\n        [this.tl, this.bl],\n        [this.tr, this.br],\n        [this.bl, this.br],\n      ] as IVec[][]\n    ).forEach(([p1, p2]) => {\n      const p = lineIntersects(sp, ep, p1, p2, infinite);\n      if (p) rst.push(p);\n    });\n    return rst.length === 0 ? null : rst;\n  }\n\n  isHorizontalCross(bound: Bound) {\n    return !(this.maxY < bound.minY || this.minY > bound.maxY);\n  }\n\n  isIntersectWithBound(bound: Bound, epsilon = EPSILON) {\n    return (\n      bound.maxX > this.minX - epsilon &&\n      bound.maxY > this.minY - epsilon &&\n      bound.minX < this.maxX + epsilon &&\n      bound.minY < this.maxY + epsilon &&\n      !this.contains(bound) &&\n      !bound.contains(this)\n    );\n  }\n\n  isOverlapWithBound(bound: Bound, epsilon = EPSILON) {\n    return (\n      bound.maxX > this.minX - epsilon &&\n      bound.maxY > this.minY - epsilon &&\n      bound.minX < this.maxX + epsilon &&\n      bound.minY < this.maxY + epsilon\n    );\n  }\n\n  isPointInBound([x, y]: IVec, tolerance = 0.01) {\n    return (\n      x > this.minX + tolerance &&\n      x < this.maxX - tolerance &&\n      y > this.minY + tolerance &&\n      y < this.maxY - tolerance\n    );\n  }\n\n  isPointNearBound([x, y]: IVec, tolerance = 0.01) {\n    return polygonPointDistance(this.points, [x, y]) < tolerance;\n  }\n\n  isVerticalCross(bound: Bound) {\n    return !(this.maxX < bound.minX || this.minX > bound.maxX);\n  }\n\n  serialize(): SerializedXYWH {\n    return serializeXYWH(this.x, this.y, this.w, this.h);\n  }\n\n  toRelative([x, y]: IVec): IVec {\n    return [(x - this.x) / this.w, (y - this.y) / this.h];\n  }\n\n  toXYWH(): XYWH {\n    return [this.x, this.y, this.w, this.h];\n  }\n\n  unite(bound: Bound) {\n    const x1 = Math.min(this.x, bound.x),\n      y1 = Math.min(this.y, bound.y),\n      x2 = Math.max(this.maxX, bound.maxX),\n      y2 = Math.max(this.maxY, bound.maxY);\n    return new Bound(x1, y1, x2 - x1, y2 - y1);\n  }\n\n  verticalDistance(bound: Bound) {\n    return Math.min(\n      Math.abs(this.minY - bound.maxY),\n      Math.abs(this.maxY - bound.minY)\n    );\n  }\n}\n"]}