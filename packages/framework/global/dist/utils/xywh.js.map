{"version":3,"file":"xywh.js","sourceRoot":"","sources":["../../src/utils/xywh.ts"],"names":[],"mappings":"AAUA,MAAM,UAAU,aAAa,CAC3B,CAAS,EACT,CAAS,EACT,CAAS,EACT,CAAS;IAET,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC;AACjC,CAAC;AAED,MAAM,UAAU,eAAe,CAAC,IAAY;IAC1C,IAAI,CAAC;QACH,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAS,CAAC;IAClC,CAAC;IAAC,OAAO,CAAC,EAAE,CAAC;QACX,OAAO,CAAC,KAAK,CAAC,4BAA4B,EAAE,IAAI,CAAC,CAAC;QAClD,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;QAEjB,OAAO,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IACtB,CAAC;AACH,CAAC","sourcesContent":["/**\n * XYWH represents the x, y, width, and height of an element or block.\n */\nexport type XYWH = [number, number, number, number];\n\n/**\n * SerializedXYWH is a string that represents the x, y, width, and height of a block.\n */\nexport type SerializedXYWH = `[${number},${number},${number},${number}]`;\n\nexport function serializeXYWH(\n  x: number,\n  y: number,\n  w: number,\n  h: number\n): SerializedXYWH {\n  return `[${x},${y},${w},${h}]`;\n}\n\nexport function deserializeXYWH(xywh: string): XYWH {\n  try {\n    return JSON.parse(xywh) as XYWH;\n  } catch (e) {\n    console.error('Failed to deserialize xywh', xywh);\n    console.error(e);\n\n    return [0, 0, 0, 0];\n  }\n}\n"]}