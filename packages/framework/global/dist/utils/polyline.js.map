{"version":3,"file":"polyline.js","sourceRoot":"","sources":["../../src/utils/polyline.ts"],"names":[],"mappings":"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","sourcesContent":["import { type IVec, Vec } from './model/index.js';\n\nexport class Polyline {\n  static len(points: IVec[]) {\n    const n = points.length;\n\n    if (n < 2) {\n      return 0;\n    }\n\n    let i = 0;\n    let len = 0;\n    let curr: IVec;\n    let prev = points[0];\n\n    while (++i < n) {\n      curr = points[i];\n      len += Vec.dist(prev, curr);\n      prev = curr;\n    }\n\n    return len;\n  }\n\n  static lenAtPoint(points: IVec[], point: IVec) {\n    const n = points.length;\n    let len = n;\n\n    for (let i = 0; i < n - 1; i++) {\n      const a = points[i];\n      const b = points[i + 1];\n\n      // start\n      if (a[0] === point[0] && a[1] === point[1]) {\n        return len;\n      }\n\n      const aa = Vec.angle(a, point);\n      const ba = Vec.angle(b, point);\n\n      if ((aa + ba) % Math.PI === 0) {\n        len += Vec.dist(a, point);\n        return len;\n      }\n\n      len += Vec.dist(a, b);\n\n      // end\n      if (b[0] === point[0] && b[1] === point[1]) {\n        return len;\n      }\n    }\n\n    return len;\n  }\n\n  static nearestPoint(points: IVec[], point: IVec): IVec {\n    const n = points.length;\n    const r: IVec = [0, 0];\n    let len = Infinity;\n\n    for (let i = 0; i < n - 1; i++) {\n      const a = points[i];\n      const b = points[i + 1];\n      const p = Vec.nearestPointOnLineSegment(a, b, point, true);\n      const d = Vec.dist(p, point);\n      if (d < len) {\n        len = d;\n        r[0] = p[0];\n        r[1] = p[1];\n      }\n    }\n\n    return r;\n  }\n\n  static pointAt(points: IVec[], ratio: number) {\n    const n = points.length;\n\n    if (n === 0) {\n      return null;\n    }\n\n    if (n === 1) {\n      return points[0];\n    }\n\n    if (ratio <= 0) {\n      return points[0];\n    }\n\n    if (ratio >= 1) {\n      return points[n - 1];\n    }\n\n    const total = Polyline.len(points);\n    const len = total * ratio;\n    return Polyline.pointAtLen(points, len);\n  }\n\n  static pointAtLen(points: IVec[], len: number): IVec | null {\n    const n = points.length;\n\n    if (n === 0) {\n      return null;\n    }\n\n    if (n === 1) {\n      return points[0];\n    }\n\n    let fromStart = true;\n    if (len < 0) {\n      fromStart = false;\n      len = -len;\n    }\n\n    let tmp = 0;\n    for (let j = 0, k = n - 1; j < k; j++) {\n      const i = fromStart ? j : k - 1 - j;\n      const a = points[i];\n      const b = points[i + 1];\n      const d = Vec.dist(a, b);\n\n      if (len <= tmp + d) {\n        const t = ((fromStart ? 1 : -1) * (len - tmp)) / d;\n        return Vec.lrp(a, b, t) as IVec;\n      }\n\n      tmp += d;\n    }\n\n    const lastPoint = fromStart ? points[n - 1] : points[0];\n    return lastPoint;\n  }\n}\n"]}