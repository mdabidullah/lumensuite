{"version":3,"file":"curve.js","sourceRoot":"","sources":["../../src/utils/curve.ts"],"names":[],"mappings":"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","sourcesContent":["// control coords are not relative to start or end\nimport { assertExists } from './assert.js';\nimport { CURVETIME_EPSILON, isZero } from './math.js';\nimport { Bound, type IVec, PointLocation, Vec } from './model/index.js';\n\nexport type BezierCurveParameters = [\n  start: IVec,\n  control1: IVec,\n  control2: IVec,\n  end: IVec,\n];\n\nfunction evaluate(\n  v: BezierCurveParameters,\n  t: number,\n  type: number,\n  normalized: boolean\n): IVec | null {\n  if (t == null || t < 0 || t > 1) return null;\n  const x0 = v[0][0],\n    y0 = v[0][1],\n    x3 = v[3][0],\n    y3 = v[3][1];\n  let x1 = v[1][0],\n    y1 = v[1][1],\n    x2 = v[2][0],\n    y2 = v[2][1];\n\n  if (isZero(x1 - x0) && isZero(y1 - y0)) {\n    x1 = x0;\n    y1 = y0;\n  }\n  if (isZero(x2 - x3) && isZero(y2 - y3)) {\n    x2 = x3;\n    y2 = y3;\n  }\n  // Calculate the polynomial coefficients.\n  const cx = 3 * (x1 - x0),\n    bx = 3 * (x2 - x1) - cx,\n    ax = x3 - x0 - cx - bx,\n    cy = 3 * (y1 - y0),\n    by = 3 * (y2 - y1) - cy,\n    ay = y3 - y0 - cy - by;\n  let x, y;\n  if (type === 0) {\n    // type === 0: getPoint()\n    x = t === 0 ? x0 : t === 1 ? x3 : ((ax * t + bx) * t + cx) * t + x0;\n    y = t === 0 ? y0 : t === 1 ? y3 : ((ay * t + by) * t + cy) * t + y0;\n  } else {\n    // type === 1: getTangent()\n    // type === 2: getNormal()\n    // type === 3: getCurvature()\n    const tMin = CURVETIME_EPSILON,\n      tMax = 1 - tMin;\n    if (t < tMin) {\n      x = cx;\n      y = cy;\n    } else if (t > tMax) {\n      x = 3 * (x3 - x2);\n      y = 3 * (y3 - y2);\n    } else {\n      x = (3 * ax * t + 2 * bx) * t + cx;\n      y = (3 * ay * t + 2 * by) * t + cy;\n    }\n    if (normalized) {\n      if (x === 0 && y === 0 && (t < tMin || t > tMax)) {\n        x = x2 - x1;\n        y = y2 - y1;\n      }\n      const len = Math.sqrt(x * x + y * y);\n      if (len) {\n        x /= len;\n        y /= len;\n      }\n    }\n    if (type === 3) {\n      const x2 = 6 * ax * t + 2 * bx,\n        y2 = 6 * ay * t + 2 * by,\n        d = Math.pow(x * x + y * y, 3 / 2);\n      x = d !== 0 ? (x * y2 - y * x2) / d : 0;\n      y = 0;\n    }\n  }\n  return type === 2 ? [y, -x] : [x, y];\n}\n\nexport function getBezierPoint(values: BezierCurveParameters, t: number) {\n  return evaluate(values, t, 0, false);\n}\n\nexport function getBezierTangent(values: BezierCurveParameters, t: number) {\n  return evaluate(values, t, 1, true);\n}\n\nexport function getBezierNormal(values: BezierCurveParameters, t: number) {\n  return evaluate(values, t, 2, true);\n}\n\nexport function getBezierCurvature(values: BezierCurveParameters, t: number) {\n  return evaluate(values, t, 3, false)?.[0];\n}\n\nexport function getBezierNearestTime(\n  values: BezierCurveParameters,\n  point: IVec\n) {\n  const count = 100;\n  let minDist = Infinity,\n    minT = 0;\n\n  function refine(t: number) {\n    if (t >= 0 && t <= 1) {\n      const tmpPoint = getBezierPoint(values, t);\n      assertExists(tmpPoint);\n      const dist = Vec.dist2(point, tmpPoint);\n      if (dist < minDist) {\n        minDist = dist;\n        minT = t;\n        return true;\n      }\n    }\n    return false;\n  }\n\n  for (let i = 0; i <= count; i++) refine(i / count);\n\n  let step = 1 / (count * 2);\n  while (step > CURVETIME_EPSILON) {\n    if (!refine(minT - step) && !refine(minT + step)) step /= 2;\n  }\n  return minT;\n}\n\nexport function getBezierNearestPoint(\n  values: BezierCurveParameters,\n  point: IVec\n) {\n  const t = getBezierNearestTime(values, point);\n  const pointOnCurve = getBezierPoint(values, t);\n  assertExists(pointOnCurve);\n  return pointOnCurve;\n}\n\nexport function getBezierParameters(\n  points: PointLocation[]\n): BezierCurveParameters {\n  return [points[0], points[0].absOut, points[1].absIn, points[1]];\n}\n\n// https://stackoverflow.com/questions/2587751/an-algorithm-to-find-bounding-box-of-closed-bezier-curves\nexport function getBezierCurveBoundingBox(values: BezierCurveParameters) {\n  const [start, controlPoint1, controlPoint2, end] = values;\n\n  const [x0, y0] = start;\n  const [x1, y1] = controlPoint1;\n  const [x2, y2] = controlPoint2;\n  const [x3, y3] = end;\n\n  const points = []; // local extremes\n  const tvalues = []; // t values of local extremes\n  const bounds: [number[], number[]] = [[], []];\n\n  let a;\n  let b;\n  let c;\n  let t;\n  let t1;\n  let t2;\n  let b2ac;\n  let sqrtb2ac;\n\n  for (let i = 0; i < 2; i += 1) {\n    if (i === 0) {\n      b = 6 * x0 - 12 * x1 + 6 * x2;\n      a = -3 * x0 + 9 * x1 - 9 * x2 + 3 * x3;\n      c = 3 * x1 - 3 * x0;\n    } else {\n      b = 6 * y0 - 12 * y1 + 6 * y2;\n      a = -3 * y0 + 9 * y1 - 9 * y2 + 3 * y3;\n      c = 3 * y1 - 3 * y0;\n    }\n\n    if (Math.abs(a) < 1e-12) {\n      if (Math.abs(b) < 1e-12) {\n        continue;\n      }\n\n      t = -c / b;\n      if (t > 0 && t < 1) tvalues.push(t);\n\n      continue;\n    }\n\n    b2ac = b * b - 4 * c * a;\n    sqrtb2ac = Math.sqrt(b2ac);\n\n    if (b2ac < 0) continue;\n\n    t1 = (-b + sqrtb2ac) / (2 * a);\n    if (t1 > 0 && t1 < 1) tvalues.push(t1);\n\n    t2 = (-b - sqrtb2ac) / (2 * a);\n    if (t2 > 0 && t2 < 1) tvalues.push(t2);\n  }\n\n  let x;\n  let y;\n  let mt;\n  let j = tvalues.length;\n  const jlen = j;\n\n  while (j) {\n    j -= 1;\n    t = tvalues[j];\n    mt = 1 - t;\n\n    x =\n      mt * mt * mt * x0 +\n      3 * mt * mt * t * x1 +\n      3 * mt * t * t * x2 +\n      t * t * t * x3;\n    bounds[0][j] = x;\n\n    y =\n      mt * mt * mt * y0 +\n      3 * mt * mt * t * y1 +\n      3 * mt * t * t * y2 +\n      t * t * t * y3;\n\n    bounds[1][j] = y;\n    points[j] = { X: x, Y: y };\n  }\n\n  tvalues[jlen] = 0;\n  tvalues[jlen + 1] = 1;\n\n  points[jlen] = { X: x0, Y: y0 };\n  points[jlen + 1] = { X: x3, Y: y3 };\n\n  bounds[0][jlen] = x0;\n  bounds[1][jlen] = y0;\n\n  bounds[0][jlen + 1] = x3;\n  bounds[1][jlen + 1] = y3;\n\n  tvalues.length = jlen + 2;\n  bounds[0].length = jlen + 2;\n  bounds[1].length = jlen + 2;\n  points.length = jlen + 2;\n\n  const left = Math.min.apply(null, bounds[0]);\n  const top = Math.min.apply(null, bounds[1]);\n  const right = Math.max.apply(null, bounds[0]);\n  const bottom = Math.max.apply(null, bounds[1]);\n\n  return new Bound(left, top, right - left, bottom - top);\n}\n\n// https://pomax.github.io/bezierjs/#intersect-line\n// MIT Licence\n\n// cube root function yielding real roots\nfunction crt(v: number) {\n  return v < 0 ? -Math.pow(-v, 1 / 3) : Math.pow(v, 1 / 3);\n}\n\nfunction align(points: BezierCurveParameters, [start, end]: IVec[]) {\n  const tx = start[0],\n    ty = start[1],\n    a = -Math.atan2(end[1] - ty, end[0] - tx),\n    d = function ([x, y]: IVec) {\n      return [\n        (x - tx) * Math.cos(a) - (y - ty) * Math.sin(a),\n        (x - tx) * Math.sin(a) + (y - ty) * Math.cos(a),\n      ];\n    };\n  return points.map(d);\n}\n\nfunction between(v: number, min: number, max: number) {\n  return (\n    (min <= v && v <= max) || approximately(v, min) || approximately(v, max)\n  );\n}\n\nfunction approximately(\n  a: number,\n  b: number,\n  precision?: number,\n  epsilon = 0.000001\n) {\n  return Math.abs(a - b) <= (precision || epsilon);\n}\n\nfunction roots(points: BezierCurveParameters, line: IVec[]) {\n  const order = points.length - 1;\n  const aligned = align(points, line);\n  const reduce = function (t: number) {\n    return 0 <= t && t <= 1;\n  };\n\n  if (order === 2) {\n    const a = aligned[0][1],\n      b = aligned[1][1],\n      c = aligned[2][1],\n      d = a - 2 * b + c;\n    if (d !== 0) {\n      const m1 = -Math.sqrt(b * b - a * c),\n        m2 = -a + b,\n        v1 = -(m1 + m2) / d,\n        v2 = -(-m1 + m2) / d;\n      return [v1, v2].filter(reduce);\n    } else if (b !== c && d === 0) {\n      return [(2 * b - c) / (2 * b - 2 * c)].filter(reduce);\n    }\n    return [];\n  }\n\n  // see http://www.trans4mind.com/personal_development/mathematics/polynomials/cubicAlgebra.htm\n  const pa = aligned[0][1],\n    pb = aligned[1][1],\n    pc = aligned[2][1],\n    pd = aligned[3][1];\n\n  const d = -pa + 3 * pb - 3 * pc + pd;\n  let a = 3 * pa - 6 * pb + 3 * pc,\n    b = -3 * pa + 3 * pb,\n    c = pa;\n\n  if (approximately(d, 0)) {\n    // this is not a cubic curve.\n    if (approximately(a, 0)) {\n      // in fact, this is not a quadratic curve either.\n      if (approximately(b, 0)) {\n        // in fact in fact, there are no solutions.\n        return [];\n      }\n      // linear solution:\n      return [-c / b].filter(reduce);\n    }\n    // quadratic solution:\n    const q = Math.sqrt(b * b - 4 * a * c),\n      a2 = 2 * a;\n    return [(q - b) / a2, (-b - q) / a2].filter(reduce);\n  }\n\n  // at this point, we know we need a cubic solution:\n\n  a /= d;\n  b /= d;\n  c /= d;\n\n  const p = (3 * b - a * a) / 3,\n    p3 = p / 3,\n    q = (2 * a * a * a - 9 * a * b + 27 * c) / 27,\n    q2 = q / 2,\n    discriminant = q2 * q2 + p3 * p3 * p3;\n\n  let u1, v1, x1, x2, x3;\n  if (discriminant < 0) {\n    const mp3 = -p / 3,\n      mp33 = mp3 * mp3 * mp3,\n      r = Math.sqrt(mp33),\n      t = -q / (2 * r),\n      cosphi = t < -1 ? -1 : t > 1 ? 1 : t,\n      phi = Math.acos(cosphi),\n      crtr = crt(r),\n      t1 = 2 * crtr;\n    x1 = t1 * Math.cos(phi / 3) - a / 3;\n    x2 = t1 * Math.cos((phi + Math.PI * 2) / 3) - a / 3;\n    x3 = t1 * Math.cos((phi + 2 * Math.PI * 2) / 3) - a / 3;\n    return [x1, x2, x3].filter(reduce);\n  } else if (discriminant === 0) {\n    u1 = q2 < 0 ? crt(-q2) : -crt(q2);\n    x1 = 2 * u1 - a / 3;\n    x2 = -u1 - a / 3;\n    return [x1, x2].filter(reduce);\n  } else {\n    const sd = Math.sqrt(discriminant);\n    u1 = crt(-q2 + sd);\n    v1 = crt(q2 + sd);\n    return [u1 - v1 - a / 3].filter(reduce);\n  }\n}\n\nexport function curveIntersects(path: PointLocation[], line: [IVec, IVec]) {\n  const { minX, maxX, minY, maxY } = Bound.fromPoints(line);\n  const points = getBezierParameters(path);\n  const intersectedPoints = roots(points, line)\n    .map(t => getBezierPoint(points, t))\n    .filter(point =>\n      point\n        ? between(point[0], minX, maxX) && between(point[1], minY, maxY)\n        : false\n    )\n    .map(point => new PointLocation(point!));\n  return intersectedPoints.length > 0 ? intersectedPoints : null;\n}\n"]}