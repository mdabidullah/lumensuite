{"version":3,"file":"crypto.js","sourceRoot":"","sources":["../../src/utils/crypto.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,QAAQ,EAAE,MAAM,gBAAgB,CAAC;AAC1C,OAAO,EAAE,MAAM,EAAE,MAAM,kBAAkB,CAAC;AAE1C,MAAM,CAAC,KAAK,UAAU,GAAG,CAAC,KAAkB;IAC1C,MAAM,IAAI,GACR,MAAM,CAAC,MAAM,KAAK,SAAS,CAAC,kEAAkE;QAC5F,CAAC,CAAC,MAAM,CAAC,IAAI,UAAU,CAAC,KAAK,CAAC,CAAC;QAC/B,CAAC,CAAC,MAAM,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;IAEnD,0DAA0D;IAC1D,OAAO,QAAQ,CAAC,IAAI,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;AAChF,CAAC","sourcesContent":["import { toBase64 } from 'lib0/buffer.js';\nimport { digest } from 'lib0/hash/sha256';\n\nexport async function sha(input: ArrayBuffer): Promise<string> {\n  const hash =\n    crypto.subtle === undefined // crypto.subtle is not available without a secure context (HTTPS)\n      ? digest(new Uint8Array(input))\n      : await crypto.subtle.digest('SHA-256', input);\n\n  // faster conversion from ArrayBuffer to base64 in browser\n  return toBase64(new Uint8Array(hash)).replace(/\\+/g, '-').replace(/\\//g, '_');\n}\n"]}