{"version":3,"file":"distribute.js","sourceRoot":"","sources":["../../../src/utils/figma-squircle/distribute.ts"],"names":[],"mappings":"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","sourcesContent":["interface RoundedRectangle {\n  topLeftCornerRadius: number;\n  topRightCornerRadius: number;\n  bottomRightCornerRadius: number;\n  bottomLeftCornerRadius: number;\n  width: number;\n  height: number;\n}\n\ninterface NormalizedCorner {\n  radius: number;\n  roundingAndSmoothingBudget: number;\n}\n\ninterface NormalizedCorners {\n  topLeft: NormalizedCorner;\n  topRight: NormalizedCorner;\n  bottomLeft: NormalizedCorner;\n  bottomRight: NormalizedCorner;\n}\n\ntype Corner = keyof NormalizedCorners;\n\ntype Side = 'top' | 'left' | 'right' | 'bottom';\n\ninterface Adjacent {\n  side: Side;\n  corner: Corner;\n}\n\nexport function distributeAndNormalize({\n  topLeftCornerRadius,\n  topRightCornerRadius,\n  bottomRightCornerRadius,\n  bottomLeftCornerRadius,\n  width,\n  height,\n}: RoundedRectangle): NormalizedCorners {\n  const roundingAndSmoothingBudgetMap: Record<Corner, number> = {\n    topLeft: -1,\n    topRight: -1,\n    bottomLeft: -1,\n    bottomRight: -1,\n  };\n\n  const cornerRadiusMap: Record<Corner, number> = {\n    topLeft: topLeftCornerRadius,\n    topRight: topRightCornerRadius,\n    bottomLeft: bottomLeftCornerRadius,\n    bottomRight: bottomRightCornerRadius,\n  };\n\n  Object.entries(cornerRadiusMap)\n    // Let the bigger corners choose first\n    .sort(([, radius1], [, radius2]) => {\n      return radius2 - radius1;\n    })\n    .forEach(([cornerName, radius]) => {\n      const corner = cornerName as Corner;\n      const adjacents = adjacentsByCorner[corner];\n\n      // Look at the 2 adjacent sides, figure out how much space we can have on both sides,\n      // then take the smaller one\n      const budget = Math.min(\n        ...adjacents.map(adjacent => {\n          const adjacentCornerRadius = cornerRadiusMap[adjacent.corner];\n          if (radius === 0 && adjacentCornerRadius === 0) {\n            return 0;\n          }\n\n          const adjacentCornerBudget =\n            roundingAndSmoothingBudgetMap[adjacent.corner];\n\n          const sideLength =\n            adjacent.side === 'top' || adjacent.side === 'bottom'\n              ? width\n              : height;\n\n          // If the adjacent corner's already been given the rounding and smoothing budget,\n          // we'll just take the rest\n          if (adjacentCornerBudget >= 0) {\n            return sideLength - roundingAndSmoothingBudgetMap[adjacent.corner];\n          } else {\n            return (radius / (radius + adjacentCornerRadius)) * sideLength;\n          }\n        })\n      );\n\n      roundingAndSmoothingBudgetMap[corner] = budget;\n      cornerRadiusMap[corner] = Math.min(radius, budget);\n    });\n\n  return {\n    topLeft: {\n      radius: cornerRadiusMap.topLeft,\n      roundingAndSmoothingBudget: roundingAndSmoothingBudgetMap.topLeft,\n    },\n    topRight: {\n      radius: cornerRadiusMap.topRight,\n      roundingAndSmoothingBudget: roundingAndSmoothingBudgetMap.topRight,\n    },\n    bottomLeft: {\n      radius: cornerRadiusMap.bottomLeft,\n      roundingAndSmoothingBudget: roundingAndSmoothingBudgetMap.bottomLeft,\n    },\n    bottomRight: {\n      radius: cornerRadiusMap.bottomRight,\n      roundingAndSmoothingBudget: roundingAndSmoothingBudgetMap.bottomRight,\n    },\n  };\n}\n\nconst adjacentsByCorner: Record<Corner, Array<Adjacent>> = {\n  topLeft: [\n    {\n      corner: 'topRight',\n      side: 'top',\n    },\n    {\n      corner: 'bottomLeft',\n      side: 'left',\n    },\n  ],\n  topRight: [\n    {\n      corner: 'topLeft',\n      side: 'top',\n    },\n    {\n      corner: 'bottomRight',\n      side: 'right',\n    },\n  ],\n  bottomLeft: [\n    {\n      corner: 'bottomRight',\n      side: 'bottom',\n    },\n    {\n      corner: 'topLeft',\n      side: 'left',\n    },\n  ],\n  bottomRight: [\n    {\n      corner: 'bottomLeft',\n      side: 'bottom',\n    },\n    {\n      corner: 'topRight',\n      side: 'right',\n    },\n  ],\n};\n"]}