{"version":3,"file":"iterable.js","sourceRoot":"","sources":["../../src/utils/iterable.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n *\n * @example\n * ```ts\n * const items = [\n *  {name: 'a', classroom: 'c1'},\n *  {name: 'b', classroom: 'c2'},\n *  {name: 'a', classroom: 't0'}\n * ]\n * const counted = countBy(items1, i => i.name);\n * // counted: { a: 2, b: 1}\n * ```\n */\nexport function countBy<T>(\n  items: T[],\n  key: (item: T) => string | number | null\n): Record<string, number> {\n  const count: Record<string, number> = {};\n  items.forEach(item => {\n    const k = key(item);\n    if (k === null) return;\n    if (!count[k]) {\n      count[k] = 0;\n    }\n    count[k] += 1;\n  });\n  return count;\n}\n\n/**\n * @example\n * ```ts\n * const items = [{n: 1}, {n: 2}]\n * const max = maxBy(items, i => i.n);\n * // max: {n: 2}\n * ```\n */\nexport function maxBy<T>(items: T[], value: (item: T) => number): T | null {\n  if (!items.length) {\n    return null;\n  }\n  let maxItem = items[0];\n  let max = value(maxItem);\n\n  for (let i = 1; i < items.length; i++) {\n    const item = items[i];\n    const v = value(item);\n    if (v > max) {\n      max = v;\n      maxItem = item;\n    }\n  }\n\n  return maxItem;\n}\n\n/**\n * Checks if there are at least `n` elements in the array that match the given condition.\n *\n * @param arr - The input array of elements.\n * @param matchFn - A function that takes an element of the array and returns a boolean value\n *                  indicating if the element matches the desired condition.\n * @param n - The minimum number of matching elements required.\n * @returns A boolean value indicating if there are at least `n` matching elements in the array.\n *\n * @example\n * const arr = [1, 2, 3, 4, 5];\n * const isEven = (num: number): boolean => num % 2 === 0;\n * console.log(atLeastNMatches(arr, isEven, 2)); // Output: true\n */\nexport function atLeastNMatches<T>(\n  arr: T[],\n  matchFn: (element: T) => boolean,\n  n: number\n): boolean {\n  let count = 0;\n\n  for (let i = 0; i < arr.length; i++) {\n    if (matchFn(arr[i])) {\n      count++;\n\n      if (count >= n) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n\n/**\n * Groups an array of elements based on a provided key function.\n *\n * @example\n * interface Student {\n *   name: string;\n *   age: number;\n * }\n * const students: Student[] = [\n *   { name: 'Alice', age: 25 },\n *   { name: 'Bob', age: 23 },\n *   { name: 'Cathy', age: 25 },\n * ];\n * const groupedByAge = groupBy(students, (student) => student.age.toString());\n * console.log(groupedByAge);\n * // Output: {\n *  '23': [ { name: 'Bob', age: 23 } ],\n *  '25': [ { name: 'Alice', age: 25 }, { name: 'Cathy', age: 25 } ]\n * }\n */\nexport function groupBy<T, K extends string>(\n  arr: T[],\n  key: K | ((item: T) => K)\n): Record<K, T[]> {\n  const result = {} as Record<string, T[]>;\n\n  for (const item of arr) {\n    const groupKey =\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (typeof key === 'function' ? key(item) : (item as any)[key]) as string;\n\n    if (!result[groupKey]) {\n      result[groupKey] = [];\n    }\n\n    result[groupKey].push(item);\n  }\n\n  return result;\n}\n\nexport function pickArray<T>(target: Array<T>, keys: number[]): Array<T> {\n  return keys.reduce((pre, key) => {\n    pre.push(target[key]);\n    return pre;\n  }, [] as T[]);\n}\n\nexport function pick<T, K extends keyof T>(\n  target: T,\n  keys: K[]\n): { [key in K]: T[K] } {\n  return keys.reduce(\n    (pre, key) => {\n      pre[key] = target[key];\n      return pre;\n    },\n    {} as { [key in K]: T[K] }\n  );\n}\n\nexport function pickValues<T, K extends keyof T>(\n  target: T,\n  keys: K[]\n): Array<T[K]> {\n  return keys.reduce(\n    (pre, key) => {\n      pre.push(target[key]);\n      return pre;\n    },\n    [] as Array<T[K]>\n  );\n}\n\nexport function lastN<T>(target: Array<T>, n: number) {\n  return target.slice(target.length - n, target.length);\n}\n\nexport function isEmpty(obj: unknown) {\n  if (Object.getPrototypeOf(obj) === Object.prototype) {\n    return Object.keys(obj as object).length === 0;\n  }\n\n  if (Array.isArray(obj) || typeof obj === 'string') {\n    return (obj as Array<unknown>).length === 0;\n  }\n\n  return false;\n}\n\nexport function keys<T>(obj: T): (keyof T)[] {\n  return Object.keys(obj as object) as (keyof T)[];\n}\n\nexport function values<T>(obj: T): T[keyof T][] {\n  return Object.values(obj as object);\n}\n\ntype IterableType<T> = T extends Array<infer U> ? U : T;\n\nexport function last<T extends Iterable<unknown>>(\n  iterable: T\n): IterableType<T> | undefined {\n  if (Array.isArray(iterable)) {\n    return iterable[iterable.length - 1];\n  }\n\n  let last: unknown | undefined;\n  for (const item of iterable) {\n    last = item;\n  }\n\n  return last as IterableType<T>;\n}\n\nexport function nToLast<T extends Iterable<unknown>>(\n  iterable: T,\n  n: number\n): IterableType<T> | undefined {\n  if (Array.isArray(iterable)) {\n    return iterable[iterable.length - n];\n  }\n\n  const arr = [...iterable];\n\n  return arr[arr.length - n] as IterableType<T>;\n}\n"]}