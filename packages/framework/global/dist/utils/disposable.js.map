{"version":3,"file":"disposable.js","sourceRoot":"","sources":["../../src/utils/disposable.ts"],"names":[],"mappings":"AAMA,MAAM,OAAO,eAAe;IAA5B;QACU,iBAAY,GAAiB,EAAE,CAAC;QAEhC,cAAS,GAAG,KAAK,CAAC;IA0D5B,CAAC;IAxDC,IAAI,QAAQ;QACV,OAAO,IAAI,CAAC,SAAS,CAAC;IACxB,CAAC;IAED;;;OAGG;IACH,GAAG,CAAC,CAA+B;QACjC,IAAI,OAAO,CAAC,KAAK,UAAU,EAAE,CAAC;YAC5B,IAAI,IAAI,CAAC,SAAS;gBAAE,CAAC,EAAE,CAAC;;gBACnB,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,CAAC,EAAE,CAAC,CAAC;QAC9C,CAAC;aAAM,CAAC;YACN,IAAI,IAAI,CAAC,SAAS;gBAAE,CAAC,CAAC,OAAO,EAAE,CAAC;;gBAC3B,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QACjC,CAAC;IACH,CAAC;IAqBD,YAAY,CACV,MAAuC,EACvC,IAAY,EACZ,OAA2B,EAC3B,YAAgD;QAEhD,IAAI,CAAC,GAAG,CAAC;YACP,OAAO,EAAE,GAAG,EAAE;gBACZ,MAAM,CAAC,mBAAmB,CAAC,IAAI,EAAE,OAAqB,EAAE,YAAY,CAAC,CAAC;YACxE,CAAC;SACF,CAAC,CAAC;QACH,MAAM,CAAC,gBAAgB,CAAC,IAAI,EAAE,OAAqB,EAAE,YAAY,CAAC,CAAC;IACrE,CAAC;IAED,OAAO;QACL,UAAU,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;QAC9B,IAAI,CAAC,YAAY,GAAG,EAAE,CAAC;QACvB,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;IACxB,CAAC;CACF;AAED,MAAM,UAAU,kBAAkB,CAAC,WAAyB;IAC1D,OAAO;QACL,OAAO,EAAE,GAAG,EAAE,CAAC,UAAU,CAAC,WAAW,CAAC;KACvC,CAAC;AACJ,CAAC;AAED,SAAS,UAAU,CAAC,WAAyB;IAC3C,KAAK,MAAM,UAAU,IAAI,WAAW,EAAE,CAAC;QACrC,IAAI,CAAC;YACH,UAAU,CAAC,OAAO,EAAE,CAAC;QACvB,CAAC;QAAC,OAAO,GAAG,EAAE,CAAC;YACb,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QACrB,CAAC;IACH,CAAC;AACH,CAAC","sourcesContent":["type DisposeCallback = () => void;\n\nexport interface Disposable {\n  dispose: DisposeCallback;\n}\n\nexport class DisposableGroup implements Disposable {\n  private _disposables: Disposable[] = [];\n\n  private _disposed = false;\n\n  get disposed() {\n    return this._disposed;\n  }\n\n  /**\n   * Add to group to be disposed with others.\n   * This will be immediately disposed if this group has already been disposed.\n   */\n  add(d: Disposable | DisposeCallback) {\n    if (typeof d === 'function') {\n      if (this._disposed) d();\n      else this._disposables.push({ dispose: d });\n    } else {\n      if (this._disposed) d.dispose();\n      else this._disposables.push(d);\n    }\n  }\n\n  addFromEvent<N extends keyof WindowEventMap>(\n    element: Window,\n    eventName: N,\n    handler: (e: WindowEventMap[N]) => void,\n    options?: boolean | AddEventListenerOptions\n  ): void;\n  addFromEvent<N extends keyof DocumentEventMap>(\n    element: Document,\n    eventName: N,\n    handler: (e: DocumentEventMap[N]) => void,\n    eventOptions?: boolean | AddEventListenerOptions\n  ): void;\n  addFromEvent<N extends keyof HTMLElementEventMap>(\n    element: HTMLElement,\n    eventName: N,\n    handler: (e: HTMLElementEventMap[N]) => void,\n    eventOptions?: boolean | AddEventListenerOptions\n  ): void;\n\n  addFromEvent(\n    target: HTMLElement | Window | Document,\n    type: string,\n    handler: (e: Event) => void,\n    eventOptions?: boolean | AddEventListenerOptions\n  ) {\n    this.add({\n      dispose: () => {\n        target.removeEventListener(type, handler as () => void, eventOptions);\n      },\n    });\n    target.addEventListener(type, handler as () => void, eventOptions);\n  }\n\n  dispose() {\n    disposeAll(this._disposables);\n    this._disposables = [];\n    this._disposed = true;\n  }\n}\n\nexport function flattenDisposables(disposables: Disposable[]): Disposable {\n  return {\n    dispose: () => disposeAll(disposables),\n  };\n}\n\nfunction disposeAll(disposables: Disposable[]) {\n  for (const disposable of disposables) {\n    try {\n      disposable.dispose();\n    } catch (err) {\n      console.error(err);\n    }\n  }\n}\n"]}