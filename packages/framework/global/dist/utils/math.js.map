{"version":3,"file":"math.js","sourceRoot":"","sources":["../../src/utils/math.ts"],"names":[],"mappings":"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","sourcesContent":["import type { Bound, IBound } from './model/bound.js';\n\nimport { PointLocation } from './model/point-location.js';\nimport { type IVec, Vec } from './model/vec.js';\n\nexport const EPSILON = 1e-12;\nexport const MACHINE_EPSILON = 1.12e-16;\nexport const PI2 = Math.PI * 2;\nexport const CURVETIME_EPSILON = 1e-8;\n\ninterface TLBounds {\n  minX: number;\n  minY: number;\n  maxX: number;\n  maxY: number;\n  width: number;\n  height: number;\n  rotation?: number;\n}\n\nexport function randomSeed(): number {\n  return Math.floor(Math.random() * 2 ** 31);\n}\n\nexport function getBoundsFromPoints(points: IVec[], rotation = 0): TLBounds {\n  let minX = Infinity;\n  let minY = Infinity;\n  let maxX = -Infinity;\n  let maxY = -Infinity;\n\n  if (points.length < 1) {\n    minX = 0;\n    minY = 0;\n    maxX = 1;\n    maxY = 1;\n  } else {\n    for (const [x, y] of points) {\n      minX = Math.min(x, minX);\n      minY = Math.min(y, minY);\n      maxX = Math.max(x, maxX);\n      maxY = Math.max(y, maxY);\n    }\n  }\n\n  if (rotation !== 0) {\n    return getBoundsFromPoints(\n      points.map(pt =>\n        Vec.rotWith(pt, [(minX + maxX) / 2, (minY + maxY) / 2], rotation)\n      )\n    );\n  }\n\n  return {\n    minX,\n    minY,\n    maxX,\n    maxY,\n    width: Math.max(1, maxX - minX),\n    height: Math.max(1, maxY - minY),\n  };\n}\n\nexport function getPointsFromBoundsWithRotation(\n  bounds: IBound,\n  getPoints: (bounds: IBound) => IVec[] = ({ x, y, w, h }: IBound) => [\n    // left-top\n    [x, y],\n    // right-top\n    [x + w, y],\n    // right-bottom\n    [x + w, y + h],\n    // left-bottom\n    [x, y + h],\n  ],\n  resPadding: [number, number] = [0, 0]\n): IVec[] {\n  const { rotate } = bounds;\n  let points = getPoints({\n    x: bounds.x - resPadding[1],\n    y: bounds.y - resPadding[0],\n    w: bounds.w + resPadding[1] * 2,\n    h: bounds.h + resPadding[0] * 2,\n  });\n\n  if (rotate) {\n    const { x, y, w, h } = bounds;\n    const cx = x + w / 2;\n    const cy = y + h / 2;\n\n    const m = new DOMMatrix()\n      .translateSelf(cx, cy)\n      .rotateSelf(rotate)\n      .translateSelf(-cx, -cy);\n\n    points = points.map(point => {\n      const { x, y } = new DOMPoint(...point).matrixTransform(m);\n      return [x, y];\n    });\n  }\n\n  return points;\n}\n\nexport function getQuadBoundsWithRotation(bounds: IBound): DOMRect {\n  const { x, y, w, h, rotate } = bounds;\n  const rect = new DOMRect(x, y, w, h);\n\n  if (!rotate) return rect;\n\n  return new DOMQuad(\n    ...getPointsFromBoundsWithRotation(bounds).map(\n      point => new DOMPoint(...point)\n    )\n  ).getBounds();\n}\n\nexport function getBoundsWithRotation(bounds: IBound): IBound {\n  const { x, y, width: w, height: h } = getQuadBoundsWithRotation(bounds);\n  return { x, y, w, h };\n}\n\nexport function lineIntersects(\n  sp: IVec,\n  ep: IVec,\n  sp2: IVec,\n  ep2: IVec,\n  infinite = false\n): IVec | null {\n  const v1 = Vec.sub(ep, sp);\n  const v2 = Vec.sub(ep2, sp2);\n  const cross = Vec.cpr(v1, v2);\n  // Avoid divisions by 0, and errors when getting too close to 0\n  if (almostEqual(cross, 0, MACHINE_EPSILON)) return null;\n  const d = Vec.sub(sp, sp2);\n  let u1 = Vec.cpr(v2, d) / cross;\n  const u2 = Vec.cpr(v1, d) / cross,\n    // Check the ranges of the u parameters if the line is not\n    // allowed to extend beyond the definition points, but\n    // compare with EPSILON tolerance over the [0, 1] bounds.\n    epsilon = /*#=*/ EPSILON,\n    uMin = -epsilon,\n    uMax = 1 + epsilon;\n\n  if (infinite || (uMin < u1 && u1 < uMax && uMin < u2 && u2 < uMax)) {\n    // Address the tolerance at the bounds by clipping to\n    // the actual range.\n    if (!infinite) {\n      u1 = clamp(u1, 0, 1);\n    }\n    return Vec.lrp(sp, ep, u1);\n  }\n\n  return null;\n}\n\nexport function polygonNearestPoint(points: IVec[], point: IVec) {\n  const len = points.length;\n  let rst: IVec;\n  let dis = Infinity;\n  for (let i = 0; i < len; i++) {\n    const p = points[i];\n    const p2 = points[(i + 1) % len];\n    const temp = Vec.nearestPointOnLineSegment(p, p2, point, true);\n    const curDis = Vec.dist(temp, point);\n    if (curDis < dis) {\n      dis = curDis;\n      rst = temp;\n    }\n  }\n  return rst!;\n}\n\nexport function polygonPointDistance(points: IVec[], point: IVec) {\n  const nearest = polygonNearestPoint(points, point);\n  return Vec.dist(nearest, point);\n}\n\nexport function rotatePoints<T extends IVec>(\n  points: T[],\n  center: IVec,\n  rotate: number\n): T[] {\n  const rad = toRadian(rotate);\n  return points.map(p => Vec.rotWith(p, center, rad)) as T[];\n}\n\nexport function rotatePoint(\n  point: [number, number],\n  center: IVec,\n  rotate: number\n): [number, number] {\n  const rad = toRadian(rotate);\n  return Vec.add(center, Vec.rot(Vec.sub(point, center), rad)) as [\n    number,\n    number,\n  ];\n}\n\nexport function toRadian(angle: number) {\n  return (angle * Math.PI) / 180;\n}\n\nexport function isPointOnLineSegment(point: IVec, line: IVec[]) {\n  const [sp, ep] = line;\n  const v1 = Vec.sub(point, sp);\n  const v2 = Vec.sub(point, ep);\n  return almostEqual(Vec.cpr(v1, v2), 0, 0.01) && Vec.dpr(v1, v2) <= 0;\n}\n\nexport function polygonGetPointTangent(points: IVec[], point: IVec): IVec {\n  const len = points.length;\n  for (let i = 0; i < len; i++) {\n    const p = points[i];\n    const p2 = points[(i + 1) % len];\n    if (isPointOnLineSegment(point, [p, p2])) {\n      return Vec.normalize(Vec.sub(p2, p));\n    }\n  }\n  return [0, 0];\n}\n\nexport function linePolygonIntersects(\n  sp: IVec,\n  ep: IVec,\n  points: IVec[]\n): PointLocation[] | null {\n  const result: PointLocation[] = [];\n  const len = points.length;\n\n  for (let i = 0; i < len; i++) {\n    const p = points[i];\n    const p2 = points[(i + 1) % len];\n    const rst = lineIntersects(sp, ep, p, p2);\n    if (rst) {\n      const v = new PointLocation(rst);\n      v.tangent = Vec.normalize(Vec.sub(p2, p));\n      result.push(v);\n    }\n  }\n\n  return result.length ? result : null;\n}\n\nexport function linePolylineIntersects(\n  sp: IVec,\n  ep: IVec,\n  points: IVec[]\n): PointLocation[] | null {\n  const result: PointLocation[] = [];\n  const len = points.length;\n\n  for (let i = 0; i < len - 1; i++) {\n    const p = points[i];\n    const p2 = points[i + 1];\n    const rst = lineIntersects(sp, ep, p, p2);\n    if (rst) {\n      result.push(new PointLocation(rst, Vec.normalize(Vec.sub(p2, p))));\n    }\n  }\n\n  return result.length ? result : null;\n}\n\nexport function polyLineNearestPoint(points: IVec[], point: IVec) {\n  const len = points.length;\n  let rst: IVec;\n  let dis = Infinity;\n  for (let i = 0; i < len - 1; i++) {\n    const p = points[i];\n    const p2 = points[i + 1];\n    const temp = Vec.nearestPointOnLineSegment(p, p2, point, true);\n    const curDis = Vec.dist(temp, point);\n    if (curDis < dis) {\n      dis = curDis;\n      rst = temp;\n    }\n  }\n  return rst!;\n}\n\nexport function isPointOnlines(\n  element: Bound,\n  points: readonly [number, number][],\n  rotate: number,\n  hitPoint: [number, number],\n  threshold: number\n): boolean {\n  // credit to Excalidraw hitTestFreeDrawElement\n\n  let x: number;\n  let y: number;\n\n  if (rotate === 0) {\n    x = hitPoint[0] - element.x;\n    y = hitPoint[1] - element.y;\n  } else {\n    // Counter-rotate the point around center before testing\n    const { minX, minY, maxX, maxY } = element;\n    const rotatedPoint = rotatePoint(\n      hitPoint,\n      [minX + (maxX - minX) / 2, minY + (maxY - minY) / 2],\n      -rotate\n    ) as [number, number];\n    x = rotatedPoint[0] - element.x;\n    y = rotatedPoint[1] - element.y;\n  }\n\n  let [A, B] = points;\n  let P: readonly [number, number];\n\n  // For freedraw dots\n  if (\n    distance2d(A[0], A[1], x, y) < threshold ||\n    distance2d(B[0], B[1], x, y) < threshold\n  ) {\n    return true;\n  }\n\n  // For freedraw lines\n  for (let i = 0; i < points.length; i++) {\n    const delta = [B[0] - A[0], B[1] - A[1]];\n    const length = Math.hypot(delta[1], delta[0]);\n\n    const U = [delta[0] / length, delta[1] / length];\n    const C = [x - A[0], y - A[1]];\n    const d = (C[0] * U[0] + C[1] * U[1]) / Math.hypot(U[1], U[0]);\n    P = [A[0] + U[0] * d, A[1] + U[1] * d];\n\n    const da = distance2d(P[0], P[1], A[0], A[1]);\n    const db = distance2d(P[0], P[1], B[0], B[1]);\n\n    P = db < da && da > length ? B : da < db && db > length ? A : P;\n\n    if (Math.hypot(y - P[1], x - P[0]) < threshold) {\n      return true;\n    }\n\n    A = B;\n    B = points[i + 1];\n  }\n\n  return false;\n}\n\nexport const distance2d = (x1: number, y1: number, x2: number, y2: number) => {\n  const xd = x2 - x1;\n  const yd = y2 - y1;\n  return Math.hypot(xd, yd);\n};\n\nfunction square(num: number) {\n  return num * num;\n}\n\nfunction sumSqr(v: IVec, w: IVec) {\n  return square(v[0] - w[0]) + square(v[1] - w[1]);\n}\n\nfunction distToSegmentSquared(p: IVec, v: IVec, w: IVec) {\n  const l2 = sumSqr(v, w);\n  if (l2 == 0) return sumSqr(p, v);\n  let t = ((p[0] - v[0]) * (w[0] - v[0]) + (p[1] - v[1]) * (w[1] - v[1])) / l2;\n\n  t = Math.max(0, Math.min(1, t));\n\n  return sumSqr(p, [v[0] + t * (w[0] - v[0]), v[1] + t * (w[1] - v[1])]);\n}\n\nfunction distToSegment(p: IVec, v: IVec, w: IVec) {\n  return Math.sqrt(distToSegmentSquared(p, v, w));\n}\n\nexport function isPointIn(a: IBound, x: number, y: number): boolean {\n  return a.x <= x && x <= a.x + a.w && a.y <= y && y <= a.y + a.h;\n}\n\nexport function intersects(a: IBound, b: IBound): boolean {\n  return (\n    a.x < b.x + b.w && a.x + a.w > b.x && a.y < b.y + b.h && a.y + a.h > b.y\n  );\n}\n\nexport function almostEqual(a: number, b: number, epsilon = 0.0001) {\n  return Math.abs(a - b) < epsilon;\n}\n\nexport function isVecZero(v: IVec) {\n  return v.every(n => isZero(n));\n}\n\nexport function isZero(x: number) {\n  return x >= -EPSILON && x <= EPSILON;\n}\n\nexport function pointAlmostEqual(a: IVec, b: IVec, _epsilon = 0.0001) {\n  return a.length === b.length && a.every((v, i) => almostEqual(v, b[i]));\n}\n\nexport function clamp(n: number, min: number, max?: number): number {\n  return Math.max(min, max !== undefined ? Math.min(n, max) : n);\n}\n\nexport function pointInEllipse(\n  A: IVec,\n  C: IVec,\n  rx: number,\n  ry: number,\n  rotation = 0\n): boolean {\n  const cos = Math.cos(rotation);\n  const sin = Math.sin(rotation);\n  const delta = Vec.sub(A, C);\n  const tdx = cos * delta[0] + sin * delta[1];\n  const tdy = sin * delta[0] - cos * delta[1];\n\n  return (tdx * tdx) / (rx * rx) + (tdy * tdy) / (ry * ry) <= 1;\n}\n\nexport function pointInPolygon(p: IVec, points: IVec[]): boolean {\n  let wn = 0; // winding number\n\n  points.forEach((a, i) => {\n    const b = points[(i + 1) % points.length];\n    if (a[1] <= p[1]) {\n      if (b[1] > p[1] && Vec.cross(a, b, p) > 0) {\n        wn += 1;\n      }\n    } else if (b[1] <= p[1] && Vec.cross(a, b, p) < 0) {\n      wn -= 1;\n    }\n  });\n\n  return wn !== 0;\n}\n\nexport function pointOnEllipse(\n  point: IVec,\n  rx: number,\n  ry: number,\n  threshold: number\n): boolean {\n  // slope of point\n  const t = point[1] / point[0];\n  const squaredX =\n    (square(rx) * square(ry)) / (square(rx) * square(t) + square(ry));\n  const squaredY =\n    (square(rx) * square(ry) - square(ry) * squaredX) / square(rx);\n\n  return (\n    Math.abs(\n      Math.sqrt(square(point[1]) + square(point[0])) -\n        Math.sqrt(squaredX + squaredY)\n    ) < threshold\n  );\n}\n\nexport function pointOnPolygonStoke(\n  p: IVec,\n  points: IVec[],\n  threshold: number\n): boolean {\n  for (let i = 0; i < points.length; ++i) {\n    const next = i + 1 === points.length ? 0 : i + 1;\n    if (distToSegment(p, points[i], points[next]) <= threshold) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nexport function getPolygonPathFromPoints(\n  points: IVec[],\n  closed = true\n): string {\n  const len = points.length;\n  if (len < 2) return ``;\n\n  const a = points[0];\n  const b = points[1];\n\n  let res = `M${a[0].toFixed(2)},${a[1].toFixed()}L${b[0].toFixed(2)},${b[1].toFixed()}`;\n\n  for (let i = 2; i < len; i++) {\n    const a = points[i];\n    res += `L${a[0].toFixed(2)},${a[1].toFixed()}`;\n  }\n\n  if (closed) res += 'Z';\n  return res;\n}\nexport function getSvgPathFromStroke(points: IVec[], closed = true): string {\n  const len = points.length;\n\n  if (len < 4) {\n    return ``;\n  }\n\n  let a = points[0];\n  let b = points[1];\n  const c = points[2];\n\n  let result = `M${a[0].toFixed(2)},${a[1].toFixed(2)} Q${b[0].toFixed(\n    2\n  )},${b[1].toFixed(2)} ${average(b[0], c[0]).toFixed(2)},${average(\n    b[1],\n    c[1]\n  ).toFixed(2)} T`;\n\n  for (let i = 2, max = len - 1; i < max; i++) {\n    a = points[i];\n    b = points[i + 1];\n    result += `${average(a[0], b[0]).toFixed(2)},${average(a[1], b[1]).toFixed(\n      2\n    )} `;\n  }\n\n  if (closed) {\n    result += 'Z';\n  }\n\n  return result;\n}\n\nfunction average(a: number, b: number): number {\n  return (a + b) / 2;\n}\n\n//reference https://www.xarg.org/book/computer-graphics/line-segment-ellipse-intersection/\nexport function lineEllipseIntersects(\n  A: IVec,\n  B: IVec,\n  C: IVec,\n  rx: number,\n  ry: number,\n  rad = 0\n) {\n  A = Vec.rot(Vec.sub(A, C), -rad);\n  B = Vec.rot(Vec.sub(B, C), -rad);\n\n  rx *= rx;\n  ry *= ry;\n\n  const rst: IVec[] = [];\n\n  const v = Vec.sub(B, A);\n\n  const a = rx * v[1] * v[1] + ry * v[0] * v[0];\n  const b = 2 * (rx * A[1] * v[1] + ry * A[0] * v[0]);\n  const c = rx * A[1] * A[1] + ry * A[0] * A[0] - rx * ry;\n\n  const D = b * b - 4 * a * c; // Discriminant\n\n  if (D >= 0) {\n    const sqrtD = Math.sqrt(D);\n    const t1 = (-b + sqrtD) / (2 * a);\n    const t2 = (-b - sqrtD) / (2 * a);\n\n    if (0 <= t1 && t1 <= 1)\n      rst.push(Vec.add(Vec.rot(Vec.add(Vec.mul(v, t1), A), rad), C));\n\n    if (0 <= t2 && t2 <= 1 && Math.abs(t1 - t2) > 1e-16)\n      rst.push(Vec.add(Vec.rot(Vec.add(Vec.mul(v, t2), A), rad), C));\n  }\n\n  if (rst.length === 0) return null;\n\n  return rst.map(v => {\n    const pl = new PointLocation(v);\n    const normalVector = Vec.uni(Vec.divV(Vec.sub(v, C), [rx * rx, ry * ry]));\n    pl.tangent = [-normalVector[1], normalVector[0]];\n    return pl;\n  });\n}\n\nexport function sign(number: number) {\n  return number > 0 ? 1 : -1;\n}\n\nexport function getPointFromBoundsWithRotation(\n  bounds: IBound,\n  point: IVec\n): IVec {\n  const { x, y, w, h, rotate } = bounds;\n\n  if (!rotate) return point;\n\n  const cx = x + w / 2;\n  const cy = y + h / 2;\n\n  const m = new DOMMatrix()\n    .translateSelf(cx, cy)\n    .rotateSelf(rotate)\n    .translateSelf(-cx, -cy);\n\n  const p = new DOMPoint(...point).matrixTransform(m);\n  return [p.x, p.y];\n}\n\nexport function normalizeDegAngle(angle: number) {\n  if (angle < 0) angle += 360;\n  angle %= 360;\n  return angle;\n}\n\nexport function toDegree(radian: number) {\n  return (radian * 180) / Math.PI;\n}\n\n// 0 means x axis, 1 means y axis\nexport function isOverlap(\n  line1: IVec[],\n  line2: IVec[],\n  axis: 0 | 1,\n  strict = true\n) {\n  const less = strict\n    ? (a: number, b: number) => a < b\n    : (a: number, b: number) => a <= b;\n  return !(\n    less(\n      Math.max(line1[0][axis], line1[1][axis]),\n      Math.min(line2[0][axis], line2[1][axis])\n    ) ||\n    less(\n      Math.max(line2[0][axis], line2[1][axis]),\n      Math.min(line1[0][axis], line1[1][axis])\n    )\n  );\n}\n\nexport function getCenterAreaBounds(bounds: IBound, ratio: number) {\n  const { x, y, w, h, rotate } = bounds;\n  const cx = x + w / 2;\n  const cy = y + h / 2;\n  const nw = w * ratio;\n  const nh = h * ratio;\n  return {\n    x: cx - nw / 2,\n    y: cy - nh / 2,\n    w: nw,\n    h: nh,\n    rotate,\n  };\n}\n"]}