{"version":3,"file":"assert.js","sourceRoot":"","sources":["../../src/utils/assert.ts"],"names":[],"mappings":"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","sourcesContent":["// https://stackoverflow.com/questions/31538010/test-if-a-variable-is-a-primitive-rather-than-an-object\nimport { ErrorCode } from '../exceptions/code.js';\nimport { LumenSuiteError } from '../exceptions/index.js';\n\nexport function isPrimitive(\n  a: unknown\n): a is null | undefined | boolean | number | string {\n  return a !== Object(a);\n}\n\nexport function assertType<T>(_: unknown): asserts _ is T {}\n\n/**\n * @deprecated Avoid using this util as escape hatch of error handling.\n * For non-framework code, please handle error in application level instead.\n */\nexport function assertExists<T>(\n  val: T | null | undefined,\n  message: string | Error = 'val does not exist',\n  errorCode = ErrorCode.ValueNotExists\n): asserts val is T {\n  if (val === null || val === undefined) {\n    if (message instanceof Error) {\n      throw message;\n    }\n    throw new LumenSuiteError(errorCode, message);\n  }\n}\n\nexport function assertNotExists<T>(\n  val: T | null | undefined,\n  message = 'val exists',\n  errorCode = ErrorCode.ValueNotExists\n): asserts val is null | undefined {\n  if (val !== null && val !== undefined) {\n    throw new LumenSuiteError(errorCode, message);\n  }\n}\n\nexport type Equals<X, Y> =\n  ///\n  (<T>() => T extends X ? 1 : 2) extends <T>() => T extends Y ? 1 : 2\n    ? true\n    : false;\n\ntype Allowed =\n  | unknown\n  | void\n  | null\n  | undefined\n  | boolean\n  | number\n  | string\n  | unknown[]\n  | object;\nexport function isEqual<T extends Allowed, U extends T>(\n  val: T,\n  expected: U\n): Equals<T, U> {\n  const a = isPrimitive(val);\n  const b = isPrimitive(expected);\n  if (a && b) {\n    if (!Object.is(val, expected)) {\n      return false as Equals<T, U>;\n    }\n  } else if (a !== b) {\n    return false as Equals<T, U>;\n  } else {\n    if (Array.isArray(val) && Array.isArray(expected)) {\n      if (val.length !== expected.length) {\n        return false as Equals<T, U>;\n      }\n      return val.every((x, i) => isEqual(x, expected[i])) as Equals<T, U>;\n    } else if (typeof val === 'object' && typeof expected === 'object') {\n      const obj1 = Object.entries(val as Record<string, unknown>);\n      const obj2 = Object.entries(expected as Record<string, unknown>);\n      if (obj1.length !== obj2.length) {\n        return false as Equals<T, U>;\n      }\n      return obj1.every((x, i) => isEqual(x, obj2[i])) as Equals<T, U>;\n    }\n  }\n  return true as Equals<T, U>;\n}\nexport function assertEquals<T extends Allowed, U extends T>(\n  val: T,\n  expected: U,\n  message = 'val is not same as expected',\n  errorCode = ErrorCode.ValueNotEqual\n): asserts val is U {\n  if (!isEqual(val, expected)) {\n    throw new LumenSuiteError(errorCode, message);\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ntype Class<T> = new (...args: any[]) => T;\n\nexport function assertInstanceOf<T>(\n  val: unknown,\n  expected: Class<T>,\n  message = 'val is not instance of expected',\n  errorCode = ErrorCode.ValueNotInstanceOf\n): asserts val is T {\n  if (!(val instanceof expected)) {\n    throw new LumenSuiteError(errorCode, message);\n  }\n}\n"]}