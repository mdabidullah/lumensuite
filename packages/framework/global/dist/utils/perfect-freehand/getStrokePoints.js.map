{"version":3,"file":"getStrokePoints.js","sourceRoot":"","sources":["../../../src/utils/perfect-freehand/getStrokePoints.ts"],"names":[],"mappings":"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","sourcesContent":["import type { IVec, IVec3 } from '@lumensuite/global/utils';\n\nimport type { StrokeOptions, StrokePoint } from './types.js';\n\nimport { add, dist, isEqual, lrp, sub, uni } from './vec.js';\n\n/**\n * ## getStrokePoints\n * @description Get an array of points as objects with an adjusted point, pressure, vector, distance, and runningLength.\n * @param points An array of points (as `[x, y, pressure]` or `{x, y, pressure}`). Pressure is optional in both cases.\n * @param options (optional) An object with options.\n * @param options.size\tThe base size (diameter) of the stroke.\n * @param options.thinning The effect of pressure on the stroke's size.\n * @param options.smoothing\tHow much to soften the stroke's edges.\n * @param options.easing\tAn easing function to apply to each point's pressure.\n * @param options.simulatePressure Whether to simulate pressure based on velocity.\n * @param options.start Cap, taper and easing for the start of the line.\n * @param options.end Cap, taper and easing for the end of the line.\n * @param options.last Whether to handle the points as a completed stroke.\n */\nexport function getStrokePoints<\n  T extends IVec | IVec3,\n  K extends { x: number; y: number; pressure?: number },\n>(points: (T | K)[], options = {} as StrokeOptions): StrokePoint[] {\n  const { streamline = 0.5, size = 16, last: isComplete = false } = options;\n\n  // If we don't have any points, return an empty array.\n  if (points.length === 0) return [];\n\n  // Find the interpolation level between points.\n  const t = 0.15 + (1 - streamline) * 0.85;\n\n  // Whatever the input is, make sure that the points are in number[][].\n  let pts: (IVec3 | IVec)[] = Array.isArray(points[0])\n    ? (points as T[])\n    : (points as K[]).map(\n        ({ x, y, pressure = 0.5 }) => [x, y, pressure] as IVec3\n      );\n\n  // Add extra points between the two, to help avoid \"dash\" lines\n  // for strokes with tapered start and ends. Don't mutate the\n  // input array!\n  if (pts.length === 2) {\n    const last = pts[1];\n    pts = pts.slice(0, -1);\n    for (let i = 1; i < 5; i++) {\n      pts.push(lrp(pts[0] as IVec, last as IVec, i / 4));\n    }\n  }\n\n  // If there's only one point, add another point at a 1pt offset.\n  // Don't mutate the input array!\n  if (pts.length === 1) {\n    pts = [\n      ...pts,\n      [...add(pts[0] as IVec, [1, 1]), ...pts[0].slice(2)] as IVec,\n    ];\n  }\n\n  // The strokePoints array will hold the points for the stroke.\n  // Start it out with the first point, which needs no adjustment.\n  const strokePoints: StrokePoint[] = [\n    {\n      point: [pts[0][0], pts[0][1]],\n      pressure: (pts[0][2] ?? -1) >= 0 ? pts[0][2]! : 0.25,\n      vector: [1, 1],\n      distance: 0,\n      runningLength: 0,\n    },\n  ];\n\n  // A flag to see whether we've already reached out minimum length\n  let hasReachedMinimumLength = false;\n\n  // We use the runningLength to keep track of the total distance\n  let runningLength = 0;\n\n  // We're set this to the latest point, so we can use it to calculate\n  // the distance and vector of the next point.\n  let prev = strokePoints[0];\n\n  const max = pts.length - 1;\n\n  // Iterate through all of the points, creating StrokePoints.\n  for (let i = 1; i < pts.length; i++) {\n    const point =\n      isComplete && i === max\n        ? // If we're at the last point, and `options.last` is true,\n          // then add the actual input point.\n          (pts[i].slice(0, 2) as IVec)\n        : // Otherwise, using the t calculated from the streamline\n          // option, interpolate a new point between the previous\n          // point the current point.\n          lrp(prev.point, pts[i] as IVec, t);\n\n    // If the new point is the same as the previous point, skip ahead.\n    if (isEqual(prev.point, point)) continue;\n\n    // How far is the new point from the previous point?\n    const distance = dist(point, prev.point);\n\n    // Add this distance to the total \"running length\" of the line.\n    runningLength += distance;\n\n    // At the start of the line, we wait until the new point is a\n    // certain distance away from the original point, to avoid noise\n    if (i < max && !hasReachedMinimumLength) {\n      if (runningLength < size) continue;\n      hasReachedMinimumLength = true;\n      // TODO: Backfill the missing points so that tapering works correctly.\n    }\n    // Create a new strokepoint (it will be the new \"previous\" one).\n    prev = {\n      // The adjusted point\n      point,\n      // The input pressure (or .5 if not specified)\n      pressure: (pts[i][2] ?? -1) >= 0 ? pts[i][2]! : 0.5,\n      // The vector from the current point to the previous point\n      vector: uni(sub(prev.point, point)),\n      // The distance between the current point and the previous point\n      distance,\n      // The total distance so far\n      runningLength,\n    };\n\n    // Push it to the strokePoints array.\n    strokePoints.push(prev);\n  }\n\n  // Set the vector of the first point to be the same as the second point.\n  strokePoints[0].vector = strokePoints[1]?.vector || [0, 0];\n\n  return strokePoints;\n}\n"]}