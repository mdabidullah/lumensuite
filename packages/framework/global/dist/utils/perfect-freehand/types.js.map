{"version":3,"file":"types.js","sourceRoot":"","sources":["../../../src/utils/perfect-freehand/types.ts"],"names":[],"mappings":"","sourcesContent":["import type { IVec } from '@blocksuite/global/utils';\n\n/**\n * The options object for `getStroke` or `getStrokePoints`.\n * @param points An array of points (as `[x, y, pressure]` or `{x, y, pressure}`). Pressure is optional in both cases.\n * @param options (optional) An object with options.\n * @param options.size\tThe base size (diameter) of the stroke.\n * @param options.thinning The effect of pressure on the stroke's size.\n * @param options.smoothing\tHow much to soften the stroke's edges.\n * @param options.easing\tAn easing function to apply to each point's pressure.\n * @param options.simulatePressure Whether to simulate pressure based on velocity.\n * @param options.start Cap, taper and easing for the start of the line.\n * @param options.end Cap, taper and easing for the end of the line.\n * @param options.last Whether to handle the points as a completed stroke.\n */\nexport interface StrokeOptions {\n  size?: number;\n  thinning?: number;\n  smoothing?: number;\n  streamline?: number;\n  easing?: (pressure: number) => number;\n  simulatePressure?: boolean;\n  start?: {\n    cap?: boolean;\n    taper?: number | boolean;\n    easing?: (distance: number) => number;\n  };\n  end?: {\n    cap?: boolean;\n    taper?: number | boolean;\n    easing?: (distance: number) => number;\n  };\n  // Whether to handle the points as a completed stroke.\n  last?: boolean;\n}\n\n/**\n * The points returned by `getStrokePoints`, and the input for `getStrokeOutlinePoints`.\n */\nexport interface StrokePoint {\n  point: IVec;\n  pressure: number;\n  distance: number;\n  vector: IVec;\n  runningLength: number;\n}\n"]}