{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/exceptions/index.ts"],"names":[],"mappings":"AAEA,MAAM,OAAO,eAAgB,SAAQ,KAAK;IAKxC,YAAY,IAAe,EAAE,OAAe;QAC1C,KAAK,CAAC,OAAO,CAAC,CAAC;QACf,IAAI,CAAC,IAAI,GAAG,iBAAiB,CAAC;QAC9B,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,OAAO,GAAG,IAAI,IAAI,KAAK,CAAC;IAC/B,CAAC;CACF;AAED,MAAM,UAAU,WAAW,CAAC,KAAY;IACtC,IAAI,CAAC,CAAC,KAAK,YAAY,eAAe,CAAC,EAAE,CAAC;QACxC,MAAM,KAAK,CAAC;IACd,CAAC;IAED,IAAI,KAAK,CAAC,OAAO,EAAE,CAAC;QAClB,MAAM,IAAI,KAAK,CACb,gFAAgF,EAChF,EAAE,KAAK,EAAE,KAAK,EAAE,CACjB,CAAC;IACJ,CAAC;IAED,OAAO,CAAC,KAAK,CACX,yGAAyG,CAC1G,CAAC;IACF,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;AAC7B,CAAC;AAED,cAAc,WAAW,CAAC","sourcesContent":["import type { ErrorCode } from './code.js';\n\nexport class BlockSuiteError extends Error {\n  code: ErrorCode;\n\n  isFatal: boolean;\n\n  constructor(code: ErrorCode, message: string) {\n    super(message);\n    this.name = 'BlockSuiteError';\n    this.code = code;\n    this.isFatal = code >= 10000;\n  }\n}\n\nexport function handleError(error: Error) {\n  if (!(error instanceof BlockSuiteError)) {\n    throw error;\n  }\n\n  if (error.isFatal) {\n    throw new Error(\n      'A fatal error for BlockSuite occurs, please contact the team if you find this.',\n      { cause: error }\n    );\n  }\n\n  console.error(\n    \"A runtime error for BlockSuite occurs, you can ignore this error if it won't break the user experience.\"\n  );\n  console.error(error.stack);\n}\n\nexport * from './code.js';\n"]}