{"version":3,"file":"type.js","sourceRoot":"","sources":["../../src/transformer/type.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,CAAC,EAAE,MAAM,KAAK,CAAC;AAaxB,MAAM,CAAC,MAAM,mBAAmB,GAA6B,CAAC,CAAC,MAAM,CAAC;IACpE,IAAI,EAAE,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC;IACxB,EAAE,EAAE,CAAC,CAAC,MAAM,EAAE;IACd,OAAO,EAAE,CAAC,CAAC,MAAM,EAAE;IACnB,OAAO,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE;IAC9B,KAAK,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC;IAC5B,QAAQ,EAAE,CAAC,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,mBAAmB,CAAC,KAAK,EAAE,CAAC;CACpD,CAAC,CAAC;AAWH,MAAM,CAAC,MAAM,mBAAmB,GAA6B,CAAC,CAAC,MAAM,CAAC;IACpE,IAAI,EAAE,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC;IACxB,OAAO,EAAE,mBAAmB,CAAC,KAAK,EAAE;IACpC,WAAW,EAAE,CAAC,CAAC,MAAM,EAAE;IACvB,gBAAgB,EAAE,CAAC,CAAC,MAAM,EAAE;IAC5B,WAAW,EAAE,CAAC,CAAC,MAAM,EAAE;IACvB,MAAM,EAAE,CAAC,CAAC,MAAM,EAAE;CACnB,CAAC,CAAC;AAUH,MAAM,CAAC,MAAM,4BAA4B,GACvC,CAAC,CAAC,MAAM,CAAC;IACP,EAAE,EAAE,CAAC,CAAC,MAAM,EAAE;IACd,IAAI,EAAE,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC;IACvB,WAAW,EAAE,CAAC,CAAC,MAAM,EAAE;IACvB,gBAAgB,EAAE,CAAC,CAAC,MAAM,EAAE;IAC5B,UAAU,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC;CAC9B,CAAC,CAAC;AAQL,MAAM,aAAa,GAAG,CAAC,CAAC,MAAM,CAAC;IAC7B,EAAE,EAAE,CAAC,CAAC,MAAM,EAAE;IACd,KAAK,EAAE,CAAC,CAAC,MAAM,EAAE;IACjB,UAAU,EAAE,CAAC,CAAC,MAAM,EAAE;IACtB,IAAI,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC;CAC1B,CAAC,CAAC;AAEH,MAAM,CAAC,MAAM,iBAAiB,GAA2B,CAAC,CAAC,MAAM,CAAC;IAChE,IAAI,EAAE,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC;IACvB,IAAI,EAAE,aAAa;IACnB,MAAM,EAAE,mBAAmB;CAC5B,CAAC,CAAC","sourcesContent":["import { z } from 'zod';\n\nimport type { DocMeta, DocsPropertiesMeta } from '../store/meta.js';\n\nexport type BlockSnapshot = {\n  type: 'block';\n  id: string;\n  flavour: string;\n  version?: number;\n  props: Record<string, unknown>;\n  children: BlockSnapshot[];\n};\n\nexport const BlockSnapshotSchema: z.ZodType<BlockSnapshot> = z.object({\n  type: z.literal('block'),\n  id: z.string(),\n  flavour: z.string(),\n  version: z.number().optional(),\n  props: z.record(z.unknown()),\n  children: z.lazy(() => BlockSnapshotSchema.array()),\n});\n\nexport type SliceSnapshot = {\n  type: 'slice';\n  content: BlockSnapshot[];\n  pageVersion: number;\n  workspaceVersion: number;\n  workspaceId: string;\n  pageId: string;\n};\n\nexport const SliceSnapshotSchema: z.ZodType<SliceSnapshot> = z.object({\n  type: z.literal('slice'),\n  content: BlockSnapshotSchema.array(),\n  pageVersion: z.number(),\n  workspaceVersion: z.number(),\n  workspaceId: z.string(),\n  pageId: z.string(),\n});\n\nexport type CollectionInfoSnapshot = {\n  id: string;\n  type: 'info';\n  pageVersion: number;\n  workspaceVersion: number;\n  properties: DocsPropertiesMeta;\n};\n\nexport const CollectionInfoSnapshotSchema: z.ZodType<CollectionInfoSnapshot> =\n  z.object({\n    id: z.string(),\n    type: z.literal('info'),\n    pageVersion: z.number(),\n    workspaceVersion: z.number(),\n    properties: z.record(z.any()),\n  });\n\nexport type DocSnapshot = {\n  type: 'page';\n  meta: DocMeta;\n  blocks: BlockSnapshot;\n};\n\nconst DocMetaSchema = z.object({\n  id: z.string(),\n  title: z.string(),\n  createDate: z.number(),\n  tags: z.array(z.string()),\n});\n\nexport const DocSnapshotSchema: z.ZodType<DocSnapshot> = z.object({\n  type: z.literal('page'),\n  meta: DocMetaSchema,\n  blocks: BlockSnapshotSchema,\n});\n"]}