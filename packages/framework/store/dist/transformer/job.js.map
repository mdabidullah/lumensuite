{"version":3,"file":"job.js","sourceRoot":"","sources":["../../src/transformer/job.ts"],"names":[],"mappings":"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","sourcesContent":["import { LumenSuiteError, ErrorCode } from '@lumensuite/global/exceptions';\nimport { Slot } from '@lumensuite/global/utils';\n\nimport type { BlockModel, BlockSchemaType } from '../schema/index.js';\nimport type { Doc, DocCollection, DocMeta } from '../store/index.js';\nimport type {\n  BeforeExportPayload,\n  BeforeImportPayload,\n  FinalPayload,\n  JobMiddleware,\n  JobSlots,\n} from './middleware.js';\nimport type {\n  BlockSnapshot,\n  CollectionInfoSnapshot,\n  DocSnapshot,\n  SliceSnapshot,\n} from './type.js';\n\nimport { AssetsManager } from './assets.js';\nimport { BaseBlockTransformer } from './base.js';\nimport { type DraftModel, toDraftModel } from './draft.js';\nimport { Slice } from './slice.js';\nimport {\n  BlockSnapshotSchema,\n  CollectionInfoSnapshotSchema,\n  DocSnapshotSchema,\n  SliceSnapshotSchema,\n} from './type.js';\n\nexport type JobConfig = {\n  collection: DocCollection;\n  middlewares?: JobMiddleware[];\n};\n\nexport class Job {\n  private readonly _adapterConfigs = new Map<string, string>();\n\n  private readonly _assetsManager: AssetsManager;\n\n  private _batchCounter = 0;\n\n  private readonly _collection: DocCollection;\n\n  private readonly _pendingOperations: (() => void)[] = [];\n\n  private readonly _slots: JobSlots = {\n    beforeImport: new Slot<BeforeImportPayload>(),\n    afterImport: new Slot<FinalPayload>(),\n    beforeExport: new Slot<BeforeExportPayload>(),\n    afterExport: new Slot<FinalPayload>(),\n  };\n\n  private _unblockTimer?: ReturnType<typeof setTimeout>;\n\n  blockToSnapshot = async (\n    model: DraftModel\n  ): Promise<BlockSnapshot | undefined> => {\n    try {\n      const snapshot = await this._blockToSnapshot(model);\n      BlockSnapshotSchema.parse(snapshot);\n\n      return snapshot;\n    } catch (error) {\n      console.error(`Error when transforming block to snapshot:`);\n      console.error(error);\n      return;\n    }\n  };\n\n  collectionInfoToSnapshot = (): CollectionInfoSnapshot | undefined => {\n    try {\n      this._slots.beforeExport.emit({\n        type: 'info',\n      });\n      const collectionMeta = this._getCollectionMeta();\n      const snapshot: CollectionInfoSnapshot = {\n        type: 'info',\n        id: this._collection.id,\n        ...collectionMeta,\n      };\n      this._slots.afterExport.emit({\n        type: 'info',\n        snapshot,\n      });\n      CollectionInfoSnapshotSchema.parse(snapshot);\n\n      return snapshot;\n    } catch (error) {\n      console.error(`Error when transforming collection info to snapshot:`);\n      console.error(error);\n      return;\n    }\n  };\n\n  docToSnapshot = async (doc: Doc): Promise<DocSnapshot | undefined> => {\n    try {\n      this._slots.beforeExport.emit({\n        type: 'page',\n        page: doc,\n      });\n      const rootModel = doc.root;\n      const meta = this._exportDocMeta(doc);\n      if (!rootModel) {\n        throw new LumenSuiteError(\n          ErrorCode.TransformerError,\n          'Root block not found in doc'\n        );\n      }\n      const blocks = await this.blockToSnapshot(rootModel);\n      if (!blocks) {\n        return;\n      }\n      const docSnapshot: DocSnapshot = {\n        type: 'page',\n        meta,\n        blocks,\n      };\n      this._slots.afterExport.emit({\n        type: 'page',\n        page: doc,\n        snapshot: docSnapshot,\n      });\n      DocSnapshotSchema.parse(docSnapshot);\n\n      return docSnapshot;\n    } catch (error) {\n      console.error(`Error when transforming doc to snapshot:`);\n      console.error(error);\n      return;\n    }\n  };\n\n  sliceToSnapshot = async (\n    slice: Slice\n  ): Promise<SliceSnapshot | undefined> => {\n    try {\n      this._slots.beforeExport.emit({\n        type: 'slice',\n        slice,\n      });\n      const { content, pageVersion, workspaceVersion, pageId, workspaceId } =\n        slice.data;\n      const contentSnapshot = [];\n      for (const block of content) {\n        const blockSnapshot = await this.blockToSnapshot(block);\n        if (!blockSnapshot) {\n          return;\n        }\n        contentSnapshot.push(blockSnapshot);\n      }\n      const snapshot: SliceSnapshot = {\n        type: 'slice',\n        workspaceId,\n        pageId,\n        pageVersion,\n        workspaceVersion,\n        content: contentSnapshot,\n      };\n      this._slots.afterExport.emit({\n        type: 'slice',\n        slice,\n        snapshot,\n      });\n      SliceSnapshotSchema.parse(snapshot);\n\n      return snapshot;\n    } catch (error) {\n      console.error(`Error when transforming slice to snapshot:`);\n      console.error(error);\n      return;\n    }\n  };\n\n  snapshotToBlock = async (\n    snapshot: BlockSnapshot,\n    doc: Doc,\n    parent?: string,\n    index?: number\n  ): Promise<BlockModel | undefined> => {\n    try {\n      BlockSnapshotSchema.parse(snapshot);\n      const model = await this._batchSnapshotToBlock(\n        snapshot,\n        doc,\n        parent,\n        index\n      );\n\n      return model;\n    } catch (error) {\n      console.error(`Error when transforming snapshot to block:`);\n      console.error(error);\n      return;\n    }\n  };\n\n  snapshotToDoc = async (snapshot: DocSnapshot): Promise<Doc | undefined> => {\n    try {\n      this._slots.beforeImport.emit({\n        type: 'page',\n        snapshot,\n      });\n      DocSnapshotSchema.parse(snapshot);\n      const { meta, blocks } = snapshot;\n      const doc = this._collection.createDoc({ id: meta.id });\n      doc.load();\n      await this.snapshotToBlock(blocks, doc);\n      this._slots.afterImport.emit({\n        type: 'page',\n        snapshot,\n        page: doc,\n      });\n\n      return doc;\n    } catch (error) {\n      console.error(`Error when transforming snapshot to doc:`);\n      console.error(error);\n      return;\n    }\n  };\n\n  snapshotToModelData = async (snapshot: BlockSnapshot) => {\n    try {\n      const { children, flavour, props, id } = snapshot;\n\n      const schema = this._getSchema(flavour);\n      const snapshotLeaf = {\n        id,\n        flavour,\n        props,\n      };\n      const transformer = this._getTransformer(schema);\n      const modelData = await transformer.fromSnapshot({\n        json: snapshotLeaf,\n        assets: this._assetsManager,\n        children,\n      });\n\n      return modelData;\n    } catch (error) {\n      console.error(`Error when transforming snapshot to model data:`);\n      console.error(error);\n      return;\n    }\n  };\n\n  snapshotToSlice = async (\n    snapshot: SliceSnapshot,\n    doc: Doc,\n    parent?: string,\n    index?: number\n  ): Promise<Slice | undefined> => {\n    try {\n      this._slots.beforeImport.emit({\n        type: 'slice',\n        snapshot,\n      });\n      SliceSnapshotSchema.parse(snapshot);\n      const { content, pageVersion, workspaceVersion, workspaceId, pageId } =\n        snapshot;\n      const contentBlocks: BlockModel[] = [];\n      for (const [i, block] of content.entries()) {\n        contentBlocks.push(\n          await this._batchSnapshotToBlock(block, doc, parent, (index ?? 0) + i)\n        );\n      }\n      const slice = new Slice({\n        content: contentBlocks.map(block => toDraftModel(block)),\n        pageVersion,\n        workspaceVersion,\n        workspaceId,\n        pageId,\n      });\n      this._slots.afterImport.emit({\n        type: 'slice',\n        snapshot,\n        slice,\n      });\n\n      return slice;\n    } catch (error) {\n      console.error(`Error when transforming snapshot to slice:`);\n      console.error(error);\n      return;\n    }\n  };\n\n  walk = (snapshot: DocSnapshot, callback: (block: BlockSnapshot) => void) => {\n    const walk = (block: BlockSnapshot) => {\n      try {\n        callback(block);\n      } catch (error) {\n        console.error(`Error when walking snapshot:`);\n        console.error(error);\n      }\n\n      if (block.children) {\n        block.children.forEach(walk);\n      }\n    };\n\n    walk(snapshot.blocks);\n  };\n\n  get adapterConfigs() {\n    return this._adapterConfigs;\n  }\n\n  get assets() {\n    return this._assetsManager.getAssets();\n  }\n\n  get assetsManager() {\n    return this._assetsManager;\n  }\n\n  get collection() {\n    return this._collection;\n  }\n\n  constructor({ collection, middlewares = [] }: JobConfig) {\n    this._collection = collection;\n    this._assetsManager = new AssetsManager({ blob: collection.blobSync });\n\n    middlewares.forEach(middleware => {\n      middleware({\n        slots: this._slots,\n        assetsManager: this._assetsManager,\n        collection: this._collection,\n        adapterConfigs: this._adapterConfigs,\n      });\n    });\n  }\n\n  private _batchSnapshotToBlock(\n    snapshot: BlockSnapshot,\n    doc: Doc,\n    parent?: string,\n    index?: number\n  ) {\n    return new Promise<BlockModel>(resolve => {\n      if (this._batchCounter < 100) {\n        resolve(this._snapshotToBlock(snapshot, doc, parent, index));\n      } else {\n        // This will block the caller function\n        // so that no further operations can be added to the queue.\n        // Example:\n        // for (const snapshot of snapshots) {\n        //   // Block here as it is waiting for the promise to resolve.\n        //   await job.snapshotToBlock(snapshot, doc, id);\n        // }\n        this._pendingOperations.push(() =>\n          resolve(this._snapshotToBlock(snapshot, doc, parent, index))\n        );\n      }\n      this._batchCounter++;\n      const unblock = () => {\n        // There should only be one operation in the queue\n        // as we should create new jobs for each events.\n        // However, we still need to loop through the list\n        // to avoid potential bugs.\n        while (this._pendingOperations.length > 0) {\n          this._pendingOperations.shift()?.();\n        }\n        this._unblockTimer = undefined;\n        this._batchCounter = 0;\n      };\n      clearTimeout(this._unblockTimer);\n      this._unblockTimer = setTimeout(unblock, 10);\n    });\n  }\n\n  private async _blockToSnapshot(model: DraftModel): Promise<BlockSnapshot> {\n    this._slots.beforeExport.emit({\n      type: 'block',\n      model,\n    });\n    const schema = this._getSchema(model.flavour);\n    const transformer = this._getTransformer(schema);\n    const snapshotLeaf = await transformer.toSnapshot({\n      model,\n      assets: this._assetsManager,\n    });\n    const children = await Promise.all(\n      model.children.map(child => {\n        return this._blockToSnapshot(child);\n      })\n    );\n    const snapshot: BlockSnapshot = {\n      type: 'block',\n      ...snapshotLeaf,\n      children,\n    };\n    this._slots.afterExport.emit({\n      type: 'block',\n      model,\n      snapshot,\n    });\n\n    return snapshot;\n  }\n\n  private _exportDocMeta(doc: Doc): DocSnapshot['meta'] {\n    const docMeta = doc.meta;\n\n    if (!docMeta) {\n      throw new LumenSuiteError(\n        ErrorCode.TransformerError,\n        'Doc meta not found'\n      );\n    }\n    return {\n      id: docMeta.id,\n      title: docMeta.title,\n      createDate: docMeta.createDate,\n      tags: [], // for backward compatibility\n    };\n  }\n\n  private _getCollectionMeta() {\n    const { meta } = this._collection;\n    const { pageVersion, workspaceVersion, docs } = meta;\n    if (!pageVersion) {\n      throw new LumenSuiteError(\n        ErrorCode.TransformerError,\n        'Page version not found'\n      );\n    }\n    if (!workspaceVersion) {\n      throw new LumenSuiteError(\n        ErrorCode.TransformerError,\n        'Workspace version not found'\n      );\n    }\n    if (!docs) {\n      throw new LumenSuiteError(ErrorCode.TransformerError, 'Docs not found');\n    }\n    return {\n      pageVersion,\n      workspaceVersion,\n      properties: {}, // for backward compatibility\n      pages: JSON.parse(JSON.stringify(docs)) as DocMeta[],\n    };\n  }\n\n  private _getSchema(flavour: string) {\n    const schema = this._collection.schema.flavourSchemaMap.get(flavour);\n    if (!schema) {\n      throw new LumenSuiteError(\n        ErrorCode.TransformerError,\n        `Flavour schema not found for ${flavour}`\n      );\n    }\n    return schema;\n  }\n\n  private _getTransformer(schema: BlockSchemaType) {\n    return schema.transformer?.() ?? new BaseBlockTransformer();\n  }\n\n  private async _snapshotToBlock(\n    snapshot: BlockSnapshot,\n    doc: Doc,\n    parent?: string,\n    index?: number\n  ) {\n    this._slots.beforeImport.emit({\n      type: 'block',\n      snapshot,\n      parent,\n      index,\n    });\n    const { children, flavour, props, id } = snapshot;\n\n    const schema = this._getSchema(flavour);\n    const snapshotLeaf = {\n      id,\n      flavour,\n      props,\n    };\n    const transformer = this._getTransformer(schema);\n    const modelData = await transformer.fromSnapshot({\n      json: snapshotLeaf,\n      assets: this._assetsManager,\n      children,\n    });\n\n    const nextTick =\n      typeof window !== 'undefined'\n        ? window.requestAnimationFrame\n        : setImmediate;\n    await new Promise(resolve => nextTick(() => resolve(undefined)));\n    doc.addBlock(\n      modelData.flavour as LumenSuite.Flavour,\n      { ...modelData.props, id: modelData.id },\n      parent,\n      index\n    );\n\n    for (const [index, child] of children.entries()) {\n      await this._batchSnapshotToBlock(child, doc, id, index);\n    }\n\n    const model = doc.getBlockById(id);\n    if (!model) {\n      throw new LumenSuiteError(\n        ErrorCode.TransformerError,\n        `Block not found by id ${id}`\n      );\n    }\n    this._slots.afterImport.emit({\n      type: 'block',\n      snapshot,\n      model,\n      parent,\n      index,\n    });\n\n    return model;\n  }\n\n  reset() {\n    this._assetsManager.cleanup();\n  }\n}\n"]}