{"version":3,"file":"base.js","sourceRoot":"","sources":["../../src/transformer/base.ts"],"names":[],"mappings":"AAKA,OAAO,EAAE,kBAAkB,EAAE,MAAM,oBAAoB,CAAC;AACxD,OAAO,EAAE,QAAQ,EAAE,MAAM,EAAE,MAAM,WAAW,CAAC;AAyB7C,MAAM,OAAO,oBAAoB;IAAjC;QACY,cAAS,GAAuB,kBAAkB,CAAC;IAkD/D,CAAC;IAhDW,kBAAkB,CAAC,SAAkC;QAC7D,OAAO,MAAM,CAAC,WAAW,CACvB,MAAM,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,KAAK,CAAC,EAAE,EAAE;YAC7C,OAAO,CAAC,GAAG,EAAE,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;QAChC,CAAC,CAAC,CACM,CAAC;IACb,CAAC;IAES,gBAAgB,CAAC,KAAiB;QAC1C,OAAO,MAAM,CAAC,WAAW,CACvB,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE;YACnB,MAAM,KAAK,GAAG,KAAK,CAAC,GAAyB,CAAC,CAAC;YAC/C,OAAO,CAAC,GAAG,EAAE,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;QAC9B,CAAC,CAAC,CACH,CAAC;IACJ,CAAC;IAED,YAAY,CAAC,EACX,IAAI,GACgB;QAGpB,MAAM,EAAE,OAAO,EAAE,EAAE,EAAE,OAAO,EAAE,KAAK,EAAE,MAAM,EAAE,GAAG,IAAI,CAAC;QAErD,MAAM,KAAK,GAAG,IAAI,CAAC,kBAAkB,CAAC,MAAM,CAAC,CAAC;QAE9C,OAAO;YACL,EAAE;YACF,OAAO;YACP,OAAO,EAAE,OAAO,IAAI,CAAC,CAAC;YACtB,KAAK;SACN,CAAC;IACJ,CAAC;IAED,UAAU,CAAC,EACT,KAAK,GACoB;QACzB,MAAM,EAAE,EAAE,EAAE,OAAO,EAAE,OAAO,EAAE,GAAG,KAAK,CAAC;QAEvC,MAAM,KAAK,GAAG,IAAI,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC;QAE3C,OAAO;YACL,EAAE;YACF,OAAO;YACP,OAAO;YACP,KAAK;SACN,CAAC;IACJ,CAAC;CACF","sourcesContent":["import type { BlockModel, InternalPrimitives } from '../schema/index.js';\nimport type { AssetsManager } from './assets.js';\nimport type { DraftModel } from './draft.js';\nimport type { BlockSnapshot } from './type.js';\n\nimport { internalPrimitives } from '../schema/index.js';\nimport { fromJSON, toJSON } from './json.js';\n\ntype BlockSnapshotLeaf = Pick<\n  BlockSnapshot,\n  'id' | 'flavour' | 'props' | 'version'\n>;\n\nexport type FromSnapshotPayload = {\n  json: BlockSnapshotLeaf;\n  assets: AssetsManager;\n  children: BlockSnapshot[];\n};\n\nexport type ToSnapshotPayload<Props extends object> = {\n  model: DraftModel<BlockModel<Props>>;\n  assets: AssetsManager;\n};\n\nexport type SnapshotReturn<Props extends object> = {\n  id: string;\n  flavour: string;\n  version: number;\n  props: Props;\n};\n\nexport class BaseBlockTransformer<Props extends object = object> {\n  protected _internal: InternalPrimitives = internalPrimitives;\n\n  protected _propsFromSnapshot(propsJson: Record<string, unknown>) {\n    return Object.fromEntries(\n      Object.entries(propsJson).map(([key, value]) => {\n        return [key, fromJSON(value)];\n      })\n    ) as Props;\n  }\n\n  protected _propsToSnapshot(model: DraftModel) {\n    return Object.fromEntries(\n      model.keys.map(key => {\n        const value = model[key as keyof typeof model];\n        return [key, toJSON(value)];\n      })\n    );\n  }\n\n  fromSnapshot({\n    json,\n  }: FromSnapshotPayload):\n    | Promise<SnapshotReturn<Props>>\n    | SnapshotReturn<Props> {\n    const { flavour, id, version, props: _props } = json;\n\n    const props = this._propsFromSnapshot(_props);\n\n    return {\n      id,\n      flavour,\n      version: version ?? -1,\n      props,\n    };\n  }\n\n  toSnapshot({\n    model,\n  }: ToSnapshotPayload<Props>): Promise<BlockSnapshotLeaf> | BlockSnapshotLeaf {\n    const { id, flavour, version } = model;\n\n    const props = this._propsToSnapshot(model);\n\n    return {\n      id,\n      flavour,\n      version,\n      props,\n    };\n  }\n}\n"]}