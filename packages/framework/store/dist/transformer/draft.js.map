{"version":3,"file":"draft.js","sourceRoot":"","sources":["../../src/transformer/draft.ts"],"names":[],"mappings":"AAoBA,MAAM,UAAU,YAAY,CAC1B,MAAa;IAEb,MAAM,EAAE,EAAE,EAAE,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,QAAQ,EAAE,GAAG,MAAM,CAAC;IACpE,MAAM,KAAK,GAAG,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE;QAC5C,OAAO;YACL,GAAG,GAAG;YACN,CAAC,GAAG,CAAC,EAAE,MAAM,CAAC,GAAkB,CAAC;SAClC,CAAC;IACJ,CAAC,EAAE,EAAuB,CAAC,CAAC;IAE5B,OAAO;QACL,EAAE;QACF,OAAO;QACP,OAAO;QACP,IAAI;QACJ,IAAI;QACJ,IAAI;QACJ,QAAQ,EAAE,QAAQ,CAAC,GAAG,CAAC,YAAY,CAAC;QACpC,GAAG,KAAK;KACY,CAAC;AACzB,CAAC","sourcesContent":["import type { BlockModel } from '../schema/base.js';\n\ntype PropsInDraft =\n  | 'version'\n  | 'flavour'\n  | 'role'\n  | 'page'\n  | 'id'\n  | 'keys'\n  | 'text';\n\ntype ModelProps<Model> = Model extends BlockModel<infer U> ? U : never;\n\nexport type DraftModel<Model extends BlockModel = BlockModel> = Pick<\n  Model,\n  PropsInDraft\n> & {\n  children: DraftModel[];\n} & ModelProps<Model>;\n\nexport function toDraftModel<Model extends BlockModel = BlockModel>(\n  origin: Model\n): DraftModel<Model> {\n  const { id, version, flavour, role, keys, text, children } = origin;\n  const props = origin.keys.reduce((acc, key) => {\n    return {\n      ...acc,\n      [key]: origin[key as keyof Model],\n    };\n  }, {} as ModelProps<Model>);\n\n  return {\n    id,\n    version,\n    flavour,\n    role,\n    keys,\n    text,\n    children: children.map(toDraftModel),\n    ...props,\n  } as DraftModel<Model>;\n}\n"]}