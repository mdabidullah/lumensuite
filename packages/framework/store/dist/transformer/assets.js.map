{"version":3,"file":"assets.js","sourceRoot":"","sources":["../../src/transformer/assets.ts"],"names":[],"mappings":"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","sourcesContent":["import { LumenSuiteError, ErrorCode } from '@lumensuite/global/exceptions';\n\ninterface BlobCRUD {\n  get: (key: string) => Promise<Blob | null> | Blob | null;\n  set: (key: string, value: Blob) => Promise<string> | string;\n  delete: (key: string) => Promise<void> | void;\n  list: () => Promise<string[]> | string[];\n}\n\ntype AssetsManagerConfig = {\n  blob: BlobCRUD;\n};\n\nfunction makeNewNameWhenConflict(names: Set<string>, name: string) {\n  let i = 1;\n  const ext = name.split('.').at(-1) ?? '';\n  let newName = name.replace(new RegExp(`.${ext}$`), ` (${i}).${ext}`);\n  while (names.has(newName)) {\n    newName = name.replace(new RegExp(`.${ext}$`), ` (${i}).${ext}`);\n    i++;\n  }\n  return newName;\n}\n\nexport class AssetsManager {\n  private readonly _assetsMap = new Map<string, Blob>();\n\n  private readonly _blob: BlobCRUD;\n\n  private readonly _names = new Set<string>();\n\n  private readonly _pathBlobIdMap = new Map<string, string>();\n\n  constructor(options: AssetsManagerConfig) {\n    this._blob = options.blob;\n  }\n\n  cleanup() {\n    this._assetsMap.clear();\n    this._names.clear();\n  }\n\n  getAssets() {\n    return this._assetsMap;\n  }\n\n  getPathBlobIdMap() {\n    return this._pathBlobIdMap;\n  }\n\n  isEmpty() {\n    return this._assetsMap.size === 0;\n  }\n\n  async readFromBlob(blobId: string) {\n    let blob = await this._blob.get(blobId);\n    if (!blob) {\n      console.error(`Blob ${blobId} not found in blob manager`);\n      return;\n    }\n    const name = (blob as File).name;\n    if (name && this._names.has(name)) {\n      const newName = makeNewNameWhenConflict(this._names, name);\n      this._names.add(newName);\n      blob = new File([blob], newName, {\n        type: blob.type,\n      }) as Blob;\n    }\n    this._assetsMap.set(blobId, blob);\n  }\n\n  async writeToBlob(blobId: string) {\n    const blob = this._assetsMap.get(blobId);\n    if (!blob) {\n      throw new LumenSuiteError(\n        ErrorCode.TransformerError,\n        'Blob ${blobId} not found in assets manager'\n      );\n    }\n\n    const exists = (await this._blob.get(blobId)) !== null;\n    if (exists) {\n      return;\n    }\n\n    await this._blob.set(blobId, blob);\n  }\n}\n"]}