{"version":3,"file":"jsx.js","sourceRoot":"","sources":["../../src/utils/jsx.ts"],"names":[],"mappings":"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","sourcesContent":["import * as Y from 'yjs';\n\ntype DocRecord = Record<\n  string,\n  {\n    'sys:id': string;\n    'sys:flavour': string;\n    'sys:children': string[];\n    [id: string]: unknown;\n  }\n>;\n\nexport interface JSXElement {\n  // Ad-hoc for `ReactTestComponent` identify.\n  // Use ReactTestComponent serializer prevent snapshot be be wrapped in a string, which cases \" to be escaped.\n  // See https://github.com/facebook/jest/blob/f1263368cc85c3f8b70eaba534ddf593392c44f3/packages/pretty-format/src/plugins/ReactTestComponent.ts#L78-L79\n  $$typeof: symbol | 0xea71357;\n  type: string;\n  props: { 'prop:text'?: string | JSXElement } & Record<string, unknown>;\n  children?: null | (JSXElement | string | number)[];\n}\n\n// Ad-hoc for `ReactTestComponent` identify.\n// See https://github.com/facebook/jest/blob/f1263368cc85c3f8b70eaba534ddf593392c44f3/packages/pretty-format/src/plugins/ReactTestComponent.ts#L26-L29\nconst testSymbol = Symbol.for('react.test.json');\n\nfunction isValidRecord(data: unknown): data is DocRecord {\n  if (typeof data !== 'object' || data === null) {\n    return false;\n  }\n  // TODO enhance this check\n  return true;\n}\n\nconst IGNORED_PROPS = [\n  'sys:id',\n  'sys:version',\n  'sys:flavour',\n  'sys:children',\n  'prop:xywh',\n  'prop:cells',\n  'prop:elements',\n];\n\nexport function yDocToJSXNode(\n  serializedDoc: Record<string, unknown>,\n  nodeId: string\n): JSXElement {\n  if (!isValidRecord(serializedDoc)) {\n    throw new Error('Failed to parse doc record! Invalid data.');\n  }\n  const node = serializedDoc[nodeId];\n  if (!node) {\n    throw new Error(\n      `Failed to parse doc record! Node not found! id: ${nodeId}.`\n    );\n  }\n  // TODO maybe need set PascalCase\n  const flavour = node['sys:flavour'];\n  // TODO maybe need check children recursively nested\n  const children = node['sys:children'];\n  const props = Object.fromEntries(\n    Object.entries(node).filter(([key]) => !IGNORED_PROPS.includes(key))\n  );\n\n  if ('prop:text' in props && props['prop:text'] instanceof Array) {\n    props['prop:text'] = parseDelta(props['prop:text'] as DeltaText);\n  }\n\n  if ('prop:title' in props && props['prop:title'] instanceof Array) {\n    props['prop:title'] = parseDelta(props['prop:title'] as DeltaText);\n  }\n\n  if ('prop:columns' in props && props['prop:columns'] instanceof Array) {\n    props['prop:columns'] = `Array [${props['prop:columns'].length}]`;\n  }\n\n  if ('prop:views' in props && props['prop:views'] instanceof Array) {\n    props['prop:views'] = `Array [${props['prop:views'].length}]`;\n  }\n\n  return {\n    $$typeof: testSymbol,\n    type: flavour,\n    props,\n    children: children?.map(id => yDocToJSXNode(serializedDoc, id)) ?? [],\n  };\n}\n\nexport function serializeYDoc(doc: Y.Doc) {\n  const json: Record<string, unknown> = {};\n  doc.share.forEach((value, key) => {\n    if (value instanceof Y.Map) {\n      json[key] = serializeYMap(value);\n    } else {\n      json[key] = value.toJSON();\n    }\n  });\n  return json;\n}\n\nfunction serializeY(value: unknown): unknown {\n  if (value instanceof Y.Doc) {\n    return serializeYDoc(value);\n  }\n  if (value instanceof Y.Map) {\n    return serializeYMap(value);\n  }\n  if (value instanceof Y.Text) {\n    return serializeYText(value);\n  }\n  if (value instanceof Y.Array) {\n    return value.toArray().map(x => serializeY(x));\n  }\n  if (value instanceof Y.AbstractType) {\n    return value.toJSON();\n  }\n  return value;\n}\n\nfunction serializeYMap(map: Y.Map<unknown>) {\n  const json: Record<string, unknown> = {};\n  map.forEach((value, key) => {\n    json[key] = serializeY(value);\n  });\n  return json;\n}\n\ntype DeltaText = {\n  insert: string;\n  attributes?: Record<string, unknown>;\n}[];\n\nfunction serializeYText(text: Y.Text): DeltaText {\n  const delta = text.toDelta();\n  return delta;\n}\n\nfunction parseDelta(text: DeltaText) {\n  if (!text.length) {\n    return undefined;\n  }\n  if (text.length === 1 && !text[0].attributes) {\n    // just plain text\n    return text[0].insert;\n  }\n  return {\n    // The `Symbol.for('react.fragment')` will render as `<React.Fragment>`\n    // so we use a empty string to render it as `<>`.\n    // But it will empty children ad `< />`\n    // so we return `undefined` directly if not delta text.\n    $$typeof: testSymbol, // Symbol.for('react.element'),\n    type: '', // Symbol.for('react.fragment'),\n    props: {},\n    children: text?.map(({ insert, attributes }) => ({\n      $$typeof: testSymbol,\n      type: 'text',\n      props: {\n        // Not place at `children` to avoid the trailing whitespace be trim by formatter.\n        insert,\n        ...attributes,\n      },\n    })),\n  };\n}\n"]}