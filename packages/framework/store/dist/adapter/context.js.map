{"version":3,"file":"context.js","sourceRoot":"","sources":["../../src/adapter/context.ts"],"names":[],"mappings":"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","sourcesContent":["type Keyof<T> = T extends unknown ? keyof T : never;\n\nexport class ASTWalkerContext<TNode extends object> {\n  private _defaultProp: Keyof<TNode> = 'children' as unknown as Keyof<TNode>;\n\n  private _globalContext: Record<string, unknown> = Object.create(null);\n\n  private _stack: {\n    node: TNode;\n    prop: Keyof<TNode>;\n    context: Record<string, unknown>;\n  }[] = [];\n\n  _skip = false;\n\n  _skipChildrenNum = 0;\n\n  setDefaultProp = (parentProp: Keyof<TNode>) => {\n    this._defaultProp = parentProp;\n  };\n\n  get stack() {\n    return this._stack;\n  }\n\n  private current() {\n    return this._stack[this._stack.length - 1];\n  }\n\n  closeNode() {\n    const ele = this._stack.pop();\n    if (!ele) return this;\n    const parent = this._stack.pop();\n    if (!parent) {\n      this._stack.push(ele);\n      return this;\n    }\n    if (parent.node[ele.prop] instanceof Array) {\n      (parent.node[ele.prop] as Array<object>).push(ele.node);\n    }\n    this._stack.push(parent);\n    return this;\n  }\n\n  currentNode() {\n    return this.current()?.node;\n  }\n\n  getGlobalContext(key: string) {\n    return this._globalContext[key];\n  }\n\n  getGlobalContextStack<StackElement>(key: string) {\n    const stack = this._globalContext[key];\n    if (stack instanceof Array) {\n      return stack as StackElement[];\n    } else {\n      return [] as StackElement[];\n    }\n  }\n\n  getNodeContext(key: string) {\n    return this.current().context[key];\n  }\n\n  getPreviousNodeContext(key: string) {\n    return this._stack[this._stack.length - 2]?.context[key];\n  }\n\n  openNode(node: TNode, parentProp?: Keyof<TNode>) {\n    this._stack.push({\n      node,\n      prop: parentProp ?? this._defaultProp,\n      context: Object.create(null),\n    });\n    return this;\n  }\n\n  previousNode() {\n    return this._stack[this._stack.length - 2]?.node;\n  }\n\n  pushGlobalContextStack<StackElement>(key: string, value: StackElement) {\n    const stack = this._globalContext[key];\n    if (stack instanceof Array) {\n      stack.push(value);\n    } else {\n      this._globalContext[key] = [value];\n    }\n  }\n\n  setGlobalContext(key: string, value: unknown) {\n    this._globalContext[key] = value;\n    return this;\n  }\n\n  setGlobalContextStack<StackElement>(key: string, value: StackElement[]) {\n    this._globalContext[key] = value;\n  }\n\n  setNodeContext(key: string, value: unknown) {\n    this._stack[this._stack.length - 1].context[key] = value;\n    return this;\n  }\n\n  skipAllChildren() {\n    this._skip = true;\n  }\n\n  skipChildren(num = 1) {\n    this._skipChildrenNum = num;\n  }\n}\n"]}