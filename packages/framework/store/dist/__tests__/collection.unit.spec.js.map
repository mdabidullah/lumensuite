{"version":3,"file":"collection.unit.spec.js","sourceRoot":"","sources":["../../src/__tests__/collection.unit.spec.ts"],"names":[],"mappings":"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","sourcesContent":["// checkout https://vitest.dev/guide/debugging.html for debugging tests\n\nimport type { Slot } from '@blocksuite/global/utils';\n\nimport { assert, beforeEach, describe, expect, it, vi } from 'vitest';\nimport { applyUpdate, encodeStateAsUpdate } from 'yjs';\n\nimport type { BlockModel, BlockSchemaType, Doc } from '../index.js';\nimport type { DocMeta } from '../store/index.js';\nimport type { BlockSuiteDoc } from '../yjs/index.js';\n\nimport { COLLECTION_VERSION, PAGE_VERSION } from '../consts.js';\nimport { DocCollection, IdGeneratorType, Schema } from '../index.js';\nimport {\n  NoteBlockSchema,\n  ParagraphBlockSchema,\n  RootBlockSchema,\n} from './test-schema.js';\nimport { assertExists } from './test-utils-dom.js';\n\nexport const BlockSchemas = [\n  ParagraphBlockSchema,\n  RootBlockSchema,\n  NoteBlockSchema,\n] as BlockSchemaType[];\n\nfunction createTestOptions() {\n  const idGenerator = IdGeneratorType.AutoIncrement;\n  const schema = new Schema();\n  schema.register(BlockSchemas);\n  return { id: 'test-collection', idGenerator, schema };\n}\n\nconst defaultDocId = 'doc:home';\nconst spaceId = defaultDocId;\nconst spaceMetaId = 'meta';\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction serializCollection(doc: BlockSuiteDoc): Record<string, any> {\n  const spaces = {};\n  doc.spaces.forEach((subDoc, key) => {\n    // @ts-ignore\n    spaces[key] = subDoc.toJSON();\n  });\n  const json = doc.toJSON();\n  delete json.spaces;\n\n  return {\n    ...json,\n    spaces,\n  };\n}\n\nfunction waitOnce<T>(slot: Slot<T>) {\n  return new Promise<T>(resolve => slot.once(val => resolve(val)));\n}\n\nfunction createRoot(doc: Doc) {\n  doc.addBlock('affine:page');\n  if (!doc.root) throw new Error('root not found');\n  return doc.root;\n}\n\nfunction createTestDoc(docId = defaultDocId) {\n  const options = createTestOptions();\n  const collection = new DocCollection(options);\n  collection.meta.initialize();\n  const doc = collection.createDoc({ id: docId });\n  doc.load();\n  return doc;\n}\n\nfunction requestIdleCallbackPolyfill(\n  callback: IdleRequestCallback,\n  options?: IdleRequestOptions\n) {\n  const timeout = options?.timeout ?? 1000;\n  const start = Date.now();\n  return setTimeout(function () {\n    callback({\n      didTimeout: false,\n      timeRemaining: function () {\n        return Math.max(0, timeout - (Date.now() - start));\n      },\n    });\n  }, timeout) as unknown as number;\n}\n\nbeforeEach(() => {\n  if (globalThis.requestIdleCallback === undefined) {\n    globalThis.requestIdleCallback = requestIdleCallbackPolyfill;\n  }\n});\n\ndescribe('basic', () => {\n  it('can init collection', () => {\n    const options = createTestOptions();\n    const collection = new DocCollection(options);\n    collection.meta.initialize();\n    assert.equal(collection.isEmpty, true);\n\n    const doc = collection.createDoc({ id: 'doc:home' });\n    doc.load();\n    const actual = serializCollection(collection.doc);\n    const actualDoc = actual[spaceMetaId].pages[0] as DocMeta;\n\n    assert.equal(collection.isEmpty, false);\n    assert.equal(typeof actualDoc.createDate, 'number');\n    // @ts-ignore\n    delete actualDoc.createDate;\n\n    assert.deepEqual(actual, {\n      [spaceMetaId]: {\n        pages: [\n          {\n            id: 'doc:home',\n            title: '',\n            tags: [],\n          },\n        ],\n        workspaceVersion: COLLECTION_VERSION,\n        pageVersion: PAGE_VERSION,\n        blockVersions: {\n          'affine:note': 1,\n          'affine:page': 2,\n          'affine:paragraph': 1,\n        },\n      },\n      spaces: {\n        [spaceId]: {\n          blocks: {},\n        },\n      },\n    });\n  });\n\n  it('init collection with custom id generator', () => {\n    const options = createTestOptions();\n    let id = 100;\n    const collection = new DocCollection({\n      ...options,\n      idGenerator: () => {\n        return String(id++);\n      },\n    });\n    collection.meta.initialize();\n    {\n      const doc = collection.createDoc();\n      assert.equal(doc.id, '100');\n    }\n    {\n      const doc = collection.createDoc();\n      assert.equal(doc.id, '101');\n    }\n  });\n\n  it('doc ready lifecycle', () => {\n    const options = createTestOptions();\n    const collection = new DocCollection(options);\n    collection.meta.initialize();\n    const doc = collection.createDoc({\n      id: 'space:0',\n    });\n\n    const readyCallback = vi.fn();\n    const rootAddedCallback = vi.fn();\n    doc.slots.ready.on(readyCallback);\n    doc.slots.rootAdded.on(rootAddedCallback);\n\n    doc.load(() => {\n      expect(doc.ready).toBe(false);\n      const rootId = doc.addBlock('affine:page', {\n        title: new doc.Text(),\n      });\n      expect(rootAddedCallback).toBeCalledTimes(1);\n      expect(doc.ready).toBe(false);\n\n      doc.addBlock('affine:note', {}, rootId);\n    });\n\n    expect(doc.ready).toBe(true);\n    expect(readyCallback).toBeCalledTimes(1);\n  });\n\n  it('collection docs with yjs applyUpdate', () => {\n    const options = createTestOptions();\n    const collection = new DocCollection(options);\n    collection.meta.initialize();\n    const collection2 = new DocCollection(options);\n    const doc = collection.createDoc({\n      id: 'space:0',\n    });\n    doc.load(() => {\n      doc.addBlock('affine:page', {\n        title: new doc.Text(),\n      });\n    });\n    {\n      const subdocsTester = vi.fn(({ added }) => {\n        expect(added.size).toBe(1);\n      });\n      // only apply root update\n      collection2.doc.once('subdocs', subdocsTester);\n      expect(subdocsTester).toBeCalledTimes(0);\n      expect(collection2.docs.size).toBe(0);\n      const update = encodeStateAsUpdate(collection.doc);\n      applyUpdate(collection2.doc, update);\n      expect(collection2.doc.toJSON()['spaces']).toEqual({\n        'space:0': {\n          blocks: {},\n        },\n      });\n      expect(collection2.docs.size).toBe(1);\n      expect(subdocsTester).toBeCalledTimes(1);\n    }\n    {\n      // apply doc update\n      const update = encodeStateAsUpdate(doc.spaceDoc);\n      expect(collection2.docs.size).toBe(1);\n      const doc2 = collection2.getDoc('space:0');\n      assertExists(doc2);\n      applyUpdate(doc2.spaceDoc, update);\n      expect(collection2.doc.toJSON()['spaces']).toEqual({\n        'space:0': {\n          blocks: {\n            '0': {\n              'prop:count': 0,\n              'prop:items': [],\n              'prop:style': {},\n              'prop:title': '',\n              'sys:children': [],\n              'sys:flavour': 'affine:page',\n              'sys:id': '0',\n              'sys:version': 2,\n            },\n          },\n        },\n      });\n      const fn = vi.fn(({ loaded }) => {\n        expect(loaded.size).toBe(1);\n      });\n      collection2.doc.once('subdocs', fn);\n      expect(fn).toBeCalledTimes(0);\n      doc2.load();\n      expect(fn).toBeCalledTimes(1);\n    }\n  });\n});\n\ndescribe('addBlock', () => {\n  it('can add single model', () => {\n    const doc = createTestDoc();\n    doc.addBlock('affine:page', {\n      title: new doc.Text(),\n    });\n\n    assert.deepEqual(serializCollection(doc.rootDoc).spaces[spaceId].blocks, {\n      '0': {\n        'prop:count': 0,\n        'prop:items': [],\n        'prop:style': {},\n        'prop:title': '',\n        'sys:children': [],\n        'sys:flavour': 'affine:page',\n        'sys:id': '0',\n        'sys:version': 2,\n      },\n    });\n  });\n\n  it('can add model with props', () => {\n    const doc = createTestDoc();\n    doc.addBlock('affine:page', { title: new doc.Text('hello') });\n\n    assert.deepEqual(serializCollection(doc.rootDoc).spaces[spaceId].blocks, {\n      '0': {\n        'prop:count': 0,\n        'prop:items': [],\n        'prop:style': {},\n        'sys:children': [],\n        'sys:flavour': 'affine:page',\n        'sys:id': '0',\n        'prop:title': 'hello',\n        'sys:version': 2,\n      },\n    });\n  });\n\n  it('can add multi models', () => {\n    const doc = createTestDoc();\n    const rootId = doc.addBlock('affine:page', {\n      title: new doc.Text(),\n    });\n    const noteId = doc.addBlock('affine:note', {}, rootId);\n    doc.addBlock('affine:paragraph', {}, noteId);\n    doc.addBlocks(\n      [\n        { flavour: 'affine:paragraph', blockProps: { type: 'h1' } },\n        { flavour: 'affine:paragraph', blockProps: { type: 'h2' } },\n      ],\n      noteId\n    );\n\n    assert.deepEqual(serializCollection(doc.rootDoc).spaces[spaceId].blocks, {\n      '0': {\n        'prop:count': 0,\n        'prop:items': [],\n        'prop:style': {},\n        'sys:children': ['1'],\n        'sys:flavour': 'affine:page',\n        'sys:id': '0',\n        'prop:title': '',\n        'sys:version': 2,\n      },\n      '1': {\n        'sys:children': ['2', '3', '4'],\n        'sys:flavour': 'affine:note',\n        'sys:id': '1',\n        'sys:version': 1,\n      },\n      '2': {\n        'sys:children': [],\n        'sys:flavour': 'affine:paragraph',\n        'sys:id': '2',\n        'prop:text': '',\n        'prop:type': 'text',\n        'sys:version': 1,\n      },\n      '3': {\n        'sys:children': [],\n        'sys:flavour': 'affine:paragraph',\n        'sys:id': '3',\n        'prop:text': '',\n        'prop:type': 'h1',\n        'sys:version': 1,\n      },\n      '4': {\n        'sys:children': [],\n        'sys:flavour': 'affine:paragraph',\n        'sys:id': '4',\n        'prop:text': '',\n        'prop:type': 'h2',\n        'sys:version': 1,\n      },\n    });\n  });\n\n  it('can observe slot events', async () => {\n    const doc = createTestDoc();\n\n    queueMicrotask(() =>\n      doc.addBlock('affine:page', {\n        title: new doc.Text(),\n      })\n    );\n    const blockId = await waitOnce(doc.slots.rootAdded);\n    const block = doc.getBlockById(blockId) as BlockModel;\n    assert.equal(block.flavour, 'affine:page');\n  });\n\n  it('can add block to root', async () => {\n    const doc = createTestDoc();\n\n    let noteId: string;\n\n    queueMicrotask(() => {\n      const rootId = doc.addBlock('affine:page');\n      noteId = doc.addBlock('affine:note', {}, rootId);\n    });\n    await waitOnce(doc.slots.rootAdded);\n    const { root } = doc;\n    if (!root) throw new Error('root is null');\n\n    assert.equal(root.flavour, 'affine:page');\n\n    doc.addBlock('affine:paragraph', {}, noteId!);\n    assert.equal(root.children[0].flavour, 'affine:note');\n    assert.equal(root.children[0].children[0].flavour, 'affine:paragraph');\n    assert.equal(root.childMap.value.get('1'), 0);\n\n    const serializedChildren = serializCollection(doc.rootDoc).spaces[spaceId]\n      .blocks['0']['sys:children'];\n    assert.deepEqual(serializedChildren, ['1']);\n    assert.equal(root.children[0].id, '1');\n  });\n\n  it('can add and remove multi docs', async () => {\n    const options = createTestOptions();\n    const collection = new DocCollection(options);\n    collection.meta.initialize();\n\n    const doc0 = collection.createDoc({ id: 'doc:home' });\n    const doc1 = collection.createDoc({ id: 'space:doc1' });\n    await Promise.all([doc0.load(), doc1.load()]);\n    assert.equal(collection.docs.size, 2);\n\n    doc0.addBlock('affine:page', {\n      title: new doc0.Text(),\n    });\n    collection.removeDoc(doc0.id);\n\n    assert.equal(collection.docs.size, 1);\n    assert.equal(\n      serializCollection(doc0.rootDoc).spaces['doc:home'],\n      undefined\n    );\n\n    collection.removeDoc(doc1.id);\n    assert.equal(collection.docs.size, 0);\n  });\n\n  it('can remove doc that has not been loaded', () => {\n    const options = createTestOptions();\n    const collection = new DocCollection(options);\n    collection.meta.initialize();\n\n    const doc0 = collection.createDoc({ id: 'doc:home' });\n\n    collection.removeDoc(doc0.id);\n    assert.equal(collection.docs.size, 0);\n  });\n\n  it('can set doc state', () => {\n    const options = createTestOptions();\n    const collection = new DocCollection(options);\n    collection.meta.initialize();\n    collection.createDoc({ id: 'doc:home' });\n\n    assert.deepEqual(\n      collection.meta.docMetas.map(({ id, title }) => ({\n        id,\n        title,\n      })),\n      [\n        {\n          id: 'doc:home',\n          title: '',\n        },\n      ]\n    );\n\n    let called = false;\n    collection.meta.docMetaUpdated.on(() => {\n      called = true;\n    });\n\n    // @ts-ignore\n    collection.setDocMeta('doc:home', { favorite: true });\n    assert.deepEqual(\n      // @ts-ignore\n      collection.meta.docMetas.map(({ id, title, favorite }) => ({\n        id,\n        title,\n        favorite,\n      })),\n      [\n        {\n          id: 'doc:home',\n          title: '',\n          favorite: true,\n        },\n      ]\n    );\n    assert.ok(called);\n  });\n\n  it('can set collection common meta fields', async () => {\n    const options = createTestOptions();\n    const collection = new DocCollection(options);\n\n    queueMicrotask(() => collection.meta.setName('hello'));\n    await waitOnce(collection.meta.commonFieldsUpdated);\n    assert.deepEqual(collection.meta.name, 'hello');\n\n    queueMicrotask(() => collection.meta.setAvatar('gengar.jpg'));\n    await waitOnce(collection.meta.commonFieldsUpdated);\n    assert.deepEqual(collection.meta.avatar, 'gengar.jpg');\n  });\n});\n\ndescribe('deleteBlock', () => {\n  it('delete children recursively by default', () => {\n    const doc = createTestDoc();\n\n    const rootId = doc.addBlock('affine:page', {});\n    const noteId = doc.addBlock('affine:note', {}, rootId);\n    doc.addBlock('affine:paragraph', {}, noteId);\n    doc.addBlock('affine:paragraph', {}, noteId);\n    assert.deepEqual(serializCollection(doc.rootDoc).spaces[spaceId].blocks, {\n      '0': {\n        'prop:count': 0,\n        'prop:items': [],\n        'prop:style': {},\n        'prop:title': '',\n        'sys:children': ['1'],\n        'sys:flavour': 'affine:page',\n        'sys:id': '0',\n        'sys:version': 2,\n      },\n      '1': {\n        'sys:children': ['2', '3'],\n        'sys:flavour': 'affine:note',\n        'sys:id': '1',\n        'sys:version': 1,\n      },\n      '2': {\n        'prop:text': '',\n        'prop:type': 'text',\n        'sys:children': [],\n        'sys:flavour': 'affine:paragraph',\n        'sys:id': '2',\n        'sys:version': 1,\n      },\n      '3': {\n        'prop:text': '',\n        'prop:type': 'text',\n        'sys:children': [],\n        'sys:flavour': 'affine:paragraph',\n        'sys:id': '3',\n        'sys:version': 1,\n      },\n    });\n\n    const deletedModel = doc.getBlockById('1') as BlockModel;\n    doc.deleteBlock(deletedModel);\n\n    assert.deepEqual(serializCollection(doc.rootDoc).spaces[spaceId].blocks, {\n      '0': {\n        'prop:count': 0,\n        'prop:items': [],\n        'prop:style': {},\n        'prop:title': '',\n        'sys:children': [],\n        'sys:flavour': 'affine:page',\n        'sys:id': '0',\n        'sys:version': 2,\n      },\n    });\n  });\n\n  it('bring children to parent', () => {\n    const doc = createTestDoc();\n\n    const rootId = doc.addBlock('affine:page', {});\n    const noteId = doc.addBlock('affine:note', {}, rootId);\n    const p1 = doc.addBlock('affine:paragraph', {}, noteId);\n    doc.addBlock('affine:paragraph', {}, p1);\n    doc.addBlock('affine:paragraph', {}, p1);\n\n    assert.deepEqual(serializCollection(doc.rootDoc).spaces[spaceId].blocks, {\n      '0': {\n        'prop:count': 0,\n        'prop:items': [],\n        'prop:style': {},\n        'prop:title': '',\n        'sys:children': ['1'],\n        'sys:flavour': 'affine:page',\n        'sys:id': '0',\n        'sys:version': 2,\n      },\n      '1': {\n        'sys:children': ['2'],\n        'sys:flavour': 'affine:note',\n        'sys:id': '1',\n        'sys:version': 1,\n      },\n      '2': {\n        'prop:text': '',\n        'prop:type': 'text',\n        'sys:children': ['3', '4'],\n        'sys:flavour': 'affine:paragraph',\n        'sys:id': '2',\n        'sys:version': 1,\n      },\n      '3': {\n        'prop:text': '',\n        'prop:type': 'text',\n        'sys:children': [],\n        'sys:flavour': 'affine:paragraph',\n        'sys:id': '3',\n        'sys:version': 1,\n      },\n      '4': {\n        'prop:text': '',\n        'prop:type': 'text',\n        'sys:children': [],\n        'sys:flavour': 'affine:paragraph',\n        'sys:id': '4',\n        'sys:version': 1,\n      },\n    });\n\n    const deletedModel = doc.getBlockById('2') as BlockModel;\n    const deletedModelParent = doc.getBlockById('1') as BlockModel;\n    doc.deleteBlock(deletedModel, {\n      bringChildrenTo: deletedModelParent,\n    });\n\n    assert.deepEqual(serializCollection(doc.rootDoc).spaces[spaceId].blocks, {\n      '0': {\n        'prop:count': 0,\n        'prop:items': [],\n        'prop:style': {},\n        'prop:title': '',\n        'sys:children': ['1'],\n        'sys:flavour': 'affine:page',\n        'sys:id': '0',\n        'sys:version': 2,\n      },\n      '1': {\n        'sys:children': ['3', '4'],\n        'sys:flavour': 'affine:note',\n        'sys:id': '1',\n        'sys:version': 1,\n      },\n      '3': {\n        'prop:text': '',\n        'prop:type': 'text',\n        'sys:children': [],\n        'sys:flavour': 'affine:paragraph',\n        'sys:id': '3',\n        'sys:version': 1,\n      },\n      '4': {\n        'prop:text': '',\n        'prop:type': 'text',\n        'sys:children': [],\n        'sys:flavour': 'affine:paragraph',\n        'sys:id': '4',\n        'sys:version': 1,\n      },\n    });\n  });\n\n  it('bring children to other block', () => {\n    const doc = createTestDoc();\n\n    const rootId = doc.addBlock('affine:page', {});\n    const noteId = doc.addBlock('affine:note', {}, rootId);\n    const p1 = doc.addBlock('affine:paragraph', {}, noteId);\n    const p2 = doc.addBlock('affine:paragraph', {}, noteId);\n    doc.addBlock('affine:paragraph', {}, p1);\n    doc.addBlock('affine:paragraph', {}, p1);\n    doc.addBlock('affine:paragraph', {}, p2);\n\n    assert.deepEqual(serializCollection(doc.rootDoc).spaces[spaceId].blocks, {\n      '0': {\n        'prop:count': 0,\n        'prop:items': [],\n        'prop:style': {},\n        'prop:title': '',\n        'sys:children': ['1'],\n        'sys:flavour': 'affine:page',\n        'sys:id': '0',\n        'sys:version': 2,\n      },\n      '1': {\n        'sys:children': ['2', '3'],\n        'sys:flavour': 'affine:note',\n        'sys:id': '1',\n        'sys:version': 1,\n      },\n      '2': {\n        'prop:text': '',\n        'prop:type': 'text',\n        'sys:children': ['4', '5'],\n        'sys:flavour': 'affine:paragraph',\n        'sys:id': '2',\n        'sys:version': 1,\n      },\n      '3': {\n        'prop:text': '',\n        'prop:type': 'text',\n        'sys:children': ['6'],\n        'sys:flavour': 'affine:paragraph',\n        'sys:id': '3',\n        'sys:version': 1,\n      },\n      '4': {\n        'prop:text': '',\n        'prop:type': 'text',\n        'sys:children': [],\n        'sys:flavour': 'affine:paragraph',\n        'sys:id': '4',\n        'sys:version': 1,\n      },\n      '5': {\n        'prop:text': '',\n        'prop:type': 'text',\n        'sys:children': [],\n        'sys:flavour': 'affine:paragraph',\n        'sys:id': '5',\n        'sys:version': 1,\n      },\n      '6': {\n        'prop:text': '',\n        'prop:type': 'text',\n        'sys:children': [],\n        'sys:flavour': 'affine:paragraph',\n        'sys:id': '6',\n        'sys:version': 1,\n      },\n    });\n\n    const deletedModel = doc.getBlockById('2') as BlockModel;\n    const moveToModel = doc.getBlockById('3') as BlockModel;\n    doc.deleteBlock(deletedModel, {\n      bringChildrenTo: moveToModel,\n    });\n\n    assert.deepEqual(serializCollection(doc.rootDoc).spaces[spaceId].blocks, {\n      '0': {\n        'prop:count': 0,\n        'prop:items': [],\n        'prop:style': {},\n        'prop:title': '',\n        'sys:children': ['1'],\n        'sys:flavour': 'affine:page',\n        'sys:id': '0',\n        'sys:version': 2,\n      },\n      '1': {\n        'sys:children': ['3'],\n        'sys:flavour': 'affine:note',\n        'sys:id': '1',\n        'sys:version': 1,\n      },\n      '3': {\n        'prop:text': '',\n        'prop:type': 'text',\n        'sys:children': ['6', '4', '5'],\n        'sys:flavour': 'affine:paragraph',\n        'sys:id': '3',\n        'sys:version': 1,\n      },\n      '4': {\n        'prop:text': '',\n        'prop:type': 'text',\n        'sys:children': [],\n        'sys:flavour': 'affine:paragraph',\n        'sys:id': '4',\n        'sys:version': 1,\n      },\n      '5': {\n        'prop:text': '',\n        'prop:type': 'text',\n        'sys:children': [],\n        'sys:flavour': 'affine:paragraph',\n        'sys:id': '5',\n        'sys:version': 1,\n      },\n      '6': {\n        'prop:text': '',\n        'prop:type': 'text',\n        'sys:children': [],\n        'sys:flavour': 'affine:paragraph',\n        'sys:id': '6',\n        'sys:version': 1,\n      },\n    });\n  });\n\n  it('can delete model with parent', () => {\n    const doc = createTestDoc();\n    const rootModel = createRoot(doc);\n    const noteId = doc.addBlock('affine:note', {}, rootModel.id);\n\n    doc.addBlock('affine:paragraph', {}, noteId);\n\n    // before delete\n    assert.deepEqual(serializCollection(doc.rootDoc).spaces[spaceId].blocks, {\n      '0': {\n        'prop:count': 0,\n        'prop:items': [],\n        'prop:style': {},\n        'prop:title': '',\n        'sys:children': ['1'],\n        'sys:flavour': 'affine:page',\n        'sys:id': '0',\n        'sys:version': 2,\n      },\n      '1': {\n        'sys:children': ['2'],\n        'sys:flavour': 'affine:note',\n        'sys:id': '1',\n        'sys:version': 1,\n      },\n      '2': {\n        'sys:children': [],\n        'sys:flavour': 'affine:paragraph',\n        'sys:id': '2',\n        'prop:text': '',\n        'prop:type': 'text',\n        'sys:version': 1,\n      },\n    });\n\n    doc.deleteBlock(rootModel.children[0].children[0]);\n\n    // after delete\n    assert.deepEqual(serializCollection(doc.rootDoc).spaces[spaceId].blocks, {\n      '0': {\n        'prop:count': 0,\n        'prop:items': [],\n        'prop:style': {},\n        'prop:title': '',\n        'sys:children': ['1'],\n        'sys:flavour': 'affine:page',\n        'sys:id': '0',\n        'sys:version': 2,\n      },\n      '1': {\n        'sys:children': [],\n        'sys:flavour': 'affine:note',\n        'sys:id': '1',\n        'sys:version': 1,\n      },\n    });\n    assert.equal(rootModel.children.length, 1);\n  });\n});\n\ndescribe('getBlock', () => {\n  it('can get block by id', () => {\n    const doc = createTestDoc();\n    const rootModel = createRoot(doc);\n    const noteId = doc.addBlock('affine:note', {}, rootModel.id);\n\n    doc.addBlock('affine:paragraph', {}, noteId);\n    doc.addBlock('affine:paragraph', {}, noteId);\n\n    const text = doc.getBlockById('3') as BlockModel;\n    assert.equal(text.flavour, 'affine:paragraph');\n    assert.equal(rootModel.children[0].children.indexOf(text), 1);\n\n    const invalid = doc.getBlockById('😅');\n    assert.equal(invalid, null);\n  });\n\n  it('can get parent', () => {\n    const doc = createTestDoc();\n    const rootModel = createRoot(doc);\n    const noteId = doc.addBlock('affine:note', {}, rootModel.id);\n\n    doc.addBlock('affine:paragraph', {}, noteId);\n    doc.addBlock('affine:paragraph', {}, noteId);\n\n    const result = doc.getParent(\n      rootModel.children[0].children[1]\n    ) as BlockModel;\n    assert.equal(result, rootModel.children[0]);\n\n    const invalid = doc.getParent(rootModel);\n    assert.equal(invalid, null);\n  });\n\n  it('can get previous sibling', () => {\n    const doc = createTestDoc();\n    const rootModel = createRoot(doc);\n    const noteId = doc.addBlock('affine:note', {}, rootModel.id);\n\n    doc.addBlock('affine:paragraph', {}, noteId);\n    doc.addBlock('affine:paragraph', {}, noteId);\n\n    const result = doc.getPrev(rootModel.children[0].children[1]) as BlockModel;\n    assert.equal(result, rootModel.children[0].children[0]);\n\n    const invalid = doc.getPrev(rootModel.children[0].children[0]);\n    assert.equal(invalid, null);\n  });\n});\n\n// Inline snapshot is not supported under describe.parallel config\ndescribe('collection.exportJSX works', () => {\n  it('collection matches snapshot', () => {\n    const options = createTestOptions();\n    const collection = new DocCollection(options);\n    collection.meta.initialize();\n    const doc = collection.createDoc({ id: 'doc:home' });\n\n    doc.addBlock('affine:page', { title: new doc.Text('hello') });\n\n    expect(collection.exportJSX()).toMatchInlineSnapshot(`\n      <affine:page\n        prop:count={0}\n        prop:items={[]}\n        prop:style={{}}\n        prop:title=\"hello\"\n      />\n    `);\n  });\n\n  it('empty collection matches snapshot', () => {\n    const options = createTestOptions();\n    const collection = new DocCollection(options);\n    collection.meta.initialize();\n    collection.createDoc({ id: 'doc:home' });\n\n    expect(collection.exportJSX()).toMatchInlineSnapshot('null');\n  });\n\n  it('collection with multiple blocks children matches snapshot', () => {\n    const options = createTestOptions();\n    const collection = new DocCollection(options);\n    collection.meta.initialize();\n    const doc = collection.createDoc({ id: 'doc:home' });\n    doc.load(() => {\n      const rootId = doc.addBlock('affine:page', {\n        title: new doc.Text(),\n      });\n      const noteId = doc.addBlock('affine:note', {}, rootId);\n      doc.addBlock('affine:paragraph', {}, noteId);\n      doc.addBlock('affine:paragraph', {}, noteId);\n    });\n\n    expect(collection.exportJSX()).toMatchInlineSnapshot(/* xml */ `\n      <affine:page\n        prop:count={0}\n        prop:items={[]}\n        prop:style={{}}\n      >\n        <affine:note>\n          <affine:paragraph\n            prop:type=\"text\"\n          />\n          <affine:paragraph\n            prop:type=\"text\"\n          />\n        </affine:note>\n      </affine:page>\n    `);\n  });\n});\n\ndescribe('flags', () => {\n  it('update flags', () => {\n    const options = createTestOptions();\n    const collection = new DocCollection(options);\n    collection.meta.initialize();\n\n    const awareness = collection.awarenessStore;\n\n    awareness.setFlag('enable_lasso_tool', false);\n    expect(awareness.getFlag('enable_lasso_tool')).toBe(false);\n\n    awareness.setFlag('enable_lasso_tool', true);\n    expect(awareness.getFlag('enable_lasso_tool')).toBe(true);\n  });\n});\n\ndeclare global {\n  namespace BlockSuite {\n    interface BlockModels {\n      'affine:page': BlockModel;\n      'affine:paragraph': BlockModel;\n      'affine:note': BlockModel;\n    }\n  }\n}\n"]}