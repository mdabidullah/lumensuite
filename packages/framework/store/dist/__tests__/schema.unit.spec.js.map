{"version":3,"file":"schema.unit.spec.js","sourceRoot":"","sources":["../../src/__tests__/schema.unit.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { literal } from 'lit/static-html.js';\nimport { describe, expect, it, vi } from 'vitest';\n\n// import some blocks\nimport { type BlockModel, defineBlockSchema } from '../schema/base.js';\nimport { SchemaValidateError } from '../schema/error.js';\nimport { Schema } from '../schema/index.js';\nimport { DocCollection, IdGeneratorType } from '../store/index.js';\nimport {\n  DividerBlockSchema,\n  ListBlockSchema,\n  NoteBlockSchema,\n  ParagraphBlockSchema,\n  RootBlockSchema,\n} from './test-schema.js';\n\nfunction createTestOptions() {\n  const idGenerator = IdGeneratorType.AutoIncrement;\n  const schema = new Schema();\n  schema.register(BlockSchemas);\n  return { id: 'test-collection', idGenerator, schema };\n}\n\nconst TestCustomNoteBlockSchema = defineBlockSchema({\n  flavour: 'affine:note-block-video',\n  props: internal => ({\n    text: internal.Text(),\n  }),\n  metadata: {\n    version: 1,\n    role: 'content',\n    tag: literal`affine-note-block-video`,\n    parent: ['affine:note'],\n  },\n});\n\nconst TestInvalidNoteBlockSchema = defineBlockSchema({\n  flavour: 'affine:note-invalid-block-video',\n  props: internal => ({\n    text: internal.Text(),\n  }),\n  metadata: {\n    version: 1,\n    role: 'content',\n    tag: literal`affine-invalid-note-block-video`,\n    parent: ['affine:note'],\n  },\n});\n\nconst BlockSchemas = [\n  RootBlockSchema,\n  ParagraphBlockSchema,\n  ListBlockSchema,\n  NoteBlockSchema,\n  DividerBlockSchema,\n  TestCustomNoteBlockSchema,\n  TestInvalidNoteBlockSchema,\n];\n\nconst defaultDocId = 'doc0';\nfunction createTestDoc(docId = defaultDocId) {\n  const options = createTestOptions();\n  const collection = new DocCollection(options);\n  collection.meta.initialize();\n  const doc = collection.createDoc({ id: docId });\n  doc.load();\n  return doc;\n}\n\ndescribe('schema', () => {\n  it('should be able to validate schema by role', () => {\n    const consoleMock = vi\n      .spyOn(console, 'error')\n      .mockImplementation(() => undefined);\n    const doc = createTestDoc();\n    const rootId = doc.addBlock('affine:page', {});\n    const noteId = doc.addBlock('affine:note', {}, rootId);\n    const paragraphId = doc.addBlock('affine:paragraph', {}, noteId);\n\n    doc.addBlock('affine:note', {});\n    expect(consoleMock.mock.calls[0]).toSatisfy((call: unknown[]) => {\n      return typeof call[0] === 'string';\n    });\n    expect(consoleMock.mock.calls[1]).toSatisfy((call: unknown[]) => {\n      return call[0] instanceof SchemaValidateError;\n    });\n\n    consoleMock.mockClear();\n    // add paragraph to root should throw\n    doc.addBlock('affine:paragraph', {}, rootId);\n    expect(consoleMock.mock.calls[0]).toSatisfy((call: unknown[]) => {\n      return typeof call[0] === 'string';\n    });\n    expect(consoleMock.mock.calls[1]).toSatisfy((call: unknown[]) => {\n      return call[0] instanceof SchemaValidateError;\n    });\n\n    consoleMock.mockClear();\n    doc.addBlock('affine:note', {}, rootId);\n    doc.addBlock('affine:paragraph', {}, noteId);\n    doc.addBlock('affine:paragraph', {}, paragraphId);\n    expect(consoleMock).not.toBeCalled();\n  });\n\n  it('should glob match works', () => {\n    const consoleMock = vi\n      .spyOn(console, 'error')\n      .mockImplementation(() => undefined);\n    const doc = createTestDoc();\n    const rootId = doc.addBlock('affine:page', {});\n    const noteId = doc.addBlock('affine:note', {}, rootId);\n\n    doc.addBlock('affine:note-block-video', {}, noteId);\n    expect(consoleMock).not.toBeCalled();\n\n    doc.addBlock('affine:note-invalid-block-video', {}, noteId);\n    expect(consoleMock.mock.calls[0]).toSatisfy((call: unknown[]) => {\n      return typeof call[0] === 'string';\n    });\n    expect(consoleMock.mock.calls[1]).toSatisfy((call: unknown[]) => {\n      return call[0] instanceof SchemaValidateError;\n    });\n  });\n});\n\ndeclare global {\n  namespace BlockSuite {\n    interface BlockModels {\n      'affine:note-block-video': BlockModel;\n      'affine:note-invalid-block-video': BlockModel;\n    }\n  }\n}\n"]}