{"version":3,"file":"test-schema.js","sourceRoot":"","sources":["../../src/__tests__/test-schema.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,iBAAiB,EAAsB,MAAM,oBAAoB,CAAC;AAE3E,MAAM,CAAC,MAAM,eAAe,GAAG,iBAAiB,CAAC;IAC/C,OAAO,EAAE,aAAa;IACtB,KAAK,EAAE,QAAQ,CAAC,EAAE,CAAC,CAAC;QAClB,KAAK,EAAE,QAAQ,CAAC,IAAI,EAAE;QACtB,KAAK,EAAE,CAAC;QACR,KAAK,EAAE,EAA6B;QACpC,KAAK,EAAE,EAAe;KACvB,CAAC;IACF,QAAQ,EAAE;QACR,OAAO,EAAE,CAAC;QACV,IAAI,EAAE,MAAM;KACb;CACF,CAAC,CAAC;AAIH,MAAM,CAAC,MAAM,eAAe,GAAG,iBAAiB,CAAC;IAC/C,OAAO,EAAE,aAAa;IACtB,KAAK,EAAE,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC;IACjB,QAAQ,EAAE;QACR,OAAO,EAAE,CAAC;QACV,IAAI,EAAE,KAAK;QACX,MAAM,EAAE,CAAC,aAAa,CAAC;QACvB,QAAQ,EAAE;YACR,kBAAkB;YAClB,aAAa;YACb,aAAa;YACb,gBAAgB;YAChB,iBAAiB;YACjB,kBAAkB;YAClB,cAAc;YACd,qBAAqB;YACrB,iBAAiB;YACjB,mBAAmB;YACnB,oBAAoB;YACpB,gBAAgB;SACjB;KACF;CACF,CAAC,CAAC;AAEH,MAAM,CAAC,MAAM,oBAAoB,GAAG,iBAAiB,CAAC;IACpD,OAAO,EAAE,kBAAkB;IAC3B,KAAK,EAAE,QAAQ,CAAC,EAAE,CAAC,CAAC;QAClB,IAAI,EAAE,MAAM;QACZ,IAAI,EAAE,QAAQ,CAAC,IAAI,EAAE;KACtB,CAAC;IACF,QAAQ,EAAE;QACR,OAAO,EAAE,CAAC;QACV,IAAI,EAAE,SAAS;QACf,MAAM,EAAE;YACN,aAAa;YACb,iBAAiB;YACjB,kBAAkB;YAClB,aAAa;SACd;KACF;CACF,CAAC,CAAC;AAEH,MAAM,CAAC,MAAM,eAAe,GAAG,iBAAiB,CAAC;IAC/C,OAAO,EAAE,aAAa;IACtB,KAAK,EAAE,QAAQ,CAAC,EAAE,CAAC,CAAC;QAClB,IAAI,EAAE,UAAU;QAChB,IAAI,EAAE,QAAQ,CAAC,IAAI,EAAE;QACrB,OAAO,EAAE,KAAK;QACd,SAAS,EAAE,KAAK;KACjB,CAAC;IACF,QAAQ,EAAE;QACR,OAAO,EAAE,CAAC;QACV,IAAI,EAAE,SAAS;QACf,MAAM,EAAE;YACN,aAAa;YACb,iBAAiB;YACjB,aAAa;YACb,kBAAkB;SACnB;KACF;CACF,CAAC,CAAC;AAEH,MAAM,CAAC,MAAM,kBAAkB,GAAG,iBAAiB,CAAC;IAClD,OAAO,EAAE,gBAAgB;IACzB,QAAQ,EAAE;QACR,OAAO,EAAE,CAAC;QACV,IAAI,EAAE,SAAS;QACf,QAAQ,EAAE,EAAE;KACb;CACF,CAAC,CAAC","sourcesContent":["import { defineBlockSchema, type SchemaToModel } from '../schema/index.js';\n\nexport const RootBlockSchema = defineBlockSchema({\n  flavour: 'affine:page',\n  props: internal => ({\n    title: internal.Text(),\n    count: 0,\n    style: {} as Record<string, unknown>,\n    items: [] as unknown[],\n  }),\n  metadata: {\n    version: 2,\n    role: 'root',\n  },\n});\n\nexport type RootBlockModel = SchemaToModel<typeof RootBlockSchema>;\n\nexport const NoteBlockSchema = defineBlockSchema({\n  flavour: 'affine:note',\n  props: () => ({}),\n  metadata: {\n    version: 1,\n    role: 'hub',\n    parent: ['affine:page'],\n    children: [\n      'affine:paragraph',\n      'affine:list',\n      'affine:code',\n      'affine:divider',\n      'affine:database',\n      'affine:data-view',\n      'affine:image',\n      'affine:note-block-*',\n      'affine:bookmark',\n      'affine:attachment',\n      'affine:surface-ref',\n      'affine:embed-*',\n    ],\n  },\n});\n\nexport const ParagraphBlockSchema = defineBlockSchema({\n  flavour: 'affine:paragraph',\n  props: internal => ({\n    type: 'text',\n    text: internal.Text(),\n  }),\n  metadata: {\n    version: 1,\n    role: 'content',\n    parent: [\n      'affine:note',\n      'affine:database',\n      'affine:paragraph',\n      'affine:list',\n    ],\n  },\n});\n\nexport const ListBlockSchema = defineBlockSchema({\n  flavour: 'affine:list',\n  props: internal => ({\n    type: 'bulleted',\n    text: internal.Text(),\n    checked: false,\n    collapsed: false,\n  }),\n  metadata: {\n    version: 1,\n    role: 'content',\n    parent: [\n      'affine:note',\n      'affine:database',\n      'affine:list',\n      'affine:paragraph',\n    ],\n  },\n});\n\nexport const DividerBlockSchema = defineBlockSchema({\n  flavour: 'affine:divider',\n  metadata: {\n    version: 1,\n    role: 'content',\n    children: [],\n  },\n});\n"]}