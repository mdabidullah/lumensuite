{"version":3,"file":"transformer.unit.spec.js","sourceRoot":"","sources":["../../src/__tests__/transformer.unit.spec.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,MAAM,EAAE,IAAI,EAAE,MAAM,QAAQ,CAAC;AACtC,OAAO,KAAK,CAAC,MAAM,KAAK,CAAC;AAEzB,OAAO,EAAE,cAAc,EAAE,MAAM,qBAAqB,CAAC;AACrD,OAAO,EAAE,IAAI,EAAE,MAAM,sBAAsB,CAAC;AAC5C,OAAO,EAEL,iBAAiB,EACjB,MAAM,GAEP,MAAM,oBAAoB,CAAC;AAC5B,OAAO,EAAE,aAAa,EAAE,eAAe,EAAE,MAAM,mBAAmB,CAAC;AACnE,OAAO,EAAE,aAAa,EAAE,oBAAoB,EAAE,MAAM,yBAAyB,CAAC;AAE9E,MAAM,SAAS,GAAG,iBAAiB,CAAC;IAClC,OAAO,EAAE,MAAM;IACf,KAAK,EAAE,QAAQ,CAAC,EAAE,CAAC,CAAC;QAClB,KAAK,EAAE,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC;QACjC,KAAK,EAAE,CAAC;QACR,KAAK,EAAE;YACL,KAAK,EAAE,KAAK;SACb;QACD,KAAK,EAAE;YACL;gBACE,EAAE,EAAE,CAAC;gBACL,OAAO,EAAE,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC;aACjC;YACD;gBACE,EAAE,EAAE,CAAC;gBACL,OAAO,EAAE,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC;aACjC;YACD;gBACE,EAAE,EAAE,CAAC;gBACL,OAAO,EAAE,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC;aACjC;SACF;KACF,CAAC;IACF,QAAQ,EAAE;QACR,IAAI,EAAE,MAAM;QACZ,OAAO,EAAE,CAAC;KACX;CACF,CAAC,CAAC;AAIH,SAAS,iBAAiB;IACxB,MAAM,WAAW,GAAG,eAAe,CAAC,aAAa,CAAC;IAClD,MAAM,MAAM,GAAG,IAAI,MAAM,EAAE,CAAC;IAC5B,MAAM,CAAC,QAAQ,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;IAC7B,OAAO,EAAE,EAAE,EAAE,iBAAiB,EAAE,WAAW,EAAE,MAAM,EAAE,CAAC;AACxD,CAAC;AAED,MAAM,WAAW,GAAG,IAAI,oBAAoB,EAAE,CAAC;AAC/C,MAAM,QAAQ,GAAG,IAAI,cAAc,EAAE,CAAC;AACtC,MAAM,MAAM,GAAG,IAAI,aAAa,CAAC,EAAE,IAAI,EAAE,QAAQ,EAAE,CAAC,CAAC;AAErD,IAAI,CAAC,mBAAmB,EAAE,GAAG,EAAE;IAC7B,MAAM,OAAO,GAAG,iBAAiB,EAAE,CAAC;IACpC,MAAM,UAAU,GAAG,IAAI,aAAa,CAAC,OAAO,CAAC,CAAC;IAC9C,UAAU,CAAC,IAAI,CAAC,UAAU,EAAE,CAAC;IAC7B,MAAM,GAAG,GAAG,UAAU,CAAC,SAAS,CAAC,EAAE,EAAE,EAAE,MAAM,EAAE,CAAC,CAAC;IACjD,GAAG,CAAC,IAAI,EAAE,CAAC;IACX,GAAG,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;IACrB,MAAM,SAAS,GAAG,GAAG,CAAC,IAAsB,CAAC;IAE7C,MAAM,CAAC,SAAS,CAAC,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC;IACjC,MAAM,QAAQ,GAAG,WAAW,CAAC,UAAU,CAAC;QACtC,KAAK,EAAE,SAAS;QAChB,MAAM;KACP,CAAC,CAAC;IACH,MAAM,CAAC,QAAQ,CAAC,CAAC,eAAe,EAAE,CAAC;AACrC,CAAC,CAAC,CAAC;AAEH,IAAI,CAAC,mBAAmB,EAAE,KAAK,IAAI,EAAE;IACnC,MAAM,OAAO,GAAG,iBAAiB,EAAE,CAAC;IACpC,MAAM,UAAU,GAAG,IAAI,aAAa,CAAC,OAAO,CAAC,CAAC;IAC9C,UAAU,CAAC,IAAI,CAAC,UAAU,EAAE,CAAC;IAC7B,MAAM,GAAG,GAAG,UAAU,CAAC,SAAS,CAAC,EAAE,EAAE,EAAE,MAAM,EAAE,CAAC,CAAC;IACjD,GAAG,CAAC,IAAI,EAAE,CAAC;IACX,GAAG,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;IACrB,MAAM,SAAS,GAAG,GAAG,CAAC,IAAsB,CAAC;IAE7C,MAAM,OAAO,GAAG,IAAI,CAAC,CAAC,GAAG,EAAE,CAAC;IAC5B,MAAM,GAAG,GAAG,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;IAEnC,MAAM,CAAC,SAAS,CAAC,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC;IACjC,MAAM,QAAQ,GAAG,MAAM,WAAW,CAAC,UAAU,CAAC;QAC5C,KAAK,EAAE,SAAS;QAChB,MAAM;KACP,CAAC,CAAC;IAEH,MAAM,KAAK,GAAG,MAAM,WAAW,CAAC,YAAY,CAAC;QAC3C,IAAI,EAAE,QAAQ;QACd,MAAM;QACN,QAAQ,EAAE,EAAE;KACb,CAAC,CAAC;IACH,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;IAE9C,aAAa;IACb,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;IAE/C,aAAa;IACb,GAAG,CAAC,GAAG,CAAC,OAAO,EAAE,KAAK,CAAC,KAAK,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;IAC1C,aAAa;IACb,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IAEvD,aAAa;IACb,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC;QAChC,KAAK,EAAE,KAAK;KACb,CAAC,CAAC;IAEH,aAAa;IACb,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IAElC,aAAa;IACb,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,aAAa,CAAC;QACtC;YACE,EAAE,EAAE,CAAC;SACN;QACD;YACE,EAAE,EAAE,CAAC;SACN;QACD;YACE,EAAE,EAAE,CAAC;SACN;KACF,CAAC,CAAC;IAEH,aAAa;IACb,KAAK,CAAC,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,KAAK,EAAE,EAAE;QACxC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;QAC1C,MAAM,GAAG,GAAG,QAAQ,KAAK,UAAU,CAAC;QACpC,GAAG,CAAC,GAAG,CAAC,GAAG,EAAE,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QACjC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,KAAK,GAAG,CAAC,EAAE,CAAC,CAAC;IAC5D,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import { expect, test } from 'vitest';\nimport * as Y from 'yjs';\n\nimport { MemoryBlobCRUD } from '../adapter/index.js';\nimport { Text } from '../reactive/index.js';\nimport {\n  type BlockModel,\n  defineBlockSchema,\n  Schema,\n  type SchemaToModel,\n} from '../schema/index.js';\nimport { DocCollection, IdGeneratorType } from '../store/index.js';\nimport { AssetsManager, BaseBlockTransformer } from '../transformer/index.js';\n\nconst docSchema = defineBlockSchema({\n  flavour: 'page',\n  props: internal => ({\n    title: internal.Text('doc title'),\n    count: 3,\n    style: {\n      color: 'red',\n    },\n    items: [\n      {\n        id: 0,\n        content: internal.Text('item 1'),\n      },\n      {\n        id: 1,\n        content: internal.Text('item 2'),\n      },\n      {\n        id: 2,\n        content: internal.Text('item 3'),\n      },\n    ],\n  }),\n  metadata: {\n    role: 'root',\n    version: 1,\n  },\n});\n\ntype RootBlockModel = SchemaToModel<typeof docSchema>;\n\nfunction createTestOptions() {\n  const idGenerator = IdGeneratorType.AutoIncrement;\n  const schema = new Schema();\n  schema.register([docSchema]);\n  return { id: 'test-collection', idGenerator, schema };\n}\n\nconst transformer = new BaseBlockTransformer();\nconst blobCRUD = new MemoryBlobCRUD();\nconst assets = new AssetsManager({ blob: blobCRUD });\n\ntest('model to snapshot', () => {\n  const options = createTestOptions();\n  const collection = new DocCollection(options);\n  collection.meta.initialize();\n  const doc = collection.createDoc({ id: 'home' });\n  doc.load();\n  doc.addBlock('page');\n  const rootModel = doc.root as RootBlockModel;\n\n  expect(rootModel).not.toBeNull();\n  const snapshot = transformer.toSnapshot({\n    model: rootModel,\n    assets,\n  });\n  expect(snapshot).toMatchSnapshot();\n});\n\ntest('snapshot to model', async () => {\n  const options = createTestOptions();\n  const collection = new DocCollection(options);\n  collection.meta.initialize();\n  const doc = collection.createDoc({ id: 'home' });\n  doc.load();\n  doc.addBlock('page');\n  const rootModel = doc.root as RootBlockModel;\n\n  const tempDoc = new Y.Doc();\n  const map = tempDoc.getMap('temp');\n\n  expect(rootModel).not.toBeNull();\n  const snapshot = await transformer.toSnapshot({\n    model: rootModel,\n    assets,\n  });\n\n  const model = await transformer.fromSnapshot({\n    json: snapshot,\n    assets,\n    children: [],\n  });\n  expect(model.flavour).toBe(rootModel.flavour);\n\n  // @ts-ignore\n  expect(model.props.title).toBeInstanceOf(Text);\n\n  // @ts-ignore\n  map.set('title', model.props.title.yText);\n  // @ts-ignore\n  expect(model.props.title.toString()).toBe('doc title');\n\n  // @ts-ignore\n  expect(model.props.style).toEqual({\n    color: 'red',\n  });\n\n  // @ts-ignore\n  expect(model.props.count).toBe(3);\n\n  // @ts-ignore\n  expect(model.props.items).toMatchObject([\n    {\n      id: 0,\n    },\n    {\n      id: 1,\n    },\n    {\n      id: 2,\n    },\n  ]);\n\n  // @ts-ignore\n  model.props.items.forEach((item, index) => {\n    expect(item.content).toBeInstanceOf(Text);\n    const key = `item:${index}:content`;\n    map.set(key, item.content.yText);\n    expect(item.content.toString()).toBe(`item ${index + 1}`);\n  });\n});\n\ndeclare global {\n  namespace BlockSuite {\n    interface BlockModels {\n      page: BlockModel;\n    }\n  }\n}\n"]}