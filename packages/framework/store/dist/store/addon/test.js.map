{"version":3,"file":"test.js","sourceRoot":"","sources":["../../../src/store/addon/test.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,YAAY,EAAE,MAAM,0BAA0B,CAAC;AAIxD,OAAO,EAAE,aAAa,EAAE,aAAa,EAAE,MAAM,oBAAoB,CAAC;AAClE,OAAO,EAAE,YAAY,EAAE,MAAM,aAAa,CAAC;AAO3C,MAAM,CAAC,MAAM,IAAI,GAAG,YAAY,CAC9B,aAAa,CAAC,EAAE,CACd,KAAM,SAAQ,aAAa;IACzB,iCAAiC;IACjC,SAAS,CAAC,OAAgB,EAAE,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE;QAC9D,YAAY,CAAC,KAAK,CAAC,CAAC;QACpB,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;QACvC,YAAY,CAAC,GAAG,CAAC,CAAC;QAClB,MAAM,OAAO,GAAG,aAAa,CAAC,GAAG,CAAC,CAAC;QACnC,IAAI,CAAC,OAAO,EAAE,CAAC;YACb,MAAM,IAAI,KAAK,CAAC,OAAO,KAAK,gBAAgB,CAAC,CAAC;QAChD,CAAC;QACD,MAAM,SAAS,GAAG,OAAO,CAAC,MAAiC,CAAC;QAC5D,IAAI,CAAC,OAAO,EAAE,CAAC;YACb,MAAM,MAAM,GAAG,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;YAC5C,IAAI,CAAC,MAAM,EAAE,CAAC;gBACZ,OAAO,IAAI,CAAC;YACd,CAAC;YACD,OAAO,GAAG,MAAM,CAAC;QACnB,CAAC;QACD,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,EAAE,CAAC;YACxB,OAAO,IAAI,CAAC;QACd,CAAC;QACD,OAAO,aAAa,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;IAC3C,CAAC;CACF,CACJ,CAAC","sourcesContent":["import { assertExists } from '@blocksuite/global/utils';\n\nimport type { JSXElement } from '../../utils/jsx.js';\n\nimport { serializeYDoc, yDocToJSXNode } from '../../utils/jsx.js';\nimport { addOnFactory } from './shared.js';\n\nexport interface TestAddon {\n  importDocSnapshot: (json: unknown, docId: string) => Promise<void>;\n  exportJSX: (blockId?: string, docId?: string) => JSXElement;\n}\n\nexport const test = addOnFactory<keyof TestAddon>(\n  originalClass =>\n    class extends originalClass {\n      /** @internal Only for testing */\n      exportJSX(blockId?: string, docId = this.meta.docMetas.at(0)?.id) {\n        assertExists(docId);\n        const doc = this.doc.spaces.get(docId);\n        assertExists(doc);\n        const docJson = serializeYDoc(doc);\n        if (!docJson) {\n          throw new Error(`Doc ${docId} doesn't exist`);\n        }\n        const blockJson = docJson.blocks as Record<string, unknown>;\n        if (!blockId) {\n          const rootId = Object.keys(blockJson).at(0);\n          if (!rootId) {\n            return null;\n          }\n          blockId = rootId;\n        }\n        if (!blockJson[blockId]) {\n          return null;\n        }\n        return yDocToJSXNode(blockJson, blockId);\n      }\n    }\n);\n"]}