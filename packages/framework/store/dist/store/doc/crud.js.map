{"version":3,"file":"crud.js","sourceRoot":"","sources":["../../../src/store/doc/crud.ts"],"names":[],"mappings":"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","sourcesContent":["import { BlockSuiteError, ErrorCode } from '@blocksuite/global/exceptions';\nimport * as Y from 'yjs';\n\nimport type { YBlock } from './index.js';\n\nimport { native2Y } from '../../reactive/index.js';\nimport {\n  type BlockModel,\n  internalPrimitives,\n  type Schema,\n} from '../../schema/index.js';\n\nexport class DocCRUD {\n  get root(): string | null {\n    let rootId: string | null = null;\n    this._yBlocks.forEach(yBlock => {\n      const flavour = yBlock.get('sys:flavour');\n      const schema = this._schema.flavourSchemaMap.get(flavour);\n      if (!schema) return;\n\n      if (schema.model.role === 'root') {\n        rootId = yBlock.get('sys:id');\n      }\n    });\n    return rootId;\n  }\n\n  constructor(\n    private readonly _yBlocks: Y.Map<YBlock>,\n    private readonly _schema: Schema\n  ) {}\n\n  private _getSiblings<T>(\n    id: string,\n    fn: (index: number, parent: YBlock) => T\n  ) {\n    const parentId = this.getParent(id);\n    if (!parentId) return null;\n    const parent = this._yBlocks.get(parentId);\n    if (!parent) return null;\n\n    const children = parent.get('sys:children');\n    const index = children.toArray().indexOf(id);\n    if (index === -1) return null;\n\n    return fn(index, parent);\n  }\n\n  addBlock(\n    id: string,\n    flavour: string,\n    initialProps: Record<string, unknown> = {},\n    parent?: string | null,\n    parentIndex?: number\n  ) {\n    const schema = this._schema.flavourSchemaMap.get(flavour);\n    if (!schema) {\n      throw new BlockSuiteError(\n        ErrorCode.ModelCRUDError,\n        `schema for flavour: ${flavour} not found`\n      );\n    }\n\n    const parentFlavour = parent\n      ? this._yBlocks.get(parent)?.get('sys:flavour')\n      : undefined;\n\n    this._schema.validate(flavour, parentFlavour);\n\n    const yBlock = new Y.Map() as YBlock;\n    this._yBlocks.set(id, yBlock);\n\n    const version = schema.version;\n    const children = (\n      initialProps.children as undefined | (string | BlockModel)[]\n    )?.map(child => (typeof child === 'string' ? child : child.id));\n\n    yBlock.set('sys:id', id);\n    yBlock.set('sys:flavour', flavour);\n    yBlock.set('sys:version', version);\n    yBlock.set('sys:children', Y.Array.from(children ?? []));\n\n    const defaultProps = schema.model.props?.(internalPrimitives) ?? {};\n    const props = {\n      ...defaultProps,\n      ...initialProps,\n    };\n\n    delete props.id;\n    delete props.flavour;\n    delete props.children;\n\n    Object.entries(props).forEach(([key, value]) => {\n      if (value === undefined) return;\n\n      yBlock.set(`prop:${key}`, native2Y(value));\n    });\n\n    const parentId =\n      parent ?? (schema.model.role === 'root' ? null : this.root);\n\n    if (!parentId) return;\n\n    const yParent = this._yBlocks.get(parentId);\n    if (!yParent) return;\n\n    const yParentChildren = yParent.get('sys:children') as Y.Array<string>;\n    const index = parentIndex ?? yParentChildren.length;\n    yParentChildren.insert(index, [id]);\n  }\n\n  deleteBlock(\n    id: string,\n    options: {\n      bringChildrenTo?: string;\n      deleteChildren?: boolean;\n    } = {\n      deleteChildren: true,\n    }\n  ) {\n    const { bringChildrenTo, deleteChildren } = options;\n    if (bringChildrenTo && deleteChildren) {\n      console.error(\n        'Cannot bring children to another block and delete them at the same time'\n      );\n      return;\n    }\n\n    const yModel = this._yBlocks.get(id);\n    if (!yModel) return;\n\n    const yModelChildren = yModel.get('sys:children') as Y.Array<string>;\n\n    const parent = this.getParent(id);\n\n    if (!parent) return;\n    const yParent = this._yBlocks.get(parent) as YBlock;\n    const yParentChildren = yParent.get('sys:children') as Y.Array<string>;\n    const modelIndex = yParentChildren.toArray().indexOf(id);\n\n    if (modelIndex > -1) {\n      yParentChildren.delete(modelIndex, 1);\n    }\n\n    const apply = () => {\n      if (bringChildrenTo) {\n        const bringChildrenToModel = () => {\n          if (!bringChildrenTo) {\n            throw new BlockSuiteError(\n              ErrorCode.ModelCRUDError,\n              'bringChildrenTo is not provided when deleting block'\n            );\n          }\n          const model = this._yBlocks.get(bringChildrenTo);\n          if (!model) return;\n          const bringFlavour = model.get('sys:flavour');\n\n          yModelChildren.forEach(child => {\n            const childModel = this._yBlocks.get(child);\n            if (!childModel) return;\n            this._schema.validate(childModel.get('sys:flavour'), bringFlavour);\n          });\n\n          if (bringChildrenTo === parent) {\n            // When bring children to parent, insert children to the original position of model\n            yParentChildren.insert(modelIndex, yModelChildren.toArray());\n            return;\n          }\n\n          const yBringChildrenTo = this._yBlocks.get(bringChildrenTo);\n          if (!yBringChildrenTo) return;\n\n          const yBringChildrenToChildren = yBringChildrenTo.get(\n            'sys:children'\n          ) as Y.Array<string>;\n          yBringChildrenToChildren.push(yModelChildren.toArray());\n        };\n\n        bringChildrenToModel();\n        return;\n      }\n\n      if (deleteChildren) {\n        // delete children recursively\n        const deleteById = (id: string) => {\n          const yBlock = this._yBlocks.get(id) as YBlock;\n\n          const yChildren = yBlock.get('sys:children') as Y.Array<string>;\n          yChildren.forEach(id => deleteById(id));\n\n          this._yBlocks.delete(id);\n        };\n\n        yModelChildren.forEach(id => deleteById(id));\n      }\n    };\n\n    apply();\n\n    this._yBlocks.delete(id);\n  }\n\n  getNext(id: string) {\n    return this._getSiblings(\n      id,\n      (index, parent) =>\n        parent\n          .get('sys:children')\n          .toArray()\n          .at(index + 1) ?? null\n    );\n  }\n\n  getParent(targetId: string): string | null {\n    const root = this.root;\n    if (!root || root === targetId) return null;\n\n    const findParent = (parentId: string): string | null => {\n      const parentYBlock = this._yBlocks.get(parentId);\n      if (!parentYBlock) return null;\n\n      const children = parentYBlock.get('sys:children');\n\n      for (const childId of children.toArray()) {\n        if (childId === targetId) return parentId;\n\n        const parent = findParent(childId);\n        if (parent != null) return parent;\n      }\n\n      return null;\n    };\n\n    return findParent(root);\n  }\n\n  getPrev(id: string) {\n    return this._getSiblings(\n      id,\n      (index, parent) =>\n        parent\n          .get('sys:children')\n          .toArray()\n          .at(index - 1) ?? null\n    );\n  }\n\n  moveBlocks(\n    blocksToMove: string[],\n    newParent: string,\n    targetSibling: string | null = null,\n    shouldInsertBeforeSibling = true\n  ) {\n    // A map to store parent block and their respective child blocks\n    const childBlocksPerParent = new Map<string, string[]>();\n\n    const parentBlock = this._yBlocks.get(newParent);\n    if (!parentBlock) return;\n\n    const parentFlavour = parentBlock.get('sys:flavour');\n\n    blocksToMove.forEach(blockId => {\n      const parent = this.getParent(blockId);\n      if (!parent) return;\n\n      const block = this._yBlocks.get(blockId);\n      if (!block) return;\n\n      this._schema.validate(block.get('sys:flavour'), parentFlavour);\n\n      const children = childBlocksPerParent.get(parent);\n      if (!children) {\n        childBlocksPerParent.set(parent, [blockId]);\n        return;\n      }\n\n      const last = children[children.length - 1];\n      if (this.getNext(last) !== blockId) {\n        throw new BlockSuiteError(\n          ErrorCode.ModelCRUDError,\n          'The blocks to move are not contiguous under their parent'\n        );\n      }\n\n      children.push(blockId);\n    });\n\n    let insertIndex = 0;\n    Array.from(childBlocksPerParent.entries()).forEach(\n      ([parentBlock, blocksToMove], index) => {\n        const targetParentBlock = this._yBlocks.get(newParent);\n        if (!targetParentBlock) return;\n        const targetParentChildren = targetParentBlock.get('sys:children');\n        const sourceParentBlock = this._yBlocks.get(parentBlock);\n        if (!sourceParentBlock) return;\n        const sourceParentChildren = sourceParentBlock.get('sys:children');\n\n        // Get the IDs of blocks to move\n        // Remove the blocks from their current parent\n        const startIndex = sourceParentChildren\n          .toArray()\n          .findIndex(id => id === blocksToMove[0]);\n        sourceParentChildren.delete(startIndex, blocksToMove.length);\n\n        const updateInsertIndex = () => {\n          const first = index === 0;\n          if (!first) {\n            insertIndex++;\n            return;\n          }\n\n          if (!targetSibling) {\n            insertIndex = targetParentChildren.length;\n            return;\n          }\n\n          const targetIndex = targetParentChildren\n            .toArray()\n            .findIndex(id => id === targetSibling);\n          if (targetIndex === -1) {\n            throw new BlockSuiteError(\n              ErrorCode.ModelCRUDError,\n              'Target sibling not found'\n            );\n          }\n          insertIndex = shouldInsertBeforeSibling\n            ? targetIndex\n            : targetIndex + 1;\n        };\n\n        updateInsertIndex();\n\n        targetParentChildren.insert(insertIndex, blocksToMove);\n      }\n    );\n  }\n\n  updateBlockChildren(id: string, children: string[]) {\n    const yBlock = this._yBlocks.get(id);\n    if (!yBlock) return;\n\n    const yChildrenArray = yBlock.get('sys:children') as Y.Array<string>;\n    yChildrenArray.delete(0, yChildrenArray.length);\n    yChildrenArray.push(children);\n  }\n}\n"]}