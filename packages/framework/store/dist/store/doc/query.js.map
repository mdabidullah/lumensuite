{"version":3,"file":"query.js","sourceRoot":"","sources":["../../../src/store/doc/query.ts"],"names":[],"mappings":"AAAA,OAAO,OAAO,MAAM,gBAAgB,CAAC;AAKrC,OAAO,EAAE,aAAa,EAAE,MAAM,aAAa,CAAC;AAqB5C,MAAM,UAAU,QAAQ,CAAC,KAAY,EAAE,KAAY;IACjD,MAAM,aAAa,GAAG,gBAAgB,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;IACrD,KAAK,CAAC,aAAa,GAAG,aAAa,CAAC;IAEpC,IAAI,aAAa,KAAK,aAAa,CAAC,MAAM,EAAE,CAAC;QAC3C,MAAM,SAAS,GAAG,KAAK,CAAC,IAAI,CAAC;QAC7B,6BAA6B,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;IAClD,CAAC;AACH,CAAC;AAED,SAAS,gBAAgB,CAAC,KAAY,EAAE,KAAY;IAClD,MAAM,OAAO,GAAG,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC;IACpC,MAAM,EAAE,GAAG,KAAK,CAAC,KAAK,CAAC,EAAE,CAAC;IAC1B,MAAM,SAAS,GAAG,KAAK,CAAC,IAAI,CAAC;IAC7B,MAAM,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CACnC,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE;QACX,OAAO;YACL,GAAG,GAAG;YACN,CAAC,GAAG,CAAC,EAAE,KAAK,CAAC,KAAK,CAAC,GAAuB,CAAC;SAC5C,CAAC;IACJ,CAAC,EACD,EAA6B,CAC9B,CAAC;IACF,IAAI,aAAa,GACf,SAAS,KAAK,OAAO,CAAC,CAAC,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC,CAAC,aAAa,CAAC,MAAM,CAAC;IAEvE,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,EAAE;QAC7B,MAAM,EACJ,EAAE,EAAE,OAAO,EACX,OAAO,EAAE,YAAY,EACrB,KAAK,EAAE,UAAU,EACjB,QAAQ,GACT,GAAG,WAAW,CAAC;QAChB,MAAM,YAAY,GAAG,OAAO,IAAI,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,OAAO,KAAK,EAAE,CAAC;QAC7D,MAAM,iBAAiB,GACrB,YAAY,IAAI,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,YAAY,KAAK,OAAO,CAAC;QACzD,MAAM,eAAe,GACnB,UAAU,IAAI,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,EAAE,UAAU,CAAC,CAAC;QACzD,IAAI,YAAY,IAAI,iBAAiB,IAAI,eAAe,EAAE,CAAC;YACzD,aAAa,GAAG,QAAQ,CAAC;YACzB,OAAO,IAAI,CAAC;QACd,CAAC;QACD,OAAO,KAAK,CAAC;IACf,CAAC,CAAC,CAAC;IAEH,OAAO,aAAa,CAAC;AACvB,CAAC;AAED,SAAS,6BAA6B,CAAC,IAAe,EAAE,KAAY;IAClE,MAAM,GAAG,GAAG,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC;IAC5B,IAAI,MAAM,GAAG,GAAG,CAAC,SAAS,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;IACxC,OAAO,MAAM,EAAE,CAAC;QACd,MAAM,WAAW,GAAG,GAAG,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;QAC5C,IAAI,WAAW,IAAI,WAAW,CAAC,aAAa,KAAK,aAAa,CAAC,MAAM,EAAE,CAAC;YACtE,WAAW,CAAC,aAAa;gBACvB,IAAI,KAAK,SAAS,CAAC,CAAC,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC,CAAC,aAAa,CAAC,MAAM,CAAC;QACtE,CAAC;QACD,MAAM,GAAG,GAAG,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;IACjC,CAAC;AACH,CAAC","sourcesContent":["import isMatch from 'lodash.ismatch';\n\nimport type { BlockModel } from '../../schema/index.js';\nimport type { Block } from './block/index.js';\n\nimport { BlockViewType } from './consts.js';\n\nexport type QueryMatch = {\n  id?: string;\n  flavour?: string;\n  props?: Record<string, unknown>;\n  viewType: BlockViewType;\n};\n\n/**\n * - `strict` means that only blocks that match the query will be included.\n * - `loose` means that all blocks will be included first, and then the blocks will be run through the query.\n * - `include` means that only blocks and their ancestors that match the query will be included.\n */\ntype QueryMode = 'strict' | 'loose' | 'include';\n\nexport type Query = {\n  match: QueryMatch[];\n  mode: QueryMode;\n};\n\nexport function runQuery(query: Query, block: Block) {\n  const blockViewType = getBlockViewType(query, block);\n  block.blockViewType = blockViewType;\n\n  if (blockViewType !== BlockViewType.Hidden) {\n    const queryMode = query.mode;\n    setAncestorsToDisplayIfHidden(queryMode, block);\n  }\n}\n\nfunction getBlockViewType(query: Query, block: Block): BlockViewType {\n  const flavour = block.model.flavour;\n  const id = block.model.id;\n  const queryMode = query.mode;\n  const props = block.model.keys.reduce(\n    (acc, key) => {\n      return {\n        ...acc,\n        [key]: block.model[key as keyof BlockModel],\n      };\n    },\n    {} as Record<string, unknown>\n  );\n  let blockViewType =\n    queryMode === 'loose' ? BlockViewType.Display : BlockViewType.Hidden;\n\n  query.match.some(queryObject => {\n    const {\n      id: queryId,\n      flavour: queryFlavour,\n      props: queryProps,\n      viewType,\n    } = queryObject;\n    const matchQueryId = queryId == null ? true : queryId === id;\n    const matchQueryFlavour =\n      queryFlavour == null ? true : queryFlavour === flavour;\n    const matchQueryProps =\n      queryProps == null ? true : isMatch(props, queryProps);\n    if (matchQueryId && matchQueryFlavour && matchQueryProps) {\n      blockViewType = viewType;\n      return true;\n    }\n    return false;\n  });\n\n  return blockViewType;\n}\n\nfunction setAncestorsToDisplayIfHidden(mode: QueryMode, block: Block) {\n  const doc = block.model.doc;\n  let parent = doc.getParent(block.model);\n  while (parent) {\n    const parentBlock = doc.getBlock(parent.id);\n    if (parentBlock && parentBlock.blockViewType === BlockViewType.Hidden) {\n      parentBlock.blockViewType =\n        mode === 'include' ? BlockViewType.Display : BlockViewType.Bypass;\n    }\n    parent = doc.getParent(parent);\n  }\n}\n"]}