{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../src/store/doc/block/index.ts"],"names":[],"mappings":"AAIA,OAAO,EAAE,aAAa,EAAE,MAAM,cAAc,CAAC;AAC7C,OAAO,EAAE,cAAc,EAAE,MAAM,sBAAsB,CAAC;AAEtD,cAAc,YAAY,CAAC;AAE3B,MAAM,OAAO,KAAK;IAKhB,IAAI,OAAO;QACT,OAAO,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC;IACtC,CAAC;IAED,IAAI,EAAE;QACJ,OAAO,IAAI,CAAC,eAAe,CAAC,EAAE,CAAC;IACjC,CAAC;IAED,IAAI,KAAK;QACP,OAAO,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC;IACpC,CAAC;IAED,IAAI,GAAG;QACL,OAAO,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC;IAClC,CAAC;IAED,IAAI,KAAK;QACP,OAAO,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC;IACpC,CAAC;IAED,IAAI,OAAO;QACT,OAAO,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC;IACtC,CAAC;IAED,YACW,MAAc,EACd,MAAc,EACd,GAAS,EACT,UAAwB,EAAE;QAH1B,WAAM,GAAN,MAAM,CAAQ;QACd,WAAM,GAAN,MAAM,CAAQ;QACd,QAAG,GAAH,GAAG,CAAM;QACT,YAAO,GAAP,OAAO,CAAmB;QA9BrC,kBAAa,GAAkB,aAAa,CAAC,OAAO,CAAC;QAgCnD,MAAM,QAAQ,GAAG,CAAC,OAAO,CAAC,QAAQ;YAChC,CAAC,CAAC,SAAS;YACX,CAAC,CAAC,CAAC,GAAW,EAAE,KAAc,EAAE,EAAE;gBAC9B,OAAO,CAAC,QAAQ,EAAE,CAAC,IAAI,EAAE,GAAG,EAAE,KAAK,CAAC,CAAC;YACvC,CAAC,CAAC;QACN,IAAI,CAAC,eAAe,GAAG,IAAI,cAAc,CAAC,MAAM,EAAE,MAAM,EAAE,GAAG,EAAE,QAAQ,CAAC,CAAC;IAC3E,CAAC;CACF","sourcesContent":["import type { Schema } from '../../../schema/index.js';\nimport type { Doc } from '../doc.js';\nimport type { BlockOptions, YBlock } from './types.js';\n\nimport { BlockViewType } from '../consts.js';\nimport { SyncController } from './sync-controller.js';\n\nexport * from './types.js';\n\nexport class Block {\n  private _syncController: SyncController;\n\n  blockViewType: BlockViewType = BlockViewType.Display;\n\n  get flavour() {\n    return this._syncController.flavour;\n  }\n\n  get id() {\n    return this._syncController.id;\n  }\n\n  get model() {\n    return this._syncController.model;\n  }\n\n  get pop() {\n    return this._syncController.pop;\n  }\n\n  get stash() {\n    return this._syncController.stash;\n  }\n\n  get version() {\n    return this._syncController.version;\n  }\n\n  constructor(\n    readonly schema: Schema,\n    readonly yBlock: YBlock,\n    readonly doc?: Doc,\n    readonly options: BlockOptions = {}\n  ) {\n    const onChange = !options.onChange\n      ? undefined\n      : (key: string, value: unknown) => {\n          options.onChange?.(this, key, value);\n        };\n    this._syncController = new SyncController(schema, yBlock, doc, onChange);\n  }\n}\n"]}