{"version":3,"file":"collection.js","sourceRoot":"","sources":["../../src/store/collection.ts"],"names":[],"mappings":"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","sourcesContent":["import { BlockSuiteError, ErrorCode } from '@blocksuite/global/exceptions';\nimport { type Logger, NoopLogger, Slot } from '@blocksuite/global/utils';\nimport {\n  AwarenessEngine,\n  type AwarenessSource,\n  BlobEngine,\n  type BlobSource,\n  DocEngine,\n  type DocSource,\n  MemoryBlobSource,\n  NoopDocSource,\n} from '@blocksuite/sync';\nimport clonedeep from 'lodash.clonedeep';\nimport merge from 'lodash.merge';\nimport { Awareness } from 'y-protocols/awareness.js';\nimport * as Y from 'yjs';\n\nimport type { Schema } from '../schema/index.js';\nimport type { IdGenerator } from '../utils/id-generator.js';\nimport type { Doc, Query } from './doc/index.js';\nimport type { IdGeneratorType } from './id.js';\n\nimport {\n  AwarenessStore,\n  BlockSuiteDoc,\n  type RawAwarenessState,\n} from '../yjs/index.js';\nimport { DocCollectionAddonType, test } from './addon/index.js';\nimport { BlockCollection, type GetDocOptions } from './doc/block-collection.js';\nimport { pickIdGenerator } from './id.js';\nimport { DocCollectionMeta, type DocMeta } from './meta.js';\n\nexport type DocCollectionOptions = {\n  schema: Schema;\n  id?: string;\n  idGenerator?: IdGeneratorType | IdGenerator;\n  defaultFlags?: Partial<BlockSuiteFlags>;\n  logger?: Logger;\n  docSources?: {\n    main: DocSource;\n    shadows?: DocSource[];\n  };\n  blobSources?: {\n    main: BlobSource;\n    shadows?: BlobSource[];\n  };\n  awarenessSources?: AwarenessSource[];\n};\n\nconst FLAGS_PRESET = {\n  enable_synced_doc_block: false,\n  enable_pie_menu: false,\n  enable_database_number_formatting: false,\n  enable_database_attachment_note: false,\n  enable_legacy_validation: true,\n  enable_block_query: false,\n  enable_lasso_tool: false,\n  enable_edgeless_text: true,\n  enable_ai_onboarding: false,\n  enable_ai_chat_block: false,\n  enable_color_picker: false,\n  enable_mind_map_import: false,\n  readonly: {},\n} satisfies BlockSuiteFlags;\n\nexport interface StackItem {\n  meta: Map<'cursor-location' | 'selection-state', unknown>;\n}\n\n@test\nexport class DocCollection extends DocCollectionAddonType {\n  static Y = Y;\n\n  protected readonly _schema: Schema;\n\n  readonly awarenessStore: AwarenessStore;\n\n  readonly awarenessSync: AwarenessEngine;\n\n  readonly blobSync: BlobEngine;\n\n  readonly blockCollections = new Map<string, BlockCollection>();\n\n  readonly doc: BlockSuiteDoc;\n\n  readonly docSync: DocEngine;\n\n  readonly id: string;\n\n  readonly idGenerator: IdGenerator;\n\n  meta: DocCollectionMeta;\n\n  slots = {\n    docAdded: new Slot<string>(),\n    docUpdated: new Slot(),\n    docRemoved: new Slot<string>(),\n    docCreated: new Slot<string>(),\n  };\n\n  get docs() {\n    return this.blockCollections;\n  }\n\n  get isEmpty() {\n    if (this.doc.store.clients.size === 0) return true;\n\n    let flag = false;\n    if (this.doc.store.clients.size === 1) {\n      const items = Array.from(this.doc.store.clients.values())[0];\n      // workspaceVersion and pageVersion were set when the collection is initialized\n      if (items.length <= 2) {\n        flag = true;\n      }\n    }\n    return flag;\n  }\n\n  get schema() {\n    return this._schema;\n  }\n\n  constructor({\n    id,\n    schema,\n    idGenerator,\n    defaultFlags,\n    awarenessSources = [],\n    docSources = {\n      main: new NoopDocSource(),\n    },\n    blobSources = {\n      main: new MemoryBlobSource(),\n    },\n    logger = new NoopLogger(),\n  }: DocCollectionOptions) {\n    super();\n    this._schema = schema;\n\n    this.id = id || '';\n    this.doc = new BlockSuiteDoc({ guid: id });\n    this.awarenessStore = new AwarenessStore(\n      new Awareness<RawAwarenessState>(this.doc),\n      merge(clonedeep(FLAGS_PRESET), defaultFlags)\n    );\n\n    this.awarenessSync = new AwarenessEngine(\n      this.awarenessStore.awareness,\n      awarenessSources\n    );\n    this.docSync = new DocEngine(\n      this.doc,\n      docSources.main,\n      docSources.shadows ?? [],\n      logger\n    );\n    this.blobSync = new BlobEngine(\n      blobSources.main,\n      blobSources.shadows ?? [],\n      logger\n    );\n\n    this.idGenerator = pickIdGenerator(idGenerator, this.doc.clientID);\n\n    this.meta = new DocCollectionMeta(this.doc);\n    this._bindDocMetaEvents();\n  }\n\n  private _bindDocMetaEvents() {\n    this.meta.docMetaAdded.on(docId => {\n      const doc = new BlockCollection({\n        id: docId,\n        collection: this,\n        doc: this.doc,\n        awarenessStore: this.awarenessStore,\n        idGenerator: this.idGenerator,\n      });\n      this.blockCollections.set(doc.id, doc);\n      this.slots.docAdded.emit(doc.id);\n    });\n\n    this.meta.docMetaUpdated.on(() => this.slots.docUpdated.emit());\n\n    this.meta.docMetaRemoved.on(id => {\n      const space = this.getBlockCollection(id);\n      if (!space) return;\n      this.blockCollections.delete(id);\n      space.remove();\n      this.slots.docRemoved.emit(id);\n    });\n  }\n\n  private _hasDoc(docId: string) {\n    return this.docs.has(docId);\n  }\n\n  /**\n   * Verify that all data has been successfully saved to the primary storage.\n   * Return true if the data transfer is complete and it is secure to terminate the synchronization operation.\n   */\n  canGracefulStop() {\n    this.docSync.canGracefulStop();\n  }\n\n  /**\n   * By default, only an empty doc will be created.\n   * If the `init` parameter is passed, a `surface`, `note`, and `paragraph` block\n   * will be created in the doc simultaneously.\n   */\n  createDoc(options: { id?: string; query?: Query } = {}) {\n    const { id: docId = this.idGenerator(), query } = options;\n    if (this._hasDoc(docId)) {\n      throw new BlockSuiteError(\n        ErrorCode.DocCollectionError,\n        'doc already exists'\n      );\n    }\n\n    this.meta.addDocMeta({\n      id: docId,\n      title: '',\n      createDate: Date.now(),\n      tags: [],\n    });\n    this.slots.docCreated.emit(docId);\n    return this.getDoc(docId, { query }) as Doc;\n  }\n\n  /**\n   * Terminate the data sync process forcefully, which may cause data loss.\n   * It is advised to invoke `canGracefulStop` before calling this method.\n   */\n  forceStop() {\n    this.docSync.forceStop();\n    this.blobSync.stop();\n    this.awarenessSync.disconnect();\n  }\n\n  getBlockCollection(docId: string): BlockCollection | null {\n    const space = this.docs.get(docId) as BlockCollection | undefined;\n    return space ?? null;\n  }\n\n  getDoc(docId: string, options?: GetDocOptions): Doc | null {\n    const collection = this.getBlockCollection(docId);\n    return collection?.getDoc(options) ?? null;\n  }\n\n  removeDoc(docId: string) {\n    const docMeta = this.meta.getDocMeta(docId);\n    if (!docMeta) {\n      throw new BlockSuiteError(\n        ErrorCode.DocCollectionError,\n        `doc meta not found: ${docId}`\n      );\n    }\n\n    const blockCollection = this.getBlockCollection(docId);\n    if (!blockCollection) return;\n\n    blockCollection.dispose();\n    this.meta.removeDocMeta(docId);\n    this.blockCollections.delete(docId);\n  }\n\n  /** Update doc meta state. Note that this intentionally does not mutate doc state. */\n  setDocMeta(\n    docId: string,\n    // You should not update subDocIds directly.\n    props: Partial<DocMeta>\n  ) {\n    this.meta.setDocMeta(docId, props);\n  }\n\n  /**\n   * Start the data sync process\n   */\n  start() {\n    this.docSync.start();\n    this.blobSync.start();\n    this.awarenessSync.connect();\n  }\n\n  /**\n   * Wait for all data has been successfully saved to the primary storage.\n   */\n  waitForGracefulStop(abort?: AbortSignal) {\n    return this.docSync.waitForGracefulStop(abort);\n  }\n\n  waitForSynced() {\n    return this.docSync.waitForSynced();\n  }\n}\n"]}