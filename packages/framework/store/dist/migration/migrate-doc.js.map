{"version":3,"file":"migrate-doc.js","sourceRoot":"","sources":["../../src/migration/migrate-doc.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,YAAY,EAAE,MAAM,0BAA0B,CAAC;AACxD,OAAO,KAAK,CAAC,MAAM,KAAK,CAAC;AAQzB,MAAM,CAAC,MAAM,aAAa,GAAoB;IAC5C;QACE,IAAI,EAAE,+CAA+C;QACrD,SAAS,EAAE,cAAc,CAAC,EAAE;YAC1B,OAAO,cAAc,GAAG,CAAC,CAAC;QAC5B,CAAC;QACD,OAAO,EAAE,CAAC,CAAC,EAAE,OAAO,EAAE,EAAE;YACtB,MAAM,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC,QAAQ,CAA0B,CAAC;YACjE,IAAI,SAA0B,EAAE,OAAwB,CAAC;YACzD,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;gBACrB,MAAM,OAAO,GAAG,KAAK,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC;gBACzC,IAAI,OAAO,KAAK,aAAa,EAAE,CAAC;oBAC9B,SAAS,GAAG,KAAK,CAAC;gBACpB,CAAC;gBACD,IAAI,OAAO,KAAK,gBAAgB,EAAE,CAAC;oBACjC,OAAO,GAAG,KAAK,CAAC;gBAClB,CAAC;YACH,CAAC,CAAC,CAAC;YACH,YAAY,CAAC,SAAS,CAAC,CAAC;YACxB,YAAY,CAAC,OAAO,CAAC,CAAC;YACtB,aAAa;YACb,MAAM,QAAQ,GAAG,OAAO,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC,GAAG,CAAC,OAAO,CAExD,CAAC;YACF,QAAQ,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE;gBACzB,IAAI,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,KAAK,OAAO,EAAE,CAAC;oBACpC,MAAM,UAAU,GAAG,IAAI,CAAC,CAAC,GAAG,EAAE,CAAC;oBAC/B,MAAM,EAAE,GAAG,OAAO,CAAC,GAAG,CAAC,IAAI,CAAW,CAAC;oBACvC,UAAU,CAAC,GAAG,CAAC,aAAa,EAAE,cAAc,CAAC,CAAC;oBAC9C,UAAU,CAAC,GAAG,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC;oBAC7B,UAAU,CAAC,GAAG,CAAC,cAAc,EAAE,IAAI,CAAC,CAAC,KAAK,EAAE,CAAC,CAAC;oBAC9C,UAAU,CAAC,GAAG,CACZ,YAAY,EACX,OAAO,CAAC,GAAG,CAAC,OAAO,CAAY,CAAC,KAAK,EAAE,CACzC,CAAC;oBACF,UAAU,CAAC,GAAG,CAAC,WAAW,EAAE,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC;oBACjD,UAAU,CAAC,GAAG,CAAC,YAAY,EAAE,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC;oBACnD,MAAM,CAAC,GAAG,CAAC,EAAE,EAAE,UAAU,CAAC,CAAC;oBAC1B,SAAS,CAAC,GAAG,CAAC,cAAc,CAAqB,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;oBAC9D,QAAQ,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;gBACtB,CAAC;YACH,CAAC,CAAC,CAAC;QACL,CAAC;KACF;CACF,CAAC","sourcesContent":["import { assertExists } from '@lumensuite/global/utils';\nimport * as Y from 'yjs';\n\ninterface IDocMigration {\n  desc: string;\n  condition: (oldPageVersion: number, docData: Y.Doc) => boolean;\n  migrate: (oldPageVersion: number, docData: Y.Doc) => void;\n}\n\nexport const docMigrations: IDocMigration[] = [\n  {\n    desc: 'frame element --> frame block (doc v1 --> v2)',\n    condition: oldPageVersion => {\n      return oldPageVersion < 2;\n    },\n    migrate: (_, docData) => {\n      const blocks = docData.getMap('blocks') as Y.Map<Y.Map<unknown>>;\n      let rootModel!: Y.Map<unknown>, surface!: Y.Map<unknown>;\n      blocks.forEach(block => {\n        const flavour = block.get('sys:flavour');\n        if (flavour === 'affine:page') {\n          rootModel = block;\n        }\n        if (flavour === 'affine:surface') {\n          surface = block;\n        }\n      });\n      assertExists(rootModel);\n      assertExists(surface);\n      // @ts-ignore\n      const elements = surface.get('prop:elements').get('value') as Y.Map<\n        Y.Map<unknown>\n      >;\n      elements.forEach(element => {\n        if (element.get('type') === 'frame') {\n          const frameModel = new Y.Map();\n          const id = element.get('id') as string;\n          frameModel.set('sys:flavour', 'affine:frame');\n          frameModel.set('sys:id', id);\n          frameModel.set('sys:children', new Y.Array());\n          frameModel.set(\n            'prop:title',\n            (element.get('title') as Y.Text).clone()\n          );\n          frameModel.set('prop:xywh', element.get('xywh'));\n          frameModel.set('prop:index', element.get('index'));\n          blocks.set(id, frameModel);\n          (rootModel.get('sys:children') as Y.Array<string>).push([id]);\n          elements.delete(id);\n        }\n      });\n    },\n  },\n];\n"]}