{"version":3,"file":"awareness.js","sourceRoot":"","sources":["../../src/yjs/awareness.ts"],"names":[],"mappings":"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","sourcesContent":["import type { Awareness as YAwareness } from 'y-protocols/awareness.js';\n\nimport { Slot } from '@lumensuite/global/utils';\nimport { type Signal, signal } from '@preact/signals-core';\nimport clonedeep from 'lodash.clonedeep';\nimport merge from 'lodash.merge';\n\nimport type { BlockCollection } from '../store/index.js';\n\nexport interface UserInfo {\n  name: string;\n}\n\ntype UserSelection = Array<Record<string, unknown>>;\n\n// Raw JSON state in awareness CRDT\nexport type RawAwarenessState<\n  Flags extends Record<string, unknown> = LumenSuiteFlags,\n> = {\n  user?: UserInfo;\n  color?: string;\n  flags: Flags;\n  // use v2 to avoid crush on old clients\n  selectionV2: Record<string, UserSelection>;\n};\n\nexport interface AwarenessEvent<\n  Flags extends Record<string, unknown> = LumenSuiteFlags,\n> {\n  id: number;\n  type: 'add' | 'update' | 'remove';\n  state?: RawAwarenessState<Flags>;\n}\n\nexport class AwarenessStore<\n  Flags extends Record<string, unknown> = LumenSuiteFlags,\n> {\n  private _flags: Signal<Flags>;\n\n  private _onAwarenessChange = (diff: {\n    added: number[];\n    removed: number[];\n    updated: number[];\n  }) => {\n    this._flags.value = this.awareness.getLocalState()?.flags ?? {};\n\n    const { added, removed, updated } = diff;\n\n    const states = this.awareness.getStates();\n    added.forEach(id => {\n      this.slots.update.emit({\n        id,\n        type: 'add',\n        state: states.get(id),\n      });\n    });\n    updated.forEach(id => {\n      this.slots.update.emit({\n        id,\n        type: 'update',\n        state: states.get(id),\n      });\n    });\n    removed.forEach(id => {\n      this.slots.update.emit({\n        id,\n        type: 'remove',\n      });\n    });\n  };\n\n  readonly awareness: YAwareness<RawAwarenessState<Flags>>;\n\n  readonly slots = {\n    update: new Slot<AwarenessEvent<Flags>>(),\n  };\n\n  constructor(\n    awareness: YAwareness<RawAwarenessState<Flags>>,\n    defaultFlags: Flags\n  ) {\n    this._flags = signal<Flags>(defaultFlags);\n    this.awareness = awareness;\n    this.awareness.on('change', this._onAwarenessChange);\n    this.awareness.setLocalStateField('selectionV2', {});\n    this._initFlags(defaultFlags);\n  }\n\n  private _initFlags(defaultFlags: Flags) {\n    const upstreamFlags = this.awareness.getLocalState()?.flags;\n    const flags = clonedeep(defaultFlags);\n    if (upstreamFlags) {\n      merge(flags, upstreamFlags);\n    }\n    this.awareness.setLocalStateField('flags', flags);\n  }\n\n  destroy() {\n    if (this.awareness) {\n      this.awareness.off('change', this._onAwarenessChange);\n      this.slots.update.dispose();\n    }\n  }\n\n  getFlag<Key extends keyof Flags>(field: Key) {\n    return this._flags.value[field];\n  }\n\n  getLocalSelection(\n    selectionManagerId: string\n  ): ReadonlyArray<Record<string, unknown>> {\n    return (\n      (this.awareness.getLocalState()?.selectionV2 ?? {})[selectionManagerId] ??\n      []\n    );\n  }\n\n  getStates(): Map<number, RawAwarenessState<Flags>> {\n    return this.awareness.getStates();\n  }\n\n  isReadonly(blockCollection: BlockCollection): boolean {\n    const rd = this.getFlag('readonly');\n    if (rd && typeof rd === 'object') {\n      return Boolean((rd as Record<string, boolean>)[blockCollection.id]);\n    } else {\n      return false;\n    }\n  }\n\n  setFlag<Key extends keyof Flags>(field: Key, value: Flags[Key]) {\n    const oldFlags = this.awareness.getLocalState()?.flags ?? {};\n    this.awareness.setLocalStateField('flags', { ...oldFlags, [field]: value });\n  }\n\n  setLocalSelection(selectionManagerId: string, selection: UserSelection) {\n    const oldSelection = this.awareness.getLocalState()?.selectionV2 ?? {};\n    this.awareness.setLocalStateField('selectionV2', {\n      ...oldSelection,\n      [selectionManagerId]: selection,\n    });\n  }\n\n  setReadonly(blockCollection: BlockCollection, value: boolean): void {\n    const flags = this.getFlag('readonly') ?? {};\n    this.setFlag('readonly', {\n      ...flags,\n      [blockCollection.id]: value,\n    } as Flags['readonly']);\n  }\n}\n"]}