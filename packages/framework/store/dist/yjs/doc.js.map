{"version":3,"file":"doc.js","sourceRoot":"","sources":["../../src/yjs/doc.ts"],"names":[],"mappings":"AAEA,OAAO,KAAK,CAAC,MAAM,KAAK,CAAC;AAEzB,OAAO,EAAE,YAAY,EAAE,MAAM,sBAAsB,CAAC;AAQpD,MAAM,OAAO,aAAc,SAAQ,CAAC,CAAC,GAAG;IAAxC;;QACU,YAAO,GAAiB,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;IA8CxD,CAAC;IA5CC,IAAI,MAAM;QACR,OAAO,IAAI,CAAC,OAAO,CAAC;IACtB,CAAC;IAED,aAAa,CAKX,GAAQ;QACR,MAAM,KAAK,GAAG,KAAK,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;QAClC,OAAO,YAAY,CAAC,KAAK,CAAU,CAAC;IACtC,CAAC;IAED,WAAW,CAQT,GAAQ;QACR,MAAM,GAAG,GAAG,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;QAC9B,OAAO,YAAY,CAAC,GAAG,CAAC,CAAC;IAC3B,CAAC;IAED,8DAA8D;IACrD,MAAM;QACb,MAAM,IAAI,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC;QAC5B,OAAO,IAAI,CAAC,MAAM,CAAC;QACnB,MAAM,MAAM,GAA4B,EAAE,CAAC;QAC3C,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE;YAC/B,MAAM,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,MAAM,EAAE,CAAC;QAC7B,CAAC,CAAC,CAAC;QACH,OAAO;YACL,GAAG,IAAI;YACP,MAAM;SACP,CAAC;IACJ,CAAC;IAEQ,QAAQ,CAAI,CAA2B,EAAE,MAAwB;QACxE,OAAO,KAAK,CAAC,QAAQ,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC;IACnC,CAAC;CACF","sourcesContent":["import type { Transaction } from 'yjs';\n\nimport * as Y from 'yjs';\n\nimport { createYProxy } from '../reactive/proxy.js';\n\nexport type LumenSuiteDocAllowedValue =\n  | Record<string, unknown>\n  | unknown[]\n  | Y.Text;\nexport type LumenSuiteDocData = Record<string, LumenSuiteDocAllowedValue>;\n\nexport class LumenSuiteDoc extends Y.Doc {\n  private _spaces: Y.Map<Y.Doc> = this.getMap('spaces');\n\n  get spaces() {\n    return this._spaces;\n  }\n\n  getArrayProxy<\n    Key extends keyof LumenSuiteDocData & string,\n    Value extends unknown[] = LumenSuiteDocData[Key] extends unknown[]\n      ? LumenSuiteDocData[Key]\n      : never,\n  >(key: Key): Value {\n    const array = super.getArray(key);\n    return createYProxy(array) as Value;\n  }\n\n  getMapProxy<\n    Key extends keyof LumenSuiteDocData & string,\n    Value extends Record<\n      string,\n      unknown\n    > = LumenSuiteDocData[Key] extends Record<string, unknown>\n      ? LumenSuiteDocData[Key]\n      : never,\n  >(key: Key): Value {\n    const map = super.getMap(key);\n    return createYProxy(map);\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  override toJSON(): Record<string, any> {\n    const json = super.toJSON();\n    delete json.spaces;\n    const spaces: Record<string, unknown> = {};\n    this.spaces.forEach((doc, key) => {\n      spaces[key] = doc.toJSON();\n    });\n    return {\n      ...json,\n      spaces,\n    };\n  }\n\n  override transact<T>(f: (arg0: Transaction) => T, origin?: number | string) {\n    return super.transact(f, origin);\n  }\n}\n"]}