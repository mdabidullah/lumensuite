{"version":3,"file":"range.js","sourceRoot":"","sources":["../../src/services/range.ts"],"names":[],"mappings":"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","sourcesContent":["import { REQUEST_IDLE_CALLBACK_ENABLED } from '@blocksuite/global/env';\nimport { assertExists } from '@blocksuite/global/utils';\nimport * as Y from 'yjs';\n\nimport type { VLine } from '../components/v-line.js';\nimport type { InlineEditor } from '../inline-editor.js';\nimport type {\n  InlineRange,\n  InlineRangeUpdatedProp,\n  TextPoint,\n} from '../types.js';\nimport type { BaseTextAttributes } from '../utils/base-attributes.js';\n\nimport { isMaybeInlineRangeEqual } from '../utils/inline-range.js';\nimport {\n  domRangeToInlineRange,\n  inlineRangeToDomRange,\n} from '../utils/range-conversion.js';\nimport { calculateTextLength, getTextNodesFromElement } from '../utils/text.js';\n\nexport class RangeService<TextAttributes extends BaseTextAttributes> {\n  private _applyInlineRange = (inlineRange: InlineRange): void => {\n    const selection = document.getSelection();\n    if (!selection) {\n      return;\n    }\n    try {\n      const newRange = this.toDomRange(inlineRange);\n\n      if (!newRange) {\n        return;\n      }\n\n      selection.removeAllRanges();\n      selection.addRange(newRange);\n      this.editor.slots.inlineRangeApply.emit(newRange);\n    } catch (error) {\n      console.error('failed to apply inline range');\n      console.error(error);\n    }\n  };\n\n  private _inlineRange: InlineRange | null = null;\n\n  private _lastEndRelativePosition: Y.RelativePosition | null = null;\n\n  private _lastStartRelativePosition: Y.RelativePosition | null = null;\n\n  focusEnd = (): void => {\n    this.setInlineRange({\n      index: this.editor.yTextLength,\n      length: 0,\n    });\n  };\n\n  focusIndex = (index: number): void => {\n    this.setInlineRange({\n      index,\n      length: 0,\n    });\n  };\n\n  focusStart = (): void => {\n    this.setInlineRange({\n      index: 0,\n      length: 0,\n    });\n  };\n\n  getInlineRange = (): InlineRange | null => {\n    if (this.inlineRangeProvider) {\n      return this.inlineRangeProvider.getInlineRange();\n    }\n\n    return this._inlineRange;\n  };\n\n  getInlineRangeFromElement = (element: Element): InlineRange | null => {\n    const range = document.createRange();\n    const text = element.querySelector('[data-v-text]');\n    if (!text) {\n      return null;\n    }\n    const textNode = text.childNodes[1];\n    assertExists(textNode instanceof Text);\n    range.setStart(textNode, 0);\n    range.setEnd(textNode, textNode.textContent?.length ?? 0);\n    const inlineRange = this.toInlineRange(range);\n    return inlineRange;\n  };\n\n  /**\n   * There are two cases to have the second line:\n   * 1. long text auto wrap in span element\n   * 2. soft break\n   */\n  isFirstLine = (inlineRange: InlineRange | null): boolean => {\n    if (!inlineRange || inlineRange.length > 0) return false;\n\n    const range = this.toDomRange(inlineRange);\n    if (!range) {\n      console.error('failed to convert inline range to domRange');\n      return false;\n    }\n\n    // check case 1:\n    const beforeText = this.editor.yTextString.slice(0, inlineRange.index);\n    if (beforeText.includes('\\n')) {\n      return false;\n    }\n\n    // check case 2:\n    // If there is a wrapped text, there are two possible positions for\n    // cursor: (in first line and in second line)\n    // aaaaaaaa| or aaaaaaaa\n    // bb           |bb\n    // We have no way to distinguish them and we just assume that the cursor\n    // can not in the first line because if we apply the inline ranage manually the\n    // cursor will jump to the second line.\n    const container = range.commonAncestorContainer.parentElement;\n    assertExists(container);\n    const containerRect = container.getBoundingClientRect();\n    // There will be two rects if the cursor is at the edge of the line:\n    // aaaaaaaa| or aaaaaaaa\n    // bb           |bb\n    const rangeRects = range.getClientRects();\n    // We use last rect here to make sure we get the second rect.\n    // (Based on the assumption that the cursor can not in the first line)\n    const rangeRect = rangeRects[rangeRects.length - 1];\n    const tolerance = 1;\n    return Math.abs(rangeRect.top - containerRect.top) < tolerance;\n  };\n\n  /**\n   * There are two cases to have the second line:\n   * 1. long text auto wrap in span element\n   * 2. soft break\n   */\n  isLastLine = (inlineRange: InlineRange | null): boolean => {\n    if (!inlineRange || inlineRange.length > 0) return false;\n\n    // check case 1:\n    const afterText = this.editor.yTextString.slice(inlineRange.index);\n    if (afterText.includes('\\n')) {\n      return false;\n    }\n\n    const range = this.toDomRange(inlineRange);\n    if (!range) {\n      console.error('failed to convert inline range to domRange');\n      return false;\n    }\n\n    // check case 2:\n    // If there is a wrapped text, there are two possible positions for\n    // cursor: (in first line and in second line)\n    // aaaaaaaa| or aaaaaaaa\n    // bb           |bb\n    // We have no way to distinguish them and we just assume that the cursor\n    // can not in the first line because if we apply the inline range manually the\n    // cursor will jump to the second line.\n    const container = range.commonAncestorContainer.parentElement;\n    assertExists(container);\n    const containerRect = container.getBoundingClientRect();\n    // There will be two rects if the cursor is at the edge of the line:\n    // aaaaaaaa| or aaaaaaaa\n    // bb           |bb\n    const rangeRects = range.getClientRects();\n    // We use last rect here to make sure we get the second rect.\n    // (Based on the assumption that the cursor can not be in the first line)\n    const rangeRect = rangeRects[rangeRects.length - 1];\n\n    const tolerance = 1;\n    return Math.abs(rangeRect.bottom - containerRect.bottom) < tolerance;\n  };\n\n  isValidInlineRange = (inlineRange: InlineRange | null): boolean => {\n    return !(\n      inlineRange &&\n      (inlineRange.index < 0 ||\n        inlineRange.index + inlineRange.length > this.editor.yText.length)\n    );\n  };\n\n  onInlineRangeUpdated = async ([\n    newInlineRange,\n    sync,\n  ]: InlineRangeUpdatedProp) => {\n    const eq = isMaybeInlineRangeEqual(this._inlineRange, newInlineRange);\n    if (eq) {\n      return;\n    }\n\n    this._inlineRange = newInlineRange;\n\n    if (newInlineRange) {\n      this._lastStartRelativePosition = Y.createRelativePositionFromTypeIndex(\n        this.yText,\n        newInlineRange.index\n      );\n      this._lastEndRelativePosition = Y.createRelativePositionFromTypeIndex(\n        this.yText,\n        newInlineRange.index + newInlineRange.length\n      );\n    } else {\n      this._lastStartRelativePosition = null;\n      this._lastEndRelativePosition = null;\n    }\n\n    // try to trigger update because the `selected` state of inline editor element may change\n    if (this.editor.mounted) {\n      // range change may happen before the editor is prepared\n      await this.editor.waitForUpdate();\n      // improve performance\n      if (REQUEST_IDLE_CALLBACK_ENABLED) {\n        requestIdleCallback(() => {\n          this.editor.requestUpdate(false);\n        });\n      } else {\n        Promise.resolve()\n          .then(() => {\n            this.editor.requestUpdate(false);\n          })\n          .catch(console.error);\n      }\n    }\n\n    if (!sync) {\n      return;\n    }\n\n    if (this._inlineRange === null) {\n      const selection = document.getSelection();\n      if (selection && selection.rangeCount > 0) {\n        const range = selection.getRangeAt(0);\n        if (range.intersectsNode(this.editor.rootElement)) {\n          selection.removeAllRanges();\n        }\n      }\n      return;\n    }\n\n    const fn = () => {\n      // There may be multiple range update events in one frame,\n      // so we need to obtain the latest inline ranage.\n      // see https://github.com/toeverything/blocksuite/issues/2982\n      // when using input method inline ranage will return to the starting point,\n      // so we need to re-sync\n      this.syncInlineRange();\n    };\n\n    // updates in lit are performed asynchronously\n    requestAnimationFrame(fn);\n  };\n\n  selectAll = (): void => {\n    this.setInlineRange({\n      index: 0,\n      length: this.editor.yTextLength,\n    });\n  };\n\n  /**\n   * the inline range is synced to the native selection asynchronously\n   * if sync is true, the native selection will be synced immediately\n   */\n  setInlineRange = (inlineRange: InlineRange | null, sync = true): void => {\n    if (!this.isValidInlineRange(inlineRange)) {\n      console.error('invalid inline range');\n      return;\n    }\n\n    if (this.inlineRangeProvider) {\n      this.inlineRangeProvider.setInlineRange(inlineRange, sync);\n      return;\n    }\n\n    this.editor.slots.inlineRangeUpdate.emit([inlineRange, sync]);\n  };\n\n  /**\n   * sync the dom selection from inline ranage for **this Editor**\n   */\n  syncInlineRange = (): void => {\n    const inlineRange = this.getInlineRange();\n    if (inlineRange && this.editor.mounted) {\n      this._applyInlineRange(inlineRange);\n    }\n  };\n\n  /**\n   * calculate the dom selection from inline ranage for **this Editor**\n   */\n  toDomRange = (inlineRange: InlineRange): Range | null => {\n    const rootElement = this.editor.rootElement;\n    return inlineRangeToDomRange(rootElement, inlineRange);\n  };\n\n  /**\n   * calculate the inline ranage from dom selection for **this Editor**\n   * there are three cases when the inline ranage of this Editor is not null:\n   * (In the following, \"|\" mean anchor and focus, each line is a separate Editor)\n   * 1. anchor and focus are in this Editor\n   *    ```\n   *    aaaaaa\n   *    b|bbbb|b\n   *    cccccc\n   *    ```\n   *    the inline ranage of second Editor is `{index: 1, length: 4}`, the others are null\n   * 2. anchor and focus one in this Editor, one in another Editor\n   *    ```\n   *    aaa|aaa    aaaaaa\n   *    bbbbb|b or bbbbb|b\n   *    cccccc     cc|cccc\n   *    ```\n   *    2.1\n   *        the inline ranage of first Editor is `{index: 3, length: 3}`, the second is `{index: 0, length: 5}`,\n   *        the third is null\n   *    2.2\n   *        the inline ranage of first Editor is null, the second is `{index: 5, length: 1}`,\n   *        the third is `{index: 0, length: 2}`\n   * 3. anchor and focus are in another Editor\n   *    ```\n   *    aa|aaaa\n   *    bbbbbb\n   *    cccc|cc\n   *    ```\n   *    the inline range of first Editor is `{index: 2, length: 4}`,\n   *    the second is `{index: 0, length: 6}`, the third is `{index: 0, length: 4}`\n   */\n  toInlineRange = (range: Range): InlineRange | null => {\n    const { rootElement, yText } = this.editor;\n\n    return domRangeToInlineRange(range, rootElement, yText);\n  };\n\n  get inlineRangeProvider() {\n    return this.editor.inlineRangeProvider;\n  }\n\n  get lastEndRelativePosition() {\n    return this._lastEndRelativePosition;\n  }\n\n  get lastStartRelativePosition() {\n    return this._lastStartRelativePosition;\n  }\n\n  get rootElement() {\n    return this.editor.rootElement;\n  }\n\n  get yText() {\n    return this.editor.yText;\n  }\n\n  constructor(readonly editor: InlineEditor<TextAttributes>) {}\n\n  // the number is related to the VLine's textLength\n  getLine(rangeIndex: InlineRange['index']): {\n    line: VLine;\n    lineIndex: number;\n    rangeIndexRelatedToLine: number;\n  } | null {\n    const lineElements = Array.from(\n      this.rootElement.querySelectorAll('v-line')\n    );\n\n    let beforeIndex = 0;\n    for (const [lineIndex, lineElement] of lineElements.entries()) {\n      if (\n        rangeIndex >= beforeIndex &&\n        rangeIndex < beforeIndex + lineElement.vTextLength + 1\n      ) {\n        return {\n          line: lineElement,\n          lineIndex,\n          rangeIndexRelatedToLine: rangeIndex - beforeIndex,\n        };\n      }\n      beforeIndex += lineElement.vTextLength + 1;\n    }\n\n    console.error('failed to find line');\n    return null;\n  }\n\n  getNativeRange(): Range | null {\n    const selection = this.getNativeSelection();\n    if (!selection) return null;\n    return selection.getRangeAt(0);\n  }\n\n  getNativeSelection(): Selection | null {\n    const selection = document.getSelection();\n    if (!selection) return null;\n    if (selection.rangeCount === 0) return null;\n\n    return selection;\n  }\n\n  getTextPoint(rangeIndex: InlineRange['index']): TextPoint | null {\n    const vLines = Array.from(this.rootElement.querySelectorAll('v-line'));\n\n    let index = 0;\n    for (const vLine of vLines) {\n      const texts = getTextNodesFromElement(vLine);\n      if (texts.length === 0) {\n        return null;\n      }\n\n      for (const text of texts) {\n        if (!text.textContent) {\n          return null;\n        }\n        if (index + text.textContent.length >= rangeIndex) {\n          return [text, rangeIndex - index];\n        }\n        index += calculateTextLength(text);\n      }\n\n      index += 1;\n    }\n\n    return null;\n  }\n}\n"]}