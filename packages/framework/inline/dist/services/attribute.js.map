{"version":3,"file":"attribute.js","sourceRoot":"","sources":["../../src/services/attribute.ts"],"names":[],"mappings":"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","sourcesContent":["import type { z, ZodTypeDef } from 'zod';\n\nimport type { InlineEditor } from '../inline-editor.js';\nimport type { AttributeRenderer, InlineRange } from '../types.js';\nimport type { BaseTextAttributes } from '../utils/index.js';\n\nimport {\n  baseTextAttributes,\n  getDefaultAttributeRenderer,\n} from '../utils/index.js';\n\nexport class AttributeService<TextAttributes extends BaseTextAttributes> {\n  private _attributeRenderer: AttributeRenderer<TextAttributes> =\n    getDefaultAttributeRenderer<TextAttributes>();\n\n  private _attributeSchema: z.ZodSchema<TextAttributes, ZodTypeDef, unknown> =\n    baseTextAttributes as z.ZodSchema<TextAttributes, ZodTypeDef, unknown>;\n\n  private _marks: TextAttributes | null = null;\n\n  getFormat = (inlineRange: InlineRange, loose = false): TextAttributes => {\n    const deltas = this.editor.deltaService\n      .getDeltasByInlineRange(inlineRange)\n      .filter(\n        ([_, position]) =>\n          position.index + position.length > inlineRange.index &&\n          position.index <= inlineRange.index + inlineRange.length\n      );\n    const maybeAttributesList = deltas.map(([delta]) => delta.attributes);\n    if (loose) {\n      return maybeAttributesList.reduce(\n        (acc, cur) => ({ ...acc, ...cur }),\n        {}\n      ) as TextAttributes;\n    }\n    if (\n      !maybeAttributesList.length ||\n      // some text does not have any attribute\n      maybeAttributesList.some(attributes => !attributes)\n    ) {\n      return {} as TextAttributes;\n    }\n    const attributesList = maybeAttributesList as TextAttributes[];\n    return attributesList.reduce((acc, cur) => {\n      const newFormat = {} as TextAttributes;\n      for (const key in acc) {\n        const typedKey = key as keyof TextAttributes;\n        // If the given range contains multiple different formats\n        // such as links with different values,\n        // we will treat it as having no format\n        if (acc[typedKey] === cur[typedKey]) {\n          // This cast is secure because we have checked that the value of the key is the same.\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          newFormat[typedKey] = acc[typedKey] as any;\n        }\n      }\n      return newFormat;\n    });\n  };\n\n  normalizeAttributes = (textAttributes?: TextAttributes) => {\n    if (!textAttributes) {\n      return undefined;\n    }\n    const attributeResult = this._attributeSchema.safeParse(textAttributes);\n    if (!attributeResult.success) {\n      console.error(attributeResult.error);\n      return undefined;\n    }\n    return Object.fromEntries(\n      // filter out undefined values\n      Object.entries(attributeResult.data).filter(([_, v]) => v !== undefined)\n    ) as TextAttributes;\n  };\n\n  resetMarks = (): void => {\n    this._marks = null;\n  };\n\n  setAttributeRenderer = (renderer: AttributeRenderer<TextAttributes>) => {\n    this._attributeRenderer = renderer;\n  };\n\n  setAttributeSchema = (\n    schema: z.ZodSchema<TextAttributes, ZodTypeDef, unknown>\n  ) => {\n    this._attributeSchema = schema;\n  };\n\n  setMarks = (marks: TextAttributes): void => {\n    this._marks = marks;\n  };\n\n  get attributeRenderer() {\n    return this._attributeRenderer;\n  }\n\n  get marks() {\n    return this._marks;\n  }\n\n  constructor(readonly editor: InlineEditor<TextAttributes>) {}\n}\n"]}