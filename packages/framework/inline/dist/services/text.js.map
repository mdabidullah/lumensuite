{"version":3,"file":"text.js","sourceRoot":"","sources":["../../src/services/text.ts"],"names":[],"mappings":"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","sourcesContent":["import { LumenSuiteError, ErrorCode } from '@lumensuite/global/exceptions';\n\nimport type { InlineEditor } from '../inline-editor.js';\nimport type { DeltaInsert, InlineRange } from '../types.js';\nimport type { BaseTextAttributes } from '../utils/base-attributes.js';\n\nimport { intersectInlineRange } from '../utils/inline-range.js';\n\nexport class InlineTextService<TextAttributes extends BaseTextAttributes> {\n  deleteText = (inlineRange: InlineRange): void => {\n    if (this.editor.isReadonly) return;\n\n    this.transact(() => {\n      this.yText.delete(inlineRange.index, inlineRange.length);\n    });\n  };\n\n  formatText = (\n    inlineRange: InlineRange,\n    attributes: TextAttributes,\n    options: {\n      match?: (delta: DeltaInsert, deltaInlineRange: InlineRange) => boolean;\n      mode?: 'replace' | 'merge';\n    } = {}\n  ): void => {\n    if (this.editor.isReadonly) return;\n\n    const { match = () => true, mode = 'merge' } = options;\n    const deltas = this.editor.deltaService.getDeltasByInlineRange(inlineRange);\n\n    deltas\n      .filter(([delta, deltaInlineRange]) => match(delta, deltaInlineRange))\n      .forEach(([_delta, deltaInlineRange]) => {\n        const normalizedAttributes =\n          this.editor.attributeService.normalizeAttributes(attributes);\n        if (!normalizedAttributes) return;\n\n        const targetInlineRange = intersectInlineRange(\n          inlineRange,\n          deltaInlineRange\n        );\n        if (!targetInlineRange) return;\n\n        if (mode === 'replace') {\n          this.resetText(targetInlineRange);\n        }\n\n        this.transact(() => {\n          this.yText.format(\n            targetInlineRange.index,\n            targetInlineRange.length,\n            normalizedAttributes\n          );\n        });\n      });\n  };\n\n  insertLineBreak = (inlineRange: InlineRange): void => {\n    if (this.editor.isReadonly) return;\n\n    this.transact(() => {\n      this.yText.delete(inlineRange.index, inlineRange.length);\n      this.yText.insert(inlineRange.index, '\\n');\n    });\n  };\n\n  insertText = (\n    inlineRange: InlineRange,\n    text: string,\n    attributes: TextAttributes = {} as TextAttributes\n  ): void => {\n    if (this.editor.isReadonly) return;\n\n    if (this.editor.attributeService.marks) {\n      attributes = { ...attributes, ...this.editor.attributeService.marks };\n    }\n    const normalizedAttributes =\n      this.editor.attributeService.normalizeAttributes(attributes);\n\n    if (!text || !text.length) {\n      throw new LumenSuiteError(\n        ErrorCode.InlineEditorError,\n        'text must not be empty'\n      );\n    }\n\n    this.transact(() => {\n      this.yText.delete(inlineRange.index, inlineRange.length);\n      this.yText.insert(inlineRange.index, text, normalizedAttributes);\n    });\n  };\n\n  resetText = (inlineRange: InlineRange): void => {\n    if (this.editor.isReadonly) return;\n\n    const coverDeltas: DeltaInsert[] = [];\n    for (\n      let i = inlineRange.index;\n      i <= inlineRange.index + inlineRange.length;\n      i++\n    ) {\n      const delta = this.editor.getDeltaByRangeIndex(i);\n      if (delta) {\n        coverDeltas.push(delta);\n      }\n    }\n\n    const unset = Object.fromEntries(\n      coverDeltas.flatMap(delta =>\n        delta.attributes\n          ? Object.keys(delta.attributes).map(key => [key, null])\n          : []\n      )\n    );\n\n    this.transact(() => {\n      this.yText.format(inlineRange.index, inlineRange.length, {\n        ...unset,\n      });\n    });\n  };\n\n  setText = (\n    text: string,\n    attributes: TextAttributes = {} as TextAttributes\n  ): void => {\n    if (this.editor.isReadonly) return;\n\n    this.transact(() => {\n      this.yText.delete(0, this.yText.length);\n      this.yText.insert(0, text, attributes);\n    });\n  };\n\n  readonly transact = this.editor.transact;\n\n  get yText() {\n    return this.editor.yText;\n  }\n\n  constructor(readonly editor: InlineEditor<TextAttributes>) {}\n}\n"]}