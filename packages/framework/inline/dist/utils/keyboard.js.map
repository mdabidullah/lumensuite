{"version":3,"file":"keyboard.js","sourceRoot":"","sources":["../../src/utils/keyboard.ts"],"names":[],"mappings":"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","sourcesContent":["import { IS_IOS, IS_MAC } from '@blocksuite/global/env';\n\nimport type { InlineEditor } from '../inline-editor.js';\nimport type { InlineRange } from '../types.js';\nimport type { BaseTextAttributes } from './base-attributes.js';\n\nconst SHORT_KEY_PROPERTY = IS_IOS || IS_MAC ? 'metaKey' : 'ctrlKey';\n\nexport const KEYBOARD_PREVENT_DEFAULT = false;\nexport const KEYBOARD_ALLOW_DEFAULT = true;\n\nexport interface KeyboardBinding {\n  key: number | string | string[];\n  handler: KeyboardBindingHandler;\n  prefix?: RegExp;\n  suffix?: RegExp;\n  shortKey?: boolean;\n  shiftKey?: boolean;\n  altKey?: boolean;\n  metaKey?: boolean;\n  ctrlKey?: boolean;\n}\nexport type KeyboardBindingRecord = Record<string, KeyboardBinding>;\n\nexport interface KeyboardBindingContext<\n  TextAttributes extends BaseTextAttributes = BaseTextAttributes,\n> {\n  inlineRange: InlineRange;\n  inlineEditor: InlineEditor<TextAttributes>;\n  collapsed: boolean;\n  prefixText: string;\n  suffixText: string;\n  raw: KeyboardEvent;\n}\nexport type KeyboardBindingHandler = (\n  context: KeyboardBindingContext\n) => typeof KEYBOARD_PREVENT_DEFAULT | typeof KEYBOARD_ALLOW_DEFAULT;\n\nexport function createInlineKeyDownHandler(\n  inlineEditor: InlineEditor,\n  bindings: KeyboardBindingRecord\n): (evt: KeyboardEvent) => void {\n  const bindingStore: Record<string, KeyboardBinding[]> = {};\n\n  function normalize(binding: KeyboardBinding): KeyboardBinding {\n    if (binding.shortKey) {\n      binding[SHORT_KEY_PROPERTY] = binding.shortKey;\n      delete binding.shortKey;\n    }\n    return binding;\n  }\n\n  function keyMatch(evt: KeyboardEvent, binding: KeyboardBinding) {\n    if (\n      (['altKey', 'ctrlKey', 'metaKey', 'shiftKey'] as const).some(\n        key => Object.hasOwn(binding, key) && binding[key] !== evt[key]\n      )\n    ) {\n      return false;\n    }\n    return binding.key === evt.key;\n  }\n\n  function addBinding(keyBinding: KeyboardBinding) {\n    const binding = normalize(keyBinding);\n    const keys = Array.isArray(binding.key) ? binding.key : [binding.key];\n    keys.forEach(key => {\n      const singleBinding = {\n        ...binding,\n        key,\n      };\n      bindingStore[key] = bindingStore[key] ?? [];\n      bindingStore[key].push(singleBinding);\n    });\n  }\n\n  Object.values(bindings).forEach(binding => {\n    addBinding(binding);\n  });\n\n  function keyDownHandler(evt: KeyboardEvent) {\n    if (evt.defaultPrevented || evt.isComposing) return;\n    const keyBindings = bindingStore[evt.key] ?? [];\n\n    const keyMatches = keyBindings.filter(binding => keyMatch(evt, binding));\n    if (keyMatches.length === 0) return;\n\n    const inlineRange = inlineEditor.getInlineRange();\n    if (!inlineRange) return;\n\n    const startTextPoint = inlineEditor.getTextPoint(inlineRange.index);\n    if (!startTextPoint) return;\n    const [leafStart, offsetStart] = startTextPoint;\n    let leafEnd: Text;\n    let offsetEnd: number;\n    if (inlineRange.length === 0) {\n      leafEnd = leafStart;\n      offsetEnd = offsetStart;\n    } else {\n      const endTextPoint = inlineEditor.getTextPoint(\n        inlineRange.index + inlineRange.length\n      );\n      if (!endTextPoint) return;\n      [leafEnd, offsetEnd] = endTextPoint;\n    }\n    const prefixText = leafStart.textContent\n      ? leafStart.textContent.slice(0, offsetStart)\n      : '';\n    const suffixText = leafEnd.textContent\n      ? leafEnd.textContent.slice(offsetEnd)\n      : '';\n    const currContext: KeyboardBindingContext = {\n      inlineRange,\n      inlineEditor: inlineEditor,\n      collapsed: inlineRange.length === 0,\n      prefixText,\n      suffixText,\n      raw: evt,\n    };\n    const prevented = keyMatches.some(binding => {\n      if (binding.prefix && !binding.prefix.test(currContext.prefixText)) {\n        return false;\n      }\n      if (binding.suffix && !binding.suffix.test(currContext.suffixText)) {\n        return false;\n      }\n      return binding.handler(currContext) === KEYBOARD_PREVENT_DEFAULT;\n    });\n    if (prevented) {\n      evt.preventDefault();\n    }\n  }\n\n  return keyDownHandler;\n}\n"]}