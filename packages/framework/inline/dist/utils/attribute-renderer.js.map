{"version":3,"file":"attribute-renderer.js","sourceRoot":"","sources":["../../src/utils/attribute-renderer.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,IAAI,EAAE,MAAM,KAAK,CAAC;AAC3B,OAAO,EAAE,QAAQ,EAAE,MAAM,6BAA6B,CAAC;AAKvD,SAAS,gBAAgB,CACvB,KAAyB;IAEzB,IAAI,eAAe,GAAG,EAAE,CAAC;IACzB,IAAI,KAAK,CAAC,SAAS,EAAE,CAAC;QACpB,eAAe,IAAI,WAAW,CAAC;IACjC,CAAC;IACD,IAAI,KAAK,CAAC,MAAM,EAAE,CAAC;QACjB,eAAe,IAAI,eAAe,CAAC;IACrC,CAAC;IAED,IAAI,eAAe,GAAG,EAAE,CAAC;IACzB,IAAI,KAAK,CAAC,IAAI,EAAE,CAAC;QACf,eAAe,GAAG;YAChB,aAAa,EACX,qFAAqF;YACvF,aAAa,EAAE,QAAQ;YACvB,UAAU,EAAE,wBAAwB;YACpC,KAAK,EAAE,SAAS;YAChB,eAAe,EAAE,KAAK;YACtB,WAAW,EAAE,KAAK;YAClB,OAAO,EAAE,aAAa;SACvB,CAAC;IACJ,CAAC;IAED,OAAO,QAAQ,CAAC;QACd,aAAa,EAAE,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,QAAQ;QAC7C,YAAY,EAAE,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,QAAQ;QAChD,iBAAiB,EAAE,eAAe,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,MAAM;QACxE,GAAG,eAAe;KACnB,CAAC,CAAC;AACL,CAAC;AAED,MAAM,CAAC,MAAM,2BAA2B,GACtC,GAAuD,EAAE,CACzD,CAAC,EAAE,KAAK,EAAE,EAAE,EAAE;IACZ,MAAM,KAAK,GAAG,KAAK,CAAC,UAAU;QAC5B,CAAC,CAAC,gBAAgB,CAAC,KAAK,CAAC,UAAU,CAAC;QACpC,CAAC,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;IACjB,OAAO,IAAI,CAAA,eAAe,KAAK;sBACb,KAAK,CAAC,MAAM;aACrB,CAAC;AACZ,CAAC,CAAC","sourcesContent":["import { html } from 'lit';\nimport { styleMap } from 'lit/directives/style-map.js';\n\nimport type { AttributeRenderer } from '../types.js';\nimport type { BaseTextAttributes } from './base-attributes.js';\n\nfunction inlineTextStyles(\n  props: BaseTextAttributes\n): ReturnType<typeof styleMap> {\n  let textDecorations = '';\n  if (props.underline) {\n    textDecorations += 'underline';\n  }\n  if (props.strike) {\n    textDecorations += ' line-through';\n  }\n\n  let inlineCodeStyle = {};\n  if (props.code) {\n    inlineCodeStyle = {\n      'font-family':\n        '\"SFMono-Regular\", Menlo, Consolas, \"PT Mono\", \"Liberation Mono\", Courier, monospace',\n      'line-height': 'normal',\n      background: 'rgba(135,131,120,0.15)',\n      color: '#EB5757',\n      'border-radius': '3px',\n      'font-size': '85%',\n      padding: '0.2em 0.4em',\n    };\n  }\n\n  return styleMap({\n    'font-weight': props.bold ? 'bold' : 'normal',\n    'font-style': props.italic ? 'italic' : 'normal',\n    'text-decoration': textDecorations.length > 0 ? textDecorations : 'none',\n    ...inlineCodeStyle,\n  });\n}\n\nexport const getDefaultAttributeRenderer =\n  <T extends BaseTextAttributes>(): AttributeRenderer<T> =>\n  ({ delta }) => {\n    const style = delta.attributes\n      ? inlineTextStyles(delta.attributes)\n      : styleMap({});\n    return html`<span style=${style}\n      ><v-text .str=${delta.insert}></v-text\n    ></span>`;\n  };\n"]}