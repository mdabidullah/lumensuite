{"version":3,"file":"inline-range.js","sourceRoot":"","sources":["../../src/utils/inline-range.ts"],"names":[],"mappings":"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","sourcesContent":["import type { InlineRange } from '../types.js';\n\nexport function isMaybeInlineRangeEqual(\n  a: InlineRange | null,\n  b: InlineRange | null\n): boolean {\n  return a === b || (a && b ? isInlineRangeEqual(a, b) : false);\n}\n\nexport function isInlineRangeContain(a: InlineRange, b: InlineRange): boolean {\n  return a.index <= b.index && a.index + a.length >= b.index + b.length;\n}\n\nexport function isInlineRangeEqual(a: InlineRange, b: InlineRange): boolean {\n  return a.index === b.index && a.length === b.length;\n}\n\nexport function isInlineRangeIntersect(\n  a: InlineRange,\n  b: InlineRange\n): boolean {\n  return a.index <= b.index + b.length && a.index + a.length >= b.index;\n}\n\nexport function isInlineRangeBefore(a: InlineRange, b: InlineRange): boolean {\n  return a.index + a.length <= b.index;\n}\n\nexport function isInlineRangeAfter(a: InlineRange, b: InlineRange): boolean {\n  return a.index >= b.index + b.length;\n}\n\nexport function isInlineRangeEdge(\n  index: InlineRange['index'],\n  range: InlineRange\n): boolean {\n  return index === range.index || index === range.index + range.length;\n}\n\nexport function isInlineRangeEdgeBefore(\n  index: InlineRange['index'],\n  range: InlineRange\n): boolean {\n  return index === range.index;\n}\n\nexport function isInlineRangeEdgeAfter(\n  index: InlineRange['index'],\n  range: InlineRange\n): boolean {\n  return index === range.index + range.length;\n}\n\nexport function isPoint(range: InlineRange): boolean {\n  return range.length === 0;\n}\n\nexport function mergeInlineRange(a: InlineRange, b: InlineRange): InlineRange {\n  const index = Math.min(a.index, b.index);\n  const length = Math.max(a.index + a.length, b.index + b.length) - index;\n  return { index, length };\n}\n\nexport function intersectInlineRange(\n  a: InlineRange,\n  b: InlineRange\n): InlineRange | null {\n  if (!isInlineRangeIntersect(a, b)) {\n    return null;\n  }\n  const index = Math.max(a.index, b.index);\n  const length = Math.min(a.index + a.length, b.index + b.length) - index;\n  return { index, length };\n}\n"]}