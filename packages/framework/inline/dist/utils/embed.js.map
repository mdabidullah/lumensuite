{"version":3,"file":"embed.js","sourceRoot":"","sources":["../../src/utils/embed.ts"],"names":[],"mappings":"AAIA,OAAO,EAAE,QAAQ,EAAE,MAAM,4BAA4B,CAAC;AAEtD,MAAM,UAAU,gBAAgB,CAAC,IAAU;IACzC,IAAI,IAAI,YAAY,OAAO,EAAE,CAAC;QAC5B,IAAI,IAAI,YAAY,QAAQ,EAAE,CAAC;YAC7B,OAAO,IAAI,CAAC,aAAa,CAAC,uBAAuB,CAAC,KAAK,IAAI,CAAC;QAC9D,CAAC;QACD,MAAM,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAC,uBAAuB,CAAC,CAAC;QACvD,OAAO,CAAC,CAAC,QAAQ,CAAC;IACpB,CAAC;SAAM,CAAC;QACN,MAAM,QAAQ,GAAG,IAAI,CAAC,aAAa,EAAE,OAAO,CAAC,uBAAuB,CAAC,CAAC;QACtE,OAAO,CAAC,CAAC,QAAQ,CAAC;IACpB,CAAC;AACH,CAAC;AAED,MAAM,UAAU,YAAY,CAAC,IAAU;IACrC,MAAM,EAAE,GAAG,IAAI,YAAY,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC;IAC/D,IAAI,CAAC,EAAE;QAAE,OAAO,KAAK,CAAC;IACtB,OAAO,CAAC,CAAC,EAAE,CAAC,OAAO,CAAC,2BAA2B,CAAC,CAAC;AACnD,CAAC;AAED,MAAM,UAAU,4BAA4B,CAG1C,MAAoC,EACpC,MAAqC;IAErC,kFAAkF;IAClF,sEAAsE;IACtE,yCAAyC;IACzC,MAAM,MAAM,GAAkC,EAAE,CAAC;IACjD,KAAK,MAAM,KAAK,IAAI,MAAM,EAAE,CAAC;QAC3B,IAAI,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE,CAAC;YAC1B,MAAM,aAAa,GAAG,CAAC,GAAG,KAAK,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,SAAS,CAAC,EAAE,CAAC,CAAC;gBACxD,MAAM,EAAE,SAAS;gBACjB,UAAU,EAAE,KAAK,CAAC,UAAU;aAC7B,CAAC,CAAC,CAAC;YACJ,MAAM,CAAC,IAAI,CAAC,GAAG,aAAa,CAAC,CAAC;QAChC,CAAC;aAAM,CAAC;YACN,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACrB,CAAC;IACH,CAAC;IACD,OAAO,MAAM,CAAC;AAChB,CAAC","sourcesContent":["import type { InlineEditor } from '../inline-editor.js';\nimport type { DeltaInsert } from '../types.js';\nimport type { BaseTextAttributes } from './base-attributes.js';\n\nimport { VElement } from '../components/v-element.js';\n\nexport function isInEmbedElement(node: Node): boolean {\n  if (node instanceof Element) {\n    if (node instanceof VElement) {\n      return node.querySelector('[data-v-embed=\"true\"]') !== null;\n    }\n    const vElement = node.closest('[data-v-embed=\"true\"]');\n    return !!vElement;\n  } else {\n    const vElement = node.parentElement?.closest('[data-v-embed=\"true\"]');\n    return !!vElement;\n  }\n}\n\nexport function isInEmbedGap(node: Node): boolean {\n  const el = node instanceof Element ? node : node.parentElement;\n  if (!el) return false;\n  return !!el.closest('[data-v-embed-gap=\"true\"]');\n}\n\nexport function transformDeltasToEmbedDeltas<\n  TextAttributes extends BaseTextAttributes = BaseTextAttributes,\n>(\n  editor: InlineEditor<TextAttributes>,\n  deltas: DeltaInsert<TextAttributes>[]\n): DeltaInsert<TextAttributes>[] {\n  // According to our regulations, the length of each \"embed\" node should only be 1.\n  // Therefore, if the length of an \"embed\" type node is greater than 1,\n  // we will divide it into multiple parts.\n  const result: DeltaInsert<TextAttributes>[] = [];\n  for (const delta of deltas) {\n    if (editor.isEmbed(delta)) {\n      const dividedDeltas = [...delta.insert].map(subInsert => ({\n        insert: subInsert,\n        attributes: delta.attributes,\n      }));\n      result.push(...dividedDeltas);\n    } else {\n      result.push(delta);\n    }\n  }\n  return result;\n}\n"]}