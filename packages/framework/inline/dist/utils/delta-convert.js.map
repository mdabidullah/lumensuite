{"version":3,"file":"delta-convert.js","sourceRoot":"","sources":["../../src/utils/delta-convert.ts"],"names":[],"mappings":"AAGA,MAAM,UAAU,cAAc,CAC5B,KAAkC;IAElC,MAAM,MAAM,GAA2C,EAAE,CAAC;IAE1D,IAAI,SAAS,GAAG,KAAK,CAAC,MAAM,CAAC;IAC7B,OAAO,SAAS,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;QAC5B,MAAM,KAAK,GAAG,SAAS,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QACtC,IAAI,KAAK,KAAK,CAAC,CAAC,EAAE,CAAC;YACjB,MAAM,CAAC,IAAI,CAAC;gBACV,MAAM,EAAE,SAAS;gBACjB,UAAU,EAAE,KAAK,CAAC,UAAU;aAC7B,CAAC,CAAC;YACH,MAAM;QACR,CAAC;QAED,IAAI,SAAS,CAAC,KAAK,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;YACzC,MAAM,CAAC,IAAI,CAAC;gBACV,MAAM,EAAE,SAAS,CAAC,KAAK,CAAC,CAAC,EAAE,KAAK,CAAC;gBACjC,UAAU,EAAE,KAAK,CAAC,UAAU;aAC7B,CAAC,CAAC;QACL,CAAC;QAED,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAClB,SAAS,GAAG,SAAS,CAAC,KAAK,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;IACzC,CAAC;IAED,OAAO,MAAM,CAAC;AAChB,CAAC;AAED;;GAEG;AACH,MAAM,UAAU,oBAAoB,CAClC,KAAoC;IAEpC,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;QACvB,OAAO,CAAC,EAAE,CAAC,CAAC;IACd,CAAC;IAED,MAAM,gBAAgB,GAAG,KAAK,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC;IAEvD,QAAQ,CAAC,CAAC,eAAe,CAAC,GAA2C;QACnE,IAAI,KAAK,GAAG,CAAC,CAAC;QACd,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;YACpC,IAAI,GAAG,CAAC,CAAC,CAAC,KAAK,IAAI,EAAE,CAAC;gBACpB,MAAM,KAAK,GAAG,GAAG,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;gBAClC,KAAK,GAAG,CAAC,GAAG,CAAC,CAAC;gBACd,MAAM,KAAsC,CAAC;YAC/C,CAAC;iBAAM,IAAI,CAAC,KAAK,GAAG,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;gBAChC,MAAM,GAAG,CAAC,KAAK,CAAC,KAAK,CAAkC,CAAC;YAC1D,CAAC;QACH,CAAC;QAED,IAAI,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,KAAK,IAAI,EAAE,CAAC;YACxB,MAAM,EAAE,CAAC;QACX,CAAC;IACH,CAAC;IAED,OAAO,KAAK,CAAC,IAAI,CAAC,eAAe,CAAC,gBAAgB,CAAC,CAAC,CAAC;AACvD,CAAC","sourcesContent":["import type { DeltaInsert } from '../types.js';\nimport type { BaseTextAttributes } from './base-attributes.js';\n\nexport function transformDelta<TextAttributes extends BaseTextAttributes>(\n  delta: DeltaInsert<TextAttributes>\n): (DeltaInsert<TextAttributes> | '\\n')[] {\n  const result: (DeltaInsert<TextAttributes> | '\\n')[] = [];\n\n  let tmpString = delta.insert;\n  while (tmpString.length > 0) {\n    const index = tmpString.indexOf('\\n');\n    if (index === -1) {\n      result.push({\n        insert: tmpString,\n        attributes: delta.attributes,\n      });\n      break;\n    }\n\n    if (tmpString.slice(0, index).length > 0) {\n      result.push({\n        insert: tmpString.slice(0, index),\n        attributes: delta.attributes,\n      });\n    }\n\n    result.push('\\n');\n    tmpString = tmpString.slice(index + 1);\n  }\n\n  return result;\n}\n\n/**\n * convert a delta insert array to chunks, each chunk is a line\n */\nexport function deltaInsertsToChunks<TextAttributes extends BaseTextAttributes>(\n  delta: DeltaInsert<TextAttributes>[]\n): DeltaInsert<TextAttributes>[][] {\n  if (delta.length === 0) {\n    return [[]];\n  }\n\n  const transformedDelta = delta.flatMap(transformDelta);\n\n  function* chunksGenerator(arr: (DeltaInsert<TextAttributes> | '\\n')[]) {\n    let start = 0;\n    for (let i = 0; i < arr.length; i++) {\n      if (arr[i] === '\\n') {\n        const chunk = arr.slice(start, i);\n        start = i + 1;\n        yield chunk as DeltaInsert<TextAttributes>[];\n      } else if (i === arr.length - 1) {\n        yield arr.slice(start) as DeltaInsert<TextAttributes>[];\n      }\n    }\n\n    if (arr.at(-1) === '\\n') {\n      yield [];\n    }\n  }\n\n  return Array.from(chunksGenerator(transformedDelta));\n}\n"]}