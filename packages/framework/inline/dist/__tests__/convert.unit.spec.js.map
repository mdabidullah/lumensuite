{"version":3,"file":"convert.unit.spec.js","sourceRoot":"","sources":["../../src/__tests__/convert.unit.spec.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,MAAM,EAAE,IAAI,EAAE,MAAM,QAAQ,CAAC;AAEtC,OAAO,EACL,oBAAoB,EACpB,cAAc,GACf,MAAM,2BAA2B,CAAC;AAEnC,IAAI,CAAC,gBAAgB,EAAE,GAAG,EAAE;IAC1B,MAAM,CACJ,cAAc,CAAC;QACb,MAAM,EAAE,KAAK;QACb,UAAU,EAAE;YACV,IAAI,EAAE,IAAI;SACX;KACF,CAAC,CACH,CAAC,OAAO,CAAC;QACR;YACE,MAAM,EAAE,KAAK;YACb,UAAU,EAAE;gBACV,IAAI,EAAE,IAAI;aACX;SACF;KACF,CAAC,CAAC;IAEH,MAAM,CACJ,cAAc,CAAC;QACb,MAAM,EAAE,oBAAoB;QAC5B,UAAU,EAAE;YACV,IAAI,EAAE,IAAI;SACX;KACF,CAAC,CACH,CAAC,OAAO,CAAC;QACR,IAAI;QACJ,IAAI;QACJ;YACE,MAAM,EAAE,KAAK;YACb,UAAU,EAAE;gBACV,IAAI,EAAE,IAAI;aACX;SACF;QACD,IAAI;QACJ,IAAI;QACJ;YACE,MAAM,EAAE,KAAK;YACb,UAAU,EAAE;gBACV,IAAI,EAAE,IAAI;aACX;SACF;QACD,IAAI;QACJ,IAAI;KACL,CAAC,CAAC;AACL,CAAC,CAAC,CAAC;AAEH,IAAI,CAAC,sBAAsB,EAAE,GAAG,EAAE;IAChC,MAAM,CACJ,oBAAoB,CAAC;QACnB;YACE,MAAM,EAAE,KAAK;YACb,UAAU,EAAE;gBACV,IAAI,EAAE,IAAI;aACX;SACF;KACF,CAAC,CACH,CAAC,OAAO,CAAC;QACR;YACE;gBACE,MAAM,EAAE,KAAK;gBACb,UAAU,EAAE;oBACV,IAAI,EAAE,IAAI;iBACX;aACF;SACF;KACF,CAAC,CAAC;IAEH,MAAM,CACJ,oBAAoB,CAAC;QACnB;YACE,MAAM,EAAE,kBAAkB;YAC1B,UAAU,EAAE;gBACV,IAAI,EAAE,IAAI;aACX;SACF;KACF,CAAC,CACH,CAAC,OAAO,CAAC;QACR,EAAE;QACF,EAAE;QACF;YACE;gBACE,MAAM,EAAE,KAAK;gBACb,UAAU,EAAE;oBACV,IAAI,EAAE,IAAI;iBACX;aACF;SACF;QACD;YACE;gBACE,MAAM,EAAE,KAAK;gBACb,UAAU,EAAE;oBACV,IAAI,EAAE,IAAI;iBACX;aACF;SACF;QACD,EAAE;QACF,EAAE;KACH,CAAC,CAAC;IAEH,MAAM,CACJ,oBAAoB,CAAC;QACnB;YACE,MAAM,EAAE,WAAW;YACnB,UAAU,EAAE;gBACV,IAAI,EAAE,IAAI;aACX;SACF;QACD;YACE,MAAM,EAAE,WAAW;YACnB,UAAU,EAAE;gBACV,MAAM,EAAE,IAAI;aACb;SACF;KACF,CAAC,CACH,CAAC,OAAO,CAAC;QACR,EAAE;QACF,EAAE;QACF;YACE;gBACE,MAAM,EAAE,KAAK;gBACb,UAAU,EAAE;oBACV,IAAI,EAAE,IAAI;iBACX;aACF;SACF;QACD,EAAE;QACF;YACE;gBACE,MAAM,EAAE,KAAK;gBACb,UAAU,EAAE;oBACV,MAAM,EAAE,IAAI;iBACb;aACF;SACF;QACD,EAAE;QACF,EAAE;KACH,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import { expect, test } from 'vitest';\n\nimport {\n  deltaInsertsToChunks,\n  transformDelta,\n} from '../utils/delta-convert.js';\n\ntest('transformDelta', () => {\n  expect(\n    transformDelta({\n      insert: 'aaa',\n      attributes: {\n        bold: true,\n      },\n    })\n  ).toEqual([\n    {\n      insert: 'aaa',\n      attributes: {\n        bold: true,\n      },\n    },\n  ]);\n\n  expect(\n    transformDelta({\n      insert: '\\n\\naaa\\n\\nbbb\\n\\n',\n      attributes: {\n        bold: true,\n      },\n    })\n  ).toEqual([\n    '\\n',\n    '\\n',\n    {\n      insert: 'aaa',\n      attributes: {\n        bold: true,\n      },\n    },\n    '\\n',\n    '\\n',\n    {\n      insert: 'bbb',\n      attributes: {\n        bold: true,\n      },\n    },\n    '\\n',\n    '\\n',\n  ]);\n});\n\ntest('deltaInsertsToChunks', () => {\n  expect(\n    deltaInsertsToChunks([\n      {\n        insert: 'aaa',\n        attributes: {\n          bold: true,\n        },\n      },\n    ])\n  ).toEqual([\n    [\n      {\n        insert: 'aaa',\n        attributes: {\n          bold: true,\n        },\n      },\n    ],\n  ]);\n\n  expect(\n    deltaInsertsToChunks([\n      {\n        insert: '\\n\\naaa\\nbbb\\n\\n',\n        attributes: {\n          bold: true,\n        },\n      },\n    ])\n  ).toEqual([\n    [],\n    [],\n    [\n      {\n        insert: 'aaa',\n        attributes: {\n          bold: true,\n        },\n      },\n    ],\n    [\n      {\n        insert: 'bbb',\n        attributes: {\n          bold: true,\n        },\n      },\n    ],\n    [],\n    [],\n  ]);\n\n  expect(\n    deltaInsertsToChunks([\n      {\n        insert: '\\n\\naaa\\n',\n        attributes: {\n          bold: true,\n        },\n      },\n      {\n        insert: '\\nbbb\\n\\n',\n        attributes: {\n          italic: true,\n        },\n      },\n    ])\n  ).toEqual([\n    [],\n    [],\n    [\n      {\n        insert: 'aaa',\n        attributes: {\n          bold: true,\n        },\n      },\n    ],\n    [],\n    [\n      {\n        insert: 'bbb',\n        attributes: {\n          italic: true,\n        },\n      },\n    ],\n    [],\n    [],\n  ]);\n});\n"]}