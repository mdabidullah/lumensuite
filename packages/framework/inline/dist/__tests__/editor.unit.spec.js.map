{"version":3,"file":"editor.unit.spec.js","sourceRoot":"","sources":["../../src/__tests__/editor.unit.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { expect, test } from 'vitest';\nimport * as Y from 'yjs';\n\nimport { InlineEditor } from '../inline-editor.js';\n\ntest('getDeltaByRangeIndex', () => {\n  const yDoc = new Y.Doc();\n  const yText = yDoc.getText('text');\n  yText.applyDelta([\n    {\n      insert: 'aaa',\n      attributes: {\n        bold: true,\n      },\n    },\n    {\n      insert: 'bbb',\n      attributes: {\n        italic: true,\n      },\n    },\n  ]);\n  const inlineEditor = new InlineEditor(yText);\n\n  expect(inlineEditor.getDeltaByRangeIndex(0)).toEqual({\n    insert: 'aaa',\n    attributes: {\n      bold: true,\n    },\n  });\n\n  expect(inlineEditor.getDeltaByRangeIndex(1)).toEqual({\n    insert: 'aaa',\n    attributes: {\n      bold: true,\n    },\n  });\n\n  expect(inlineEditor.getDeltaByRangeIndex(3)).toEqual({\n    insert: 'aaa',\n    attributes: {\n      bold: true,\n    },\n  });\n\n  expect(inlineEditor.getDeltaByRangeIndex(4)).toEqual({\n    insert: 'bbb',\n    attributes: {\n      italic: true,\n    },\n  });\n});\n\ntest('getDeltasByInlineRange', () => {\n  const yDoc = new Y.Doc();\n  const yText = yDoc.getText('text');\n  yText.applyDelta([\n    {\n      insert: 'aaa',\n      attributes: {\n        bold: true,\n      },\n    },\n    {\n      insert: 'bbb',\n      attributes: {\n        italic: true,\n      },\n    },\n    {\n      insert: 'ccc',\n      attributes: {\n        underline: true,\n      },\n    },\n  ]);\n  const inlineEditor = new InlineEditor(yText);\n\n  expect(\n    inlineEditor.getDeltasByInlineRange({\n      index: 0,\n      length: 0,\n    })\n  ).toEqual([\n    [\n      {\n        insert: 'aaa',\n        attributes: {\n          bold: true,\n        },\n      },\n      {\n        index: 0,\n        length: 3,\n      },\n    ],\n  ]);\n\n  expect(\n    inlineEditor.getDeltasByInlineRange({\n      index: 0,\n      length: 1,\n    })\n  ).toEqual([\n    [\n      {\n        insert: 'aaa',\n        attributes: {\n          bold: true,\n        },\n      },\n      {\n        index: 0,\n        length: 3,\n      },\n    ],\n  ]);\n\n  expect(\n    inlineEditor.getDeltasByInlineRange({\n      index: 0,\n      length: 3,\n    })\n  ).toEqual([\n    [\n      {\n        insert: 'aaa',\n        attributes: {\n          bold: true,\n        },\n      },\n      {\n        index: 0,\n        length: 3,\n      },\n    ],\n  ]);\n\n  expect(\n    inlineEditor.getDeltasByInlineRange({\n      index: 0,\n      length: 4,\n    })\n  ).toEqual([\n    [\n      {\n        insert: 'aaa',\n        attributes: {\n          bold: true,\n        },\n      },\n      {\n        index: 0,\n        length: 3,\n      },\n    ],\n    [\n      {\n        insert: 'bbb',\n        attributes: {\n          italic: true,\n        },\n      },\n      {\n        index: 3,\n        length: 3,\n      },\n    ],\n  ]);\n\n  expect(\n    inlineEditor.getDeltasByInlineRange({\n      index: 3,\n      length: 1,\n    })\n  ).toEqual([\n    [\n      {\n        insert: 'aaa',\n        attributes: {\n          bold: true,\n        },\n      },\n      {\n        index: 0,\n        length: 3,\n      },\n    ],\n    [\n      {\n        insert: 'bbb',\n        attributes: {\n          italic: true,\n        },\n      },\n      {\n        index: 3,\n        length: 3,\n      },\n    ],\n  ]);\n\n  expect(\n    inlineEditor.getDeltasByInlineRange({\n      index: 3,\n      length: 3,\n    })\n  ).toEqual([\n    [\n      {\n        insert: 'aaa',\n        attributes: {\n          bold: true,\n        },\n      },\n      {\n        index: 0,\n        length: 3,\n      },\n    ],\n    [\n      {\n        insert: 'bbb',\n        attributes: {\n          italic: true,\n        },\n      },\n      {\n        index: 3,\n        length: 3,\n      },\n    ],\n  ]);\n\n  expect(\n    inlineEditor.getDeltasByInlineRange({\n      index: 3,\n      length: 4,\n    })\n  ).toEqual([\n    [\n      {\n        insert: 'aaa',\n        attributes: {\n          bold: true,\n        },\n      },\n      {\n        index: 0,\n        length: 3,\n      },\n    ],\n    [\n      {\n        insert: 'bbb',\n        attributes: {\n          italic: true,\n        },\n      },\n      {\n        index: 3,\n        length: 3,\n      },\n    ],\n    [\n      {\n        insert: 'ccc',\n        attributes: {\n          underline: true,\n        },\n      },\n      {\n        index: 6,\n        length: 3,\n      },\n    ],\n  ]);\n\n  expect(\n    inlineEditor.getDeltasByInlineRange({\n      index: 4,\n      length: 0,\n    })\n  ).toEqual([\n    [\n      {\n        insert: 'bbb',\n        attributes: {\n          italic: true,\n        },\n      },\n      {\n        index: 3,\n        length: 3,\n      },\n    ],\n  ]);\n\n  expect(\n    inlineEditor.getDeltasByInlineRange({\n      index: 4,\n      length: 1,\n    })\n  ).toEqual([\n    [\n      {\n        insert: 'bbb',\n        attributes: {\n          italic: true,\n        },\n      },\n      {\n        index: 3,\n        length: 3,\n      },\n    ],\n  ]);\n\n  expect(\n    inlineEditor.getDeltasByInlineRange({\n      index: 4,\n      length: 2,\n    })\n  ).toEqual([\n    [\n      {\n        insert: 'bbb',\n        attributes: {\n          italic: true,\n        },\n      },\n      {\n        index: 3,\n        length: 3,\n      },\n    ],\n  ]);\n\n  expect(\n    inlineEditor.getDeltasByInlineRange({\n      index: 4,\n      length: 4,\n    })\n  ).toEqual([\n    [\n      {\n        insert: 'bbb',\n        attributes: {\n          italic: true,\n        },\n      },\n      {\n        index: 3,\n        length: 3,\n      },\n    ],\n    [\n      {\n        insert: 'ccc',\n        attributes: {\n          underline: true,\n        },\n      },\n      {\n        index: 6,\n        length: 3,\n      },\n    ],\n  ]);\n});\n\ntest('cursor with format', () => {\n  const yDoc = new Y.Doc();\n  const yText = yDoc.getText('text');\n  const inlineEditor = new InlineEditor(yText);\n\n  inlineEditor.insertText(\n    {\n      index: 0,\n      length: 0,\n    },\n    'aaa',\n    {\n      bold: true,\n    }\n  );\n\n  inlineEditor.setMarks({\n    italic: true,\n  });\n\n  inlineEditor.insertText(\n    {\n      index: 3,\n      length: 0,\n    },\n    'bbb'\n  );\n\n  expect(inlineEditor.yText.toDelta()).toEqual([\n    {\n      insert: 'aaa',\n      attributes: {\n        bold: true,\n      },\n    },\n    {\n      insert: 'bbb',\n      attributes: {\n        italic: true,\n      },\n    },\n  ]);\n});\n\ntest('incorrect format value `false`', () => {\n  const yDoc = new Y.Doc();\n  const yText = yDoc.getText('text');\n  const inlineEditor = new InlineEditor(yText);\n\n  inlineEditor.insertText(\n    {\n      index: 0,\n      length: 0,\n    },\n    'aaa',\n    {\n      // @ts-expect-error insert incorrect value\n      bold: false,\n      italic: true,\n    }\n  );\n\n  inlineEditor.insertText(\n    {\n      index: 3,\n      length: 0,\n    },\n    'bbb',\n    {\n      underline: true,\n    }\n  );\n\n  expect(inlineEditor.yText.toDelta()).toEqual([\n    {\n      insert: 'aaa',\n      attributes: {\n        italic: true,\n      },\n    },\n    {\n      insert: 'bbb',\n      attributes: {\n        underline: true,\n      },\n    },\n  ]);\n});\n\ntest('yText should not contain \\r', () => {\n  const yDoc = new Y.Doc();\n  const yText = yDoc.getText('text');\n  yText.insert(0, 'aaa\\r');\n\n  expect(yText.toString()).toEqual('aaa\\r');\n  expect(() => {\n    new InlineEditor(yText);\n  }).toThrow(\n    'yText must not contain \"\\\\r\" because it will break the range synchronization'\n  );\n});\n"]}