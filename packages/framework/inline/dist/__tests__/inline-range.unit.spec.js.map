{"version":3,"file":"inline-range.unit.spec.js","sourceRoot":"","sources":["../../src/__tests__/inline-range.unit.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { expect, test } from 'vitest';\n\nimport {\n  intersectInlineRange,\n  isInlineRangeAfter,\n  isInlineRangeBefore,\n  isInlineRangeContain,\n  isInlineRangeEdge,\n  isInlineRangeEdgeAfter,\n  isInlineRangeEdgeBefore,\n  isInlineRangeEqual,\n  isInlineRangeIntersect,\n  isPoint,\n  mergeInlineRange,\n} from '../utils/inline-range.js';\n\ntest('isInlineRangeContain', () => {\n  expect(\n    isInlineRangeContain({ index: 0, length: 0 }, { index: 0, length: 0 })\n  ).toEqual(true);\n\n  expect(\n    isInlineRangeContain({ index: 0, length: 0 }, { index: 0, length: 2 })\n  ).toEqual(false);\n\n  expect(\n    isInlineRangeContain({ index: 0, length: 2 }, { index: 0, length: 0 })\n  ).toEqual(true);\n\n  expect(\n    isInlineRangeContain({ index: 0, length: 2 }, { index: 0, length: 1 })\n  ).toEqual(true);\n\n  expect(\n    isInlineRangeContain({ index: 0, length: 2 }, { index: 0, length: 2 })\n  ).toEqual(true);\n\n  expect(\n    isInlineRangeContain({ index: 1, length: 3 }, { index: 0, length: 0 })\n  ).toEqual(false);\n\n  expect(\n    isInlineRangeContain({ index: 1, length: 3 }, { index: 0, length: 1 })\n  ).toEqual(false);\n\n  expect(\n    isInlineRangeContain({ index: 1, length: 3 }, { index: 0, length: 2 })\n  ).toEqual(false);\n\n  expect(\n    isInlineRangeContain({ index: 1, length: 4 }, { index: 2, length: 0 })\n  ).toEqual(true);\n\n  expect(\n    isInlineRangeContain({ index: 1, length: 4 }, { index: 2, length: 3 })\n  ).toEqual(true);\n\n  expect(\n    isInlineRangeContain({ index: 1, length: 4 }, { index: 2, length: 4 })\n  ).toEqual(false);\n});\n\ntest('isInlineRangeEqual', () => {\n  expect(\n    isInlineRangeEqual({ index: 0, length: 0 }, { index: 0, length: 0 })\n  ).toEqual(true);\n\n  expect(\n    isInlineRangeEqual({ index: 0, length: 2 }, { index: 0, length: 1 })\n  ).toEqual(false);\n\n  expect(\n    isInlineRangeEqual({ index: 1, length: 3 }, { index: 1, length: 3 })\n  ).toEqual(true);\n\n  expect(\n    isInlineRangeEqual({ index: 0, length: 0 }, { index: 1, length: 0 })\n  ).toEqual(false);\n\n  expect(\n    isInlineRangeEqual({ index: 2, length: 0 }, { index: 2, length: 0 })\n  ).toEqual(true);\n});\n\ntest('isInlineRangeIntersect', () => {\n  expect(\n    isInlineRangeIntersect({ index: 0, length: 2 }, { index: 0, length: 0 })\n  ).toEqual(true);\n\n  expect(\n    isInlineRangeIntersect({ index: 0, length: 2 }, { index: 2, length: 0 })\n  ).toEqual(true);\n\n  expect(\n    isInlineRangeIntersect({ index: 0, length: 0 }, { index: 1, length: 0 })\n  ).toEqual(false);\n\n  expect(\n    isInlineRangeIntersect({ index: 1, length: 0 }, { index: 1, length: 0 })\n  ).toEqual(true);\n\n  expect(\n    isInlineRangeIntersect({ index: 1, length: 0 }, { index: 0, length: 1 })\n  ).toEqual(true);\n\n  expect(\n    isInlineRangeIntersect({ index: 1, length: 0 }, { index: 0, length: 0 })\n  ).toEqual(false);\n\n  expect(\n    isInlineRangeIntersect({ index: 1, length: 0 }, { index: 2, length: 0 })\n  ).toEqual(false);\n\n  expect(\n    isInlineRangeIntersect({ index: 1, length: 0 }, { index: 0, length: 2 })\n  ).toEqual(true);\n});\n\ntest('isInlineRangeBefore', () => {\n  expect(\n    isInlineRangeBefore({ index: 0, length: 1 }, { index: 2, length: 0 })\n  ).toEqual(true);\n\n  expect(\n    isInlineRangeBefore({ index: 2, length: 0 }, { index: 0, length: 1 })\n  ).toEqual(false);\n\n  expect(\n    isInlineRangeBefore({ index: 0, length: 0 }, { index: 1, length: 0 })\n  ).toEqual(true);\n\n  expect(\n    isInlineRangeBefore({ index: 1, length: 0 }, { index: 0, length: 0 })\n  ).toEqual(false);\n\n  expect(\n    isInlineRangeBefore({ index: 0, length: 0 }, { index: 0, length: 0 })\n  ).toEqual(true);\n\n  expect(\n    isInlineRangeBefore({ index: 0, length: 0 }, { index: 0, length: 1 })\n  ).toEqual(true);\n\n  expect(\n    isInlineRangeBefore({ index: 0, length: 1 }, { index: 0, length: 0 })\n  ).toEqual(false);\n});\n\ntest('isInlineRangeAfter', () => {\n  expect(\n    isInlineRangeAfter({ index: 2, length: 0 }, { index: 0, length: 1 })\n  ).toEqual(true);\n\n  expect(\n    isInlineRangeAfter({ index: 0, length: 1 }, { index: 2, length: 0 })\n  ).toEqual(false);\n\n  expect(\n    isInlineRangeAfter({ index: 1, length: 0 }, { index: 0, length: 0 })\n  ).toEqual(true);\n\n  expect(\n    isInlineRangeAfter({ index: 0, length: 0 }, { index: 1, length: 0 })\n  ).toEqual(false);\n\n  expect(\n    isInlineRangeAfter({ index: 0, length: 0 }, { index: 0, length: 0 })\n  ).toEqual(true);\n\n  expect(\n    isInlineRangeAfter({ index: 0, length: 0 }, { index: 0, length: 1 })\n  ).toEqual(false);\n\n  expect(\n    isInlineRangeAfter({ index: 0, length: 1 }, { index: 0, length: 0 })\n  ).toEqual(true);\n});\n\ntest('isInlineRangeEdge', () => {\n  expect(isInlineRangeEdge(1, { index: 1, length: 0 })).toEqual(true);\n\n  expect(isInlineRangeEdge(1, { index: 0, length: 1 })).toEqual(true);\n\n  expect(isInlineRangeEdge(0, { index: 0, length: 0 })).toEqual(true);\n\n  expect(isInlineRangeEdge(1, { index: 0, length: 0 })).toEqual(false);\n\n  expect(isInlineRangeEdge(0, { index: 1, length: 0 })).toEqual(false);\n\n  expect(isInlineRangeEdge(0, { index: 0, length: 1 })).toEqual(true);\n});\n\ntest('isInlineRangeEdgeBefore', () => {\n  expect(isInlineRangeEdgeBefore(1, { index: 1, length: 0 })).toEqual(true);\n\n  expect(isInlineRangeEdgeBefore(1, { index: 0, length: 1 })).toEqual(false);\n\n  expect(isInlineRangeEdgeBefore(0, { index: 0, length: 0 })).toEqual(true);\n\n  expect(isInlineRangeEdgeBefore(1, { index: 0, length: 0 })).toEqual(false);\n\n  expect(isInlineRangeEdgeBefore(0, { index: 1, length: 0 })).toEqual(false);\n\n  expect(isInlineRangeEdgeBefore(0, { index: 0, length: 1 })).toEqual(true);\n});\n\ntest('isInlineRangeEdgeAfter', () => {\n  expect(isInlineRangeEdgeAfter(1, { index: 0, length: 1 })).toEqual(true);\n\n  expect(isInlineRangeEdgeAfter(1, { index: 1, length: 0 })).toEqual(true);\n\n  expect(isInlineRangeEdgeAfter(0, { index: 0, length: 0 })).toEqual(true);\n\n  expect(isInlineRangeEdgeAfter(0, { index: 1, length: 0 })).toEqual(false);\n\n  expect(isInlineRangeEdgeAfter(1, { index: 0, length: 0 })).toEqual(false);\n\n  expect(isInlineRangeEdgeAfter(0, { index: 0, length: 1 })).toEqual(false);\n\n  expect(isInlineRangeEdgeAfter(0, { index: 0, length: 0 })).toEqual(true);\n});\n\ntest('isPoint', () => {\n  expect(isPoint({ index: 1, length: 0 })).toEqual(true);\n\n  expect(isPoint({ index: 0, length: 2 })).toEqual(false);\n\n  expect(isPoint({ index: 0, length: 0 })).toEqual(true);\n\n  expect(isPoint({ index: 2, length: 0 })).toEqual(true);\n\n  expect(isPoint({ index: 2, length: 2 })).toEqual(false);\n});\n\ntest('mergeInlineRange', () => {\n  expect(\n    mergeInlineRange({ index: 0, length: 0 }, { index: 1, length: 0 })\n  ).toEqual({\n    index: 0,\n    length: 1,\n  });\n\n  expect(\n    mergeInlineRange({ index: 0, length: 0 }, { index: 0, length: 0 })\n  ).toEqual({\n    index: 0,\n    length: 0,\n  });\n\n  expect(\n    mergeInlineRange({ index: 1, length: 0 }, { index: 2, length: 0 })\n  ).toEqual({\n    index: 1,\n    length: 1,\n  });\n\n  expect(\n    mergeInlineRange({ index: 2, length: 0 }, { index: 1, length: 0 })\n  ).toEqual({\n    index: 1,\n    length: 1,\n  });\n\n  expect(\n    mergeInlineRange({ index: 1, length: 3 }, { index: 2, length: 2 })\n  ).toEqual({\n    index: 1,\n    length: 3,\n  });\n\n  expect(\n    mergeInlineRange({ index: 2, length: 2 }, { index: 1, length: 1 })\n  ).toEqual({\n    index: 1,\n    length: 3,\n  });\n\n  expect(\n    mergeInlineRange({ index: 3, length: 2 }, { index: 2, length: 1 })\n  ).toEqual({\n    index: 2,\n    length: 3,\n  });\n\n  expect(\n    mergeInlineRange({ index: 0, length: 4 }, { index: 1, length: 1 })\n  ).toEqual({\n    index: 0,\n    length: 4,\n  });\n\n  expect(\n    mergeInlineRange({ index: 1, length: 1 }, { index: 0, length: 4 })\n  ).toEqual({\n    index: 0,\n    length: 4,\n  });\n\n  expect(\n    mergeInlineRange({ index: 0, length: 2 }, { index: 1, length: 3 })\n  ).toEqual({\n    index: 0,\n    length: 4,\n  });\n});\n\ntest('intersectInlineRange', () => {\n  expect(\n    intersectInlineRange({ index: 0, length: 0 }, { index: 1, length: 0 })\n  ).toEqual(null);\n\n  expect(\n    intersectInlineRange({ index: 0, length: 2 }, { index: 1, length: 1 })\n  ).toEqual({ index: 1, length: 1 });\n\n  expect(\n    intersectInlineRange({ index: 0, length: 2 }, { index: 2, length: 0 })\n  ).toEqual({ index: 2, length: 0 });\n\n  expect(\n    intersectInlineRange({ index: 1, length: 0 }, { index: 1, length: 0 })\n  ).toEqual({ index: 1, length: 0 });\n\n  expect(\n    intersectInlineRange({ index: 1, length: 3 }, { index: 2, length: 2 })\n  ).toEqual({ index: 2, length: 2 });\n\n  expect(\n    intersectInlineRange({ index: 1, length: 2 }, { index: 0, length: 3 })\n  ).toEqual({ index: 1, length: 2 });\n\n  expect(\n    intersectInlineRange({ index: 1, length: 1 }, { index: 2, length: 2 })\n  ).toEqual({ index: 2, length: 0 });\n\n  expect(\n    intersectInlineRange({ index: 2, length: 2 }, { index: 1, length: 3 })\n  ).toEqual({ index: 2, length: 2 });\n\n  expect(\n    intersectInlineRange({ index: 2, length: 1 }, { index: 1, length: 1 })\n  ).toEqual({ index: 2, length: 0 });\n\n  expect(\n    intersectInlineRange({ index: 0, length: 4 }, { index: 1, length: 2 })\n  ).toEqual({ index: 1, length: 2 });\n});\n"]}