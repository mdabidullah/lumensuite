{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../../src/blocks/_common/utils.ts"],"names":[],"mappings":"AAGA,OAAO,EACL,2BAA2B,EAC3B,eAAe,GAChB,MAAM,oBAAoB,CAAC;AAC5B,OAAO,EAAE,aAAa,EAAE,GAAG,EAAE,MAAM,mBAAmB,CAAC;AAEvD,MAAM,CAAC,KAAK,UAAU,aAAa,CAAC,IAAgB,EAAE,MAAc;IAClE,MAAM,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,UAAU,CAAC,MAAM,CAAC;IAC9C,yDAAyD;IACzD,MAAM,UAAU,GAAG,IAAI,aAAa,CAAC,EAAE,MAAM,EAAE,CAAC,CAAC;IACjD,UAAU,CAAC,IAAI,CAAC,UAAU,EAAE,CAAC;IAC7B,MAAM,GAAG,GAAG,IAAI,GAAG,CAAC;QAClB,UAAU;QACV,WAAW,EAAE,CAAC,2BAA2B,CAAC;KAC3C,CAAC,CAAC;IACH,MAAM,SAAS,GAAG,IAAI,eAAe,CAAC,GAAG,CAAC,CAAC;IAC3C,MAAM,GAAG,GAAG,MAAM,SAAS,CAAC,KAAK,CAAC;QAChC,IAAI,EAAE,MAAM;QACZ,MAAM,EAAE,GAAG,CAAC,aAAa;KAC1B,CAAC,CAAC;IACH,IAAI,CAAC,GAAG,EAAE,CAAC;QACT,OAAO,CAAC,KAAK,CAAC,mCAAmC,CAAC,CAAC;IACrD,CAAC;IACD,OAAO,GAAU,CAAC;AACpB,CAAC;AAED,MAAM,UAAU,UAAU,CAAC,OAAe;IACxC,MAAM,IAAI,GAAG,IAAI,IAAI,CAAC,OAAO,CAAC,CAAC;IAC/B,MAAM,GAAG,GAAG,IAAI,IAAI,EAAE,CAAC;IACvB,MAAM,IAAI,GAAG,GAAG,CAAC,OAAO,EAAE,GAAG,IAAI,CAAC,OAAO,EAAE,CAAC;IAE5C,MAAM,OAAO,GAAG,IAAI,GAAG,IAAI,CAAC;IAC5B,MAAM,OAAO,GAAG,OAAO,GAAG,EAAE,CAAC;IAC7B,MAAM,KAAK,GAAG,OAAO,GAAG,EAAE,CAAC;IAE3B,IAAI,OAAO,GAAG,EAAE,EAAE,CAAC;QACjB,OAAO,UAAU,CAAC;IACpB,CAAC;SAAM,IAAI,OAAO,GAAG,EAAE,EAAE,CAAC;QACxB,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,cAAc,CAAC;IAC9C,CAAC;SAAM,IAAI,KAAK,GAAG,EAAE,EAAE,CAAC;QACtB,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,YAAY,CAAC;IAC1C,CAAC;SAAM,CAAC;QACN,OAAO,IAAI,CAAC,cAAc,CAAC,OAAO,EAAE;YAClC,KAAK,EAAE,MAAM;YACb,GAAG,EAAE,SAAS;YACd,IAAI,EAAE,SAAS;YACf,IAAI,EAAE,SAAS;YACf,MAAM,EAAE,SAAS;YACjB,MAAM,EAAE,SAAS;SAClB,CAAC,CAAC;IACL,CAAC;AACH,CAAC","sourcesContent":["import type { EditorHost } from '@blocksuite/block-std';\nimport type { Doc } from '@blocksuite/store';\n\nimport {\n  defaultImageProxyMiddleware,\n  MarkdownAdapter,\n} from '@blocksuite/blocks';\nimport { DocCollection, Job } from '@blocksuite/store';\n\nexport async function markDownToDoc(host: EditorHost, answer: string) {\n  const schema = host.std.doc.collection.schema;\n  // Should not create a new doc in the original collection\n  const collection = new DocCollection({ schema });\n  collection.meta.initialize();\n  const job = new Job({\n    collection,\n    middlewares: [defaultImageProxyMiddleware],\n  });\n  const mdAdapter = new MarkdownAdapter(job);\n  const doc = await mdAdapter.toDoc({\n    file: answer,\n    assets: job.assetsManager,\n  });\n  if (!doc) {\n    console.error('Failed to convert markdown to doc');\n  }\n  return doc as Doc;\n}\n\nexport function formatDate(dateStr: string): string {\n  const date = new Date(dateStr);\n  const now = new Date();\n  const diff = now.getTime() - date.getTime();\n\n  const seconds = diff / 1000;\n  const minutes = seconds / 60;\n  const hours = minutes / 60;\n\n  if (seconds < 60) {\n    return 'just now';\n  } else if (minutes < 60) {\n    return `${Math.floor(minutes)} minutes ago`;\n  } else if (hours < 24) {\n    return `${Math.floor(hours)} hours ago`;\n  } else {\n    return date.toLocaleString('en-US', {\n      month: 'long',\n      day: 'numeric',\n      year: 'numeric',\n      hour: 'numeric',\n      minute: 'numeric',\n      second: 'numeric',\n    });\n  }\n}\n"]}