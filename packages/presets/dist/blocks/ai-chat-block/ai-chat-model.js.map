{"version":3,"file":"ai-chat-model.js","sourceRoot":"","sources":["../../../src/blocks/ai-chat-block/ai-chat-model.ts"],"names":[],"mappings":"AAEA,OAAO,EAAE,aAAa,EAAE,MAAM,2BAA2B,CAAC;AAC1D,OAAO,EAAE,UAAU,EAAE,iBAAiB,EAAE,MAAM,mBAAmB,CAAC;AAYlE,MAAM,CAAC,MAAM,iBAAiB,GAAG,iBAAiB,CAAC;IACjD,OAAO,EAAE,sBAAsB;IAC/B,KAAK,EAAE,GAAgB,EAAE,CAAC,CAAC;QACzB,IAAI,EAAE,WAAW;QACjB,KAAK,EAAE,IAAI;QACX,KAAK,EAAE,CAAC;QACR,QAAQ,EAAE,EAAE;QACZ,SAAS,EAAE,EAAE;QACb,eAAe,EAAE,EAAE;QACnB,SAAS,EAAE,EAAE;KACd,CAAC;IACF,QAAQ,EAAE;QACR,OAAO,EAAE,CAAC;QACV,IAAI,EAAE,SAAS;QACf,QAAQ,EAAE,EAAE;KACb;IACD,OAAO,EAAE,GAAG,EAAE;QACZ,OAAO,IAAI,gBAAgB,EAAE,CAAC;IAChC,CAAC;CACF,CAAC,CAAC;AAEH,MAAM,OAAO,gBAAiB,SAAQ,aAAa,CAAc,UAAU,CAAC;CAAG","sourcesContent":["import type { SerializedXYWH } from '@blocksuite/global/utils';\n\nimport { GfxCompatible } from '@blocksuite/block-std/gfx';\nimport { BlockModel, defineBlockSchema } from '@blocksuite/store';\n\ntype AIChatProps = {\n  xywh: SerializedXYWH;\n  index: string;\n  scale: number;\n  messages: string; // JSON string of ChatMessage[]\n  sessionId: string; // forked session id\n  rootWorkspaceId: string; // workspace id of root chat session\n  rootDocId: string; // doc id of root chat session\n};\n\nexport const AIChatBlockSchema = defineBlockSchema({\n  flavour: 'affine:embed-ai-chat',\n  props: (): AIChatProps => ({\n    xywh: '[0,0,0,0]',\n    index: 'a0',\n    scale: 1,\n    messages: '',\n    sessionId: '',\n    rootWorkspaceId: '',\n    rootDocId: '',\n  }),\n  metadata: {\n    version: 1,\n    role: 'content',\n    children: [],\n  },\n  toModel: () => {\n    return new AIChatBlockModel();\n  },\n});\n\nexport class AIChatBlockModel extends GfxCompatible<AIChatProps>(BlockModel) {}\n\ndeclare global {\n  namespace BlockSuite {\n    interface EdgelessBlockModelMap {\n      'affine:embed-ai-chat': AIChatBlockModel;\n    }\n    interface BlockModels {\n      'affine:embed-ai-chat': AIChatBlockModel;\n    }\n  }\n}\n"]}