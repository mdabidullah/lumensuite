{"version":3,"file":"ai-chat-block.js","sourceRoot":"","sources":["../../../src/blocks/ai-chat-block/ai-chat-block.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,EAAE,cAAc,EAAE,MAAM,uBAAuB,CAAC;AACvD,OAAO,EAAE,QAAQ,EAAE,MAAM,oBAAoB,CAAC;AAC9C,OAAO,EAAE,QAAQ,EAAE,MAAM,0BAA0B,CAAC;AACpD,OAAO,EAAE,IAAI,EAAE,MAAM,KAAK,CAAC;AAC3B,OAAO,EAAE,aAAa,EAAE,MAAM,mBAAmB,CAAC;AAIlD,OAAO,EAAE,cAAc,EAAE,MAAM,oBAAoB,CAAC;AACpD,OAAO,kCAAkC,CAAC;AAC1C,OAAO,EAAE,iBAAiB,EAAE,MAAM,aAAa,CAAC;AAChD,OAAO,EAAE,kBAAkB,EAAE,MAAM,YAAY,CAAC;IAMnC,oBAAoB;4BAJhC,aAAa,CAAC,gBAAgB,CAAC,EAC/B,QAAQ,CAAC;YACR,QAAQ,EAAE,CAAC,EAAE,GAAG,EAAwB,EAAE,EAAE,CAAC,CAAC,GAAG,CAAC,QAAQ;SAC3D,CAAC;;;;sBACwC,cAAc;oCAAtB,SAAQ,WAAgC;;;;YAGxE,sEAAsE;YAC9D,6BAAwB,GAAG,QAAQ,CAAC,GAAG,EAAE;gBAC/C,MAAM,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,KAAK,CAAC;gBAC5C,IAAI,CAAC;oBACH,MAAM,MAAM,GAAG,kBAAkB,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC;oBAClE,IAAI,MAAM,CAAC,OAAO,EAAE,CAAC;wBACnB,OAAO,MAAM,CAAC,IAAI,CAAC;oBACrB,CAAC;yBAAM,CAAC;wBACN,OAAO,EAAE,CAAC;oBACZ,CAAC;gBACH,CAAC;gBAAC,MAAM,CAAC;oBACP,OAAO,EAAE,CAAC;gBACZ,CAAC;YACH,CAAC,CAAC,CAAC;QA8BL,CAAC;;;YA9CD,6KA8CC;;;;iBA7CiB,WAAM,GAAG,iBAAiB,AAApB,CAAqB;QAiB3C,IAAI,gBAAgB;YAClB,OAAO,IAAI,CAAC,YAAY,CAAC,eAAe,CAAC;QAC3C,CAAC;QAED,IAAI,YAAY;YACd,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,UAAU,CAAC,aAAa,CAAC,CAAC;QACjD,CAAC;QAEQ,WAAW;YAClB,MAAM,QAAQ,GAAG,IAAI,CAAC,wBAAwB,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;YAC/D,MAAM,mBAAmB,GAAG;gBAC1B,aAAa,EAAE,IAAI;aACpB,CAAC;YAEF,OAAO,IAAI,CAAA;;;kBAGG,IAAI,CAAC,IAAI;sBACL,QAAQ;iCACG,mBAAmB;sBAC9B,IAAI;;;;UAIhB,cAAc;;YAEZ,CAAC;QACX,CAAC;;YA7CU,uDAAoB;;;;;SAApB,oBAAoB","sourcesContent":["import { BlockComponent } from '@blocksuite/block-std';\nimport { Peekable } from '@blocksuite/blocks';\nimport { computed } from '@lit-labs/preact-signals';\nimport { html } from 'lit';\nimport { customElement } from 'lit/decorators.js';\n\nimport type { AIChatBlockModel } from './ai-chat-model.js';\n\nimport { ChatWithAIIcon } from '../_common/icon.js';\nimport './components/ai-chat-messages.js';\nimport { AIChatBlockStyles } from './styles.js';\nimport { ChatMessagesSchema } from './types.js';\n\n@customElement('affine-ai-chat')\n@Peekable({\n  enableOn: ({ doc }: AIChatBlockComponent) => !doc.readonly,\n})\nexport class AIChatBlockComponent extends BlockComponent<AIChatBlockModel> {\n  static override styles = AIChatBlockStyles;\n\n  // Deserialize messages from JSON string and verify the type using zod\n  private _deserializeChatMessages = computed(() => {\n    const messages = this.model.messages$.value;\n    try {\n      const result = ChatMessagesSchema.safeParse(JSON.parse(messages));\n      if (result.success) {\n        return result.data;\n      } else {\n        return [];\n      }\n    } catch {\n      return [];\n    }\n  });\n\n  get _peekViewService() {\n    return this._rootService.peekViewService;\n  }\n\n  get _rootService() {\n    return this.host.std.getService('affine:page');\n  }\n\n  override renderBlock() {\n    const messages = this._deserializeChatMessages.value.slice(-2);\n    const textRendererOptions = {\n      customHeading: true,\n    };\n\n    return html`<div class=\"affine-ai-chat-block-container\">\n      <div class=\"ai-chat-messages-container\">\n        <ai-chat-messages\n          .host=${this.host}\n          .messages=${messages}\n          .textRendererOptions=${textRendererOptions}\n          .withMask=${true}\n        ></ai-chat-messages>\n      </div>\n      <div class=\"ai-chat-block-button\">\n        ${ChatWithAIIcon} <span>AI chat block</span>\n      </div>\n    </div> `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'affine-ai-chat': AIChatBlockComponent;\n  }\n}\n"]}