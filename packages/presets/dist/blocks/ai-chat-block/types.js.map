{"version":3,"file":"types.js","sourceRoot":"","sources":["../../../src/blocks/ai-chat-block/types.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,CAAC,EAAE,MAAM,KAAK,CAAC;AAExB,wBAAwB;AACxB,MAAM,iBAAiB,GAAG,CAAC,CAAC,MAAM,CAAC;IACjC,EAAE,EAAE,CAAC,CAAC,MAAM,EAAE;IACd,OAAO,EAAE,CAAC,CAAC,MAAM,EAAE;IACnB,IAAI,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC,CAAC;IAC1D,SAAS,EAAE,CAAC,CAAC,MAAM,EAAE;IACrB,WAAW,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC,CAAC,QAAQ,EAAE;IAC3C,MAAM,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE;IAC7B,QAAQ,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE;IAC/B,SAAS,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE;CACjC,CAAC,CAAC;AAEH,MAAM,CAAC,MAAM,kBAAkB,GAAG,CAAC,CAAC,KAAK,CAAC,iBAAiB,CAAC,CAAC","sourcesContent":["import { z } from 'zod';\n\n// Define the Zod schema\nconst ChatMessageSchema = z.object({\n  id: z.string(),\n  content: z.string(),\n  role: z.union([z.literal('user'), z.literal('assistant')]),\n  createdAt: z.string(),\n  attachments: z.array(z.string()).optional(),\n  userId: z.string().optional(),\n  userName: z.string().optional(),\n  avatarUrl: z.string().optional(),\n});\n\nexport const ChatMessagesSchema = z.array(ChatMessageSchema);\n\n// Derive the TypeScript type from the Zod schema\nexport type ChatMessage = z.infer<typeof ChatMessageSchema>;\n\nexport type MessageRole = 'user' | 'assistant';\nexport type MessageUserInfo = {\n  userId?: string;\n  userName?: string;\n  avatarUrl?: string;\n};\n"]}