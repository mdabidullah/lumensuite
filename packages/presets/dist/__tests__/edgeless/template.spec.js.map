{"version":3,"file":"template.spec.js","sourceRoot":"","sources":["../../../src/__tests__/edgeless/template.spec.ts"],"names":[],"mappings":"AAAA,OAAO,EACL,qBAAqB,GAGtB,MAAM,oBAAoB,CAAC;AAC5B,OAAO,EAAE,UAAU,EAAE,MAAM,EAAE,IAAI,EAAE,MAAM,QAAQ,CAAC;AAElD,OAAO,EAAE,WAAW,EAAE,MAAM,mBAAmB,CAAC;AAEhD,UAAU,CAAC,KAAK,IAAI,EAAE;IACpB,MAAM,OAAO,GAAG,MAAM,WAAW,CAAC,UAAU,CAAC,CAAC;IAE9C,OAAO,OAAO,CAAC;AACjB,CAAC,CAAC,CAAC;AAEH,IAAI,CAAC,eAAe,EAAE,KAAK,IAAI,EAAE;IAC/B,MAAM,YAAY,GAAG;QACnB,IAAI,EAAE,MAAM;QACZ,IAAI,EAAE,UAAU;KACL,CAAC;IACd,MAAM,cAAc,GAAG;QACrB,IAAI,EAAE,GAAG,EAAE;YACT,OAAO,CAAC,YAAY,CAAC,CAAC;QACxB,CAAC;QACD,UAAU,EAAE,GAAG,EAAE;YACf,OAAO,CAAC,QAAQ,CAAC,CAAC;QACpB,CAAC;QACD,MAAM,EAAE,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE;YAChB,OAAO,CAAC,YAAY,CAAC,CAAC;QACxB,CAAC;KACwB,CAAC;IAE5B,qBAAqB,CAAC,SAAS,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC;IAEvD,MAAM,UAAU,GAAG,MAAM,qBAAqB,CAAC,SAAS,CAAC,UAAU,EAAE,CAAC;IACtE,MAAM,CAAC,UAAU,CAAC,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;IAEvC,MAAM,SAAS,GAAG,MAAM,qBAAqB,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IACpE,MAAM,CAAC,SAAS,CAAC,CAAC,SAAS,CAAC,YAAY,CAAC,CAAC;IAE1C,MAAM,eAAe,GAAG,MAAM,qBAAqB,CAAC,SAAS,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;IAC5E,MAAM,CAAC,eAAe,CAAC,CAAC,SAAS,CAAC,YAAY,CAAC,CAAC;AAClD,CAAC,CAAC,CAAC","sourcesContent":["import {\n  EdgelessTemplatePanel,\n  type Template,\n  type TemplateManager,\n} from '@blocksuite/blocks';\nimport { beforeEach, expect, test } from 'vitest';\n\nimport { setupEditor } from '../utils/setup.js';\n\nbeforeEach(async () => {\n  const cleanup = await setupEditor('edgeless');\n\n  return cleanup;\n});\n\ntest('extension api', async () => {\n  const mockTemplate = {\n    name: 'Test',\n    type: 'template',\n  } as Template;\n  const customTemplate = {\n    list: () => {\n      return [mockTemplate];\n    },\n    categories: () => {\n      return ['custom'];\n    },\n    search: (_, __) => {\n      return [mockTemplate];\n    },\n  } satisfies TemplateManager;\n\n  EdgelessTemplatePanel.templates.extend(customTemplate);\n\n  const categories = await EdgelessTemplatePanel.templates.categories();\n  expect(categories).toContain('custom');\n\n  const templates = await EdgelessTemplatePanel.templates.list('any');\n  expect(templates).toContain(mockTemplate);\n\n  const searchTemplates = await EdgelessTemplatePanel.templates.search('any');\n  expect(searchTemplates).toContain(mockTemplate);\n});\n"]}