{"version":3,"file":"group.spec.js","sourceRoot":"","sources":["../../../src/__tests__/edgeless/group.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import type { MindmapElementModel } from '@blocksuite/affine-block-surface';\n\nimport {\n  type EdgelessRootBlockComponent,\n  type GroupElementModel,\n  LayoutType,\n  NoteDisplayMode,\n} from '@blocksuite/blocks';\nimport { DocCollection } from '@blocksuite/store';\nimport { beforeEach, describe, expect, test } from 'vitest';\n\nimport { wait } from '../utils/common.js';\nimport { addNote, getDocRootBlock } from '../utils/edgeless.js';\nimport { setupEditor } from '../utils/setup.js';\n\ndescribe('group', () => {\n  let service!: EdgelessRootBlockComponent['service'];\n\n  beforeEach(async () => {\n    const cleanup = await setupEditor('edgeless');\n    service = getDocRootBlock(window.doc, window.editor, 'edgeless').service;\n\n    return cleanup;\n  });\n\n  test('group with no children will be removed automatically', () => {\n    const map = new DocCollection.Y.Map<boolean>();\n    const ids = Array.from({ length: 2 })\n      .map(() => {\n        const id = service.addElement('shape', {\n          shapeType: 'rect',\n        });\n        map.set(id, true);\n\n        return id;\n      })\n      .concat(\n        Array.from({ length: 2 }).map(() => {\n          const id = addNote(doc);\n          map.set(id, true);\n          return id;\n        })\n      );\n    service.addElement('group', { children: map });\n    doc.captureSync();\n    expect(service.elements.length).toBe(3);\n\n    service.removeElement(ids[0]);\n    service.removeElement(ids[1]);\n    doc.captureSync();\n    expect(service.elements.length).toBe(1);\n\n    service.removeElement(ids[2]);\n    service.removeElement(ids[3]);\n    doc.captureSync();\n    expect(service.elements.length).toBe(0);\n\n    doc.undo();\n    expect(service.elements.length).toBe(1);\n    doc.redo();\n    expect(service.elements.length).toBe(0);\n  });\n\n  test('remove group should remove its children at the same time', () => {\n    const map = new DocCollection.Y.Map<boolean>();\n    const doc = service.doc;\n    const noteId = addNote(doc);\n    const shapeId = service.addElement('shape', {\n      shapeType: 'rect',\n    });\n\n    map.set(noteId, true);\n    map.set(shapeId, true);\n    const groupId = service.addElement('group', { children: map });\n\n    expect(service.elements.length).toBe(2);\n    expect(doc.getBlock(noteId)).toBeDefined();\n    doc.captureSync();\n\n    service.removeElement(groupId);\n    expect(service.elements.length).toBe(0);\n    expect(doc.getBlock(noteId)).toBeUndefined();\n\n    doc.undo();\n    expect(doc.getBlock(noteId)).toBeDefined();\n    expect(service.elements.length).toBe(2);\n  });\n\n  test(\"group's xywh should update automatically when children change\", async () => {\n    const shape1 = service.addElement('shape', {\n      shapeType: 'rect',\n      xywh: '[0,0,100,100]',\n    });\n    const shape2 = service.addElement('shape', {\n      shapeType: 'rect',\n      xywh: '[100,100,100,100]',\n    });\n    const note1 = addNote(doc, {\n      displayMode: NoteDisplayMode.DocAndEdgeless,\n      xywh: '[200,200,800,100]',\n      edgeless: {\n        style: {\n          borderRadius: 8,\n          borderSize: 4,\n          borderStyle: 'solid',\n          shadowType: '--affine-note-shadow-box',\n        },\n        collapse: true,\n        collapsedHeight: 100,\n      },\n    });\n    const children = new DocCollection.Y.Map<boolean>();\n\n    children.set(shape1, true);\n    children.set(shape2, true);\n    children.set(note1, true);\n\n    const groupId = service.addElement('group', { children });\n    const group = service.getElementById(groupId) as GroupElementModel;\n    const assertInitial = () => {\n      expect(group.x).toBe(0);\n      expect(group.y).toBe(0);\n      expect(group.w).toBe(1000);\n      expect(group.h).toBe(300);\n    };\n\n    doc.captureSync();\n    await wait();\n    assertInitial();\n\n    service.removeElement(note1);\n    await wait();\n    expect(group.x).toBe(0);\n    expect(group.y).toBe(0);\n    expect(group.w).toBe(200);\n    expect(group.h).toBe(200);\n    doc.captureSync();\n\n    doc.undo();\n    await wait();\n    assertInitial();\n\n    service.updateElement(note1, {\n      xywh: '[300,300,800,100]',\n    });\n    await wait();\n    expect(group.x).toBe(0);\n    expect(group.y).toBe(0);\n    expect(group.w).toBe(1100);\n    expect(group.h).toBe(400);\n    doc.captureSync();\n\n    doc.undo();\n    await wait();\n    assertInitial();\n\n    service.removeElement(shape1);\n    await wait();\n    expect(group.x).toBe(100);\n    expect(group.y).toBe(100);\n    expect(group.w).toBe(900);\n    expect(group.h).toBe(200);\n    doc.captureSync();\n\n    doc.undo();\n    await wait();\n    assertInitial();\n\n    service.updateElement(shape1, {\n      xywh: '[100,100,100,100]',\n    });\n    await wait();\n    expect(group.x).toBe(100);\n    expect(group.y).toBe(100);\n    expect(group.w).toBe(900);\n    expect(group.h).toBe(200);\n    doc.captureSync();\n\n    doc.undo();\n    await wait();\n    assertInitial();\n  });\n\n  test('empty group should have all zero xywh', () => {\n    const map = new DocCollection.Y.Map<boolean>();\n    const groupId = service.addElement('group', { children: map });\n    const group = service.getElementById(groupId) as GroupElementModel;\n\n    expect(group.x).toBe(0);\n    expect(group.y).toBe(0);\n    expect(group.w).toBe(0);\n    expect(group.h).toBe(0);\n  });\n});\n\ndescribe('mindmap', () => {\n  let service!: EdgelessRootBlockComponent['service'];\n\n  beforeEach(async () => {\n    const cleanup = await setupEditor('edgeless');\n    service = getDocRootBlock(window.doc, window.editor, 'edgeless').service;\n\n    return cleanup;\n  });\n\n  test('delete the root node should remove all children', async () => {\n    const tree = {\n      text: 'root',\n      children: [\n        {\n          text: 'leaf1',\n        },\n        {\n          text: 'leaf2',\n        },\n        {\n          text: 'leaf3',\n          children: [\n            {\n              text: 'leaf4',\n            },\n          ],\n        },\n      ],\n    };\n    const mindmapId = service.addElement('mindmap', { children: tree });\n    const mindmap = () =>\n      service.getElementById(mindmapId) as MindmapElementModel;\n\n    expect(service.surface.elementModels.length).toBe(6);\n    doc.captureSync();\n\n    service.removeElement(mindmap().tree.element);\n    await wait();\n    expect(service.surface.elementModels.length).toBe(0);\n    doc.captureSync();\n    await wait();\n\n    doc.undo();\n    expect(service.surface.elementModels.length).toBe(6);\n    await wait();\n\n    service.removeElement(mindmap().tree.children[2].element);\n    await wait();\n    expect(service.surface.elementModels.length).toBe(4);\n    await wait();\n\n    doc.undo();\n    await wait();\n    expect(service.surface.elementModels.length).toBe(6);\n  });\n\n  test('mindmap should layout automatically when creating', async () => {\n    const tree = {\n      text: 'root',\n      children: [\n        {\n          text: 'leaf1',\n        },\n        {\n          text: 'leaf2',\n        },\n        {\n          text: 'leaf3',\n          children: [\n            {\n              text: 'leaf4',\n            },\n          ],\n        },\n      ],\n    };\n    const mindmapId = service.addElement('mindmap', {\n      type: LayoutType.RIGHT,\n      children: tree,\n    });\n    const mindmap = () =>\n      service.getElementById(mindmapId) as MindmapElementModel;\n\n    doc.captureSync();\n    await wait();\n\n    const root = mindmap().tree.element;\n    const children = mindmap().tree.children.map(child => child.element);\n    const leaf4 = mindmap().tree.children[2].children[0].element;\n\n    expect(children[0].x).greaterThan(root.x + root.w);\n    expect(children[1].x).greaterThan(root.x + root.w);\n    expect(children[2].x).greaterThan(root.x + root.w);\n\n    expect(children[1].y).greaterThan(children[0].y + children[0].h);\n    expect(children[2].y).greaterThan(children[1].y + children[1].h);\n\n    expect(leaf4.x).greaterThan(children[2].x + children[2].w);\n  });\n});\n"]}