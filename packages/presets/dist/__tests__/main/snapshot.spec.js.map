{"version":3,"file":"snapshot.spec.js","sourceRoot":"","sources":["../../../src/__tests__/main/snapshot.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import type { SurfaceBlockModel } from '@lumensuite/blocks';\n\nimport { beforeEach, expect, test } from 'vitest';\n\nimport { wait } from '../utils/common.js';\nimport { setupEditor } from '../utils/setup.js';\n\nconst excludes = new Set([\n  'shape-textBound',\n  'externalXYWH',\n  'connector-text',\n  'connector-labelXYWH',\n]);\n\nbeforeEach(async () => {\n  const cleanup = await setupEditor('page');\n\n  return cleanup;\n});\n\nconst xywhPattern = /\\[(\\s*-?\\d+(\\.\\d+)?\\s*,){3}(\\s*-?\\d+(\\.\\d+)?\\s*)\\]/;\n\ntest('snapshot 1 importing', async () => {\n  const pageService = window.editor.host!.std.getService('affine:page');\n  const transformer = pageService.transformers.zip;\n\n  const snapshotFile = await fetch(\n    'https://test.affineassets.com/test-snapshot-1.zip'\n  )\n    .then(res => res.blob())\n    .catch(e => {\n      console.error(e);\n      throw e;\n    });\n  const [newDoc] = await transformer.importDocs(\n    window.editor.doc.collection,\n    snapshotFile\n  );\n\n  if (!newDoc) {\n    throw new Error('Failed to import snapshot');\n  }\n\n  editor.doc = newDoc;\n  await wait();\n\n  const surface = newDoc.getBlockByFlavour(\n    'affine:surface'\n  )[0] as SurfaceBlockModel;\n  const surfaceElements = [...surface['_elementModels']].map(\n    ([_, { model }]) => model\n  );\n\n  expect(surfaceElements.length).toBe(25);\n\n  surfaceElements.forEach(element => {\n    type Type = keyof typeof element;\n    for (const field in element) {\n      const value = element[field as Type];\n\n      if (excludes.has(`${element.type}-${field}`) || excludes.has(field)) {\n        return;\n      }\n\n      if (field === 'xywh') {\n        expect(value).toMatch(xywhPattern);\n      }\n\n      expect(\n        value,\n        `type: ${element.type} field: \"${field}\"`\n      ).not.toBeUndefined();\n      expect(value, `type: ${element.type} field: \"${field}\"`).not.toBeNull();\n      expect(value, `type: ${element.type} field: \"${field}\"`).not.toBeNaN();\n    }\n  });\n});\n\ntest('snapshot 2 importing', async () => {\n  const pageService = window.editor.host!.std.getService('affine:page');\n  const transformer = pageService.transformers.zip;\n\n  const snapshotFile = await fetch(\n    'https://test.affineassets.com/test-snapshot-2%20(onboarding).zip'\n  )\n    .then(res => res.blob())\n    .catch(e => {\n      console.error(e);\n      throw e;\n    });\n  const [newDoc] = await transformer.importDocs(\n    window.editor.doc.collection,\n    snapshotFile\n  );\n\n  if (!newDoc) {\n    throw new Error('Failed to import snapshot');\n  }\n\n  editor.doc = newDoc;\n  await wait();\n\n  const surface = newDoc.getBlockByFlavour(\n    'affine:surface'\n  )[0] as SurfaceBlockModel;\n  const surfaceElements = [...surface['_elementModels']].map(\n    ([_, { model }]) => model\n  );\n\n  expect(surfaceElements.length).toBe(174);\n\n  surfaceElements.forEach(element => {\n    for (const field in element) {\n      const value = element[field as keyof typeof element];\n\n      if (excludes.has(`${element.type}-${field}`) || excludes.has(field)) {\n        return;\n      }\n\n      if (field === 'xywh') {\n        expect(value).toMatch(xywhPattern);\n      }\n\n      expect(\n        value,\n        `type: ${element.type} field: \"${field}\"`\n      ).not.toBeUndefined();\n      expect(value, `type: ${element.type} field: \"${field}\"`).not.toBeNull();\n      expect(value, `type: ${element.type} field: \"${field}\"`).not.toBeNaN();\n    }\n  });\n});\n"]}