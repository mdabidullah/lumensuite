{"version":3,"file":"outline-notice.js","sourceRoot":"","sources":["../../../../src/fragments/outline/body/outline-notice.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,EAAE,cAAc,EAAE,MAAM,uBAAuB,CAAC;AACvD,OAAO,EAAE,GAAG,EAAE,IAAI,EAAE,UAAU,EAAE,OAAO,EAAE,MAAM,KAAK,CAAC;AACrD,OAAO,EAAE,aAAa,EAAE,QAAQ,EAAE,MAAM,mBAAmB,CAAC;AAE5D,OAAO,EAAE,cAAc,EAAE,WAAW,EAAE,MAAM,wBAAwB,CAAC;AAErE,MAAM,MAAM,GAAG,GAAG,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAyEjB,CAAC;AAEF,MAAM,CAAC,MAAM,qBAAqB,GAAG,uBAAuB,CAAC;IAGhD,aAAa;4BADzB,aAAa,CAAC,qBAAqB,CAAC;;;;sBACF,cAAc,CAAC,UAAU,CAAC;;;;;;;;;;6BAAlC,SAAQ,WAA0B;;;;yCAsC1D,QAAQ,CAAC,EAAE,SAAS,EAAE,KAAK,EAAE,CAAC;+CAG9B,QAAQ,CAAC,EAAE,SAAS,EAAE,KAAK,EAAE,CAAC;8CAG9B,QAAQ,CAAC,EAAE,SAAS,EAAE,KAAK,EAAE,CAAC;YAL/B,4LAAS,aAAa,6BAAb,aAAa,qGAAW;YAGjC,8MAAS,mBAAmB,6BAAnB,mBAAmB,iHAAiC;YAG7D,2MAAS,kBAAkB,6BAAlB,kBAAkB,+GAAc;YA7C3C,6KA8CC;;;;iBA7CiB,WAAM,GAAG,MAAM,AAAT,CAAU;QAExB,wBAAwB;YAC9B,IAAI,CAAC,kBAAkB,EAAE,CAAC;YAC1B,IAAI,CAAC,mBAAmB,CAAC,KAAK,CAAC,CAAC;QAClC,CAAC;QAEQ,MAAM;YACb,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE,CAAC;gBACxB,OAAO,OAAO,CAAC;YACjB,CAAC;YAED,OAAO,IAAI,CAAA;;;;;mBAKI,GAAG,EAAE,CAAC,IAAI,CAAC,mBAAmB,CAAC,KAAK,CAAC;aAC3C,cAAc;;;;;;;;;mBASR,IAAI,CAAC,wBAAwB;;;kBAG9B,WAAW;;;;WAIlB,CAAC;QACV,CAAC;QAGD,+FAAiC;QAAjC,IAAS,aAAa,mDAAW;QAAjC,IAAS,aAAa,yDAAW;QAGjC,wKAA6D;QAA7D,IAAS,mBAAmB,yDAAiC;QAA7D,IAAS,mBAAmB,+DAAiC;QAG7D,4KAAyC;QAAzC,IAAS,kBAAkB,wDAAc;QAAzC,IAAS,kBAAkB,8DAAc;;;;;;YA7C9B,uDAAa;;;;;SAAb,aAAa","sourcesContent":["import { WithDisposable } from '@lumensuite/block-std';\nimport { css, html, LitElement, nothing } from 'lit';\nimport { customElement, property } from 'lit/decorators.js';\n\nimport { SmallCloseIcon, SortingIcon } from '../../_common/icons.js';\n\nconst styles = css`\n  :host {\n    width: 100%;\n    box-sizing: border-box;\n    position: absolute;\n    left: 0;\n    bottom: 8px;\n    padding: 0 8px;\n  }\n  .outline-notice-container {\n    display: flex;\n    width: 100%;\n    box-sizing: border-box;\n    gap: 14px;\n    padding: 10px;\n    font-style: normal;\n    font-size: 12px;\n    flex-direction: column;\n    border-radius: 8px;\n    background-color: var(--affine-background-overlay-panel-color);\n  }\n  .outline-notice-header {\n    display: flex;\n    width: 100%;\n    height: 20px;\n    align-items: center;\n    justify-content: space-between;\n  }\n  .outline-notice-label {\n    font-weight: 600;\n    line-height: 20px;\n    color: var(--affine-text-secondary-color);\n  }\n  .outline-notice-close-button {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    width: 20px;\n    height: 20px;\n    cursor: pointer;\n    color: var(--affine-icon-color);\n  }\n  .outline-notice-body {\n    display: flex;\n    width: 100%;\n    gap: 2px;\n    flex-direction: column;\n  }\n  .outline-notice-item {\n    display: flex;\n    height: 20px;\n    align-items: center;\n    line-height: 20px;\n    color: var(--affine-text-primary-color);\n  }\n  .outline-notice-item.notice {\n    font-weight: 400;\n  }\n  .outline-notice-item.button {\n    display: flex;\n    gap: 2px;\n    font-weight: 500;\n    text-decoration: underline;\n    cursor: pointer;\n  }\n  .outline-notice-item.button span {\n    display: flex;\n    align-items: center;\n    line-height: 20px;\n  }\n  .outline-notice-item.button svg {\n    scale: 0.8;\n  }\n`;\n\nexport const AFFINE_OUTLINE_NOTICE = 'affine-outline-notice';\n\n@customElement(AFFINE_OUTLINE_NOTICE)\nexport class OutlineNotice extends WithDisposable(LitElement) {\n  static override styles = styles;\n\n  private _handleNoticeButtonClick() {\n    this.toggleNotesSorting();\n    this.setNoticeVisibility(false);\n  }\n\n  override render() {\n    if (!this.noticeVisible) {\n      return nothing;\n    }\n\n    return html`<div class=\"outline-notice-container\">\n      <div class=\"outline-notice-header\">\n        <span class=\"outline-notice-label\">SOME CONTENTS HIDDEN</span>\n        <span\n          class=\"outline-notice-close-button\"\n          @click=${() => this.setNoticeVisibility(false)}\n          >${SmallCloseIcon}</span\n        >\n      </div>\n      <div class=\"outline-notice-body\">\n        <div class=\"outline-notice-item notice\">\n          Some contents are not visible on edgeless.\n        </div>\n        <div\n          class=\"outline-notice-item button\"\n          @click=${this._handleNoticeButtonClick}\n        >\n          <span>Click here or</span>\n          <span>${SortingIcon}</span>\n          <span>to organize content.</span>\n        </div>\n      </div>\n    </div>`;\n  }\n\n  @property({ attribute: false })\n  accessor noticeVisible!: boolean;\n\n  @property({ attribute: false })\n  accessor setNoticeVisibility!: (visibility: boolean) => void;\n\n  @property({ attribute: false })\n  accessor toggleNotesSorting!: () => void;\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    [AFFINE_OUTLINE_NOTICE]: OutlineNotice;\n  }\n}\n"]}