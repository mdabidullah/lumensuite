{"version":3,"file":"query.js","sourceRoot":"","sources":["../../../../src/fragments/outline/utils/query.ts"],"names":[],"mappings":"AAEA,OAAO,EACL,WAAW,GAKZ,MAAM,oBAAoB,CAAC;AAE5B,OAAO,EAAE,WAAW,EAAE,MAAM,cAAc,CAAC;AAc3C,MAAM,UAAU,eAAe,CAC7B,GAAQ,EACR,KAAwB;IAExB,MAAM,SAAS,GAAG,GAAG,CAAC,IAAI,CAAC;IAC3B,IAAI,CAAC,SAAS;QAAE,OAAO,EAAE,CAAC;IAE1B,MAAM,KAAK,GAAsB,EAAE,CAAC;IAEpC,SAAS,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,KAAK,EAAE,EAAE;QAC1C,IAAI,CAAC,CAAC,aAAa,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,OAAO,CAAC;YAAE,OAAO;QAErD,MAAM,UAAU,GAAG,KAAuB,CAAC;QAC3C,MAAM,eAAe,GAAG;YACtB,IAAI,EAAE,KAAuB;YAC7B,KAAK;YACL,MAAM,EAAE,KAAK,GAAG,CAAC;SAClB,CAAC;QAEF,IAAI,KAAK,CAAC,QAAQ,CAAC,UAAU,CAAC,WAAW,CAAC,EAAE,CAAC;YAC3C,KAAK,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;QAC9B,CAAC;IACH,CAAC,CAAC,CAAC;IAEH,OAAO,KAAK,CAAC;AACf,CAAC;AAED,MAAM,UAAU,WAAW,CAAC,KAAiB;IAC3C,OAAO,WAAW,CAAC,aAAa,CAAC,KAAK,EAAE,CAAC,aAAa,CAAC,CAAC,CAAC;AAC3D,CAAC;AAED,MAAM,UAAU,cAAc,CAC5B,KAAiB;IAEjB,OAAO,CACL,WAAW,CAAC,aAAa,CAAC,KAAK,EAAE,CAAC,kBAAkB,CAAC,CAAC;QACtD,WAAW,CAAC,GAAG,CAAC,KAAK,CAAC,KAAK,CAAC,KAAK,CAAC,CACnC,CAAC;AACJ,CAAC;AAED,MAAM,UAAU,wBAAwB,CACtC,IAAoB,EACpB,WAAW,GAAG,KAAK;IAEnB,MAAM,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE;QAC1C,MAAM,KAAK,GAAG,KAAK,CAAC,IAAI,IAAI,KAAK,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC;QAClD,OAAO,cAAc,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,WAAW,IAAI,KAAK,CAAC,CAAC;IAC1D,CAAC,CAAC,CAAC;IAEH,OAAO,MAAM,CAAC;AAChB,CAAC;AAED,MAAM,UAAU,uBAAuB,CACrC,GAAQ,EACR,KAAwB,EACxB,WAAW,GAAG,KAAK;IAEnB,MAAM,KAAK,GAAG,eAAe,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;IAC1C,OAAO,KAAK;SACT,GAAG,CAAC,CAAC,EAAE,IAAI,EAAE,EAAE,EAAE,CAAC,wBAAwB,CAAC,IAAI,EAAE,WAAW,CAAC,CAAC;SAC9D,IAAI,EAAE,CAAC;AACZ,CAAC","sourcesContent":["import type { BlockModel, Doc } from '@lumensuite/store';\n\nimport {\n  BlocksUtils,\n  type NoteBlockModel,\n  type NoteDisplayMode,\n  type ParagraphBlockModel,\n  type RootBlockModel,\n} from '@lumensuite/blocks';\n\nimport { headingKeys } from '../config.js';\n\ntype OutlineNoteItem = {\n  note: NoteBlockModel;\n  /**\n   * the index of the note inside its parent's children property\n   */\n  index: number;\n  /**\n   * the number displayed on the outline panel\n   */\n  number: number;\n};\n\nexport function getNotesFromDoc(\n  doc: Doc,\n  modes: NoteDisplayMode[]\n): OutlineNoteItem[] {\n  const rootModel = doc.root;\n  if (!rootModel) return [];\n\n  const notes: OutlineNoteItem[] = [];\n\n  rootModel.children.forEach((block, index) => {\n    if (!['affine:note'].includes(block.flavour)) return;\n\n    const blockModel = block as NoteBlockModel;\n    const OutlineNoteItem = {\n      note: block as NoteBlockModel,\n      index,\n      number: index + 1,\n    };\n\n    if (modes.includes(blockModel.displayMode)) {\n      notes.push(OutlineNoteItem);\n    }\n  });\n\n  return notes;\n}\n\nexport function isRootBlock(block: BlockModel): block is RootBlockModel {\n  return BlocksUtils.matchFlavours(block, ['affine:page']);\n}\n\nexport function isHeadingBlock(\n  block: BlockModel\n): block is ParagraphBlockModel {\n  return (\n    BlocksUtils.matchFlavours(block, ['affine:paragraph']) &&\n    headingKeys.has(block.type$.value)\n  );\n}\n\nexport function getHeadingBlocksFromNote(\n  note: NoteBlockModel,\n  ignoreEmpty = false\n) {\n  const models = note.children.filter(block => {\n    const empty = block.text && block.text.length > 0;\n    return isHeadingBlock(block) && (!ignoreEmpty || empty);\n  });\n\n  return models;\n}\n\nexport function getHeadingBlocksFromDoc(\n  doc: Doc,\n  modes: NoteDisplayMode[],\n  ignoreEmpty = false\n) {\n  const notes = getNotesFromDoc(doc, modes);\n  return notes\n    .map(({ note }) => getHeadingBlocksFromNote(note, ignoreEmpty))\n    .flat();\n}\n"]}