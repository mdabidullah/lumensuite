{"version":3,"file":"comment-panel.js","sourceRoot":"","sources":["../../../src/fragments/comment/comment-panel.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,EAAE,iBAAiB,EAAE,cAAc,EAAE,MAAM,uBAAuB,CAAC;AAC1E,OAAO,EAAE,GAAG,EAAE,IAAI,EAAE,MAAM,KAAK,CAAC;AAChC,OAAO,EAAE,aAAa,EAAE,QAAQ,EAAE,KAAK,EAAE,MAAM,mBAAmB,CAAC;AAInE,OAAO,EAAE,YAAY,EAAE,MAAM,oBAAoB,CAAC;AAClD,OAAO,EAAE,cAAc,EAAE,MAAM,sBAAsB,CAAC;IAGzC,YAAY;4BADxB,aAAa,CAAC,eAAe,CAAC;;;;sBACG,cAAc,CAAC,iBAAiB,CAAC;;;;;;;4BAAzC,SAAQ,WAAiC;;;;sCA+FhE,KAAK,CAAC,0BAA0B,CAAC;kCAGjC,QAAQ,CAAC,EAAE,SAAS,EAAE,KAAK,EAAE,CAAC;YAF/B,mLAAiB,UAAU,6BAAV,UAAU,+FAAkB;YAG7C,uKAAS,MAAM,6BAAN,MAAM,uFAAyB;YAnG1C,6KAoGC;;;;iBAnGiB,WAAM,GAAG,GAAG,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA+C3B,AA/CqB,CA+CpB;QAIM,WAAW;YACjB,MAAM,aAAa,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YAC/D,IAAI,CAAC,aAAa;gBAAE,OAAO;YAE3B,MAAM,YAAY,GAAG,IAAI,YAAY,EAAE,CAAC;YACxC,IAAI,CAAC,IAAI,CAAC,cAAc;gBAAE,OAAO;YAEjC,YAAY,CAAC,OAAO,GAAG,IAAI,CAAC,cAAc,CAAC;YAC3C,YAAY,CAAC,QAAQ,GAAG,GAAG,EAAE;gBAC3B,IAAI,CAAC,aAAa,EAAE,CAAC;YACvB,CAAC,CAAC;YACF,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC;QACvC,CAAC;QAEQ,iBAAiB;YACxB,KAAK,CAAC,iBAAiB,EAAE,CAAC;YAE1B,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI;gBAAE,OAAO;YAC9B,IAAI,CAAC,cAAc,GAAG,IAAI,cAAc,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;QAC7D,CAAC;QAEQ,MAAM;YACb,IAAI,CAAC,IAAI,CAAC,cAAc;gBAAE,OAAO;YACjC,MAAM,QAAQ,GAAG,IAAI,CAAC,cAAc,CAAC,WAAW,EAAE,CAAC;YAEnD,OAAO,IAAI,CAAA;;yBAEU,IAAI,CAAC,WAAW;;;UAG/B,QAAQ,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE;gBACvB,OAAO,IAAI,CAAA;uDACkC,OAAO,CAAC,KAAK;wDACZ,OAAO,CAAC,MAAM;;kCAEpC,OAAO,CAAC,IAAI,cAAc,IAAI;;iBAE/C,CAAC;YACV,CAAC,CAAC;;WAEC,CAAC;QACV,CAAC;QAGD,6BAA6C;QAA7C,IAAiB,UAAU,gDAAkB;QAA7C,IAAiB,UAAU,sDAAkB;QAG7C,yBAAwC;QAAxC,IAAS,MAAM,4CAAyB;QAAxC,IAAS,MAAM,kDAAyB;;;YAjDxC,mBAAc,GAA0B,IAAI,CAAC;YA8C5B,8FAA4B;YAGpC,gJAA+B;;;;YAnG7B,uDAAY;;;;;SAAZ,YAAY","sourcesContent":["import { ShadowlessElement, WithDisposable } from '@lumensuite/block-std';\nimport { css, html } from 'lit';\nimport { customElement, property, query } from 'lit/decorators.js';\n\nimport type { AffineEditorContainer } from '../../editors/editor-container.js';\n\nimport { CommentInput } from './comment-input.js';\nimport { CommentManager } from './comment-manager.js';\n\n@customElement('comment-panel')\nexport class CommentPanel extends WithDisposable(ShadowlessElement) {\n  static override styles = css`\n    comment-panel {\n      position: absolute;\n      top: 0;\n      right: 0;\n      border: 1px solid var(--affine-border-color, #e3e2e4);\n      background-color: var(--affine-background-primary-color);\n      height: 100vh;\n      width: 320px;\n      box-sizing: border-box;\n      padding-top: 16px;\n    }\n\n    .comment-panel-container {\n      width: 100%;\n      height: 100%;\n      padding: 16px;\n    }\n\n    .comment-panel-head {\n      display: flex;\n      gap: 8px;\n    }\n\n    .comment-panel-comments {\n      margin-top: 16px;\n    }\n\n    .comment-panel-comment {\n      margin-bottom: 16px;\n    }\n\n    .comment-panel-comment-quote {\n      font-size: 10px;\n      color: var(--affine-text-secondary-color);\n      padding-left: 8px;\n      border-left: 2px solid var(--affine-text-secondary-color);\n      margin-bottom: 8px;\n    }\n\n    .comment-panel-comment-author {\n      font-size: 12px;\n    }\n\n    .comment-panel-comment-text {\n      margin-top: 8px;\n    }\n  `;\n\n  commentManager: CommentManager | null = null;\n\n  private _addComment() {\n    const textSelection = this.editor.host?.selection.find('text');\n    if (!textSelection) return;\n\n    const commentInput = new CommentInput();\n    if (!this.commentManager) return;\n\n    commentInput.manager = this.commentManager;\n    commentInput.onSubmit = () => {\n      this.requestUpdate();\n    };\n    this._container.append(commentInput);\n  }\n\n  override connectedCallback() {\n    super.connectedCallback();\n\n    if (!this.editor.host) return;\n    this.commentManager = new CommentManager(this.editor.host);\n  }\n\n  override render() {\n    if (!this.commentManager) return;\n    const comments = this.commentManager.getComments();\n\n    return html`<div class=\"comment-panel-container\">\n      <div class=\"comment-panel-head\">\n        <button @click=${this._addComment}>Add Comment</button>\n      </div>\n      <div class=\"comment-panel-comments\">\n        ${comments.map(comment => {\n          return html`<div class=\"comment-panel-comment\">\n            <div class=\"comment-panel-comment-quote\">${comment.quote}</div>\n            <div class=\"comment-panel-comment-author\">${comment.author}</div>\n            <div class=\"comment-panel-comment-text\">\n              <rich-text .yText=${comment.text} .readonly=${true}></rich-text>\n            </div>\n          </div>`;\n        })}\n      </div>\n    </div>`;\n  }\n\n  @query('.comment-panel-container')\n  private accessor _container!: HTMLDivElement;\n\n  @property({ attribute: false })\n  accessor editor!: AffineEditorContainer;\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'comment-panel': CommentPanel;\n  }\n}\n"]}